/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-08-11 19:54:50.809839
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112,x113,x114,x115,x116,x117,x118;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[4]);
x5=IKsin(j[4]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[3]);
x9=IKcos(j[0]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.500008433014486)*x11);
x13=((1.0)*x7);
x14=((0.500008433014486)*x10);
x15=((0.196124546108988)*x6);
x16=((0.707113707258586)*x10);
x17=((0.499998842852741)*x5);
x18=((0.70711192603409)*x10);
x19=((2.0490401596765e-7)*x11);
x20=((1.0)*x8);
x21=((0.707101636301542)*x7);
x22=((0.499998842852741)*x11);
x23=((0.500008433014486)*x5);
x24=((1.0)*x6);
x25=((0.0823)*x8);
x26=((0.27736535167218)*x6);
x27=((0.0823)*x7);
x28=((1.0)*x4);
x29=((1.0)*x9);
x30=((0.277359918142044)*x9);
x31=((0.707099855046638)*x11);
x32=((0.70711192603409)*x8);
x33=((0.70711192603409)*x11);
x34=((0.09465)*x3);
x35=((0.707099855046638)*x10);
x36=((0.499991362078325)*x5);
x37=((0.500001361905566)*x11);
x38=((0.09465)*x9);
x39=((0.707113707258586)*x11);
x40=((0.707101636301542)*x8);
x41=((2.0490401596765e-7)*x7);
x42=((0.196125534207458)*x9);
x43=((0.707113707258586)*x5);
x44=((2.0490401596765e-7)*x8);
x45=((0.707101636301542)*x11);
x46=((2.0490401596765e-7)*x10);
x47=((0.707099855046638)*x5);
x48=((0.707101636301542)*x10);
x49=((0.196128307849932)*x9);
x50=((0.500001361905566)*x5);
x51=((0.500001361905566)*x10);
x52=((0.196121611775223)*x6);
x53=((0.09465)*x6);
x54=((0.499998842852741)*x10);
x55=((0.70711192603409)*x7);
x56=((0.499991362078325)*x10);
x57=((0.499991362078325)*x11);
x58=(x2*x3);
x59=(x1*x2);
x60=((-1.0)*x8);
x61=(x0*x1);
x62=(x4*x6);
x63=(x0*x9);
x64=(x0*x6);
x65=(x4*x9);
x66=((-1.0)*x7);
x67=(x0*x3);
x68=(x24*x5);
x69=((0.09465)*x61);
x70=(x24*x61);
x71=(x29*x61);
x72=(x59+x67);
x73=((((1.0)*x61))+(((-1.0)*x58)));
x74=(((x2*x34))+(((-1.0)*x69)));
x75=((((-1.0)*x59))+(((-1.0)*x67)));
x76=((((0.09465)*x59))+((x0*x34)));
x77=(x73*x8);
x78=(x7*x73);
x79=(x74*x8);
x80=((((-1.0)*x71))+((x58*x9)));
x81=((((-1.0)*x70))+((x58*x6)));
x82=(((x2*x34*x6))+(((-1.0)*x53*x61)));
x83=((((-1.0)*x38*x61))+((x2*x34*x9)));
x84=(x29*((x59+x67)));
x85=(x24*((x59+x67)));
x86=((((-1.0)*x34*x64))+(((-1.0)*x53*x59)));
x87=((((-1.0)*x34*x63))+(((-1.0)*x38*x59)));
x88=(x7*x83);
x89=(x7*x82);
x90=(x8*x87);
x91=(x8*x86);
x92=(((x72*x8))+x78);
x93=((((-1.0)*x25*x72))+(((-1.0)*x27*x73)));
x94=(x4*x92);
x95=(((x60*x72))+((x66*x73)));
x96=((((-1.0)*x20*x73))+(((-1.0)*x13*x75)));
x97=(x5*x93);
x98=(((x60*x73))+((x66*x75)));
x99=(x4*x95);
x100=(((x8*x80))+((x7*x84)));
x101=(((x8*x81))+((x7*x85)));
x102=((((-1.0)*x13*x85))+(((-1.0)*x20*x81)));
x103=((((-1.0)*x13*x84))+(((-1.0)*x20*x80)));
x104=((((-1.0)*x27*x85))+(((-1.0)*x25*x81)));
x105=((((-1.0)*x27*x84))+(((-1.0)*x25*x80)));
x106=(x101*x4);
x107=(((x13*((((x24*x58))+(((-1.0)*x70))))))+(((-1.0)*x20*x85)));
x108=(((x13*(((((-1.0)*x71))+((x29*x58))))))+(((-1.0)*x20*x84)));
x109=(x104*x5);
x110=(x105*x5);
x111=((0.707099855046638)*x108);
x112=(x107*x11);
x113=(x108*x11);
x114=(x10*x108);
x115=(((x5*x9))+x106);
x116=(((x100*x4))+(((-1.0)*x68)));
x117=(x68+(((-1.0)*x100*x28)));
x118=((((-1.0)*x29*x5))+(((-1.0)*x101*x28)));
eerot[0]=((((-1.0)*x102*x36))+(((-0.499991362078325)*x65))+((x5*((((x32*x72))+((x55*x73))))))+(((0.500001361905566)*x62))+(((-1.0)*x103*x50)));
eerot[1]=((((-1.0)*x18*x99))+(((-1.0)*x108*x37))+(((-1.0)*x33*x96))+(((-1.0)*x118*x56))+(((-1.0)*x117*x51))+(((-1.0)*x107*x57)));
eerot[2]=((((-1.0)*x18*x96))+(((-1.0)*x108*x51))+(((-1.0)*x116*x37))+(((-1.0)*x115*x57))+(((-1.0)*x33*x94))+(((-1.0)*x107*x56)));
IkReal x119=((1.0)*x61);
eetrans[0]=((-0.31304592)+(((-0.499991362078325)*x89))+(((-1.0)*x105*x50))+(((-1.0)*x32*x74))+(((-0.0411492890990461)*x65))+(((-0.212500578809866)*x63))+(((-1.0)*x119*x52))+(((0.277364652986872)*x59))+(((0.277364652986872)*x67))+(((-1.0)*x119*x42))+((x42*x58))+(((0.0411501120848281)*x62))+(((-1.0)*x55*x76))+(((-0.500001361905566)*x88))+(((-0.500001361905566)*x90))+(((-0.0545740571708491)*x9))+(((0.300522568564488)*x2))+(((-0.70711192603409)*x97))+((x52*x58))+(((-0.212496328883288)*x64))+(((-1.0)*x104*x36))+(((-0.499991362078325)*x91))+(((0.0545751486519926)*x6)));
eerot[3]=((((-1.0)*x103*x47))+((x102*x43))+(((0.707099855046638)*x62))+((x5*(((((-1.0)*x44*x72))+(((-1.0)*x41*x73))))))+(((0.707113707258586)*x65)));
eerot[4]=((((-1.0)*x117*x35))+((x118*x16))+((x107*x39))+(((-1.0)*x108*x31))+((x4*x46*(((((-1.0)*x20*x72))+(((-1.0)*x13*x73))))))+((x19*x98)));
eerot[5]=((((-1.0)*x108*x35))+((x46*x96))+(((-1.0)*x116*x31))+((x107*x16))+((x115*x39))+((x19*x94)));
eetrans[1]=((-4.4e-7)+((x26*x61))+(((0.707113707258586)*x89))+(((0.0771814611472747)*x9))+(((-0.300517438394821)*x63))+(((-1.0)*x105*x47))+((x41*x76))+(((-8.70842067862512e-8)*x2))+(((-0.707099855046638)*x90))+(((2.0490401596765e-7)*x97))+(((-1.0)*x26*x58))+(((-0.707099855046638)*x88))+(((0.0771799491783405)*x6))+(((0.0581954581073816)*x65))+(((0.0581943180703383)*x62))+((x30*x58))+(((-1.0)*x30*x61))+(((0.300523325584899)*x64))+((x104*x43))+(((-8.03736002633107e-8)*x59))+((x44*x74))+(((0.707113707258586)*x91))+(((-8.03736002633107e-8)*x67)));
eerot[6]=((((-0.500008433014486)*x62))+(((0.499998842852741)*x65))+((x5*((((x21*x73))+((x40*x72))))))+((x103*x23))+((x102*x17)));
eerot[7]=((((-1.0)*x45*x96))+((x108*x12))+(((-1.0)*x48*x99))+((x117*x14))+((x107*x22))+((x118*x54)));
eerot[8]=((((-1.0)*x45*x94))+((x108*x14))+(((-1.0)*x48*x98))+((x115*x22))+((x116*x12))+((x107*x54)));
IkReal x120=((1.0)*x58);
eetrans[2]=((1.5869546236034)+(((0.499998842852741)*x91))+(((0.499998842852741)*x89))+((x15*x61))+(((-0.0545759204635312)*x6))+(((-0.707101636301542)*x97))+(((0.212503584031157)*x63))+((x105*x23))+(((0.300518195428155)*x2))+(((0.500008433014486)*x90))+((x104*x17))+(((0.500008433014486)*x88))+(((-1.0)*x21*x76))+(((0.212499508212415)*x64))+(((0.0545748736973767)*x9))+(((0.27736061683928)*x59))+(((-1.0)*x40*x74))+((x49*x61))+(((0.27736061683928)*x67))+(((-1.0)*x120*x49))+(((-1.0)*x120*x15))+(((0.0411499047667806)*x65))+(((-0.0411506940370922)*x62)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.500001361905566)*r01))+(((-0.500008433014486)*r21))+(((0.707099855046638)*r11)));
new_r01=((((0.500001361905566)*r02))+(((-0.500008433014486)*r22))+(((0.707099855046638)*r12)));
new_r02=((((-0.500001361905566)*r00))+(((-0.707099855046638)*r10))+(((0.500008433014486)*r20)));
new_px=((-0.95001439207595)+(((0.0581943180703383)*r10))+(((-0.707099855046638)*py))+(((-0.500001361905566)*px))+(((0.0411501120848281)*r00))+(((0.500008433014486)*pz))+(((-0.0411506940370922)*r20)));
new_r10=((((-0.499998842852741)*r21))+(((0.499991362078325)*r01))+(((-0.707113707258586)*r11)));
new_r11=((((-0.499998842852741)*r22))+(((0.499991362078325)*r02))+(((-0.707113707258586)*r12)));
new_r12=((((0.707113707258586)*r10))+(((-0.499991362078325)*r00))+(((0.499998842852741)*r20)));
new_py=((-0.949995420265341)+(((-0.0411499047667806)*r20))+(((-0.499991362078325)*px))+(((-0.0581954581073816)*r10))+(((0.707113707258586)*py))+(((0.499998842852741)*pz))+(((0.0411492890990461)*r00)));
new_r20=((((0.70711192603409)*r01))+(((0.707101636301542)*r21))+(((-2.0490401596765e-7)*r11)));
new_r21=((((0.70711192603409)*r02))+(((0.707101636301542)*r22))+(((-2.0490401596765e-7)*r12)));
new_r22=((((-0.70711192603409)*r00))+(((-0.707101636301542)*r20))+(((2.0490401596765e-7)*r10)));
new_pz=((0.900779707658041)+(((0.0581953115126056)*r00))+(((-1.68636005141376e-8)*r10))+(((0.0581944646676169)*r20))+(((-0.70711192603409)*px))+(((-0.707101636301542)*pz))+(((2.0490401596765e-7)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x121=((1.0)*px);
IkReal x122=((1.0)*pz);
IkReal x123=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x123))+((pz*r10)));
rxp0_1=((((-1.0)*r00*x122))+((px*r20)));
rxp0_2=((((-1.0)*r10*x121))+((py*r00)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x123)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x122)));
rxp1_2=((((-1.0)*r11*x121))+((py*r01)));
rxp2_0=((((-1.0)*r22*x123))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x122)));
rxp2_2=((((-1.0)*r12*x121))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x124=((0.1893)*npx);
IkReal x125=((0.1893)*npy);
IkReal x126=((0.09465)*r22);
IkReal x127=((0.09465)*r21);
IkReal x128=((-0.09465)*r20);
IkReal x129=((-1.0)*r20);
IkReal x130=((-1.0)*rxp0_2);
IkReal x131=((-0.09465)*r21);
IkReal x132=((-1.0)*r21);
IkReal x133=((-1.0)*rxp1_2);
IkReal x134=((-1.0)*npx);
IkReal x135=((-1.0)*r22);
IkReal x136=((-1.0)*npz);
matrixinvcoeffs[0]=x128;
matrixinvcoeffs[1]=x124;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x129;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x130;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x128;
matrixinvcoeffs[19]=x124;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x129;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x130;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x131;
matrixinvcoeffs[33]=x125;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x132;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x133;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x131;
matrixinvcoeffs[51]=x125;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x132;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x133;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x135;
matrixinvcoeffs[76]=x126;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x136;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x126;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x133;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x131;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x133;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x127;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x129;
matrixinvcoeffs[133]=x134;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x129;
matrixinvcoeffs[151]=x134;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x128;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x135;
matrixinvcoeffs[165]=x136;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x126;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x135;
matrixinvcoeffs[183]=x136;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x132;
matrixinvcoeffs[204]=x127;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x133;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x127;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x134;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x128;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x129;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x128;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x130;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x137=pz*pz;
IkReal x138=pp*pp;
IkReal x139=((0.1893)*pz);
IkReal x140=((1.7)*pz);
IkReal x141=(gclwh15_9*npx);
IkReal x142=(gclwh6_11*r21);
IkReal x143=(pp*r22);
IkReal x144=((0.00702803935125)*r21);
IkReal x145=(gclwh5_9*npz);
IkReal x146=(gclwh8_11*r20);
IkReal x147=(npy*pz);
IkReal x148=((3.60823078949063e-5)*r22);
IkReal x149=(gclwh14_3*rxp0_2);
IkReal x150=((0.000977833645875)*r20);
IkReal x151=(npz*pz);
IkReal x152=((0.000977833645875)*r21);
IkReal x153=(gclwh10_12*r22);
IkReal x154=(gclwh10_2*rxp2_2);
IkReal x155=((0.00076243651125)*rxp1_2);
IkReal x156=((0.00600991575645741)*r20);
IkReal x157=((0.154705425)*rxp1_2);
IkReal x158=((0.017917245)*r21);
IkReal x159=(gclwh6_11*rxp1_2);
IkReal x160=((0.3786)*rxp1_2);
IkReal x161=(gclwh7_0*rxp1_2);
IkReal x162=((0.7572)*rxp1_2);
IkReal x163=((0.154705425)*rxp2_2);
IkReal x164=((2.0)*gclwh11_10);
IkReal x165=(gclwh12_8*r21);
IkReal x166=((0.81725)*pp);
IkReal x167=(pp*pz);
IkReal x168=(gclwh14_2*r20);
IkReal x169=(pp*r21);
IkReal x170=((2.0)*gclwh4_11);
IkReal x171=(gclwh8_12*r20);
IkReal x172=(npx*pz);
IkReal x173=(gclwh14_8*rxp0_2);
IkReal x174=((0.1893)*rxp2_2);
IkReal x175=(gclwh5_9*rxp2_2);
IkReal x176=((0.020662095)*rxp1_2);
IkReal x177=((0.007321434238125)*r21);
IkReal x178=((1.6345)*pz);
IkReal x179=((0.0089586225)*pz);
IkReal x180=(gclwh13_0*r21);
IkReal x181=(gclwh5_9*r22);
IkReal x182=(gclwh11_10*r22);
IkReal x183=(gclwh11_13*r22);
IkReal x184=((1.0)*r21);
IkReal x185=((0.3786)*rxp0_2);
IkReal x186=(gclwh14_14*rxp0_2);
IkReal x187=(pp*r20);
IkReal x188=((0.00195566729175)*r22);
IkReal x189=(gclwh15_10*rxp0_2);
IkReal x190=(gclwh14_8*r20);
IkReal x191=(gclwh12_8*rxp1_2);
IkReal x192=((2.0)*gclwh9_10);
IkReal x193=((2.0)*gclwh15_10);
IkReal x194=(gclwh5_15*rxp2_2);
IkReal x195=((2.0)*gclwh13_10);
IkReal x196=((0.00702803935125)*r20);
IkReal x197=(gclwh13_9*r21);
IkReal x198=(gclwh5_0*r22);
IkReal x199=((0.01464286847625)*r20);
IkReal x200=(gclwh15_1*r20);
IkReal x201=((0.000977833645875)*r22);
IkReal x202=((0.0089586225)*r20);
IkReal x203=((2.0)*gclwh10_11);
IkReal x204=(gclwh5_10*r22);
IkReal x205=((2.0)*pp);
IkReal x206=(gclwh15_9*r20);
IkReal x207=(gclwh1_3*r20);
IkReal x208=((0.00195566729175)*r20);
IkReal x209=(gclwh4_3*rxp2_2);
IkReal x210=((0.2183)*gclwh13_15);
IkReal x211=((2.0)*gclwh7_10);
IkReal x212=(gclwh15_0*r20);
IkReal x213=(gclwh9_0*r20);
IkReal x214=(gclwh15_15*rxp0_2);
IkReal x215=(gclwh2_1*r21);
IkReal x216=((4.0)*gclwh11_10);
IkReal x217=((0.30941085)*rxp0_2);
IkReal x218=(gclwh9_0*rxp0_2);
IkReal x219=(gclwh5_10*rxp2_2);
IkReal x220=((0.2183)*gclwh12_14);
IkReal x221=((0.2183)*gclwh14_14);
IkReal x222=(gclwh4_2*rxp2_2);
IkReal x223=((0.03275)*pp);
IkReal x224=((0.006199575)*rxp1_2);
IkReal x225=(gclwh12_2*rxp1_2);
IkReal x226=(gclwh5_0*rxp2_2);
IkReal x227=((3.60823078949063e-5)*r21);
IkReal x228=(gclwh14_11*rxp0_2);
IkReal x229=((0.020662095)*rxp0_2);
IkReal x230=(gclwh14_8*npx);
IkReal x231=((4.0)*gclwh9_10);
IkReal x232=((0.00195566729175)*r21);
IkReal x233=(gclwh8_12*rxp0_2);
IkReal x234=((0.01464286847625)*r21);
IkReal x235=((0.3786)*rxp2_2);
IkReal x236=((0.01464286847625)*r22);
IkReal x237=(gclwh7_13*r21);
IkReal x238=((4.0)*gclwh7_10);
IkReal x239=(gclwh13_0*rxp1_2);
IkReal x240=((0.1893)*rxp1_2);
IkReal x241=(gclwh6_2*r21);
IkReal x242=(gclwh5_1*rxp2_2);
IkReal x243=(gclwh8_2*rxp0_2);
IkReal x244=(gclwh9_10*r20);
IkReal x245=((4.0)*pp);
IkReal x246=(gclwh15_1*rxp0_2);
IkReal x247=(gclwh9_13*r20);
IkReal x248=((0.0089586225)*r21);
IkReal x249=(gclwh0_0*r20);
IkReal x250=(gclwh10_11*r22);
IkReal x251=((2.0)*gclwh12_11);
IkReal x252=((0.0655)*pz);
IkReal x253=((0.006199575)*rxp2_2);
IkReal x254=(gclwh12_14*rxp1_2);
IkReal x255=(gclwh15_0*rxp0_2);
IkReal x256=((2.0)*npx);
IkReal x257=(gclwh9_13*rxp0_2);
IkReal x258=((1.0)*pp);
IkReal x259=((4.0)*gclwh10_11);
IkReal x260=(gclwh15_9*rxp0_2);
IkReal x261=((3.60823078949063e-5)*r20);
IkReal x262=((0.00702803935125)*r22);
IkReal x263=(gclwh8_2*r20);
IkReal x264=((0.2183)*gclwh5_15);
IkReal x265=(gclwh10_2*r22);
IkReal x266=(gclwh5_1*r22);
IkReal x267=(gclwh13_9*rxp1_2);
IkReal x268=((2.0)*gclwh5_10);
IkReal x269=((0.020662095)*rxp2_2);
IkReal x270=(gclwh4_8*r22);
IkReal x271=((0.017917245)*r20);
IkReal x272=(gclwh7_0*r21);
IkReal x273=((0.00600991575645741)*r21);
IkReal x274=(gclwh11_0*r22);
IkReal x275=(gclwh6_12*r21);
IkReal x276=((0.2183)*gclwh15_15);
IkReal x277=(gclwh11_0*rxp2_2);
IkReal x278=((0.2183)*gclwh4_14);
IkReal x279=(gclwh4_14*rxp2_2);
IkReal x280=(gclwh6_2*rxp1_2);
IkReal x281=((0.1893)*rxp0_2);
IkReal x282=(gclwh4_8*rxp2_2);
IkReal x283=((0.12699240901125)*rxp1_2);
IkReal x284=(gclwh14_2*rxp0_2);
IkReal x285=(gclwh4_3*r22);
IkReal x286=((0.1893)*pp);
IkReal x287=(gclwh13_15*rxp1_2);
IkReal x288=(gclwh1_2*r20);
IkReal x289=((2.0)*gclwh14_11);
IkReal x290=(gclwh4_11*r22);
IkReal x291=((0.020662095)*x186);
IkReal x292=(gclwh6_5*x152);
IkReal x293=(gclwh8_5*x150);
IkReal x294=(gclwh12_14*x176);
IkReal x295=(gclwh10_5*x201);
IkReal x296=(gclwh4_14*x269);
IkReal x297=((0.0089586225)*x142);
IkReal x298=(gclwh12_11*x240);
IkReal x299=((0.017917245)*x191);
IkReal x300=((0.017917245)*x282);
IkReal x301=(gclwh4_11*x174);
IkReal x302=((0.0089586225)*x146);
IkReal x303=((0.1893)*x228);
IkReal x304=((0.0089586225)*x250);
IkReal x305=((0.017917245)*x173);
IkReal x306=((0.017917245)*x175);
IkReal x307=((0.0089586225)*x182);
IkReal x308=((0.1893)*x189);
IkReal x309=((0.017917245)*x267);
IkReal x310=(gclwh9_10*x202);
IkReal x311=((0.017917245)*x260);
IkReal x312=(gclwh13_10*x240);
IkReal x313=(gclwh7_10*x248);
IkReal x314=(gclwh5_10*x174);
IkReal x315=((0.020662095)*x214);
IkReal x316=(gclwh7_7*x152);
IkReal x317=(gclwh9_7*x150);
IkReal x318=(gclwh13_15*x176);
IkReal x319=((0.020662095)*x194);
IkReal x320=(gclwh11_7*x201);
IkReal x321=(gclwh10_5*x269);
IkReal x322=(gclwh8_5*x229);
IkReal x323=(gclwh14_14*x150);
IkReal x324=(gclwh6_5*x176);
IkReal x325=(gclwh4_14*x201);
IkReal x326=(gclwh12_14*x152);
IkReal x327=(gclwh8_11*x281);
IkReal x328=((0.000847933619625)*x165);
IkReal x329=(gclwh12_11*x248);
IkReal x330=(gclwh10_11*x174);
IkReal x331=((0.0089586225)*x290);
IkReal x332=((0.000847933619625)*x270);
IkReal x333=((0.1893)*x159);
IkReal x334=(gclwh14_11*x202);
IkReal x335=((0.000847933619625)*x190);
IkReal x336=(gclwh9_10*x281);
IkReal x337=(gclwh13_10*x248);
IkReal x338=(gclwh11_10*x174);
IkReal x339=((0.000847933619625)*x206);
IkReal x340=((0.0089586225)*x204);
IkReal x341=((0.000847933619625)*x181);
IkReal x342=(gclwh7_10*x240);
IkReal x343=((0.000847933619625)*x197);
IkReal x344=(gclwh15_10*x202);
IkReal x345=(gclwh5_15*x201);
IkReal x346=(gclwh7_7*x176);
IkReal x347=(gclwh13_15*x152);
IkReal x348=(gclwh15_15*x150);
IkReal x349=(gclwh9_7*x229);
IkReal x350=(gclwh11_7*x269);
IkReal x351=((0.017917245)*x250);
IkReal x352=(gclwh14_11*x185);
IkReal x353=((0.017917245)*x146);
IkReal x354=((0.04132419)*x186);
IkReal x355=((0.04132419)*x254);
IkReal x356=((0.04132419)*x279);
IkReal x357=(gclwh4_11*x235);
IkReal x358=((0.017917245)*x142);
IkReal x359=(gclwh12_11*x160);
IkReal x360=((0.04132419)*x194);
IkReal x361=((0.04132419)*x287);
IkReal x362=((0.04132419)*x214);
IkReal x363=((0.017917245)*x244);
IkReal x364=(gclwh15_10*x185);
IkReal x365=((0.017917245)*x182);
IkReal x366=(gclwh7_10*x158);
IkReal x367=((0.3786)*x219);
IkReal x368=(gclwh13_10*x160);
IkReal x369=((0.3786)*x159);
IkReal x370=(gclwh14_11*x271);
IkReal x371=(gclwh14_14*x208);
IkReal x372=(gclwh4_14*x188);
IkReal x373=(gclwh12_14*x232);
IkReal x374=(gclwh14_8*x187);
IkReal x375=((2.0)*x137);
IkReal x376=((1.0)*x138);
IkReal x377=(r21*x138);
IkReal x378=((0.2183)*gclwh10_5*x151);
IkReal x379=((0.2183)*gclwh8_5*x172);
IkReal x380=((0.10915)*gclwh6_5*x169);
IkReal x381=((0.2183)*gclwh6_5*x147);
IkReal x382=((0.10915)*gclwh8_5*x187);
IkReal x383=((0.10915)*gclwh10_5*x143);
IkReal x384=(gclwh12_3*pp*x240);
IkReal x385=(x151*x203);
IkReal x386=(x179*x263);
IkReal x387=((2.0)*gclwh8_11*x172);
IkReal x388=(gclwh10_2*pz*x143);
IkReal x389=(x139*x284);
IkReal x390=(x167*x263);
IkReal x391=(gclwh4_3*pp*x174);
IkReal x392=(x179*x265);
IkReal x393=(x139*x225);
IkReal x394=((2.0)*gclwh6_11*x147);
IkReal x395=(x139*x222);
IkReal x396=(x149*x286);
IkReal x397=(x179*x241);
IkReal x398=(gclwh13_1*pp*x240);
IkReal x399=(x179*x274);
IkReal x400=(x179*x213);
IkReal x401=(gclwh5_1*pp*x174);
IkReal x402=(x139*x255);
IkReal x403=(gclwh11_0*pz*x143);
IkReal x404=(x147*x211);
IkReal x405=(x167*x213);
IkReal x406=(x151*x164);
IkReal x407=(x246*x286);
IkReal x408=(x172*x192);
IkReal x409=(x179*x272);
IkReal x410=(x139*x239);
IkReal x411=(x139*x226);
IkReal x412=((0.10915)*gclwh7_7*x169);
IkReal x413=((0.2183)*gclwh9_7*x172);
IkReal x414=((0.2183)*gclwh11_7*x151);
IkReal x415=((0.10915)*gclwh9_7*x187);
IkReal x416=((0.2183)*gclwh7_7*x147);
IkReal x417=((0.10915)*gclwh11_7*x143);
IkReal x418=((0.10915)*gclwh14_14*x187);
IkReal x419=(x151*x278);
IkReal x420=(x147*x220);
IkReal x421=((0.10915)*gclwh12_14*x169);
IkReal x422=(x172*x221);
IkReal x423=((0.10915)*gclwh4_14*x143);
IkReal x424=((0.09465)*gclwh4_8*x143);
IkReal x425=(x167*x168);
IkReal x426=(gclwh12_3*x377);
IkReal x427=(x139*x280);
IkReal x428=(gclwh3_3*x377);
IkReal x429=(x138*x207);
IkReal x430=(gclwh3_2*r21*x179);
IkReal x431=(x172*x289);
IkReal x432=(x139*x230);
IkReal x433=(x168*x179);
IkReal x434=((0.09465)*pp*x165);
IkReal x435=(x138*x285);
IkReal x436=(x179*x288);
IkReal x437=(x139*x243);
IkReal x438=(x151*x170);
IkReal x439=(gclwh4_2*r22*x179);
IkReal x440=(gclwh4_8*npz*x139);
IkReal x441=(gclwh12_2*r21*x179);
IkReal x442=(x139*x154);
IkReal x443=((0.09465)*x374);
IkReal x444=(x147*x251);
IkReal x445=(gclwh12_8*npy*x139);
IkReal x446=(x138*x200);
IkReal x447=(x139*x145);
IkReal x448=(gclwh5_0*pz*x143);
IkReal x449=(gclwh13_9*npy*x139);
IkReal x450=(x179*x198);
IkReal x451=(x167*x180);
IkReal x452=((0.09465)*gclwh15_9*x187);
IkReal x453=(x172*x193);
IkReal x454=(x179*x180);
IkReal x455=(x138*x215);
IkReal x456=(gclwh2_0*r21*x179);
IkReal x457=(x139*x218);
IkReal x458=(x139*x277);
IkReal x459=(gclwh0_1*r20*x138);
IkReal x460=(x179*x249);
IkReal x461=((0.09465)*gclwh5_9*x143);
IkReal x462=(x139*x161);
IkReal x463=((0.09465)*gclwh13_9*x169);
IkReal x464=(x179*x212);
IkReal x465=(x139*x141);
IkReal x466=(x151*x268);
IkReal x467=(x147*x195);
IkReal x468=((0.10915)*gclwh13_15*x169);
IkReal x469=((0.10915)*gclwh5_15*x143);
IkReal x470=(x172*x276);
IkReal x471=((0.10915)*gclwh15_15*x187);
IkReal x472=(x151*x264);
IkReal x473=(x147*x210);
IkReal x474=(x146*x205);
IkReal x475=(x143*x203);
IkReal x476=((4.0)*gclwh6_11*x147);
IkReal x477=((4.0)*gclwh8_11*x172);
IkReal x478=(x142*x205);
IkReal x479=(x151*x259);
IkReal x480=(x143*x164);
IkReal x481=(x147*x238);
IkReal x482=(x187*x192);
IkReal x483=(x169*x211);
IkReal x484=(x172*x231);
IkReal x485=(x151*x216);
IkReal x486=(x187*x289);
IkReal x487=((4.0)*gclwh12_11*x147);
IkReal x488=((4.0)*gclwh4_11*x151);
IkReal x489=(x187*x221);
IkReal x490=((0.4366)*gclwh12_14*x147);
IkReal x491=((0.4366)*gclwh4_14*x151);
IkReal x492=(x169*x220);
IkReal x493=((0.4366)*gclwh14_14*x172);
IkReal x494=(x143*x278);
IkReal x495=(gclwh6_2*npy*x375);
IkReal x496=(gclwh6_2*x167*x184);
IkReal x497=(gclwh10_2*npz*x375);
IkReal x498=(gclwh8_2*x137*x256);
IkReal x499=(gclwh7_0*npy*x375);
IkReal x500=(gclwh9_0*x137*x256);
IkReal x501=(gclwh11_0*npz*x375);
IkReal x502=(gclwh7_0*x167*x184);
IkReal x503=(gclwh12_2*npy*x375);
IkReal x504=(gclwh3_2*npy*x375);
IkReal x505=(gclwh1_2*x137*x256);
IkReal x506=(gclwh14_3*x167*x256);
IkReal x507=(gclwh4_2*npz*x375);
IkReal x508=(gclwh4_3*x151*x205);
IkReal x509=(gclwh12_2*x167*x184);
IkReal x510=((1.0)*x167*x288);
IkReal x511=(gclwh3_3*x147*x205);
IkReal x512=((1.0)*gclwh4_2*pz*x143);
IkReal x513=(gclwh1_3*x167*x256);
IkReal x514=(gclwh3_2*x167*x184);
IkReal x515=(gclwh12_3*x147*x205);
IkReal x516=(gclwh14_2*x137*x256);
IkReal x517=(gclwh14_3*r20*x376);
IkReal x518=(gclwh0_0*x137*x256);
IkReal x519=(gclwh2_0*npy*x375);
IkReal x520=(gclwh5_1*x151*x205);
IkReal x521=(gclwh13_1*x147*x205);
IkReal x522=(gclwh15_0*x137*x256);
IkReal x523=(gclwh2_1*x147*x205);
IkReal x524=(gclwh0_1*x167*x256);
IkReal x525=(gclwh5_0*npz*x375);
IkReal x526=(gclwh13_0*npy*x375);
IkReal x527=((1.0)*x167*x249);
IkReal x528=((1.0)*x167*x212);
IkReal x529=(gclwh2_0*x167*x184);
IkReal x530=(gclwh13_1*x138*x184);
IkReal x531=(x266*x376);
IkReal x532=(gclwh15_1*x167*x256);
IkReal x533=(x355+x356);
IkReal x534=(x360+x361);
IkReal x535=(x321+x322);
IkReal x536=(x294+x296);
IkReal x537=(x319+x318);
IkReal x538=(x350+x349);
IkReal x539=(x304+x302+x303+x394);
IkReal x540=(x308+x307+x310+x404);
IkReal x541=(x342+x344+x467+x466);
IkReal x542=(x333+x334+x438+x444);
IkReal x543=(x371+x489+x490+x491);
IkReal x544=(x380+x379+x378+x292);
IkReal x545=(x323+x418+x419+x420);
IkReal x546=(x348+x471+x472+x473);
IkReal x547=(x316+x412+x413+x414);
IkReal x548=(x338+x337+x336+x340+x453);
IkReal x549=(x331+x330+x327+x329+x431);
IkReal x550=(x301+x387+x385+x298+x297);
IkReal x551=(x314+x313+x312+x406+x408);
IkReal x552=(x325+x326+x423+x422+x421);
IkReal x553=(x347+x345+x469+x468+x470);
IkReal x554=(x320+x317+x416+x417+x415);
IkReal x555=(x373+x372+x492+x493+x494);
IkReal x556=(x370+x369+x488+x487+x486);
IkReal x557=(x382+x383+x381+x293+x295);
IkReal x558=(x357+x359+x358+x477+x478+x479);
IkReal x559=(x368+x366+x367+x483+x485+x484);
IkReal x560=(x363+x364+x365+x481+x480+x482);
IkReal x561=(x351+x353+x352+x474+x475+x476);
IkReal x562=(((x143*x170))+(((4.0)*gclwh14_11*x172))+(((0.017917245)*x290))+((gclwh10_11*x235))+((x169*x251))+((gclwh8_11*x185))+((gclwh12_11*x158)));
IkReal x563=(x305+x395+x397+x396+x393+x498+x496+x497);
IkReal x564=(x311+x407+x409+x410+x411+x500+x501+x502);
IkReal x565=(x300+x386+x384+x388+x389+x391+x390+x392+x299+x495);
IkReal x566=(x309+x306+x399+x398+x499+x401+x400+x403+x402+x405);
IkReal x567=(x343+x341+x463+x462+x461+x465+x464+x531+x530+x532+x523+x526+x527+x524+x525+x528+x529);
IkReal x568=(x139+x332+x328+x429+x428+x427+x426+x425+x424+x430+x432+x433+x434+x435+x436+x503+x504+x505+x506+x507);
IkReal x569=(x335+x439+x437+x445+x441+x440+x443+x442+x508+x509+x517+x516+x515+x514+x513+x512+x511+x510);
IkReal x570=(x139+x339+x449+x448+x447+x446+x458+x459+x456+x457+x454+x455+x452+x450+x451+x460+x522+x520+x521+x519+x518);
op[0]=((((-0.007321434238125)*x153))+(((0.154705425)*x173))+(((-1.0)*gclwh4_8*x163))+((gclwh6_12*x177))+(((-1.0)*x291))+(((-0.81725)*gclwh10_12*x143))+(((-1.6345)*gclwh6_12*x147))+(((-1.0)*gclwh12_8*x157))+(((1.6345)*gclwh10_12*x151))+(((-1.0)*x557))+((x166*x275))+x544+x536+(((-0.007321434238125)*x171))+(((1.6345)*gclwh8_12*x172))+(((-1.0)*x166*x171)));
op[1]=(((gclwh10_11*x143))+(((0.12699240901125)*x149))+(((-0.12699240901125)*x209))+(((-1.0)*x142*x258))+(((-1.0)*x550))+x539+x565+(((-1.0)*gclwh12_3*x283))+((pp*x146))+(((-1.0)*x563)));
op[2]=((-0.17125635)+(((-1.0)*x558))+x561);
op[3]=((((0.160905)*x191))+(((-0.160905)*x173))+(((0.7845)*gclwh8_2*x187))+((gclwh8_2*x196))+(((-1.569)*gclwh10_2*x151))+(((-0.14850585)*x222))+(((-0.14850585)*x225))+(((-1.0)*x533))+(((0.14850585)*x284))+(((-1.0)*gclwh6_2*x144))+(((-0.7845)*gclwh6_2*x169))+x354+((gclwh10_2*x262))+(((-1.569)*gclwh8_2*x172))+(((0.160905)*x282))+(((1.569)*gclwh6_2*x147))+(((0.7845)*gclwh10_2*x143)));
op[4]=((((-1.0)*x171*x223))+(((-0.006199575)*x173))+(((0.000293394886875)*x275))+(((-0.03275)*gclwh10_12*x143))+(((-0.0655)*gclwh6_12*x147))+(((0.006199575)*x191))+(((-1.0)*x536))+(((0.03275)*gclwh6_12*x169))+(((0.0655)*gclwh10_12*x151))+x291+(((-1.0)*x557))+x544+(((0.0655)*gclwh8_12*x172))+(((-0.000293394886875)*x171))+((gclwh4_8*x253))+(((-0.000293394886875)*x153)));
op[5]=((((-1.0)*gclwh10_11*x143))+(((-0.00076243651125)*x209))+(((-1.0)*x539))+(((0.00076243651125)*x149))+x550+x565+(((-1.0)*x146*x258))+((pp*x142))+(((-1.0)*gclwh12_3*x155))+(((-1.0)*x563)));
op[6]=((((-1.0)*gclwh11_10*x143))+(((-1.0)*x540))+(((-1.0)*gclwh9_10*x187))+x551+x566+((gclwh7_10*x169))+(((-0.12699240901125)*x242))+(((0.12699240901125)*x246))+(((-1.0)*x564))+(((-1.0)*gclwh13_1*x283)));
op[7]=((((-1.0)*x166*x247))+(((-0.007321434238125)*x247))+(((1.6345)*gclwh9_13*x172))+(((-1.0)*gclwh13_9*x157))+(((0.154705425)*x260))+(((-1.0)*x554))+((gclwh7_13*x177))+(((-1.0)*x315))+x547+x537+(((-1.6345)*gclwh7_13*x147))+((x166*x237))+(((1.6345)*gclwh11_13*x151))+(((-0.81725)*gclwh11_13*x143))+(((-1.0)*gclwh5_9*x163))+(((-0.007321434238125)*x183)));
op[8]=((((-1.569)*gclwh11_0*x151))+(((0.7845)*gclwh11_0*x143))+(((0.7845)*gclwh9_0*x187))+(((-0.160905)*x175))+(((-1.0)*x362))+(((-1.569)*gclwh9_0*x172))+(((0.14850585)*x255))+(((-0.14850585)*x226))+x534+(((0.160905)*x260))+(((-1.0)*gclwh7_0*x144))+(((-0.14850585)*x239))+(((-0.160905)*x267))+((gclwh9_0*x196))+(((-0.7845)*gclwh7_0*x169))+(((1.569)*gclwh7_0*x147))+((gclwh11_0*x262)));
op[9]=((-0.17125635)+(((-1.0)*x559))+x560);
op[10]=(((gclwh11_10*x143))+(((0.00076243651125)*x246))+((gclwh9_10*x187))+(((-1.0)*x551))+(((-1.0)*gclwh7_10*x169))+(((-1.0)*gclwh13_1*x155))+x540+x566+(((-0.00076243651125)*x242))+(((-1.0)*x564)));
op[11]=((((-0.03275)*gclwh11_13*x143))+(((0.0655)*gclwh11_13*x151))+((gclwh13_9*x224))+(((0.006199575)*x175))+(((-1.0)*x537))+(((-0.000293394886875)*x183))+x315+(((-1.0)*x554))+x547+(((-0.03275)*gclwh9_13*x187))+(((0.03275)*gclwh7_13*x169))+(((-0.000293394886875)*x247))+(((-0.0655)*gclwh7_13*x147))+(((0.000293394886875)*x237))+(((0.0655)*gclwh9_13*x172))+(((-0.006199575)*x260)));
op[12]=((((-0.007321434238125)*x270))+(((0.154705425)*x233))+(((-1.0)*gclwh6_12*x157))+(((-1.0)*x324))+((x166*x190))+(((-0.81725)*gclwh4_8*x143))+(((-1.0)*x545))+(((0.007321434238125)*x190))+(((1.6345)*gclwh4_8*x151))+x552+x535+((gclwh10_12*x163))+(((-0.007321434238125)*x165))+(((-1.0)*x165*x166))+(((-1.6345)*gclwh14_8*x172))+(((1.6345)*gclwh12_8*x147)));
op[13]=((-0.679811285)+(((-0.679811285)*gclwh1_3*x187))+(((-1.341705325)*gclwh14_3*x172))+(((0.66189404)*gclwh14_3*x187))+(((-0.679811285)*gclwh3_3*x169))+(((-1.0)*x549))+(((1.341705325)*gclwh1_3*x172))+(((1.341705325)*gclwh3_3*x147))+((gclwh14_3*x156))+(((1.341705325)*gclwh4_3*x151))+x542+x568+((gclwh3_3*x273))+(((-1.0)*gclwh12_11*x169))+(((-0.66189404)*gclwh4_3*x143))+((gclwh1_3*x156))+((gclwh14_11*x187))+(((-1.0)*gclwh12_3*x273))+(((-1.0)*gclwh4_11*x143))+(((1.341705325)*gclwh12_3*x147))+(((-0.00600991575645741)*x285))+(((-1.0)*x569))+(((-0.66189404)*gclwh12_3*x169)));
op[14]=((-0.07735732)+x556+(((-1.0)*x562)));
op[15]=((((0.85)*gclwh4_8*x143))+(((-0.7845)*gclwh12_2*x169))+(((-1.0)*gclwh12_8*npy*x140))+((gclwh1_2*x196))+(((-0.7845)*gclwh3_2*x169))+(((1.569)*gclwh1_2*x172))+(((-1.0)*gclwh4_8*npz*x140))+(((1.569)*gclwh12_2*x147))+(((-1.0)*gclwh12_2*x144))+(((1.569)*gclwh4_2*x151))+(((0.7845)*pp*x168))+(((-0.7845)*gclwh1_2*x187))+(((-0.14850585)*x154))+((x140*x230))+(((0.14850585)*x280))+(((-1.0)*x555))+(((0.00702803935125)*x168))+(((-1.0)*gclwh4_2*x262))+(((0.007614829125)*x165))+x543+(((-0.7845)*gclwh4_2*x143))+((gclwh3_2*x144))+(((-1.569)*gclwh14_2*x172))+(((-0.85)*x374))+(((0.007614829125)*x270))+(((-0.007614829125)*x190))+(((1.569)*gclwh3_2*x147))+(((-0.14850585)*x243))+(((0.85)*pp*x165)));
op[16]=((((0.000293394886875)*x165))+(((0.000293394886875)*x270))+((x165*x223))+(((0.006199575)*x233))+(((-1.0)*gclwh6_12*x224))+(((-0.0655)*gclwh12_8*x147))+(((-1.0)*x324))+(((0.03275)*gclwh4_8*x143))+(((-0.0655)*gclwh4_8*x151))+(((-0.000293394886875)*x190))+(((-1.0)*x552))+((gclwh10_12*x253))+x545+x535+(((-0.03275)*x374))+(((0.0655)*gclwh14_8*x172)));
op[17]=((0.012986285)+(((-0.008055325)*gclwh14_3*x172))+(((-0.012986285)*gclwh3_3*x169))+(((0.008055325)*gclwh1_3*x172))+(((-0.00493096)*gclwh14_3*x187))+(((-1.0)*gclwh12_3*x227))+(((-0.012986285)*gclwh1_3*x187))+(((0.008055325)*gclwh3_3*x147))+(((-1.0)*gclwh14_11*x187))+(((0.008055325)*gclwh4_3*x151))+((gclwh14_3*x261))+(((-1.0)*x542))+((gclwh3_3*x227))+(((0.008055325)*gclwh12_3*x147))+x549+x568+(((0.00493096)*gclwh4_3*x143))+(((0.00493096)*gclwh12_3*x169))+((gclwh12_11*x169))+(((-1.0)*gclwh4_3*x148))+((gclwh4_11*x143))+(((3.60823078949063e-5)*x207))+(((-1.0)*x569)));
op[18]=((0.679811285)+(((-1.0)*gclwh13_10*x169))+((gclwh15_10*x187))+(((-1.341705325)*gclwh5_1*x151))+((gclwh13_1*x273))+(((-0.679811285)*gclwh2_1*x169))+(((-1.0)*x548))+(((-0.66189404)*gclwh15_1*x187))+(((0.00600991575645741)*x215))+(((-0.679811285)*gclwh0_1*x187))+(((-1.341705325)*gclwh13_1*x147))+(((0.66189404)*gclwh5_1*x143))+(((1.341705325)*gclwh0_1*x172))+x541+x570+(((-1.0)*gclwh15_1*x156))+(((-1.0)*gclwh5_10*x143))+(((0.00600991575645741)*x266))+(((0.66189404)*gclwh13_1*x169))+(((1.341705325)*gclwh15_1*x172))+((gclwh0_1*x156))+(((1.341705325)*gclwh2_1*x147))+(((-1.0)*x567)));
op[19]=((((-0.154705425)*x257))+(((-0.007321434238125)*x206))+(((-1.0)*x166*x206))+((gclwh7_13*x157))+((x141*x178))+((x166*x197))+(((-1.0)*x538))+(((0.007321434238125)*x181))+x346+(((-1.0)*x553))+((gclwh13_9*x177))+(((-1.0)*x145*x178))+x546+(((-1.6345)*gclwh13_9*x147))+(((0.81725)*gclwh5_9*x143))+(((-1.0)*gclwh11_13*x163)));
op[20]=((((-1.0)*gclwh13_9*npy*x140))+(((1.569)*gclwh15_0*x172))+((x140*x141))+(((-1.0)*x140*x145))+(((0.85)*gclwh5_9*x143))+((gclwh15_15*x208))+((gclwh2_0*x144))+(((1.569)*gclwh0_0*x172))+(((0.7845)*gclwh5_0*x143))+(((0.85)*gclwh13_9*x169))+(((-0.14850585)*x161))+(((-1.569)*gclwh13_0*x147))+(((0.14850585)*x218))+(((0.007614829125)*x181))+(((-0.7845)*gclwh2_0*x169))+(((-1.0)*x143*x264))+(((-1.569)*gclwh5_0*x151))+(((-1.0)*gclwh15_0*x196))+(((0.007614829125)*x197))+(((0.00702803935125)*x198))+(((-0.007614829125)*x206))+(((0.14850585)*x277))+(((0.4366)*gclwh13_15*x147))+(((-0.85)*gclwh15_9*x187))+(((-0.7845)*gclwh15_0*x187))+((gclwh0_0*x196))+(((-0.4366)*gclwh15_15*x172))+(((1.569)*gclwh2_0*x147))+(((-0.7845)*gclwh0_0*x187))+(((0.4366)*gclwh5_15*x151))+(((-1.0)*gclwh5_15*x188))+(((0.7845)*gclwh13_0*x169))+(((-1.0)*gclwh13_15*x232))+((x187*x276))+((gclwh13_0*x144))+(((-1.0)*x169*x210)));
op[21]=((-0.07735732)+((gclwh11_10*x235))+((x169*x195))+(((0.017917245)*x204))+(((4.0)*gclwh15_10*x172))+((gclwh13_10*x158))+((gclwh9_10*x185))+(((-1.0)*x187*x193))+(((-4.0)*gclwh13_10*x147))+(((-1.0)*gclwh7_10*x160))+((x143*x268))+(((-4.0)*gclwh5_10*x151))+(((-1.0)*gclwh15_10*x271)));
op[22]=((-0.012986285)+(((0.008055325)*gclwh0_1*x172))+((gclwh5_1*x148))+(((0.008055325)*gclwh2_1*x147))+(((3.60823078949063e-5)*x215))+((gclwh13_10*x169))+(((0.008055325)*gclwh15_1*x172))+(((-1.0)*x541))+(((-1.0)*gclwh15_10*x187))+((gclwh0_1*x261))+x548+x570+((gclwh5_10*x143))+((gclwh13_1*x227))+(((-0.00493096)*gclwh5_1*x143))+(((-0.012986285)*gclwh2_1*x169))+(((-0.012986285)*gclwh0_1*x187))+(((-0.008055325)*gclwh5_1*x151))+(((-0.008055325)*gclwh13_1*x147))+(((-3.60823078949063e-5)*x200))+(((0.00493096)*gclwh15_1*x187))+(((-1.0)*x567))+(((-0.00493096)*gclwh13_1*x169)));
op[23]=((((0.0655)*gclwh13_9*x147))+(((-0.006199575)*x257))+(((-1.0)*x538))+(((-0.000293394886875)*x181))+(((-1.0)*x546))+x346+(((-1.0)*gclwh11_13*x253))+(((-0.000293394886875)*x197))+x553+(((0.03275)*gclwh15_9*x187))+((x145*x252))+(((-1.0)*x141*x252))+(((-0.03275)*gclwh5_9*x143))+(((0.000293394886875)*x206))+((gclwh7_13*x224))+(((-0.03275)*gclwh13_9*x169)));
op[24]=((-0.35681135)+(((-1.0)*x558))+x561);
op[25]=((((-0.30941085)*x225))+(((-0.30941085)*x222))+(((1.6345)*gclwh8_2*x187))+((gclwh14_2*x217))+((gclwh8_2*x199))+(((-1.0)*x533))+x354+(((-3.269)*gclwh8_2*x172))+(((-1.6345)*gclwh6_2*x169))+((gclwh10_2*x236))+(((1.6345)*gclwh10_2*x143))+(((3.269)*gclwh6_2*x147))+(((-3.269)*gclwh10_2*x151))+(((-1.0)*gclwh6_2*x234)));
op[26]=((((3.138)*gclwh6_12*x147))+(((-0.08264838)*x279))+(((-0.0140560787025)*x275))+(((1.569)*gclwh10_12*x143))+(((1.569)*pp*x171))+(((-1.569)*gclwh6_12*x169))+(((0.08264838)*x186))+(((-0.08264838)*x254))+(((0.0140560787025)*x171))+(((-3.138)*gclwh10_12*x151))+(((-3.138)*gclwh8_12*x172))+(((0.0140560787025)*x153)));
op[27]=((((-0.7572)*x228))+(((-8.0)*gclwh6_11*x147))+(((0.7572)*gclwh4_11*rxp2_2))+(((0.03583449)*x142))+(((8.0)*gclwh10_11*x151))+(((-1.0)*x143*x259))+(((-0.03583449)*x250))+((x142*x245))+(((-0.03583449)*x146))+((gclwh12_11*x162))+(((-1.0)*x146*x245))+(((8.0)*gclwh8_11*x172)));
op[28]=((-0.01429865)+x558+(((-1.0)*x561)));
op[29]=((((-0.131)*gclwh8_2*x172))+(((-0.0655)*gclwh6_2*x169))+(((0.0655)*gclwh10_2*x143))+(((-1.0)*x354))+(((0.131)*gclwh6_2*x147))+(((0.01239915)*x284))+x533+(((-0.01239915)*x222))+(((-0.01239915)*x225))+(((0.0655)*gclwh8_2*x187))+(((0.00058678977375)*x265))+(((0.00058678977375)*x263))+(((-0.131)*gclwh10_2*x151))+(((-0.00058678977375)*x241)));
op[30]=((((-0.30941085)*x226))+((gclwh15_0*x217))+(((1.6345)*gclwh9_0*x187))+(((-1.0)*x362))+(((3.269)*gclwh7_0*x147))+(((-3.269)*gclwh9_0*x172))+(((-3.269)*gclwh11_0*x151))+x534+((gclwh11_0*x236))+(((-1.0)*gclwh7_0*x234))+((gclwh9_0*x199))+(((-0.30941085)*x239))+(((-1.6345)*gclwh7_0*x169))+(((1.6345)*gclwh11_0*x143)));
op[31]=((-0.35681135)+(((-1.0)*x559))+x560);
op[32]=(((x187*x231))+(((0.7572)*x189))+(((-1.0)*x169*x238))+(((-8.0)*gclwh11_10*x151))+(((-1.0)*gclwh13_10*x162))+(((0.03583449)*x182))+(((-0.03583449)*gclwh7_10*r21))+(((8.0)*gclwh7_10*x147))+(((-0.7572)*x219))+(((-8.0)*gclwh9_10*x172))+((x143*x216))+(((0.03583449)*x244)));
op[33]=((((0.0140560787025)*x183))+(((-3.138)*gclwh11_13*x151))+(((1.569)*gclwh9_13*x187))+(((3.138)*gclwh7_13*x147))+(((-0.08264838)*x287))+(((-0.0140560787025)*x237))+(((0.08264838)*x214))+(((-0.08264838)*x194))+(((1.569)*gclwh11_13*x143))+(((0.0140560787025)*x247))+(((-1.569)*gclwh7_13*x169))+(((-3.138)*gclwh9_13*x172)));
op[34]=((((-0.00058678977375)*x272))+(((0.00058678977375)*x274))+(((0.131)*gclwh7_0*x147))+(((0.00058678977375)*x213))+(((0.0655)*gclwh9_0*x187))+(((0.01239915)*x255))+(((-0.0655)*gclwh7_0*x169))+(((-0.01239915)*x239))+(((-1.0)*x534))+x362+(((0.0655)*gclwh11_0*x143))+(((-0.131)*gclwh11_0*x151))+(((-0.01239915)*x226))+(((-0.131)*gclwh9_0*x172)));
op[35]=((-0.01429865)+x559+(((-1.0)*x560)));
op[36]=((1.31196768)+x556+(((-1.0)*x562)));
op[37]=((((3.269)*gclwh4_2*x151))+((gclwh1_2*x199))+(((-1.6345)*gclwh12_2*x169))+(((3.269)*gclwh3_2*x147))+(((3.269)*gclwh1_2*x172))+(((-1.0)*gclwh12_2*x234))+(((0.01464286847625)*x168))+((gclwh3_2*x234))+(((0.30941085)*x280))+(((-0.30941085)*x154))+(((-1.0)*x555))+(((-1.6345)*gclwh1_2*x187))+(((-3.269)*gclwh14_2*x172))+(((-1.0)*gclwh8_2*x217))+x543+(((1.6345)*pp*x168))+(((3.269)*gclwh12_2*x147))+(((-1.6345)*gclwh3_2*x169))+(((-1.0)*gclwh4_2*x236))+(((-1.6345)*gclwh4_2*x143)));
IkReal x571=pz*pz;
IkReal x572=pp*pp;
IkReal x573=((0.1893)*pz);
IkReal x574=((1.7)*pz);
IkReal x575=(gclwh15_9*npx);
IkReal x576=(pp*r21);
IkReal x577=(pp*r22);
IkReal x578=((0.00702803935125)*r21);
IkReal x579=(gclwh5_9*npz);
IkReal x580=(pp*r20);
IkReal x581=(npy*pz);
IkReal x582=((4.0)*gclwh12_11);
IkReal x583=((3.60823078949063e-5)*r22);
IkReal x584=(gclwh14_3*rxp0_2);
IkReal x585=((0.000977833645875)*r20);
IkReal x586=(npz*pz);
IkReal x587=((0.000977833645875)*r21);
IkReal x588=(gclwh10_2*rxp2_2);
IkReal x589=((0.00076243651125)*rxp1_2);
IkReal x590=((0.00600991575645741)*r20);
IkReal x591=((0.154705425)*rxp1_2);
IkReal x592=((0.4366)*gclwh5_15);
IkReal x593=(gclwh6_11*rxp1_2);
IkReal x594=(gclwh7_0*rxp1_2);
IkReal x595=((0.154705425)*rxp2_2);
IkReal x596=((2.0)*gclwh11_10);
IkReal x597=((0.2970117)*rxp1_2);
IkReal x598=((0.017917245)*r21);
IkReal x599=(gclwh14_2*pz);
IkReal x600=(gclwh12_8*r21);
IkReal x601=(gclwh14_2*rxp0_2);
IkReal x602=((2.0)*gclwh4_11);
IkReal x603=((0.007321434238125)*r20);
IkReal x604=(npx*pz);
IkReal x605=((0.4366)*gclwh15_15);
IkReal x606=(gclwh10_11*rxp2_2);
IkReal x607=(gclwh5_9*rxp2_2);
IkReal x608=((0.020662095)*rxp1_2);
IkReal x609=((0.007321434238125)*r21);
IkReal x610=(gclwh0_0*r20);
IkReal x611=((0.0089586225)*r21);
IkReal x612=(gclwh13_0*pz);
IkReal x613=((1.6345)*pz);
IkReal x614=((0.007321434238125)*r22);
IkReal x615=((1.0)*pz);
IkReal x616=(gclwh14_14*rxp0_2);
IkReal x617=(gclwh4_14*r22);
IkReal x618=((0.1893)*rxp0_2);
IkReal x619=((0.00058678977375)*r22);
IkReal x620=(gclwh12_8*rxp1_2);
IkReal x621=((2.0)*gclwh9_10);
IkReal x622=((0.1893)*rxp2_2);
IkReal x623=((2.0)*gclwh15_10);
IkReal x624=((4.0)*gclwh14_11);
IkReal x625=(gclwh5_15*rxp2_2);
IkReal x626=((0.020662095)*rxp0_2);
IkReal x627=((2.0)*gclwh13_10);
IkReal x628=((0.3786)*rxp1_2);
IkReal x629=(gclwh9_0*r20);
IkReal x630=(gclwh13_9*r21);
IkReal x631=(gclwh15_1*r20);
IkReal x632=((0.000977833645875)*r22);
IkReal x633=((0.006199575)*rxp0_2);
IkReal x634=(gclwh6_2*rxp1_2);
IkReal x635=((0.0089586225)*r20);
IkReal x636=((2.0)*gclwh10_11);
IkReal x637=((2.0)*pp);
IkReal x638=((0.00058678977375)*r21);
IkReal x639=(gclwh1_3*r20);
IkReal x640=(gclwh14_14*r20);
IkReal x641=(gclwh9_0*rxp0_2);
IkReal x642=(gclwh4_3*rxp2_2);
IkReal x643=(gclwh5_0*r22);
IkReal x644=((0.03583449)*r20);
IkReal x645=((0.00058678977375)*r20);
IkReal x646=((0.2183)*gclwh13_15);
IkReal x647=((2.0)*gclwh7_10);
IkReal x648=(gclwh2_1*r21);
IkReal x649=((4.0)*gclwh15_10);
IkReal x650=((0.0089586225)*pz);
IkReal x651=((0.2183)*gclwh12_14);
IkReal x652=((0.2183)*gclwh14_14);
IkReal x653=(gclwh11_0*rxp2_2);
IkReal x654=(gclwh8_2*rxp0_2);
IkReal x655=((0.3786)*rxp2_2);
IkReal x656=(gclwh12_2*rxp1_2);
IkReal x657=(gclwh5_0*rxp2_2);
IkReal x658=((3.60823078949063e-5)*r21);
IkReal x659=(gclwh15_9*r20);
IkReal x660=((0.3786)*rxp0_2);
IkReal x661=((0.006199575)*rxp1_2);
IkReal x662=(gclwh14_8*npx);
IkReal x663=(gclwh13_15*r21);
IkReal x664=((0.017917245)*r20);
IkReal x665=(gclwh5_15*r22);
IkReal x666=((0.000293394886875)*r21);
IkReal x667=(gclwh13_0*rxp1_2);
IkReal x668=(gclwh7_10*rxp1_2);
IkReal x669=((0.000293394886875)*r22);
IkReal x670=(gclwh5_1*rxp2_2);
IkReal x671=((0.154705425)*rxp0_2);
IkReal x672=((0.4366)*gclwh13_15);
IkReal x673=((0.0089586225)*r22);
IkReal x674=((0.2970117)*rxp2_2);
IkReal x675=(gclwh5_9*r22);
IkReal x676=((0.7572)*rxp0_2);
IkReal x677=((4.0)*gclwh4_11);
IkReal x678=(gclwh15_1*rxp0_2);
IkReal x679=((0.000293394886875)*r20);
IkReal x680=((2.0)*gclwh6_11);
IkReal x681=((0.4366)*gclwh12_14);
IkReal x682=((0.017917245)*r22);
IkReal x683=(gclwh15_0*r20);
IkReal x684=(gclwh15_15*r20);
IkReal x685=((2.0)*gclwh12_11);
IkReal x686=(gclwh14_8*rxp0_2);
IkReal x687=((0.0655)*pz);
IkReal x688=((0.006199575)*rxp2_2);
IkReal x689=((0.04132419)*rxp1_2);
IkReal x690=((0.4366)*gclwh4_14);
IkReal x691=(gclwh15_0*rxp0_2);
IkReal x692=(gclwh14_8*r20);
IkReal x693=((0.03583449)*r22);
IkReal x694=((2.0)*gclwh8_11);
IkReal x695=((4.0)*gclwh13_10);
IkReal x696=(gclwh15_9*rxp0_2);
IkReal x697=((3.60823078949063e-5)*r20);
IkReal x698=((0.00702803935125)*r22);
IkReal x699=((0.2183)*gclwh5_15);
IkReal x700=(gclwh5_1*r22);
IkReal x701=((4.0)*gclwh5_10);
IkReal x702=(gclwh13_9*rxp1_2);
IkReal x703=((2.0)*gclwh5_10);
IkReal x704=((0.4366)*gclwh14_14);
IkReal x705=((0.020662095)*rxp2_2);
IkReal x706=(gclwh4_8*r22);
IkReal x707=(gclwh4_2*rxp2_2);
IkReal x708=((0.00600991575645741)*r21);
IkReal x709=((0.2183)*gclwh15_15);
IkReal x710=((0.2183)*gclwh4_14);
IkReal x711=((0.00702803935125)*r20);
IkReal x712=(gclwh12_14*r21);
IkReal x713=(gclwh4_8*rxp2_2);
IkReal x714=((0.2970117)*rxp0_2);
IkReal x715=(gclwh8_2*pz);
IkReal x716=(gclwh13_1*rxp1_2);
IkReal x717=((0.1893)*pp);
IkReal x718=(gclwh12_3*rxp1_2);
IkReal x719=((0.01464286847625)*r21);
IkReal x720=((0.1893)*rxp1_2);
IkReal x721=(gclwh4_3*r22);
IkReal x722=((2.0)*gclwh14_11);
IkReal x723=((0.03583449)*r21);
IkReal x724=((0.00195566729175)*x663);
IkReal x725=((0.00195566729175)*x665);
IkReal x726=((0.00195566729175)*x684);
IkReal x727=(gclwh15_10*x664);
IkReal x728=(gclwh7_10*x628);
IkReal x729=(gclwh5_10*x682);
IkReal x730=(gclwh9_10*x660);
IkReal x731=(gclwh13_10*x598);
IkReal x732=(gclwh11_10*x655);
IkReal x733=(gclwh12_14*x608);
IkReal x734=(gclwh6_5*x587);
IkReal x735=(gclwh4_14*x705);
IkReal x736=(gclwh8_5*x585);
IkReal x737=((0.020662095)*x616);
IkReal x738=(gclwh10_5*x632);
IkReal x739=((0.017917245)*x620);
IkReal x740=(gclwh8_11*x635);
IkReal x741=(gclwh14_11*x618);
IkReal x742=((0.017917245)*x713);
IkReal x743=(gclwh10_11*x673);
IkReal x744=(gclwh6_11*x611);
IkReal x745=(gclwh12_11*x720);
IkReal x746=(gclwh4_11*x622);
IkReal x747=((0.017917245)*x686);
IkReal x748=((0.017917245)*x607);
IkReal x749=(gclwh13_10*x720);
IkReal x750=(gclwh7_10*x611);
IkReal x751=(gclwh5_10*x622);
IkReal x752=((0.017917245)*x702);
IkReal x753=((0.017917245)*x696);
IkReal x754=(gclwh11_10*x673);
IkReal x755=(gclwh15_10*x618);
IkReal x756=(gclwh9_10*x635);
IkReal x757=(gclwh13_15*x608);
IkReal x758=((0.020662095)*x625);
IkReal x759=(gclwh7_7*x587);
IkReal x760=(gclwh9_7*x585);
IkReal x761=(gclwh15_15*x626);
IkReal x762=(gclwh11_7*x632);
IkReal x763=(gclwh12_11*x598);
IkReal x764=((0.3786)*x606);
IkReal x765=(gclwh4_11*x682);
IkReal x766=(gclwh8_11*x660);
IkReal x767=((0.00195566729175)*x617);
IkReal x768=((0.00195566729175)*x712);
IkReal x769=((0.00195566729175)*x640);
IkReal x770=((0.000977833645875)*x617);
IkReal x771=(gclwh10_5*x705);
IkReal x772=(gclwh12_14*x587);
IkReal x773=(gclwh8_5*x626);
IkReal x774=(gclwh6_5*x608);
IkReal x775=(gclwh14_14*x585);
IkReal x776=((0.000847933619625)*x600);
IkReal x777=((0.1893)*x593);
IkReal x778=(gclwh14_11*x635);
IkReal x779=((0.000847933619625)*x706);
IkReal x780=(gclwh8_11*x618);
IkReal x781=(gclwh12_11*x611);
IkReal x782=((0.1893)*x606);
IkReal x783=(gclwh4_11*x673);
IkReal x784=((0.000847933619625)*x692);
IkReal x785=((0.1893)*x668);
IkReal x786=(gclwh15_10*x635);
IkReal x787=((0.000847933619625)*x659);
IkReal x788=((0.000847933619625)*x675);
IkReal x789=(gclwh9_10*x618);
IkReal x790=(gclwh13_10*x611);
IkReal x791=((0.000847933619625)*x630);
IkReal x792=(gclwh11_10*x622);
IkReal x793=(gclwh5_10*x673);
IkReal x794=(gclwh15_15*x585);
IkReal x795=(gclwh7_7*x608);
IkReal x796=(gclwh5_15*x632);
IkReal x797=(gclwh9_7*x626);
IkReal x798=(gclwh11_7*x705);
IkReal x799=(gclwh13_15*x587);
IkReal x800=((2.0)*x571);
IkReal x801=(r21*x572);
IkReal x802=((1.0)*x572);
IkReal x803=(x576*x646);
IkReal x804=(x604*x605);
IkReal x805=(x577*x699);
IkReal x806=(x581*x672);
IkReal x807=(x580*x709);
IkReal x808=(x586*x592);
IkReal x809=(x580*x623);
IkReal x810=(x586*x701);
IkReal x811=(x581*x695);
IkReal x812=(x576*x627);
IkReal x813=(x604*x649);
IkReal x814=(x577*x703);
IkReal x815=((0.2183)*gclwh10_5*x586);
IkReal x816=((0.2183)*gclwh8_5*x604);
IkReal x817=((0.10915)*gclwh6_5*x576);
IkReal x818=((0.2183)*gclwh6_5*x581);
IkReal x819=((0.10915)*gclwh8_5*x580);
IkReal x820=((0.10915)*gclwh10_5*x577);
IkReal x821=(x717*x718);
IkReal x822=(x581*x680);
IkReal x823=(x635*x715);
IkReal x824=(gclwh10_2*pz*x577);
IkReal x825=(x573*x601);
IkReal x826=(x580*x715);
IkReal x827=(gclwh4_3*pp*x622);
IkReal x828=(gclwh10_2*r22*x650);
IkReal x829=(x573*x656);
IkReal x830=(x586*x636);
IkReal x831=(x573*x707);
IkReal x832=(x584*x717);
IkReal x833=(x604*x694);
IkReal x834=(gclwh6_2*pz*x611);
IkReal x835=(x716*x717);
IkReal x836=(x586*x596);
IkReal x837=(x604*x621);
IkReal x838=(gclwh11_0*r22*x650);
IkReal x839=(x629*x650);
IkReal x840=(gclwh5_1*pp*x622);
IkReal x841=(x573*x691);
IkReal x842=(gclwh11_0*pz*x577);
IkReal x843=(gclwh9_0*pz*x580);
IkReal x844=(gclwh15_1*pp*x618);
IkReal x845=(gclwh7_0*pz*x611);
IkReal x846=(x573*x667);
IkReal x847=(x573*x657);
IkReal x848=(x581*x647);
IkReal x849=((0.10915)*gclwh7_7*x576);
IkReal x850=((0.2183)*gclwh9_7*x604);
IkReal x851=((0.2183)*gclwh11_7*x586);
IkReal x852=((0.10915)*gclwh9_7*x580);
IkReal x853=((0.2183)*gclwh7_7*x581);
IkReal x854=((0.10915)*gclwh11_7*x577);
IkReal x855=(x577*x602);
IkReal x856=(x576*x685);
IkReal x857=(x604*x624);
IkReal x858=(x576*x651);
IkReal x859=(x604*x704);
IkReal x860=(x577*x710);
IkReal x861=(x580*x652);
IkReal x862=(x581*x681);
IkReal x863=(x586*x690);
IkReal x864=((0.10915)*gclwh12_14*x576);
IkReal x865=(x604*x652);
IkReal x866=((0.10915)*gclwh4_14*x577);
IkReal x867=((0.10915)*gclwh14_14*x580);
IkReal x868=(x586*x710);
IkReal x869=(x581*x651);
IkReal x870=((0.09465)*gclwh4_8*x577);
IkReal x871=(x580*x599);
IkReal x872=(gclwh12_3*x801);
IkReal x873=(x586*x602);
IkReal x874=(x573*x634);
IkReal x875=(gclwh3_3*x801);
IkReal x876=(x572*x639);
IkReal x877=(gclwh3_2*pz*x611);
IkReal x878=(x573*x662);
IkReal x879=(x599*x635);
IkReal x880=((0.09465)*gclwh12_8*x576);
IkReal x881=(x572*x721);
IkReal x882=(gclwh1_2*pz*x635);
IkReal x883=(x581*x685);
IkReal x884=(x573*x654);
IkReal x885=(gclwh4_2*r22*x650);
IkReal x886=(gclwh4_8*npz*x573);
IkReal x887=(gclwh12_2*pz*x611);
IkReal x888=(x573*x588);
IkReal x889=(x604*x722);
IkReal x890=((0.09465)*gclwh14_8*x580);
IkReal x891=(gclwh12_8*npy*x573);
IkReal x892=(x572*x631);
IkReal x893=(x573*x579);
IkReal x894=(gclwh5_0*pz*x577);
IkReal x895=(gclwh13_9*npy*x573);
IkReal x896=(x643*x650);
IkReal x897=(x576*x612);
IkReal x898=((0.09465)*gclwh15_9*x580);
IkReal x899=(x611*x612);
IkReal x900=(x572*x648);
IkReal x901=(x586*x703);
IkReal x902=(gclwh2_0*pz*x611);
IkReal x903=(x573*x641);
IkReal x904=(x581*x627);
IkReal x905=(x573*x653);
IkReal x906=(gclwh0_1*r20*x572);
IkReal x907=(x610*x650);
IkReal x908=((0.09465)*gclwh5_9*x577);
IkReal x909=(x573*x594);
IkReal x910=((0.09465)*gclwh13_9*x576);
IkReal x911=(gclwh15_0*pz*x635);
IkReal x912=(x573*x575);
IkReal x913=(x604*x623);
IkReal x914=((0.10915)*gclwh15_15*x580);
IkReal x915=(x586*x699);
IkReal x916=(x581*x646);
IkReal x917=((0.10915)*gclwh13_15*x576);
IkReal x918=((0.10915)*gclwh5_15*x577);
IkReal x919=(x604*x709);
IkReal x920=(gclwh6_2*npy*x800);
IkReal x921=(gclwh6_2*x576*x615);
IkReal x922=(gclwh10_2*npz*x800);
IkReal x923=(gclwh8_2*npx*x800);
IkReal x924=(gclwh7_0*npy*x800);
IkReal x925=(gclwh9_0*npx*x800);
IkReal x926=(gclwh11_0*npz*x800);
IkReal x927=(gclwh7_0*x576*x615);
IkReal x928=(gclwh12_2*npy*x800);
IkReal x929=(gclwh3_2*npy*x800);
IkReal x930=(gclwh1_2*npx*x800);
IkReal x931=(gclwh14_3*x604*x637);
IkReal x932=(gclwh4_2*npz*x800);
IkReal x933=(gclwh4_3*x586*x637);
IkReal x934=(gclwh12_2*x576*x615);
IkReal x935=(gclwh1_2*x580*x615);
IkReal x936=(gclwh3_3*x581*x637);
IkReal x937=(gclwh4_2*x577*x615);
IkReal x938=(gclwh1_3*x604*x637);
IkReal x939=(gclwh3_2*x576*x615);
IkReal x940=(gclwh12_3*x581*x637);
IkReal x941=(gclwh14_2*npx*x800);
IkReal x942=(gclwh14_3*r20*x802);
IkReal x943=(gclwh0_0*npx*x800);
IkReal x944=(gclwh2_0*npy*x800);
IkReal x945=(gclwh5_1*x586*x637);
IkReal x946=(gclwh13_1*x581*x637);
IkReal x947=(gclwh15_0*npx*x800);
IkReal x948=(gclwh2_1*x581*x637);
IkReal x949=(gclwh0_1*x604*x637);
IkReal x950=(gclwh5_0*npz*x800);
IkReal x951=(gclwh13_0*npy*x800);
IkReal x952=(gclwh0_0*x580*x615);
IkReal x953=(gclwh15_0*x580*x615);
IkReal x954=(gclwh2_0*x576*x615);
IkReal x955=((1.0)*gclwh13_1*x801);
IkReal x956=(x700*x802);
IkReal x957=(gclwh15_1*x604*x637);
IkReal x958=(x735+x733);
IkReal x959=(x773+x771);
IkReal x960=(x757+x758);
IkReal x961=(x797+x798);
IkReal x962=(x755+x754+x756+x848);
IkReal x963=(x743+x740+x741+x822);
IkReal x964=(x777+x778+x873+x883);
IkReal x965=(x786+x785+x904+x901);
IkReal x966=(x726+x808+x807+x806);
IkReal x967=(x734+x816+x817+x815);
IkReal x968=(x775+x869+x868+x867);
IkReal x969=(x769+x863+x862+x861);
IkReal x970=(x759+x850+x851+x849);
IkReal x971=(x794+x916+x915+x914);
IkReal x972=(x790+x793+x792+x789+x913);
IkReal x973=(x782+x783+x780+x781+x889);
IkReal x974=(x751+x750+x749+x836+x837);
IkReal x975=(x746+x744+x745+x830+x833);
IkReal x976=(((x581*x582))+(((0.3786)*x593))+((x580*x722))+((gclwh14_11*x664))+((x586*x677)));
IkReal x977=(x768+x767+x858+x859+x860);
IkReal x978=(x727+x728+x810+x811+x809);
IkReal x979=(x772+x770+x866+x865+x864);
IkReal x980=(x796+x799+x919+x918+x917);
IkReal x981=(x736+x738+x818+x819+x820);
IkReal x982=(x724+x725+x805+x804+x803);
IkReal x983=(x760+x762+x852+x853+x854);
IkReal x984=(x732+x731+x730+x729+x814+x812+x813);
IkReal x985=(x764+x765+x766+x763+x856+x857+x855);
IkReal x986=(x753+x845+x844+x847+x846+x926+x927+x925);
IkReal x987=(x747+x829+x834+x831+x832+x922+x923+x921);
IkReal x988=(x752+x748+x835+x838+x839+x841+x840+x843+x842+x924);
IkReal x989=(x739+x742+x828+x823+x821+x827+x826+x825+x824+x920);
IkReal x990=(x791+x788+x912+x911+x910+x908+x909+x957+x956+x955+x954+x953+x952+x951+x950+x948+x949);
IkReal x991=(x573+x776+x779+x878+x879+x870+x871+x872+x874+x875+x876+x877+x881+x880+x882+x931+x930+x932+x928+x929);
IkReal x992=(x784+x885+x884+x887+x886+x888+x890+x891+x939+x938+x935+x934+x937+x936+x933+x940+x941+x942);
IkReal x993=(x573+x787+x896+x897+x894+x895+x892+x893+x898+x899+x905+x906+x907+x900+x902+x903+x943+x944+x945+x946+x947);
op[38]=((((-0.0039113345835)*x712))+((gclwh6_12*x597))+(((0.8732)*gclwh4_14*x586))+(((0.0039113345835)*x640))+(((-1.0)*x577*x690))+(((-0.8732)*gclwh14_14*x604))+(((0.8732)*gclwh12_14*x581))+((x580*x704))+(((-0.0039113345835)*x617))+(((-1.0)*gclwh8_12*x714))+(((-1.0)*gclwh10_12*x674))+(((-1.0)*x576*x681)));
op[39]=((-0.05940486)+((gclwh4_11*x693))+((x577*x677))+((gclwh12_11*x723))+((gclwh8_11*x676))+(((-0.7572)*x593))+(((-8.0)*gclwh4_11*x586))+(((-1.0)*x580*x624))+(((0.7572)*x606))+(((-8.0)*gclwh12_11*x581))+(((8.0)*gclwh14_11*x604))+((x576*x582))+(((-1.0)*gclwh14_11*x644)));
op[40]=((0.02168232)+x985+(((-1.0)*x976)));
op[41]=((((0.01239915)*x634))+(((-1.0)*gclwh12_2*x638))+(((0.131)*gclwh1_2*x604))+(((0.131)*gclwh12_2*x581))+(((-0.01239915)*x654))+(((-0.0655)*gclwh1_2*x580))+(((-0.01239915)*x588))+((gclwh3_2*x638))+(((0.0655)*gclwh14_2*x580))+(((0.131)*gclwh3_2*x581))+((gclwh14_2*x645))+(((-0.0655)*gclwh3_2*x576))+((gclwh1_2*x645))+(((-0.0655)*gclwh4_2*x577))+(((-1.0)*gclwh4_2*x619))+(((-0.0655)*gclwh12_2*x576))+x977+(((-1.0)*x969))+(((-0.131)*npx*x599))+(((0.131)*gclwh4_2*x586)));
op[42]=((((-1.0)*x982))+(((-3.269)*gclwh13_0*x581))+(((3.269)*gclwh15_0*x604))+(((0.01464286847625)*x643))+(((-0.01464286847625)*x683))+(((-0.30941085)*x594))+(((-1.6345)*gclwh2_0*x576))+(((1.6345)*gclwh5_0*x577))+(((0.30941085)*x653))+((gclwh2_0*x719))+(((-1.6345)*gclwh0_0*x580))+(((3.269)*gclwh0_0*x604))+(((0.30941085)*x641))+(((3.269)*gclwh2_0*x581))+(((-1.6345)*gclwh15_0*x580))+(((-3.269)*gclwh5_0*x586))+((gclwh13_0*x719))+x966+(((1.6345)*gclwh13_0*x576))+(((0.01464286847625)*x610)));
op[43]=((1.31196768)+x984+(((-1.0)*x978)));
op[44]=((0.05940486)+((gclwh13_10*x723))+(((0.7572)*gclwh11_10*rxp2_2))+((x577*x701))+(((-8.0)*gclwh13_10*x581))+((x576*x695))+((gclwh9_10*x676))+(((-8.0)*gclwh5_10*x586))+(((-0.7572)*x668))+((gclwh5_10*x693))+(((-1.0)*x580*x649))+(((-1.0)*gclwh15_10*x644))+(((8.0)*gclwh15_10*x604)));
op[45]=((((-0.0039113345835)*x684))+(((-0.8732)*gclwh13_15*x581))+(((-1.0)*gclwh7_13*x597))+((x577*x592))+(((0.0039113345835)*x663))+(((0.0039113345835)*x665))+((gclwh11_13*x674))+(((-0.8732)*gclwh5_15*x586))+((x576*x672))+(((0.8732)*gclwh15_15*x604))+(((-1.0)*x580*x605))+((gclwh9_13*x714)));
op[46]=((((-0.131)*gclwh13_0*x581))+(((0.0655)*gclwh13_0*x576))+((gclwh13_0*x638))+(((-1.0)*gclwh15_0*x645))+((gclwh5_0*x619))+(((-0.0655)*gclwh2_0*x576))+(((0.131)*gclwh2_0*x581))+(((0.0655)*gclwh5_0*x577))+(((0.131)*gclwh0_0*x604))+(((0.131)*gclwh15_0*x604))+(((-0.131)*gclwh5_0*x586))+(((0.01239915)*x641))+(((-0.0655)*gclwh15_0*x580))+((gclwh2_0*x638))+x982+(((0.01239915)*x653))+(((-1.0)*x966))+(((-0.0655)*gclwh0_0*x580))+(((-0.01239915)*x594))+(((0.00058678977375)*x610)));
op[47]=((0.02168232)+(((-1.0)*x984))+x978);
op[48]=((((-1.0)*x981))+(((1.6345)*gclwh6_12*x581))+(((-1.0)*gclwh6_12*x609))+(((0.81725)*gclwh8_12*x580))+(((-1.0)*gclwh4_8*x595))+(((0.81725)*gclwh10_12*x577))+(((-1.6345)*gclwh10_12*x586))+(((-1.0)*gclwh12_8*x591))+(((-0.81725)*gclwh6_12*x576))+x737+(((-1.0)*x958))+(((-1.6345)*gclwh8_12*x604))+x967+((gclwh8_12*x603))+((gclwh14_8*x671))+((gclwh10_12*x614)));
op[49]=((((-1.0)*x987))+((gclwh6_11*x576))+(((-1.0)*gclwh10_11*x577))+(((-0.12699240901125)*x642))+(((-0.12699240901125)*x718))+(((0.12699240901125)*x584))+x989+x975+(((-1.0)*x963))+(((-1.0)*gclwh8_11*x580)));
op[50]=((0.17125635)+((gclwh6_11*x598))+(((4.0)*gclwh10_11*x586))+(((4.0)*gclwh8_11*x604))+((gclwh4_11*x655))+((x576*x680))+(((-1.0)*gclwh10_11*x682))+(((-1.0)*gclwh14_11*x660))+((gclwh12_11*x628))+(((-1.0)*x580*x694))+(((-1.0)*x577*x636))+(((-1.0)*gclwh8_11*x664))+(((-4.0)*gclwh6_11*x581)));
op[51]=((((0.7845)*gclwh6_2*x576))+(((-1.0)*gclwh8_2*x711))+(((0.160905)*x620))+((gclwh12_14*x689))+(((-1.0)*gclwh10_2*x698))+(((1.569)*gclwh10_2*x586))+(((-0.14850585)*x601))+(((-0.7845)*gclwh8_2*x580))+(((-1.569)*gclwh6_2*x581))+(((0.04132419)*gclwh4_14*rxp2_2))+(((-0.160905)*x686))+(((-0.7845)*gclwh10_2*x577))+((gclwh6_2*x578))+(((0.14850585)*x656))+(((0.160905)*x713))+(((0.14850585)*x707))+(((1.569)*gclwh8_2*x604))+(((-0.04132419)*x616)));
op[52]=((((-1.0)*x981))+(((-0.0655)*gclwh8_12*x604))+(((0.03275)*gclwh10_12*x577))+((gclwh8_12*x679))+(((0.03275)*gclwh8_12*x580))+(((-1.0)*gclwh6_12*x666))+(((0.006199575)*x620))+(((-1.0)*x737))+(((-0.0655)*gclwh10_12*x586))+((gclwh4_8*x688))+x967+x958+(((-1.0)*gclwh14_8*x633))+(((0.0655)*gclwh6_12*x581))+((gclwh10_12*x669))+(((-0.03275)*gclwh6_12*x576)));
op[53]=((((-1.0)*x987))+((gclwh8_11*x580))+((gclwh10_11*x577))+(((-0.00076243651125)*x642))+(((-1.0)*gclwh12_3*x589))+(((0.00076243651125)*x584))+(((-1.0)*gclwh6_11*x576))+x989+x963+(((-1.0)*x975)));
op[54]=((((-1.0)*x986))+(((-0.12699240901125)*x670))+((gclwh9_10*x580))+(((-0.12699240901125)*x716))+((gclwh11_10*x577))+(((0.12699240901125)*x678))+x988+x962+(((-1.0)*gclwh7_10*x576))+(((-1.0)*x974)));
op[55]=((((1.6345)*gclwh7_13*x581))+(((-1.0)*x983))+(((-1.6345)*gclwh11_13*x586))+((gclwh11_13*x614))+(((-1.0)*gclwh7_13*x609))+(((-1.0)*gclwh5_9*x595))+(((0.81725)*gclwh9_13*x580))+x761+((gclwh9_13*x603))+(((0.81725)*gclwh11_13*x577))+x970+((gclwh15_9*x671))+(((-1.0)*x960))+(((-0.81725)*gclwh7_13*x576))+(((-1.0)*gclwh13_9*x591))+(((-1.6345)*gclwh9_13*x604)));
op[56]=((((0.7845)*gclwh7_0*x576))+(((-0.14850585)*x691))+(((-0.160905)*x607))+(((1.569)*gclwh9_0*x604))+(((1.569)*gclwh11_0*x586))+(((0.14850585)*x667))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.04132419)*x625))+(((-1.0)*gclwh11_0*x698))+(((-0.7845)*gclwh11_0*x577))+(((-1.569)*gclwh7_0*x581))+(((0.160905)*x696))+(((-0.160905)*x702))+(((-0.7845)*gclwh9_0*x580))+(((-1.0)*gclwh13_15*x689))+((gclwh7_0*x578))+(((0.14850585)*x657))+(((-0.00702803935125)*x629)));
op[57]=((0.17125635)+((gclwh13_10*x628))+(((-1.0)*gclwh15_10*x660))+(((-1.0)*gclwh9_10*x664))+(((-4.0)*gclwh7_10*x581))+(((4.0)*gclwh11_10*x586))+((x576*x647))+(((4.0)*gclwh9_10*x604))+(((-1.0)*x580*x621))+(((-1.0)*x577*x596))+(((-1.0)*gclwh11_10*x682))+((gclwh5_10*x655))+((gclwh7_10*x598)));
op[58]=((((-1.0)*gclwh13_1*x589))+(((-1.0)*x986))+(((0.00076243651125)*x678))+(((-1.0)*gclwh9_10*x580))+(((-1.0)*gclwh11_10*x577))+(((-0.00076243651125)*x670))+x988+x974+(((-1.0)*x962))+((gclwh7_10*x576)));
op[59]=((((-1.0)*x983))+(((-1.0)*gclwh15_9*x633))+((gclwh11_13*x669))+((gclwh13_9*x661))+(((0.0655)*gclwh7_13*x581))+(((0.006199575)*x607))+(((0.03275)*gclwh11_13*x577))+(((-1.0)*x761))+(((-1.0)*gclwh7_13*x666))+((gclwh9_13*x679))+(((-0.03275)*gclwh7_13*x576))+(((-0.0655)*gclwh9_13*x604))+(((-0.0655)*gclwh11_13*x586))+x970+x960+(((0.03275)*gclwh9_13*x580)));
op[60]=(((gclwh6_12*x591))+((gclwh14_8*x603))+(((-1.6345)*gclwh14_8*x604))+(((-0.81725)*gclwh12_8*x576))+(((-1.0)*gclwh4_8*x614))+(((1.6345)*gclwh12_8*x581))+(((-1.0)*gclwh8_12*x671))+(((-1.0)*gclwh10_12*x595))+(((0.81725)*gclwh14_8*x580))+(((-1.0)*x774))+(((-0.81725)*gclwh4_8*x577))+(((1.6345)*gclwh4_8*x586))+x968+x959+(((-1.0)*x979))+(((-0.007321434238125)*x600)));
op[61]=((0.679811285)+(((-0.66189404)*gclwh4_3*x577))+(((-0.679811285)*gclwh3_3*x576))+(((-1.0)*gclwh12_3*x708))+(((-1.341705325)*gclwh14_3*x604))+((gclwh14_3*x590))+(((-0.679811285)*gclwh1_3*x580))+((gclwh3_3*x708))+((gclwh12_11*x576))+(((-1.0)*x992))+(((1.341705325)*gclwh12_3*x581))+(((0.66189404)*gclwh14_3*x580))+((gclwh4_11*x577))+((gclwh1_3*x590))+(((1.341705325)*gclwh1_3*x604))+(((-1.0)*gclwh14_11*x580))+(((-0.66189404)*gclwh12_3*x576))+x991+x973+(((-0.00600991575645741)*x721))+(((-1.0)*x964))+(((1.341705325)*gclwh4_3*x586))+(((1.341705325)*gclwh3_3*x581)));
op[62]=((0.07735732)+x985+(((-1.0)*x976)));
op[63]=((((0.85)*gclwh12_8*x576))+(((0.7845)*gclwh1_2*x580))+(((0.14850585)*x588))+(((-1.569)*gclwh3_2*x581))+(((-1.569)*gclwh12_2*x581))+(((-0.7845)*gclwh14_2*x580))+(((0.007614829125)*x706))+(((-1.569)*gclwh4_2*x586))+(((-0.007614829125)*x692))+(((0.7845)*gclwh12_2*x576))+(((-1.0)*gclwh12_8*npy*x574))+(((0.007614829125)*x600))+(((-0.85)*gclwh14_8*x580))+(((-1.0)*gclwh3_2*x578))+(((-1.0)*gclwh1_2*x711))+(((-1.569)*gclwh1_2*x604))+(((0.7845)*gclwh4_2*x577))+(((-1.0)*gclwh4_8*npz*x574))+(((1.569)*npx*x599))+(((-0.14850585)*x634))+(((0.7845)*gclwh3_2*x576))+((gclwh4_2*x698))+(((-1.0)*gclwh14_2*x711))+(((0.14850585)*x654))+x977+(((-1.0)*x969))+((x574*x662))+((gclwh12_2*x578))+(((0.85)*gclwh4_8*x577)));
op[64]=((((-0.03275)*gclwh14_8*x580))+(((-1.0)*gclwh10_12*x688))+((gclwh6_12*x661))+((gclwh4_8*x669))+(((-0.0655)*gclwh4_8*x586))+(((0.0655)*gclwh14_8*x604))+(((-1.0)*gclwh8_12*x633))+(((0.03275)*gclwh4_8*x577))+(((-1.0)*x774))+(((-0.0655)*gclwh12_8*x581))+(((-1.0)*gclwh14_8*x679))+x979+x959+(((0.000293394886875)*x600))+(((-1.0)*x968))+(((0.03275)*gclwh12_8*x576)));
op[65]=((-0.012986285)+(((-0.008055325)*gclwh14_3*x604))+(((0.008055325)*gclwh3_3*x581))+((gclwh14_11*x580))+(((-0.00493096)*gclwh14_3*x580))+(((0.00493096)*gclwh4_3*x577))+(((0.008055325)*gclwh4_3*x586))+(((-1.0)*gclwh12_3*x658))+(((-1.0)*gclwh4_11*x577))+(((3.60823078949063e-5)*x639))+(((-0.012986285)*gclwh3_3*x576))+(((0.00493096)*gclwh12_3*x576))+(((-1.0)*x992))+((gclwh14_3*x697))+(((-0.012986285)*gclwh1_3*x580))+(((-1.0)*gclwh12_11*x576))+(((-1.0)*gclwh4_3*x583))+x991+x964+(((0.008055325)*gclwh12_3*x581))+((gclwh3_3*x658))+(((-1.0)*x973))+(((0.008055325)*gclwh1_3*x604)));
op[66]=((-0.679811285)+(((-1.341705325)*gclwh13_1*x581))+(((-1.0)*gclwh15_1*x590))+(((0.00600991575645741)*x700))+((gclwh5_10*x577))+(((-0.679811285)*gclwh2_1*x576))+((gclwh13_10*x576))+(((1.341705325)*gclwh0_1*x604))+(((1.341705325)*gclwh2_1*x581))+(((0.66189404)*gclwh5_1*x577))+(((0.66189404)*gclwh13_1*x576))+(((-0.679811285)*gclwh0_1*x580))+(((0.00600991575645741)*x648))+(((-1.0)*x990))+(((1.341705325)*gclwh15_1*x604))+(((-0.66189404)*gclwh15_1*x580))+(((-1.0)*gclwh15_10*x580))+((gclwh13_1*x708))+((gclwh0_1*x590))+x993+x972+(((-1.0)*x965))+(((-1.341705325)*gclwh5_1*x586)));
op[67]=(((x575*x613))+((gclwh13_9*x609))+(((-1.0)*gclwh15_9*x603))+(((-1.0)*x579*x613))+((gclwh9_13*x671))+(((-0.81725)*gclwh15_9*x580))+(((-1.0)*gclwh7_13*x591))+x795+((gclwh5_9*x614))+(((0.81725)*gclwh13_9*x576))+((gclwh11_13*x595))+x980+(((-1.0)*x961))+(((-1.6345)*gclwh13_9*x581))+(((-1.0)*x971))+(((0.81725)*gclwh5_9*x577)));
op[68]=((((-0.14850585)*x653))+(((-0.14850585)*x641))+(((-0.7845)*gclwh13_0*x576))+(((0.85)*gclwh5_9*x577))+(((0.00702803935125)*x683))+(((0.007614829125)*x675))+(((-1.569)*gclwh2_0*x581))+(((-1.0)*gclwh2_0*x578))+(((0.7845)*gclwh15_0*x580))+((x574*x575))+(((-0.00702803935125)*x643))+(((0.7845)*gclwh0_0*x580))+(((0.85)*gclwh13_9*x576))+(((-0.00702803935125)*x610))+(((-1.0)*x574*x579))+(((1.569)*gclwh5_0*x586))+(((-0.007614829125)*x659))+(((0.14850585)*x594))+(((-0.7845)*gclwh5_0*x577))+(((0.7845)*gclwh2_0*x576))+(((-0.85)*gclwh15_9*x580))+(((1.569)*gclwh13_0*x581))+(((-1.569)*gclwh0_0*x604))+(((-1.0)*gclwh13_0*x578))+(((-1.569)*gclwh15_0*x604))+x982+(((-1.0)*x966))+(((-1.0)*gclwh13_9*npy*x574))+(((0.007614829125)*x630)));
op[69]=((0.07735732)+(((-1.0)*x984))+x978);
op[70]=((0.012986285)+((gclwh15_10*x580))+(((0.008055325)*gclwh15_1*x604))+(((-0.012986285)*gclwh2_1*x576))+(((-1.0)*gclwh13_10*x576))+(((-0.00493096)*gclwh5_1*x577))+(((0.00493096)*gclwh15_1*x580))+(((-0.008055325)*gclwh13_1*x581))+(((-3.60823078949063e-5)*x631))+((gclwh13_1*x658))+(((-1.0)*gclwh5_10*x577))+((gclwh0_1*x697))+(((-1.0)*x990))+(((-0.012986285)*gclwh0_1*x580))+(((-0.008055325)*gclwh5_1*x586))+((gclwh5_1*x583))+(((0.008055325)*gclwh2_1*x581))+(((0.008055325)*gclwh0_1*x604))+x993+x965+(((-1.0)*x972))+(((-0.00493096)*gclwh13_1*x576))+(((3.60823078949063e-5)*x648)));
op[71]=((((-1.0)*x980))+(((-0.03275)*gclwh5_9*x577))+((x579*x687))+(((-1.0)*gclwh7_13*x661))+((gclwh11_13*x688))+((gclwh9_13*x633))+(((0.03275)*gclwh15_9*x580))+x795+(((-1.0)*gclwh5_9*x669))+(((-1.0)*x575*x687))+x971+(((-1.0)*x961))+(((0.000293394886875)*x659))+(((0.0655)*gclwh13_9*x581))+(((-0.03275)*gclwh13_9*x576))+(((-0.000293394886875)*x630)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x994=htj1*htj1;
CheckValue<IkReal> x995=IKPowWithIntegerCheck(((1.0)+x994),-1);
if(!x995.valid){
continue;
}
cj1array[numsolutions]=((x995.value)*(((1.0)+(((-1.0)*x994)))));
CheckValue<IkReal> x996=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x996.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x996.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x997=htj2*htj2;
CheckValue<IkReal> x998=IKPowWithIntegerCheck(((1.0)+x997),-1);
if(!x998.valid){
continue;
}
cj2array[numsolutions]=((x998.value)*(((1.0)+(((-1.0)*x997)))));
CheckValue<IkReal> x999=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x999.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x999.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x1000=htj3*htj3;
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(((1.0)+x1000),-1);
if(!x1001.valid){
continue;
}
cj3array[numsolutions]=((x1001.value)*(((1.0)+(((-1.0)*x1000)))));
CheckValue<IkReal> x1002=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x1002.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x1002.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1003=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1003);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1003);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1004=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1004);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1004);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(r22,-1);
if(!x1005.valid){
continue;
}
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(sj3,-1);
if(!x1006.valid){
continue;
}
sj4array[0]=((x1005.value)*(x1006.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1007=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1007);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1007);
IkReal x1008=((16.0)*sj4);
IkReal x1009=(cj1*cj2);
IkReal x1010=((4.0)*sj3);
IkReal x1011=((8.0)*sj4);
IkReal x1012=((4.0)*cj4);
IkReal x1013=(sj1*sj2);
IkReal x1014=((4.0)*sj4);
IkReal x1015=(cj3*r02);
IkReal x1016=((16.0)*sj3);
IkReal x1017=((8.0)*sj3);
IkReal x1018=((12.0)*cj4);
IkReal x1019=((12.0)*sj4);
IkReal x1020=(cj3*r12);
IkReal x1021=(r11*x1010);
IkReal x1022=(r01*x1010);
IkReal x1023=(r01*x1013);
IkReal x1024=(cj3*cj4*r01);
IkReal x1025=(cj3*cj4*r11);
IkReal x1026=(cj3*r10*x1012);
IkReal x1027=(x1019*x1020);
IkReal x1028=(cj3*r00*x1012);
IkReal x1029=(x1015*x1019);
IkReal x1030=(r00*x1013*x1014);
IkReal x1031=(r02*x1013*x1018);
IkReal x1032=(r00*x1009*x1014);
IkReal x1033=(r02*x1009*x1018);
IkReal x1034=(r10*x1013*x1014);
IkReal x1035=(r12*x1009*x1018);
IkReal x1036=(r12*x1013*x1018);
IkReal x1037=(r10*x1009*x1014);
IkReal x1038=(x1032+x1021);
IkReal x1039=(x1034+x1022);
IkReal x1040=(x1030+x1026);
IkReal x1041=(x1033+x1027);
IkReal x1042=(x1037+x1028);
IkReal x1043=(x1036+x1029);
j5eval[0]=((((0.5)*(IKabs((x1039+x1035+(((-1.0)*x1042))+(((-1.0)*x1043)))))))+(((0.5)*(IKabs((x1038+x1031+(((-1.0)*x1040))+(((-1.0)*x1041)))))))+(((0.5)*(IKabs(((((-1.0)*x1038))+x1040+x1031+(((-1.0)*x1041)))))))+(IKabs(((((-8.0)*x1025))+((r01*x1009*x1011))+(((-1.0)*r10*x1017))+(((-1.0)*x1011*x1023)))))+(IKabs(((((-1.0)*r11*x1009*x1011))+((r11*x1011*x1013))+(((-8.0)*x1024))+(((-1.0)*r00*x1017)))))+(((0.5)*(IKabs(((((-16.0)*x1025))+(((-1.0)*x1008*x1023))+(((-1.0)*r10*x1016))+((r01*x1008*x1009)))))))+(((0.5)*(IKabs((x1038+(((-1.0)*r02*x1009*x1012))+((r02*x1012*x1013))+(((-1.0)*x1014*x1020))+(((-1.0)*x1040)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x1008*x1009))+(((-16.0)*x1024))+((r11*x1008*x1013))+(((-1.0)*r00*x1016)))))))+(((0.5)*(IKabs(((((-1.0)*x1039))+x1042+x1035+(((-1.0)*x1043)))))))+(((0.5)*(IKabs((x1039+(((-1.0)*x1014*x1015))+(((-1.0)*r12*x1012*x1013))+(((-1.0)*x1042))+((r12*x1009*x1012))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1044=(r10*sj3);
IkReal x1045=(r01*sj4);
IkReal x1046=(cj1*cj2);
IkReal x1047=(cj3*cj4);
IkReal x1048=(sj1*sj2);
IkReal x1049=(cj4*r02);
IkReal x1050=((4.0)*r11*sj3);
IkReal x1051=(cj3*r12*sj4);
IkReal x1052=((4.0)*r00*sj4);
IkReal x1053=((4.0)*r10*x1047);
IkReal x1054=((12.0)*x1051);
IkReal x1055=((4.0)*x1051);
IkReal x1056=(x1046*x1052);
IkReal x1057=(x1048*x1052);
IkReal x1058=((12.0)*x1048*x1049);
IkReal x1059=((12.0)*x1046*x1049);
IkReal x1060=((4.0)*x1048*x1049);
IkReal x1061=((4.0)*x1046*x1049);
IkReal x1062=(x1050+x1056);
IkReal x1063=(x1053+x1057);
IkReal x1064=(x1055+x1061);
IkReal x1065=(x1054+x1059);
IkReal x1066=((((-8.0)*x1044))+(((-8.0)*x1045*x1048))+(((-8.0)*r11*x1047))+(((8.0)*x1045*x1046)));
op[0]=(x1060+x1062+(((-1.0)*x1064))+(((-1.0)*x1063)));
op[1]=x1066;
op[2]=(x1058+x1062+(((-1.0)*x1065))+(((-1.0)*x1063)));
op[3]=((((-16.0)*x1045*x1048))+(((16.0)*x1045*x1046))+(((-16.0)*x1044))+(((-16.0)*r11*x1047)));
op[4]=(x1058+x1063+(((-1.0)*x1065))+(((-1.0)*x1062)));
op[5]=x1066;
op[6]=(x1060+x1063+(((-1.0)*x1064))+(((-1.0)*x1062)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1067=(cj1*cj2);
IkReal x1068=((4.0)*cj4);
IkReal x1069=(sj1*sj2);
IkReal x1070=((4.0)*sj4);
IkReal x1071=(r00*sj3);
IkReal x1072=(cj3*r02);
IkReal x1073=((4.0)*r01*sj3);
IkReal x1074=((16.0)*r11*sj4);
IkReal x1075=(cj3*cj4*r01);
IkReal x1076=((12.0)*cj4*r12);
IkReal x1077=((8.0)*r11*sj4);
IkReal x1078=(cj3*r00*x1068);
IkReal x1079=((12.0)*sj4*x1072);
IkReal x1080=(x1070*x1072);
IkReal x1081=(r10*x1067*x1070);
IkReal x1082=(r10*x1069*x1070);
IkReal x1083=(x1067*x1076);
IkReal x1084=(x1069*x1076);
IkReal x1085=(r12*x1067*x1068);
IkReal x1086=(r12*x1068*x1069);
IkReal x1087=(x1073+x1082);
IkReal x1088=(x1078+x1081);
IkReal x1089=(x1086+x1080);
IkReal x1090=(x1079+x1084);
IkReal x1091=((((-8.0)*x1071))+(((-8.0)*x1075))+((x1069*x1077))+(((-1.0)*x1067*x1077)));
j5evalpoly[0]=(((htj5*x1091))+x1085+x1088+((x1091*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1087+x1083+(((-1.0)*x1090))+(((-1.0)*x1088))))))+(((-1.0)*x1087))+(((-1.0)*x1089))+(((htj5*htj5)*((x1083+x1088+(((-1.0)*x1090))+(((-1.0)*x1087))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1087+x1085+(((-1.0)*x1088))+(((-1.0)*x1089))))))+(((htj5*htj5*htj5)*((((x1069*x1074))+(((-1.0)*x1067*x1074))+(((-16.0)*x1071))+(((-16.0)*x1075)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1092=(cj5*sj4);
IkReal x1093=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1093))+(((-1.0)*r00*x1092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1092))+(((-1.0)*r11*x1093))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1093))+(((-1.0)*r00*x1092))))+IKsqr((((r10*x1092))+(((-1.0)*r11*x1093))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1093))+(((-1.0)*r00*x1092))), (((r10*x1092))+(((-1.0)*r11*x1093))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1094=IKcos(j0);
IkReal x1095=IKsin(j0);
IkReal x1096=(r02*sj4);
IkReal x1097=((1.0)*sj3);
IkReal x1098=(r12*sj4);
IkReal x1099=(cj3*cj4);
IkReal x1100=((1.0)*cj5);
IkReal x1101=(r11*sj5);
IkReal x1102=((1.0)*cj1);
IkReal x1103=((0.39225)*sj1);
IkReal x1104=(cj5*r01);
IkReal x1105=(r01*sj5);
IkReal x1106=(r00*sj5);
IkReal x1107=((1.0)*sj1);
IkReal x1108=((0.39225)*cj2);
IkReal x1109=(cj5*r11);
IkReal x1110=(r10*sj5);
IkReal x1111=((1.0)*cj4);
IkReal x1112=(sj2*x1094);
IkReal x1113=(sj2*x1095);
IkReal x1114=(cj4*cj5*sj3);
IkReal x1115=(cj1*x1094);
IkReal x1116=(cj2*x1094);
IkReal x1117=(cj1*x1095);
IkReal x1118=(cj2*x1095);
evalcond[0]=((((-1.0)*r12*x1111))+x1094+((sj4*x1101))+(((-1.0)*r10*sj4*x1100)));
evalcond[1]=((((-1.0)*r00*sj4*x1100))+(((-1.0)*x1095))+((sj4*x1105))+(((-1.0)*r02*x1111)));
evalcond[2]=((((0.425)*x1115))+(((-0.09465)*x1106))+(((-0.09465)*x1104))+(((-1.0)*x1103*x1112))+(((-0.10915)*x1095))+((x1108*x1115))+(((-1.0)*px)));
evalcond[3]=((((0.425)*x1117))+(((-0.09465)*x1109))+(((-1.0)*x1103*x1113))+((x1108*x1117))+(((0.10915)*x1094))+(((-1.0)*py))+(((-0.09465)*x1110)));
evalcond[4]=(((sj3*x1104))+((sj3*x1106))+((x1099*x1105))+((sj1*x1112))+(((-1.0)*r00*x1099*x1100))+(((-1.0)*x1102*x1116))+((cj3*x1096)));
evalcond[5]=(((sj3*x1110))+((sj3*x1109))+(((-1.0)*r10*x1099*x1100))+((x1099*x1101))+((sj1*x1113))+(((-1.0)*x1102*x1118))+((cj3*x1098)));
evalcond[6]=((((-1.0)*x1096*x1097))+(((-1.0)*cj4*x1097*x1105))+((r00*x1114))+(((-1.0)*x1107*x1116))+((cj3*x1106))+((cj3*x1104))+(((-1.0)*x1102*x1112)));
evalcond[7]=((((-1.0)*x1097*x1098))+(((-1.0)*cj4*x1097*x1101))+(((-1.0)*x1107*x1118))+((cj3*x1109))+(((-1.0)*x1102*x1113))+((cj3*x1110))+((r10*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1119=IKPowWithIntegerCheck(cj3,-1);
if(!x1119.valid){
continue;
}
CheckValue<IkReal> x1120=IKPowWithIntegerCheck(r22,-1);
if(!x1120.valid){
continue;
}
sj4array[0]=((-1.0)*(x1119.value)*(x1120.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1121=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1121);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1121);
IkReal x1122=((16.0)*sj4);
IkReal x1123=(cj1*cj2);
IkReal x1124=((4.0)*sj3);
IkReal x1125=((8.0)*sj4);
IkReal x1126=((4.0)*cj4);
IkReal x1127=(sj1*sj2);
IkReal x1128=((4.0)*sj4);
IkReal x1129=(cj3*r02);
IkReal x1130=((16.0)*sj3);
IkReal x1131=((8.0)*sj3);
IkReal x1132=((12.0)*cj4);
IkReal x1133=((12.0)*sj4);
IkReal x1134=(cj3*r12);
IkReal x1135=(r11*x1124);
IkReal x1136=(r01*x1124);
IkReal x1137=(r01*x1127);
IkReal x1138=(cj3*cj4*r01);
IkReal x1139=(cj3*cj4*r11);
IkReal x1140=(cj3*r10*x1126);
IkReal x1141=(x1133*x1134);
IkReal x1142=(cj3*r00*x1126);
IkReal x1143=(x1129*x1133);
IkReal x1144=(r00*x1127*x1128);
IkReal x1145=(r02*x1127*x1132);
IkReal x1146=(r00*x1123*x1128);
IkReal x1147=(r02*x1123*x1132);
IkReal x1148=(r10*x1127*x1128);
IkReal x1149=(r12*x1123*x1132);
IkReal x1150=(r12*x1127*x1132);
IkReal x1151=(r10*x1123*x1128);
IkReal x1152=(x1146+x1135);
IkReal x1153=(x1148+x1136);
IkReal x1154=(x1140+x1144);
IkReal x1155=(x1141+x1147);
IkReal x1156=(x1142+x1151);
IkReal x1157=(x1143+x1150);
j5eval[0]=((((0.5)*(IKabs((x1149+x1153+(((-1.0)*x1156))+(((-1.0)*x1157)))))))+(((0.5)*(IKabs(((((-16.0)*x1138))+((r11*x1122*x1127))+(((-1.0)*r11*x1122*x1123))+(((-1.0)*r00*x1130)))))))+(((0.5)*(IKabs(((((-16.0)*x1139))+(((-1.0)*x1122*x1137))+(((-1.0)*r10*x1130))+((r01*x1122*x1123)))))))+(((0.5)*(IKabs((x1153+(((-1.0)*x1156))+((r12*x1123*x1126))+(((-1.0)*x1128*x1129))+(((-1.0)*r12*x1126*x1127)))))))+(((0.5)*(IKabs((x1145+x1152+(((-1.0)*x1154))+(((-1.0)*x1155)))))))+(IKabs(((((-8.0)*x1138))+(((-1.0)*r11*x1123*x1125))+((r11*x1125*x1127))+(((-1.0)*r00*x1131)))))+(((0.5)*(IKabs((x1152+((r02*x1126*x1127))+(((-1.0)*x1154))+(((-1.0)*r02*x1123*x1126))+(((-1.0)*x1128*x1134)))))))+(((0.5)*(IKabs((x1145+x1154+(((-1.0)*x1155))+(((-1.0)*x1152)))))))+(IKabs(((((-8.0)*x1139))+(((-1.0)*r10*x1131))+((r01*x1123*x1125))+(((-1.0)*x1125*x1137)))))+(((0.5)*(IKabs((x1149+x1156+(((-1.0)*x1157))+(((-1.0)*x1153))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1158=(r10*sj3);
IkReal x1159=(r01*sj4);
IkReal x1160=(cj1*cj2);
IkReal x1161=(cj3*cj4);
IkReal x1162=(sj1*sj2);
IkReal x1163=(cj4*r02);
IkReal x1164=((4.0)*r11*sj3);
IkReal x1165=(cj3*r12*sj4);
IkReal x1166=((4.0)*r00*sj4);
IkReal x1167=((4.0)*r10*x1161);
IkReal x1168=((12.0)*x1165);
IkReal x1169=((4.0)*x1165);
IkReal x1170=(x1160*x1166);
IkReal x1171=(x1162*x1166);
IkReal x1172=((12.0)*x1162*x1163);
IkReal x1173=((12.0)*x1160*x1163);
IkReal x1174=((4.0)*x1162*x1163);
IkReal x1175=((4.0)*x1160*x1163);
IkReal x1176=(x1164+x1170);
IkReal x1177=(x1167+x1171);
IkReal x1178=(x1169+x1175);
IkReal x1179=(x1168+x1173);
IkReal x1180=((((8.0)*x1159*x1160))+(((-8.0)*r11*x1161))+(((-8.0)*x1159*x1162))+(((-8.0)*x1158)));
op[0]=(x1176+x1174+(((-1.0)*x1177))+(((-1.0)*x1178)));
op[1]=x1180;
op[2]=(x1176+x1172+(((-1.0)*x1177))+(((-1.0)*x1179)));
op[3]=((((-16.0)*x1159*x1162))+(((-16.0)*r11*x1161))+(((16.0)*x1159*x1160))+(((-16.0)*x1158)));
op[4]=(x1177+x1172+(((-1.0)*x1176))+(((-1.0)*x1179)));
op[5]=x1180;
op[6]=(x1177+x1174+(((-1.0)*x1176))+(((-1.0)*x1178)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1181=(cj1*cj2);
IkReal x1182=((4.0)*cj4);
IkReal x1183=(sj1*sj2);
IkReal x1184=((4.0)*sj4);
IkReal x1185=(r00*sj3);
IkReal x1186=(cj3*r02);
IkReal x1187=((4.0)*r01*sj3);
IkReal x1188=((16.0)*r11*sj4);
IkReal x1189=(cj3*cj4*r01);
IkReal x1190=((12.0)*cj4*r12);
IkReal x1191=((8.0)*r11*sj4);
IkReal x1192=(cj3*r00*x1182);
IkReal x1193=((12.0)*sj4*x1186);
IkReal x1194=(x1184*x1186);
IkReal x1195=(r10*x1181*x1184);
IkReal x1196=(r10*x1183*x1184);
IkReal x1197=(x1181*x1190);
IkReal x1198=(x1183*x1190);
IkReal x1199=(r12*x1181*x1182);
IkReal x1200=(r12*x1182*x1183);
IkReal x1201=(x1187+x1196);
IkReal x1202=(x1192+x1195);
IkReal x1203=(x1194+x1200);
IkReal x1204=(x1198+x1193);
IkReal x1205=((((-1.0)*x1181*x1191))+((x1183*x1191))+(((-8.0)*x1185))+(((-8.0)*x1189)));
j5evalpoly[0]=(x1199+x1202+(((htj5*htj5)*((x1197+x1202+(((-1.0)*x1201))+(((-1.0)*x1204))))))+((htj5*x1205))+(((htj5*htj5*htj5*htj5)*((x1197+x1201+(((-1.0)*x1204))+(((-1.0)*x1202))))))+((x1205*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-1.0)*x1181*x1188))+(((-16.0)*x1189))+(((-16.0)*x1185))+((x1183*x1188))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1199+x1201+(((-1.0)*x1202))+(((-1.0)*x1203))))))+(((-1.0)*x1201))+(((-1.0)*x1203)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1206=(cj5*sj4);
IkReal x1207=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1206))+((r01*x1207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1206))+(((-1.0)*r11*x1207))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1206))+((r01*x1207))))+IKsqr((((r10*x1206))+(((-1.0)*r11*x1207))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1206))+((r01*x1207))), (((r10*x1206))+(((-1.0)*r11*x1207))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1208=IKcos(j0);
IkReal x1209=IKsin(j0);
IkReal x1210=(r02*sj4);
IkReal x1211=((1.0)*sj3);
IkReal x1212=(r12*sj4);
IkReal x1213=(cj3*cj4);
IkReal x1214=((1.0)*cj5);
IkReal x1215=(r11*sj5);
IkReal x1216=((1.0)*cj1);
IkReal x1217=((0.39225)*sj1);
IkReal x1218=(cj5*r01);
IkReal x1219=(r01*sj5);
IkReal x1220=(r00*sj5);
IkReal x1221=((1.0)*sj1);
IkReal x1222=((0.39225)*cj2);
IkReal x1223=(cj5*r11);
IkReal x1224=(r10*sj5);
IkReal x1225=((1.0)*cj4);
IkReal x1226=(sj2*x1208);
IkReal x1227=(sj2*x1209);
IkReal x1228=(cj4*cj5*sj3);
IkReal x1229=(cj1*x1208);
IkReal x1230=(cj2*x1208);
IkReal x1231=(cj1*x1209);
IkReal x1232=(cj2*x1209);
evalcond[0]=(x1208+((sj4*x1215))+(((-1.0)*r12*x1225))+(((-1.0)*r10*sj4*x1214)));
evalcond[1]=(((sj4*x1219))+(((-1.0)*x1209))+(((-1.0)*r00*sj4*x1214))+(((-1.0)*r02*x1225)));
evalcond[2]=((((-0.09465)*x1218))+(((-0.10915)*x1209))+(((-1.0)*px))+(((-0.09465)*x1220))+(((0.425)*x1229))+(((-1.0)*x1217*x1226))+((x1222*x1229)));
evalcond[3]=((((0.10915)*x1208))+(((-1.0)*py))+(((-0.09465)*x1224))+(((-0.09465)*x1223))+((x1222*x1231))+(((0.425)*x1231))+(((-1.0)*x1217*x1227)));
evalcond[4]=(((sj1*x1226))+((x1213*x1219))+((sj3*x1220))+(((-1.0)*r00*x1213*x1214))+((sj3*x1218))+((cj3*x1210))+(((-1.0)*x1216*x1230)));
evalcond[5]=(((sj1*x1227))+(((-1.0)*r10*x1213*x1214))+((x1213*x1215))+((sj3*x1223))+((sj3*x1224))+((cj3*x1212))+(((-1.0)*x1216*x1232)));
evalcond[6]=(((cj3*x1220))+((r00*x1228))+(((-1.0)*cj4*x1211*x1219))+(((-1.0)*x1221*x1230))+(((-1.0)*x1210*x1211))+((cj3*x1218))+(((-1.0)*x1216*x1226)));
evalcond[7]=(((cj3*x1224))+((cj3*x1223))+(((-1.0)*cj4*x1211*x1215))+(((-1.0)*x1221*x1232))+((r10*x1228))+(((-1.0)*x1211*x1212))+(((-1.0)*x1216*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1233=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1233);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1233);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1234=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1234);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1234);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1235=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1235);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1235);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1236=IKPowWithIntegerCheck(r22,-1);
if(!x1236.valid){
continue;
}
sj4array[0]=((-1.0)*(x1236.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1237=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1237);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1237);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1239 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1239.valid){
continue;
}
IkReal x1238=x1239.value;
j5array[0]=((-1.0)*x1238);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1238)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1240=(cj5*sj4);
IkReal x1241=(sj4*sj5);
if( IKabs((((r01*x1241))+(((-1.0)*r00*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1241))+((r10*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1241))+(((-1.0)*r00*x1240))))+IKsqr(((((-1.0)*r11*x1241))+((r10*x1240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1241))+(((-1.0)*r00*x1240))), ((((-1.0)*r11*x1241))+((r10*x1240))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1242=IKcos(j0);
IkReal x1243=IKsin(j0);
IkReal x1244=(cj5*r01);
IkReal x1245=(sj4*sj5);
IkReal x1246=(cj5*r11);
IkReal x1247=((0.425)*cj1);
IkReal x1248=(r00*sj5);
IkReal x1249=(r10*sj5);
IkReal x1250=((1.0)*cj1*sj2);
IkReal x1251=((1.0)*cj2*sj1);
IkReal x1252=((1.0)*cj5*sj4);
evalcond[0]=(x1242+((r11*x1245))+(((-1.0)*r10*x1252)));
evalcond[1]=((((-1.0)*x1243))+(((-1.0)*r00*x1252))+((r01*x1245)));
evalcond[2]=((((-1.0)*x1242*x1251))+(((-1.0)*x1242*x1250))+x1244+x1248);
evalcond[3]=(x1246+x1249+(((-1.0)*x1243*x1251))+(((-1.0)*x1243*x1250)));
evalcond[4]=((((-1.0)*px))+((x1242*x1247))+(((-0.10915)*x1243))+(((-0.09465)*x1244))+(((-0.09465)*x1248)));
evalcond[5]=((((-1.0)*py))+(((-0.09465)*x1246))+(((-0.09465)*x1249))+((x1243*x1247))+(((0.10915)*x1242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1253=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1253);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1253);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1254=IKPowWithIntegerCheck(r22,-1);
if(!x1254.valid){
continue;
}
sj4array[0]=((x1254.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1255=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1255);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1255);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
IkReal x1256=x1257.value;
j5array[0]=((-1.0)*x1256);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1256)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1258=(cj5*sj4);
IkReal x1259=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1258))+((r01*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1258))+(((-1.0)*r11*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1258))+((r01*x1259))))+IKsqr((((r10*x1258))+(((-1.0)*r11*x1259))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1258))+((r01*x1259))), (((r10*x1258))+(((-1.0)*r11*x1259))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1260=IKcos(j0);
IkReal x1261=IKsin(j0);
IkReal x1262=(sj4*sj5);
IkReal x1263=(cj5*r11);
IkReal x1264=((1.0)*sj5);
IkReal x1265=((0.425)*cj1);
IkReal x1266=((0.09465)*sj5);
IkReal x1267=((1.0)*cj5);
IkReal x1268=((1.0)*cj1*sj2);
IkReal x1269=((1.0)*cj2*sj1);
evalcond[0]=(((r11*x1262))+x1260+(((-1.0)*r10*sj4*x1267)));
evalcond[1]=((((-1.0)*r00*sj4*x1267))+(((-1.0)*x1261))+((r01*x1262)));
evalcond[2]=((((-0.10915)*x1261))+(((-0.09465)*cj5*r01))+(((-1.0)*r00*x1266))+(((-1.0)*px))+((x1260*x1265)));
evalcond[3]=((((-1.0)*r10*x1266))+((x1261*x1265))+(((-0.09465)*x1263))+(((0.10915)*x1260))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x1260*x1268))+(((-1.0)*x1260*x1269))+(((-1.0)*r00*x1264))+(((-1.0)*r01*x1267)));
evalcond[5]=((((-1.0)*r10*x1264))+(((-1.0)*x1261*x1269))+(((-1.0)*x1261*x1268))+(((-1.0)*x1263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1270=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1270);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1270);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(r22,-1);
if(!x1271.valid){
continue;
}
sj4array[0]=((x1271.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1272=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1272);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1272);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1274 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1274.valid){
continue;
}
IkReal x1273=x1274.value;
j5array[0]=((-1.0)*x1273);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1273)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1275=(cj5*sj4);
IkReal x1276=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1275))+((r01*x1276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1275))+(((-1.0)*r11*x1276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1275))+((r01*x1276))))+IKsqr((((r10*x1275))+(((-1.0)*r11*x1276))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1275))+((r01*x1276))), (((r10*x1275))+(((-1.0)*r11*x1276))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1277=IKcos(j0);
IkReal x1278=IKsin(j0);
IkReal x1279=(cj5*r01);
IkReal x1280=(sj4*sj5);
IkReal x1281=(r00*sj5);
IkReal x1282=(sj1*sj2);
IkReal x1283=(cj5*r11);
IkReal x1284=((0.39225)*cj2);
IkReal x1285=(r10*sj5);
IkReal x1286=((0.39225)*x1282);
IkReal x1287=(cj1*x1277);
IkReal x1288=((1.0)*x1278);
IkReal x1289=((1.0)*cj5*sj4);
IkReal x1290=(cj1*x1278);
evalcond[0]=(x1277+((r11*x1280))+(((-1.0)*r10*x1289)));
evalcond[1]=(((r01*x1280))+(((-1.0)*r00*x1289))+(((-1.0)*x1288)));
evalcond[2]=(x1279+x1281+(((-1.0)*cj2*x1287))+((x1277*x1282)));
evalcond[3]=(x1285+x1283+((x1278*x1282))+(((-1.0)*cj1*cj2*x1288)));
evalcond[4]=((((0.425)*x1287))+(((-0.09465)*x1279))+(((-0.10915)*x1278))+((x1284*x1287))+(((-0.09465)*x1281))+(((-1.0)*x1277*x1286))+(((-1.0)*px)));
evalcond[5]=((((0.10915)*x1277))+(((-0.09465)*x1285))+(((-0.09465)*x1283))+(((-1.0)*py))+(((-1.0)*x1278*x1286))+(((0.425)*x1290))+((x1284*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1291=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1291);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1291);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(r22,-1);
if(!x1292.valid){
continue;
}
sj4array[0]=((-1.0)*(x1292.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1293=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1293);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1293);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1295 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1295.valid){
continue;
}
IkReal x1294=x1295.value;
j5array[0]=((-1.0)*x1294);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1294)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1296=(cj5*sj4);
IkReal x1297=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1296))+((r01*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1296))+(((-1.0)*r11*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1296))+((r01*x1297))))+IKsqr((((r10*x1296))+(((-1.0)*r11*x1297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1296))+((r01*x1297))), (((r10*x1296))+(((-1.0)*r11*x1297))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1298=IKcos(j0);
IkReal x1299=IKsin(j0);
IkReal x1300=(sj4*sj5);
IkReal x1301=(cj5*r11);
IkReal x1302=(cj5*r01);
IkReal x1303=((1.0)*sj5);
IkReal x1304=((0.09465)*sj5);
IkReal x1305=(sj1*sj2);
IkReal x1306=((0.39225)*cj2);
IkReal x1307=((0.39225)*x1305);
IkReal x1308=((1.0)*x1299);
IkReal x1309=(cj1*x1298);
IkReal x1310=((1.0)*cj5*sj4);
IkReal x1311=(cj1*x1299);
evalcond[0]=(x1298+((r11*x1300))+(((-1.0)*r10*x1310)));
evalcond[1]=((((-1.0)*r00*x1310))+(((-1.0)*x1308))+((r01*x1300)));
evalcond[2]=((((-1.0)*cj2*x1309))+(((-1.0)*r00*x1303))+(((-1.0)*x1302))+((x1298*x1305)));
evalcond[3]=(((x1299*x1305))+(((-1.0)*x1301))+(((-1.0)*cj1*cj2*x1308))+(((-1.0)*r10*x1303)));
evalcond[4]=((((0.425)*x1309))+((x1306*x1309))+(((-1.0)*r00*x1304))+(((-1.0)*px))+(((-0.10915)*x1299))+(((-1.0)*x1298*x1307))+(((-0.09465)*x1302)));
evalcond[5]=((((0.425)*x1311))+(((0.10915)*x1298))+(((-1.0)*x1299*x1307))+((x1306*x1311))+(((-1.0)*py))+(((-1.0)*r10*x1304))+(((-0.09465)*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(r22,-1);
if(!x1312.valid){
continue;
}
CheckValue<IkReal> x1313=IKPowWithIntegerCheck(sj3,-1);
if(!x1313.valid){
continue;
}
sj4array[0]=((x1312.value)*(x1313.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1314=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1314);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1314);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1315=((4.0)*r01);
IkReal x1316=((16.0)*r00);
IkReal x1317=(cj3*sj2);
IkReal x1318=((8.0)*r00);
IkReal x1319=(cj2*cj3);
IkReal x1320=(cj4*r01);
IkReal x1321=((16.0)*cj1);
IkReal x1322=((8.0)*sj1);
IkReal x1323=((16.0)*sj1);
IkReal x1324=((8.0)*cj1);
IkReal x1325=(sj2*sj3);
IkReal x1326=(cj2*sj3);
IkReal x1327=(sj1*x1326);
IkReal x1328=((4.0)*cj4*r00);
IkReal x1329=(((cj1*x1315*x1325))+((sj1*x1325*x1328))+((sj1*x1315*x1317))+((x1315*x1327)));
IkReal x1330=(((cj1*x1326*x1328))+((cj1*x1317*x1328))+((cj1*x1315*x1319))+((sj1*x1319*x1328)));
IkReal x1331=(x1330+(((-1.0)*x1329)));
IkReal x1332=(((x1317*x1320*x1324))+((x1319*x1320*x1322))+((sj1*x1317*x1318))+(((-1.0)*cj1*x1318*x1319))+((x1320*x1324*x1326))+(((-1.0)*x1320*x1322*x1325))+((cj1*x1318*x1325))+((x1318*x1327)));
IkReal x1333=(x1329+(((-1.0)*x1330)));
op[0]=x1331;
op[1]=x1332;
op[2]=x1331;
op[3]=(((x1316*x1327))+((x1317*x1320*x1321))+((cj1*x1316*x1325))+((x1319*x1320*x1323))+(((-1.0)*x1320*x1323*x1325))+(((-1.0)*cj1*x1316*x1319))+((sj1*x1316*x1317))+((x1320*x1321*x1326)));
op[4]=x1333;
op[5]=x1332;
op[6]=x1333;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1334=(cj5*sj4);
IkReal x1335=(sj4*sj5);
if( IKabs((((r01*x1335))+(((-1.0)*r00*x1334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1335))+((r10*x1334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1335))+(((-1.0)*r00*x1334))))+IKsqr(((((-1.0)*r11*x1335))+((r10*x1334))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1335))+(((-1.0)*r00*x1334))), ((((-1.0)*r11*x1335))+((r10*x1334))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1336=IKcos(j0);
IkReal x1337=IKsin(j0);
IkReal x1338=((0.39225)*sj1);
IkReal x1339=((1.0)*cj3);
IkReal x1340=((1.0)*cj1);
IkReal x1341=(r11*sj5);
IkReal x1342=(cj5*r01);
IkReal x1343=(cj5*r11);
IkReal x1344=(r01*sj5);
IkReal x1345=(cj3*cj4);
IkReal x1346=(r00*sj5);
IkReal x1347=((0.39225)*cj2);
IkReal x1348=((1.0)*sj1);
IkReal x1349=(r10*sj5);
IkReal x1350=(sj2*x1336);
IkReal x1351=(cj4*cj5*r00);
IkReal x1352=(cj1*x1337);
IkReal x1353=(sj2*x1337);
IkReal x1354=(cj4*cj5*r10);
IkReal x1355=((1.0)*cj4*sj3);
IkReal x1356=(cj1*x1336);
IkReal x1357=(cj2*x1336);
IkReal x1358=((1.0)*cj5*sj4);
evalcond[0]=(x1336+(((-1.0)*r10*x1358))+((sj4*x1341)));
evalcond[1]=((((-1.0)*x1337))+((sj4*x1344))+(((-1.0)*r00*x1358)));
evalcond[2]=(((sj1*x1350))+((x1344*x1345))+(((-1.0)*x1339*x1351))+((sj3*x1342))+((sj3*x1346))+(((-1.0)*x1340*x1357)));
evalcond[3]=((((-1.0)*cj2*x1337*x1340))+((sj1*x1353))+((x1341*x1345))+(((-1.0)*x1339*x1354))+((sj3*x1343))+((sj3*x1349)));
evalcond[4]=((((-1.0)*x1348*x1357))+(((-1.0)*x1344*x1355))+((sj3*x1351))+((cj3*x1342))+((cj3*x1346))+(((-1.0)*x1340*x1350)));
evalcond[5]=((((-1.0)*x1341*x1355))+(((-1.0)*cj2*x1337*x1348))+((sj3*x1354))+((cj3*x1349))+((cj3*x1343))+(((-1.0)*x1340*x1353)));
evalcond[6]=((((-1.0)*x1338*x1350))+(((-0.10915)*x1337))+(((-0.09465)*x1346))+(((-0.09465)*x1342))+(((-1.0)*px))+((x1347*x1356))+(((0.425)*x1356)));
evalcond[7]=((((-1.0)*x1338*x1353))+(((-0.09465)*x1343))+(((-0.09465)*x1349))+(((0.10915)*x1336))+(((-1.0)*py))+((x1347*x1352))+(((0.425)*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1359=IKPowWithIntegerCheck(cj3,-1);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360=IKPowWithIntegerCheck(r22,-1);
if(!x1360.valid){
continue;
}
sj4array[0]=((-1.0)*(x1359.value)*(x1360.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1361=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1361);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1361);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1362=((4.0)*r01);
IkReal x1363=((16.0)*r00);
IkReal x1364=(cj3*sj2);
IkReal x1365=((8.0)*r00);
IkReal x1366=(cj2*cj3);
IkReal x1367=(cj4*r01);
IkReal x1368=((16.0)*cj1);
IkReal x1369=((8.0)*sj1);
IkReal x1370=((16.0)*sj1);
IkReal x1371=((8.0)*cj1);
IkReal x1372=(sj2*sj3);
IkReal x1373=(cj2*sj3);
IkReal x1374=(sj1*x1373);
IkReal x1375=((4.0)*cj4*r00);
IkReal x1376=(((sj1*x1362*x1364))+((cj1*x1362*x1372))+((x1362*x1374))+((sj1*x1372*x1375)));
IkReal x1377=(((cj1*x1373*x1375))+((sj1*x1366*x1375))+((cj1*x1364*x1375))+((cj1*x1362*x1366)));
IkReal x1378=(x1377+(((-1.0)*x1376)));
IkReal x1379=(((x1365*x1374))+((x1367*x1371*x1373))+((x1366*x1367*x1369))+(((-1.0)*x1367*x1369*x1372))+((cj1*x1365*x1372))+((x1364*x1367*x1371))+((sj1*x1364*x1365))+(((-1.0)*cj1*x1365*x1366)));
IkReal x1380=(x1376+(((-1.0)*x1377)));
op[0]=x1378;
op[1]=x1379;
op[2]=x1378;
op[3]=(((cj1*x1363*x1372))+((x1364*x1367*x1368))+(((-1.0)*x1367*x1370*x1372))+((sj1*x1363*x1364))+((x1366*x1367*x1370))+((x1367*x1368*x1373))+(((-1.0)*cj1*x1363*x1366))+((x1363*x1374)));
op[4]=x1380;
op[5]=x1379;
op[6]=x1380;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1381=(cj5*sj4);
IkReal x1382=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1381))+((r01*x1382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1381))+(((-1.0)*r11*x1382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1381))+((r01*x1382))))+IKsqr((((r10*x1381))+(((-1.0)*r11*x1382))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1381))+((r01*x1382))), (((r10*x1381))+(((-1.0)*r11*x1382))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1383=IKcos(j0);
IkReal x1384=IKsin(j0);
IkReal x1385=((0.39225)*sj1);
IkReal x1386=((1.0)*cj3);
IkReal x1387=((1.0)*cj1);
IkReal x1388=(r11*sj5);
IkReal x1389=(cj5*r01);
IkReal x1390=(cj5*r11);
IkReal x1391=(r01*sj5);
IkReal x1392=(cj3*cj4);
IkReal x1393=(r00*sj5);
IkReal x1394=((0.39225)*cj2);
IkReal x1395=((1.0)*sj1);
IkReal x1396=(r10*sj5);
IkReal x1397=(sj2*x1383);
IkReal x1398=(cj4*cj5*r00);
IkReal x1399=(cj1*x1384);
IkReal x1400=(sj2*x1384);
IkReal x1401=(cj4*cj5*r10);
IkReal x1402=((1.0)*cj4*sj3);
IkReal x1403=(cj1*x1383);
IkReal x1404=(cj2*x1383);
IkReal x1405=((1.0)*cj5*sj4);
evalcond[0]=(x1383+((sj4*x1388))+(((-1.0)*r10*x1405)));
evalcond[1]=(((sj4*x1391))+(((-1.0)*r00*x1405))+(((-1.0)*x1384)));
evalcond[2]=(((sj1*x1397))+((sj3*x1389))+((sj3*x1393))+((x1391*x1392))+(((-1.0)*x1386*x1398))+(((-1.0)*x1387*x1404)));
evalcond[3]=(((x1388*x1392))+(((-1.0)*cj2*x1384*x1387))+((sj1*x1400))+((sj3*x1396))+((sj3*x1390))+(((-1.0)*x1386*x1401)));
evalcond[4]=(((cj3*x1389))+((cj3*x1393))+(((-1.0)*x1391*x1402))+((sj3*x1398))+(((-1.0)*x1387*x1397))+(((-1.0)*x1395*x1404)));
evalcond[5]=(((cj3*x1396))+((cj3*x1390))+(((-1.0)*cj2*x1384*x1395))+(((-1.0)*x1388*x1402))+((sj3*x1401))+(((-1.0)*x1387*x1400)));
evalcond[6]=((((-1.0)*x1385*x1397))+(((-0.09465)*x1389))+(((-0.09465)*x1393))+(((-1.0)*px))+((x1394*x1403))+(((-0.10915)*x1384))+(((0.425)*x1403)));
evalcond[7]=((((-0.09465)*x1396))+(((-0.09465)*x1390))+((x1394*x1399))+(((-1.0)*py))+(((0.425)*x1399))+(((-1.0)*x1385*x1400))+(((0.10915)*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
IkReal x1406=((1.0)*(x1408.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1409.valid){
continue;
}
if( (((-1.0)*(x1409.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1409.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1407=((-1.0)*(IKasin(((-1.0)*(x1409.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1406))+(((-1.0)*x1407)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1407))+(((-1.0)*x1406)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1410=cj5*cj5;
IkReal x1411=r21*r21;
IkReal x1412=(sj3*x1410);
IkReal x1413=(((sj3*(r22*r22)))+(((-1.0)*x1411*x1412))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1412*(r20*r20)))+((sj3*x1411)));
j4eval[0]=x1413;
j4eval[1]=IKsign(x1413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1414=cj5*cj5;
IkReal x1415=r21*r21;
IkReal x1416=((1.0)*cj3);
IkReal x1417=(cj3*x1414);
IkReal x1418=((((-1.0)*x1415*x1416))+((x1415*x1417))+(((-1.0)*x1416*(r22*r22)))+(((-1.0)*x1414*x1416*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1418;
j4eval[1]=IKsign(x1418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1419=cj1*cj1;
IkReal x1420=cj2*cj2;
IkReal x1421=(cj1*sj1*sj2);
IkReal x1422=(cj2*x1419);
IkReal x1423=(x1419*x1420);
j0eval[0]=((6.19369221392727)+(((-12.4570625281677)*x1421))+(((-11.4971359451148)*cj2*x1421))+(((11.4971359451148)*x1423))+(((12.4570625281677)*x1422))+x1419+(((-5.74856797255738)*x1420)));
j0eval[1]=IKsign(((66309514.0)+(((-61544025.0)*x1420))+(((-123088050.0)*cj2*x1421))+(((123088050.0)*x1423))+(((10705975.0)*x1419))+(((133365000.0)*x1422))+(((-133365000.0)*x1421))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1424=((1.0)*cj5);
IkReal x1425=((1.0)*sj5);
IkReal x1426=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1426;
j0eval[1]=((IKabs(((((-1.0)*r10*x1425))+(((-1.0)*r11*x1424)))))+(IKabs(((((-1.0)*r01*x1424))+(((-1.0)*r00*x1425))))));
j0eval[2]=IKsign(x1426);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1427=cj5*cj5;
IkReal x1428=r21*r21;
IkReal x1429=(sj1*sj2);
IkReal x1430=(r21*sj5);
IkReal x1431=(cj5*r20);
IkReal x1432=(cj1*cj2);
IkReal x1433=((r22*r22)+(((-1.0)*x1427*x1428))+((x1427*(r20*r20)))+x1428+(((-2.0)*x1430*x1431)));
j4eval[0]=x1433;
j4eval[1]=IKsign(x1433);
j4eval[2]=((IKabs((((x1429*x1430))+(((-1.0)*x1429*x1431))+(((-1.0)*x1430*x1432))+((x1431*x1432)))))+(IKabs(((((-1.0)*r22*x1432))+((r22*x1429))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1434=IKsin(j0);
IkReal x1435=IKcos(j0);
evalcond[0]=((((-0.10915)*x1434))+(((-1.0)*px))+(((0.425)*x1435)));
evalcond[1]=((((0.10915)*x1435))+(((-1.0)*py))+(((0.425)*x1434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1436=((1.0)*cj5);
IkReal x1437=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1436)));
j4eval[0]=x1437;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1436)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1438=((1.0)*cj5);
IkReal x1439=((((-1.0)*r11*x1438))+(((-1.0)*r10*sj5)));
j4eval[0]=x1439;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1438))))));
j4eval[2]=IKsign(x1439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1440=cj5*cj5;
IkReal x1441=((1.0)*sj5);
IkReal x1442=(cj5*r20);
IkReal x1443=(r11*r21);
IkReal x1444=((((-1.0)*cj5*r10*r21*x1441))+((r12*r22))+(((-1.0)*x1440*x1443))+x1443+(((-1.0)*r11*x1441*x1442))+((r10*r20*x1440)));
j4eval[0]=x1444;
j4eval[1]=IKsign(x1444);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1441))+((cj0*x1442)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1445=cj5*cj5;
IkReal x1446=((1.0)*sj5);
IkReal x1447=(cj5*r20);
IkReal x1448=(r11*r21);
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1446))+((r12*r22))+(((-1.0)*r11*x1446*x1447))+x1448+(((-1.0)*x1445*x1448))+((r10*r20*x1445)))),-1);
if(!x1449.valid){
continue;
}
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1446))+((cj0*x1447)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1449.value)))+(x1450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1451=IKsin(j4);
IkReal x1452=IKcos(j4);
IkReal x1453=((1.0)*sj0);
IkReal x1454=(cj5*r00);
IkReal x1455=(r11*sj5);
IkReal x1456=(cj5*r10);
IkReal x1457=(r21*sj5);
IkReal x1458=(cj5*r20);
IkReal x1459=(r01*sj5);
IkReal x1460=((1.0)*x1452);
IkReal x1461=((1.0)*x1451);
evalcond[0]=((((-1.0)*x1458*x1461))+(((-1.0)*r22*x1460))+((x1451*x1457)));
evalcond[1]=((((-1.0)*r22*x1461))+(((-1.0)*x1457*x1460))+((x1452*x1458)));
evalcond[2]=(cj0+(((-1.0)*x1456*x1461))+(((-1.0)*r12*x1460))+((x1451*x1455)));
evalcond[3]=((((-1.0)*r02*x1460))+(((-1.0)*x1453))+(((-1.0)*x1454*x1461))+((x1451*x1459)));
evalcond[4]=((((-1.0)*r02*x1461))+(((-1.0)*x1459*x1460))+((x1452*x1454))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1453))+(((-1.0)*x1455*x1460))+(((-1.0)*r12*x1461))+((x1452*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1462=((1.0)*cj5);
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1462)))),-1);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1463.value)))+(x1464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1465=IKsin(j4);
IkReal x1466=IKcos(j4);
IkReal x1467=((1.0)*sj0);
IkReal x1468=(cj5*r00);
IkReal x1469=(r11*sj5);
IkReal x1470=(cj5*r10);
IkReal x1471=(r21*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r01*sj5);
IkReal x1474=((1.0)*x1466);
IkReal x1475=((1.0)*x1465);
evalcond[0]=((((-1.0)*r22*x1474))+((x1465*x1471))+(((-1.0)*x1472*x1475)));
evalcond[1]=((((-1.0)*r22*x1475))+((x1466*x1472))+(((-1.0)*x1471*x1474)));
evalcond[2]=((((-1.0)*x1470*x1475))+cj0+((x1465*x1469))+(((-1.0)*r12*x1474)));
evalcond[3]=((((-1.0)*x1467))+(((-1.0)*x1468*x1475))+((x1465*x1473))+(((-1.0)*r02*x1474)));
evalcond[4]=(((x1466*x1468))+(((-1.0)*r02*x1475))+(((-1.0)*cj0))+(((-1.0)*x1473*x1474)));
evalcond[5]=(((x1466*x1470))+(((-1.0)*x1467))+(((-1.0)*r12*x1475))+(((-1.0)*x1469*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=((1.0)*cj5);
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1476))+(((-1.0)*r00*sj5)))),-1);
if(!x1477.valid){
continue;
}
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1477.value)))+(x1478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1479=IKsin(j4);
IkReal x1480=IKcos(j4);
IkReal x1481=((1.0)*sj0);
IkReal x1482=(cj5*r00);
IkReal x1483=(r11*sj5);
IkReal x1484=(cj5*r10);
IkReal x1485=(r21*sj5);
IkReal x1486=(cj5*r20);
IkReal x1487=(r01*sj5);
IkReal x1488=((1.0)*x1480);
IkReal x1489=((1.0)*x1479);
evalcond[0]=((((-1.0)*x1486*x1489))+(((-1.0)*r22*x1488))+((x1479*x1485)));
evalcond[1]=(((x1480*x1486))+(((-1.0)*x1485*x1488))+(((-1.0)*r22*x1489)));
evalcond[2]=(cj0+(((-1.0)*r12*x1488))+(((-1.0)*x1484*x1489))+((x1479*x1483)));
evalcond[3]=((((-1.0)*x1482*x1489))+(((-1.0)*x1481))+(((-1.0)*r02*x1488))+((x1479*x1487)));
evalcond[4]=((((-1.0)*x1487*x1488))+((x1480*x1482))+(((-1.0)*r02*x1489))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1489))+(((-1.0)*x1481))+((x1480*x1484))+(((-1.0)*x1483*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1490=IKsin(j0);
IkReal x1491=IKcos(j0);
evalcond[0]=((((-0.10915)*x1490))+(((0.425)*x1491))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x1490))+(((-1.0)*py))+(((0.10915)*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1492=((1.0)*cj5);
IkReal x1493=((((-1.0)*r01*x1492))+(((-1.0)*r00*sj5)));
j4eval[0]=x1493;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1492)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1494=cj5*cj5;
IkReal x1495=((1.0)*r21);
IkReal x1496=(cj5*sj5);
IkReal x1497=((1.0)*r20);
IkReal x1498=((((-1.0)*r01*x1496*x1497))+((r01*r21))+(((-1.0)*r00*x1495*x1496))+((r00*r20*x1494))+((r02*r22))+(((-1.0)*r01*x1494*x1495)));
j4eval[0]=x1498;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1497))))));
j4eval[2]=IKsign(x1498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1499=cj5*cj5;
IkReal x1500=(r21*sj5);
IkReal x1501=(r11*r21);
IkReal x1502=((1.0)*cj5*r20);
IkReal x1503=(((r10*r20*x1499))+(((-1.0)*r11*sj5*x1502))+((r12*r22))+x1501+(((-1.0)*cj5*r10*x1500))+(((-1.0)*x1499*x1501)));
j4eval[0]=x1503;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1502))+((sj0*x1500))))));
j4eval[2]=IKsign(x1503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1504=cj5*cj5;
IkReal x1505=(r21*sj5);
IkReal x1506=(r11*r21);
IkReal x1507=((1.0)*cj5*r20);
CheckValue<IkReal> x1508 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1507))+((sj0*x1505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1504*x1506))+(((-1.0)*r11*sj5*x1507))+((r12*r22))+x1506+((r10*r20*x1504))+(((-1.0)*cj5*r10*x1505)))),-1);
if(!x1509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1508.value)+(((1.5707963267949)*(x1509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1510=IKsin(j4);
IkReal x1511=IKcos(j4);
IkReal x1512=(r11*sj5);
IkReal x1513=(cj5*r00);
IkReal x1514=(cj5*r10);
IkReal x1515=(r21*sj5);
IkReal x1516=(cj5*r20);
IkReal x1517=(r01*sj5);
IkReal x1518=((1.0)*x1511);
IkReal x1519=((1.0)*x1510);
evalcond[0]=((((-1.0)*x1516*x1519))+((x1510*x1515))+(((-1.0)*r22*x1518)));
evalcond[1]=((((-1.0)*x1515*x1518))+(((-1.0)*r22*x1519))+((x1511*x1516)));
evalcond[2]=(((x1510*x1512))+cj0+(((-1.0)*x1514*x1519))+(((-1.0)*r12*x1518)));
evalcond[3]=(cj0+(((-1.0)*r02*x1519))+(((-1.0)*x1517*x1518))+((x1511*x1513)));
evalcond[4]=(sj0+(((-1.0)*x1512*x1518))+((x1511*x1514))+(((-1.0)*r12*x1519)));
evalcond[5]=(((x1510*x1517))+(((-1.0)*sj0))+(((-1.0)*x1513*x1519))+(((-1.0)*r02*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1520=cj5*cj5;
IkReal x1521=((1.0)*r21);
IkReal x1522=(cj5*sj5);
IkReal x1523=((1.0)*r20);
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign((((r00*r20*x1520))+(((-1.0)*r01*x1520*x1521))+((r01*r21))+(((-1.0)*r00*x1521*x1522))+(((-1.0)*r01*x1522*x1523))+((r02*r22)))),-1);
if(!x1525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1524.value)+(((1.5707963267949)*(x1525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1526=IKsin(j4);
IkReal x1527=IKcos(j4);
IkReal x1528=(r11*sj5);
IkReal x1529=(cj5*r00);
IkReal x1530=(cj5*r10);
IkReal x1531=(r21*sj5);
IkReal x1532=(cj5*r20);
IkReal x1533=(r01*sj5);
IkReal x1534=((1.0)*x1527);
IkReal x1535=((1.0)*x1526);
evalcond[0]=((((-1.0)*r22*x1534))+(((-1.0)*x1532*x1535))+((x1526*x1531)));
evalcond[1]=((((-1.0)*x1531*x1534))+(((-1.0)*r22*x1535))+((x1527*x1532)));
evalcond[2]=((((-1.0)*r12*x1534))+cj0+(((-1.0)*x1530*x1535))+((x1526*x1528)));
evalcond[3]=(cj0+(((-1.0)*r02*x1535))+((x1527*x1529))+(((-1.0)*x1533*x1534)));
evalcond[4]=(sj0+(((-1.0)*r12*x1535))+((x1527*x1530))+(((-1.0)*x1528*x1534)));
evalcond[5]=((((-1.0)*x1529*x1535))+(((-1.0)*sj0))+(((-1.0)*r02*x1534))+((x1526*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1536=((1.0)*cj5);
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1536))+(((-1.0)*r00*sj5)))),-1);
if(!x1538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1537.value)+(((1.5707963267949)*(x1538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1539=IKsin(j4);
IkReal x1540=IKcos(j4);
IkReal x1541=(r11*sj5);
IkReal x1542=(cj5*r00);
IkReal x1543=(cj5*r10);
IkReal x1544=(r21*sj5);
IkReal x1545=(cj5*r20);
IkReal x1546=(r01*sj5);
IkReal x1547=((1.0)*x1540);
IkReal x1548=((1.0)*x1539);
evalcond[0]=(((x1539*x1544))+(((-1.0)*r22*x1547))+(((-1.0)*x1545*x1548)));
evalcond[1]=((((-1.0)*r22*x1548))+((x1540*x1545))+(((-1.0)*x1544*x1547)));
evalcond[2]=((((-1.0)*x1543*x1548))+cj0+((x1539*x1541))+(((-1.0)*r12*x1547)));
evalcond[3]=((((-1.0)*x1546*x1547))+(((-1.0)*r02*x1548))+cj0+((x1540*x1542)));
evalcond[4]=(sj0+((x1540*x1543))+(((-1.0)*r12*x1548))+(((-1.0)*x1541*x1547)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1547))+((x1539*x1546))+(((-1.0)*x1542*x1548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1549=((1.0)*cj5);
IkReal x1550=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1549)));
j4eval[0]=x1550;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1549)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1551=((1.0)*cj5);
IkReal x1552=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1551)));
j4eval[0]=x1552;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1551)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1553=cj5*cj5;
IkReal x1554=((1.0)*sj5);
IkReal x1555=(cj5*r20);
IkReal x1556=(r11*r21);
IkReal x1557=((((-1.0)*r11*x1554*x1555))+(((-1.0)*cj5*r10*r21*x1554))+(((-1.0)*x1553*x1556))+((r12*r22))+x1556+((r10*r20*x1553)));
j4eval[0]=x1557;
j4eval[1]=IKsign(x1557);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1554))+((cj0*x1555)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1558=cj5*cj5;
IkReal x1559=((1.0)*sj5);
IkReal x1560=(cj5*r20);
IkReal x1561=(r11*r21);
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1559))+((r12*r22))+x1561+(((-1.0)*r11*x1559*x1560))+((r10*r20*x1558))+(((-1.0)*x1558*x1561)))),-1);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1559))+((cj0*x1560)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1562.value)))+(x1563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1564=IKsin(j4);
IkReal x1565=IKcos(j4);
IkReal x1566=((1.0)*sj0);
IkReal x1567=(cj5*r00);
IkReal x1568=(r11*sj5);
IkReal x1569=(cj5*r10);
IkReal x1570=(r21*sj5);
IkReal x1571=(cj5*r20);
IkReal x1572=(r01*sj5);
IkReal x1573=((1.0)*x1565);
IkReal x1574=((1.0)*x1564);
evalcond[0]=((((-1.0)*x1571*x1574))+(((-1.0)*r22*x1573))+((x1564*x1570)));
evalcond[1]=((((-1.0)*x1570*x1573))+(((-1.0)*r22*x1574))+((x1565*x1571)));
evalcond[2]=(cj0+(((-1.0)*x1569*x1574))+(((-1.0)*r12*x1573))+((x1564*x1568)));
evalcond[3]=((((-1.0)*r02*x1573))+(((-1.0)*x1567*x1574))+(((-1.0)*x1566))+((x1564*x1572)));
evalcond[4]=((((-1.0)*r02*x1574))+(((-1.0)*x1572*x1573))+(((-1.0)*cj0))+((x1565*x1567)));
evalcond[5]=((((-1.0)*x1568*x1573))+(((-1.0)*r12*x1574))+(((-1.0)*x1566))+((x1565*x1569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1575=((1.0)*cj5);
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1575)))),-1);
if(!x1577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1576.value)+(((1.5707963267949)*(x1577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1578=IKsin(j4);
IkReal x1579=IKcos(j4);
IkReal x1580=((1.0)*sj0);
IkReal x1581=(cj5*r00);
IkReal x1582=(r11*sj5);
IkReal x1583=(cj5*r10);
IkReal x1584=(r21*sj5);
IkReal x1585=(cj5*r20);
IkReal x1586=(r01*sj5);
IkReal x1587=((1.0)*x1579);
IkReal x1588=((1.0)*x1578);
evalcond[0]=((((-1.0)*x1585*x1588))+(((-1.0)*r22*x1587))+((x1578*x1584)));
evalcond[1]=((((-1.0)*x1584*x1587))+(((-1.0)*r22*x1588))+((x1579*x1585)));
evalcond[2]=(cj0+((x1578*x1582))+(((-1.0)*r12*x1587))+(((-1.0)*x1583*x1588)));
evalcond[3]=((((-1.0)*x1580))+(((-1.0)*r02*x1587))+(((-1.0)*x1581*x1588))+((x1578*x1586)));
evalcond[4]=((((-1.0)*r02*x1588))+((x1579*x1581))+(((-1.0)*x1586*x1587))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1580))+((x1579*x1583))+(((-1.0)*r12*x1588))+(((-1.0)*x1582*x1587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1589=((1.0)*cj5);
CheckValue<IkReal> x1590 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1589))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1589)))),-1);
if(!x1591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1590.value)+(((1.5707963267949)*(x1591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1592=IKsin(j4);
IkReal x1593=IKcos(j4);
IkReal x1594=((1.0)*sj0);
IkReal x1595=(cj5*r00);
IkReal x1596=(r11*sj5);
IkReal x1597=(cj5*r10);
IkReal x1598=(r21*sj5);
IkReal x1599=(cj5*r20);
IkReal x1600=(r01*sj5);
IkReal x1601=((1.0)*x1593);
IkReal x1602=((1.0)*x1592);
evalcond[0]=(((x1592*x1598))+(((-1.0)*r22*x1601))+(((-1.0)*x1599*x1602)));
evalcond[1]=(((x1593*x1599))+(((-1.0)*r22*x1602))+(((-1.0)*x1598*x1601)));
evalcond[2]=(cj0+((x1592*x1596))+(((-1.0)*x1597*x1602))+(((-1.0)*r12*x1601)));
evalcond[3]=((((-1.0)*x1594))+(((-1.0)*x1595*x1602))+((x1592*x1600))+(((-1.0)*r02*x1601)));
evalcond[4]=(((x1593*x1595))+(((-1.0)*x1600*x1601))+(((-1.0)*r02*x1602))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1594))+((x1593*x1597))+(((-1.0)*x1596*x1601))+(((-1.0)*r12*x1602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1603=((1.0)*cj5);
IkReal x1604=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1603)));
j4eval[0]=x1604;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1603))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1605=cj5*cj5;
IkReal x1606=((1.0)*r21);
IkReal x1607=(cj5*sj5);
IkReal x1608=((1.0)*r20);
IkReal x1609=(((r00*r20*x1605))+(((-1.0)*r01*x1607*x1608))+((r01*r21))+(((-1.0)*r00*x1606*x1607))+((r02*r22))+(((-1.0)*r01*x1605*x1606)));
j4eval[0]=x1609;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1608))))));
j4eval[2]=IKsign(x1609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1610=cj5*cj5;
IkReal x1611=(r21*sj5);
IkReal x1612=(r11*r21);
IkReal x1613=((1.0)*cj5*r20);
IkReal x1614=(((r10*r20*x1610))+x1612+(((-1.0)*x1610*x1612))+((r12*r22))+(((-1.0)*r11*sj5*x1613))+(((-1.0)*cj5*r10*x1611)));
j4eval[0]=x1614;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1613))+((sj0*x1611))))));
j4eval[2]=IKsign(x1614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1615=cj5*cj5;
IkReal x1616=(r21*sj5);
IkReal x1617=(r11*r21);
IkReal x1618=((1.0)*cj5*r20);
CheckValue<IkReal> x1619=IKPowWithIntegerCheck(IKsign((((r10*r20*x1615))+x1617+(((-1.0)*x1615*x1617))+((r12*r22))+(((-1.0)*r11*sj5*x1618))+(((-1.0)*cj5*r10*x1616)))),-1);
if(!x1619.valid){
continue;
}
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1618))+((sj0*x1616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1619.value)))+(x1620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1621=IKsin(j4);
IkReal x1622=IKcos(j4);
IkReal x1623=(r11*sj5);
IkReal x1624=(cj5*r00);
IkReal x1625=(cj5*r10);
IkReal x1626=(r21*sj5);
IkReal x1627=(cj5*r20);
IkReal x1628=(r01*sj5);
IkReal x1629=((1.0)*x1622);
IkReal x1630=((1.0)*x1621);
evalcond[0]=((((-1.0)*r22*x1629))+((x1621*x1626))+(((-1.0)*x1627*x1630)));
evalcond[1]=((((-1.0)*r22*x1630))+((x1622*x1627))+(((-1.0)*x1626*x1629)));
evalcond[2]=((((-1.0)*r12*x1629))+cj0+(((-1.0)*x1625*x1630))+((x1621*x1623)));
evalcond[3]=(cj0+((x1622*x1624))+(((-1.0)*x1628*x1629))+(((-1.0)*r02*x1630)));
evalcond[4]=(sj0+(((-1.0)*r12*x1630))+((x1622*x1625))+(((-1.0)*x1623*x1629)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1624*x1630))+(((-1.0)*r02*x1629))+((x1621*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1631=cj5*cj5;
IkReal x1632=((1.0)*r21);
IkReal x1633=(cj5*sj5);
IkReal x1634=((1.0)*r20);
CheckValue<IkReal> x1635 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1632*x1633))+(((-1.0)*r01*x1631*x1632))+((r00*r20*x1631))+((r01*r21))+(((-1.0)*r01*x1633*x1634))+((r02*r22)))),-1);
if(!x1636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1635.value)+(((1.5707963267949)*(x1636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1637=IKsin(j4);
IkReal x1638=IKcos(j4);
IkReal x1639=(r11*sj5);
IkReal x1640=(cj5*r00);
IkReal x1641=(cj5*r10);
IkReal x1642=(r21*sj5);
IkReal x1643=(cj5*r20);
IkReal x1644=(r01*sj5);
IkReal x1645=((1.0)*x1638);
IkReal x1646=((1.0)*x1637);
evalcond[0]=(((x1637*x1642))+(((-1.0)*r22*x1645))+(((-1.0)*x1643*x1646)));
evalcond[1]=((((-1.0)*r22*x1646))+(((-1.0)*x1642*x1645))+((x1638*x1643)));
evalcond[2]=(((x1637*x1639))+(((-1.0)*x1641*x1646))+cj0+(((-1.0)*r12*x1645)));
evalcond[3]=(cj0+(((-1.0)*x1644*x1645))+(((-1.0)*r02*x1646))+((x1638*x1640)));
evalcond[4]=(sj0+(((-1.0)*r12*x1646))+(((-1.0)*x1639*x1645))+((x1638*x1641)));
evalcond[5]=((((-1.0)*sj0))+((x1637*x1644))+(((-1.0)*x1640*x1646))+(((-1.0)*r02*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1647=((1.0)*cj5);
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
CheckValue<IkReal> x1649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1647))+(((-1.0)*r00*sj5)))),-1);
if(!x1649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1648.value)+(((1.5707963267949)*(x1649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1650=IKsin(j4);
IkReal x1651=IKcos(j4);
IkReal x1652=(r11*sj5);
IkReal x1653=(cj5*r00);
IkReal x1654=(cj5*r10);
IkReal x1655=(r21*sj5);
IkReal x1656=(cj5*r20);
IkReal x1657=(r01*sj5);
IkReal x1658=((1.0)*x1651);
IkReal x1659=((1.0)*x1650);
evalcond[0]=((((-1.0)*x1656*x1659))+((x1650*x1655))+(((-1.0)*r22*x1658)));
evalcond[1]=((((-1.0)*r22*x1659))+(((-1.0)*x1655*x1658))+((x1651*x1656)));
evalcond[2]=(((x1650*x1652))+cj0+(((-1.0)*x1654*x1659))+(((-1.0)*r12*x1658)));
evalcond[3]=(cj0+(((-1.0)*x1657*x1658))+(((-1.0)*r02*x1659))+((x1651*x1653)));
evalcond[4]=(sj0+(((-1.0)*x1652*x1658))+(((-1.0)*r12*x1659))+((x1651*x1654)));
evalcond[5]=((((-1.0)*sj0))+((x1650*x1657))+(((-1.0)*x1653*x1659))+(((-1.0)*r02*x1658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1660=IKcos(j0);
IkReal x1661=IKsin(j0);
evalcond[0]=((((-0.10915)*x1661))+(((-0.425)*x1660))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1660))+(((-0.425)*x1661))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1662=((1.0)*cj5);
IkReal x1663=((((-1.0)*r01*x1662))+(((-1.0)*r00*sj5)));
j4eval[0]=x1663;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1662)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1664=cj5*cj5;
IkReal x1665=((1.0)*r21);
IkReal x1666=(cj5*sj5);
IkReal x1667=((1.0)*r20);
IkReal x1668=((((-1.0)*r01*x1664*x1665))+((r01*r21))+(((-1.0)*r01*x1666*x1667))+((r00*r20*x1664))+((r02*r22))+(((-1.0)*r00*x1665*x1666)));
j4eval[0]=x1668;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1667)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1669=cj5*cj5;
IkReal x1670=(r21*sj5);
IkReal x1671=(r11*r21);
IkReal x1672=((1.0)*cj5*r20);
IkReal x1673=((((-1.0)*cj5*r10*x1670))+x1671+(((-1.0)*r11*sj5*x1672))+((r12*r22))+(((-1.0)*x1669*x1671))+((r10*r20*x1669)));
j4eval[0]=x1673;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1670))+(((-1.0)*sj0*x1672))))));
j4eval[2]=IKsign(x1673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1674=cj5*cj5;
IkReal x1675=(r21*sj5);
IkReal x1676=(r11*r21);
IkReal x1677=((1.0)*cj5*r20);
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1675))+(((-1.0)*sj0*x1677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1675))+x1676+(((-1.0)*x1674*x1676))+(((-1.0)*r11*sj5*x1677))+((r12*r22))+((r10*r20*x1674)))),-1);
if(!x1679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1678.value)+(((1.5707963267949)*(x1679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1680=IKsin(j4);
IkReal x1681=IKcos(j4);
IkReal x1682=(r11*sj5);
IkReal x1683=(cj5*r00);
IkReal x1684=(cj5*r10);
IkReal x1685=(r21*sj5);
IkReal x1686=(cj5*r20);
IkReal x1687=(r01*sj5);
IkReal x1688=((1.0)*x1681);
IkReal x1689=((1.0)*x1680);
evalcond[0]=((((-1.0)*x1686*x1689))+((x1680*x1685))+(((-1.0)*r22*x1688)));
evalcond[1]=(((x1681*x1686))+(((-1.0)*x1685*x1688))+(((-1.0)*r22*x1689)));
evalcond[2]=((((-1.0)*r12*x1688))+((x1680*x1682))+cj0+(((-1.0)*x1684*x1689)));
evalcond[3]=(((x1681*x1683))+(((-1.0)*x1687*x1688))+cj0+(((-1.0)*r02*x1689)));
evalcond[4]=((((-1.0)*r12*x1689))+((x1681*x1684))+sj0+(((-1.0)*x1682*x1688)));
evalcond[5]=((((-1.0)*sj0))+((x1680*x1687))+(((-1.0)*x1683*x1689))+(((-1.0)*r02*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1690=cj5*cj5;
IkReal x1691=((1.0)*r21);
IkReal x1692=(cj5*sj5);
IkReal x1693=((1.0)*r20);
CheckValue<IkReal> x1694 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1693))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1694.valid){
continue;
}
CheckValue<IkReal> x1695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1691*x1692))+(((-1.0)*r01*x1690*x1691))+((r01*r21))+((r00*r20*x1690))+((r02*r22))+(((-1.0)*r01*x1692*x1693)))),-1);
if(!x1695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1694.value)+(((1.5707963267949)*(x1695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1696=IKsin(j4);
IkReal x1697=IKcos(j4);
IkReal x1698=(r11*sj5);
IkReal x1699=(cj5*r00);
IkReal x1700=(cj5*r10);
IkReal x1701=(r21*sj5);
IkReal x1702=(cj5*r20);
IkReal x1703=(r01*sj5);
IkReal x1704=((1.0)*x1697);
IkReal x1705=((1.0)*x1696);
evalcond[0]=((((-1.0)*x1702*x1705))+((x1696*x1701))+(((-1.0)*r22*x1704)));
evalcond[1]=(((x1697*x1702))+(((-1.0)*r22*x1705))+(((-1.0)*x1701*x1704)));
evalcond[2]=(cj0+(((-1.0)*x1700*x1705))+((x1696*x1698))+(((-1.0)*r12*x1704)));
evalcond[3]=(cj0+(((-1.0)*r02*x1705))+(((-1.0)*x1703*x1704))+((x1697*x1699)));
evalcond[4]=(((x1697*x1700))+(((-1.0)*x1698*x1704))+sj0+(((-1.0)*r12*x1705)));
evalcond[5]=((((-1.0)*sj0))+((x1696*x1703))+(((-1.0)*x1699*x1705))+(((-1.0)*r02*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1706=((1.0)*cj5);
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1706)))),-1);
if(!x1707.valid){
continue;
}
CheckValue<IkReal> x1708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1707.value)))+(x1708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1709=IKsin(j4);
IkReal x1710=IKcos(j4);
IkReal x1711=(r11*sj5);
IkReal x1712=(cj5*r00);
IkReal x1713=(cj5*r10);
IkReal x1714=(r21*sj5);
IkReal x1715=(cj5*r20);
IkReal x1716=(r01*sj5);
IkReal x1717=((1.0)*x1710);
IkReal x1718=((1.0)*x1709);
evalcond[0]=(((x1709*x1714))+(((-1.0)*r22*x1717))+(((-1.0)*x1715*x1718)));
evalcond[1]=((((-1.0)*x1714*x1717))+((x1710*x1715))+(((-1.0)*r22*x1718)));
evalcond[2]=(cj0+((x1709*x1711))+(((-1.0)*x1713*x1718))+(((-1.0)*r12*x1717)));
evalcond[3]=(((x1710*x1712))+cj0+(((-1.0)*x1716*x1717))+(((-1.0)*r02*x1718)));
evalcond[4]=(((x1710*x1713))+sj0+(((-1.0)*x1711*x1717))+(((-1.0)*r12*x1718)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1712*x1718))+((x1709*x1716))+(((-1.0)*r02*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1719=IKcos(j0);
IkReal x1720=IKsin(j0);
evalcond[0]=((((-0.425)*x1719))+(((-1.0)*px))+(((-0.10915)*x1720)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x1720))+(((0.10915)*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1721=((1.0)*cj5);
IkReal x1722=((((-1.0)*r01*x1721))+(((-1.0)*r00*sj5)));
j4eval[0]=x1722;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1721)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1723=((1.0)*cj5);
IkReal x1724=((((-1.0)*r11*x1723))+(((-1.0)*r10*sj5)));
j4eval[0]=x1724;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1723))))));
j4eval[2]=IKsign(x1724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1725=cj5*cj5;
IkReal x1726=((1.0)*sj5);
IkReal x1727=(cj5*r20);
IkReal x1728=(r11*r21);
IkReal x1729=((((-1.0)*r11*x1726*x1727))+x1728+(((-1.0)*cj5*r10*r21*x1726))+((r12*r22))+(((-1.0)*x1725*x1728))+((r10*r20*x1725)));
j4eval[0]=x1729;
j4eval[1]=IKsign(x1729);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1727))+(((-1.0)*cj0*r21*x1726))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1730=cj5*cj5;
IkReal x1731=((1.0)*sj5);
IkReal x1732=(cj5*r20);
IkReal x1733=(r11*r21);
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal((((cj0*x1732))+(((-1.0)*cj0*r21*x1731)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
CheckValue<IkReal> x1735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1731*x1732))+(((-1.0)*cj5*r10*r21*x1731))+x1733+((r12*r22))+(((-1.0)*x1730*x1733))+((r10*r20*x1730)))),-1);
if(!x1735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1734.value)+(((1.5707963267949)*(x1735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1736=IKsin(j4);
IkReal x1737=IKcos(j4);
IkReal x1738=((1.0)*sj0);
IkReal x1739=(cj5*r00);
IkReal x1740=(r11*sj5);
IkReal x1741=(cj5*r10);
IkReal x1742=(r21*sj5);
IkReal x1743=(cj5*r20);
IkReal x1744=(r01*sj5);
IkReal x1745=((1.0)*x1737);
IkReal x1746=((1.0)*x1736);
evalcond[0]=(((x1736*x1742))+(((-1.0)*r22*x1745))+(((-1.0)*x1743*x1746)));
evalcond[1]=((((-1.0)*r22*x1746))+(((-1.0)*x1742*x1745))+((x1737*x1743)));
evalcond[2]=(((x1736*x1740))+(((-1.0)*r12*x1745))+(((-1.0)*x1741*x1746))+cj0);
evalcond[3]=(((x1736*x1744))+(((-1.0)*x1739*x1746))+(((-1.0)*x1738))+(((-1.0)*r02*x1745)));
evalcond[4]=(((x1737*x1739))+(((-1.0)*x1744*x1745))+(((-1.0)*r02*x1746))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1746))+(((-1.0)*x1740*x1745))+(((-1.0)*x1738))+((x1737*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1747=((1.0)*cj5);
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1747))+(((-1.0)*r10*sj5)))),-1);
if(!x1748.valid){
continue;
}
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1748.value)))+(x1749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1750=IKsin(j4);
IkReal x1751=IKcos(j4);
IkReal x1752=((1.0)*sj0);
IkReal x1753=(cj5*r00);
IkReal x1754=(r11*sj5);
IkReal x1755=(cj5*r10);
IkReal x1756=(r21*sj5);
IkReal x1757=(cj5*r20);
IkReal x1758=(r01*sj5);
IkReal x1759=((1.0)*x1751);
IkReal x1760=((1.0)*x1750);
evalcond[0]=((((-1.0)*r22*x1759))+((x1750*x1756))+(((-1.0)*x1757*x1760)));
evalcond[1]=((((-1.0)*x1756*x1759))+(((-1.0)*r22*x1760))+((x1751*x1757)));
evalcond[2]=((((-1.0)*r12*x1759))+cj0+(((-1.0)*x1755*x1760))+((x1750*x1754)));
evalcond[3]=((((-1.0)*x1753*x1760))+((x1750*x1758))+(((-1.0)*x1752))+(((-1.0)*r02*x1759)));
evalcond[4]=((((-1.0)*x1758*x1759))+(((-1.0)*r02*x1760))+(((-1.0)*cj0))+((x1751*x1753)));
evalcond[5]=((((-1.0)*r12*x1760))+(((-1.0)*x1752))+(((-1.0)*x1754*x1759))+((x1751*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1761=((1.0)*cj5);
CheckValue<IkReal> x1762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1761))+(((-1.0)*r00*sj5)))),-1);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1762.value)))+(x1763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1764=IKsin(j4);
IkReal x1765=IKcos(j4);
IkReal x1766=((1.0)*sj0);
IkReal x1767=(cj5*r00);
IkReal x1768=(r11*sj5);
IkReal x1769=(cj5*r10);
IkReal x1770=(r21*sj5);
IkReal x1771=(cj5*r20);
IkReal x1772=(r01*sj5);
IkReal x1773=((1.0)*x1765);
IkReal x1774=((1.0)*x1764);
evalcond[0]=(((x1764*x1770))+(((-1.0)*x1771*x1774))+(((-1.0)*r22*x1773)));
evalcond[1]=(((x1765*x1771))+(((-1.0)*x1770*x1773))+(((-1.0)*r22*x1774)));
evalcond[2]=(cj0+((x1764*x1768))+(((-1.0)*r12*x1773))+(((-1.0)*x1769*x1774)));
evalcond[3]=((((-1.0)*x1766))+((x1764*x1772))+(((-1.0)*x1767*x1774))+(((-1.0)*r02*x1773)));
evalcond[4]=((((-1.0)*x1772*x1773))+((x1765*x1767))+(((-1.0)*r02*x1774))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1766))+((x1765*x1769))+(((-1.0)*x1768*x1773))+(((-1.0)*r12*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1775=((1.0)*cj5);
IkReal x1776=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1775)));
j4eval[0]=x1776;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1775))))));
j4eval[2]=IKsign(x1776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1777=cj5*cj5;
IkReal x1778=((1.0)*r21);
IkReal x1779=(cj5*sj5);
IkReal x1780=((1.0)*r20);
IkReal x1781=((((-1.0)*r00*x1778*x1779))+((r01*r21))+(((-1.0)*r01*x1777*x1778))+((r00*r20*x1777))+(((-1.0)*r01*x1779*x1780))+((r02*r22)));
j4eval[0]=x1781;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1780)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1782=cj5*cj5;
IkReal x1783=(r21*sj5);
IkReal x1784=(r11*r21);
IkReal x1785=((1.0)*cj5*r20);
IkReal x1786=(x1784+((r10*r20*x1782))+(((-1.0)*cj5*r10*x1783))+(((-1.0)*x1782*x1784))+((r12*r22))+(((-1.0)*r11*sj5*x1785)));
j4eval[0]=x1786;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1785))+((sj0*x1783))))));
j4eval[2]=IKsign(x1786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1787=cj5*cj5;
IkReal x1788=(r21*sj5);
IkReal x1789=(r11*r21);
IkReal x1790=((1.0)*cj5*r20);
CheckValue<IkReal> x1791 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1790))+((sj0*x1788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1791.valid){
continue;
}
CheckValue<IkReal> x1792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1790))+x1789+((r10*r20*x1787))+(((-1.0)*cj5*r10*x1788))+((r12*r22))+(((-1.0)*x1787*x1789)))),-1);
if(!x1792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1791.value)+(((1.5707963267949)*(x1792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1793=IKsin(j4);
IkReal x1794=IKcos(j4);
IkReal x1795=(r11*sj5);
IkReal x1796=(cj5*r00);
IkReal x1797=(cj5*r10);
IkReal x1798=(r21*sj5);
IkReal x1799=(cj5*r20);
IkReal x1800=(r01*sj5);
IkReal x1801=((1.0)*x1794);
IkReal x1802=((1.0)*x1793);
evalcond[0]=(((x1793*x1798))+(((-1.0)*x1799*x1802))+(((-1.0)*r22*x1801)));
evalcond[1]=((((-1.0)*x1798*x1801))+((x1794*x1799))+(((-1.0)*r22*x1802)));
evalcond[2]=(((x1793*x1795))+cj0+(((-1.0)*x1797*x1802))+(((-1.0)*r12*x1801)));
evalcond[3]=(cj0+(((-1.0)*x1800*x1801))+(((-1.0)*r02*x1802))+((x1794*x1796)));
evalcond[4]=(sj0+(((-1.0)*x1795*x1801))+((x1794*x1797))+(((-1.0)*r12*x1802)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1796*x1802))+(((-1.0)*r02*x1801))+((x1793*x1800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1803=cj5*cj5;
IkReal x1804=((1.0)*r21);
IkReal x1805=(cj5*sj5);
IkReal x1806=((1.0)*r20);
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1804*x1805))+(((-1.0)*r01*x1803*x1804))+((r01*r21))+((r00*r20*x1803))+(((-1.0)*r01*x1805*x1806))+((r02*r22)))),-1);
if(!x1807.valid){
continue;
}
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1807.value)))+(x1808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1809=IKsin(j4);
IkReal x1810=IKcos(j4);
IkReal x1811=(r11*sj5);
IkReal x1812=(cj5*r00);
IkReal x1813=(cj5*r10);
IkReal x1814=(r21*sj5);
IkReal x1815=(cj5*r20);
IkReal x1816=(r01*sj5);
IkReal x1817=((1.0)*x1810);
IkReal x1818=((1.0)*x1809);
evalcond[0]=(((x1809*x1814))+(((-1.0)*x1815*x1818))+(((-1.0)*r22*x1817)));
evalcond[1]=((((-1.0)*x1814*x1817))+((x1810*x1815))+(((-1.0)*r22*x1818)));
evalcond[2]=(cj0+(((-1.0)*x1813*x1818))+((x1809*x1811))+(((-1.0)*r12*x1817)));
evalcond[3]=(cj0+(((-1.0)*r02*x1818))+(((-1.0)*x1816*x1817))+((x1810*x1812)));
evalcond[4]=(sj0+(((-1.0)*x1811*x1817))+(((-1.0)*r12*x1818))+((x1810*x1813)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1812*x1818))+(((-1.0)*r02*x1817))+((x1809*x1816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1819=((1.0)*cj5);
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1819)))),-1);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1819))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1820.value)))+(x1821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1822=IKsin(j4);
IkReal x1823=IKcos(j4);
IkReal x1824=(r11*sj5);
IkReal x1825=(cj5*r00);
IkReal x1826=(cj5*r10);
IkReal x1827=(r21*sj5);
IkReal x1828=(cj5*r20);
IkReal x1829=(r01*sj5);
IkReal x1830=((1.0)*x1823);
IkReal x1831=((1.0)*x1822);
evalcond[0]=((((-1.0)*x1828*x1831))+((x1822*x1827))+(((-1.0)*r22*x1830)));
evalcond[1]=(((x1823*x1828))+(((-1.0)*x1827*x1830))+(((-1.0)*r22*x1831)));
evalcond[2]=(cj0+((x1822*x1824))+(((-1.0)*x1826*x1831))+(((-1.0)*r12*x1830)));
evalcond[3]=(cj0+((x1823*x1825))+(((-1.0)*r02*x1831))+(((-1.0)*x1829*x1830)));
evalcond[4]=(sj0+((x1823*x1826))+(((-1.0)*r12*x1831))+(((-1.0)*x1824*x1830)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1825*x1831))+((x1822*x1829))+(((-1.0)*r02*x1830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1832=((1.0)*cj5);
IkReal x1833=((((-1.0)*r01*x1832))+(((-1.0)*r00*sj5)));
j4eval[0]=x1833;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1832)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1834=((1.0)*cj5);
IkReal x1835=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1834)));
j4eval[0]=x1835;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1834))))));
j4eval[2]=IKsign(x1835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1836=cj5*cj5;
IkReal x1837=((1.0)*sj5);
IkReal x1838=(cj5*r20);
IkReal x1839=(r11*r21);
IkReal x1840=(((r12*r22))+x1839+(((-1.0)*cj5*r10*r21*x1837))+((r10*r20*x1836))+(((-1.0)*x1836*x1839))+(((-1.0)*r11*x1837*x1838)));
j4eval[0]=x1840;
j4eval[1]=IKsign(x1840);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1837))+((cj0*x1838)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1841=cj5*cj5;
IkReal x1842=((1.0)*sj5);
IkReal x1843=(cj5*r20);
IkReal x1844=(r11*r21);
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal((((cj0*x1843))+(((-1.0)*cj0*r21*x1842)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1842))+(((-1.0)*r11*x1842*x1843))+((r10*r20*x1841))+((r12*r22))+x1844+(((-1.0)*x1841*x1844)))),-1);
if(!x1846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1845.value)+(((1.5707963267949)*(x1846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1847=IKsin(j4);
IkReal x1848=IKcos(j4);
IkReal x1849=((1.0)*sj0);
IkReal x1850=(cj5*r00);
IkReal x1851=(r11*sj5);
IkReal x1852=(cj5*r10);
IkReal x1853=(r21*sj5);
IkReal x1854=(cj5*r20);
IkReal x1855=(r01*sj5);
IkReal x1856=((1.0)*x1848);
IkReal x1857=((1.0)*x1847);
evalcond[0]=(((x1847*x1853))+(((-1.0)*r22*x1856))+(((-1.0)*x1854*x1857)));
evalcond[1]=(((x1848*x1854))+(((-1.0)*r22*x1857))+(((-1.0)*x1853*x1856)));
evalcond[2]=(cj0+((x1847*x1851))+(((-1.0)*x1852*x1857))+(((-1.0)*r12*x1856)));
evalcond[3]=((((-1.0)*x1849))+((x1847*x1855))+(((-1.0)*x1850*x1857))+(((-1.0)*r02*x1856)));
evalcond[4]=(((x1848*x1850))+(((-1.0)*r02*x1857))+(((-1.0)*x1855*x1856))+(((-1.0)*cj0)));
evalcond[5]=(((x1848*x1852))+(((-1.0)*x1849))+(((-1.0)*x1851*x1856))+(((-1.0)*r12*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1858=((1.0)*cj5);
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1858)))),-1);
if(!x1859.valid){
continue;
}
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1859.value)))+(x1860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1861=IKsin(j4);
IkReal x1862=IKcos(j4);
IkReal x1863=((1.0)*sj0);
IkReal x1864=(cj5*r00);
IkReal x1865=(r11*sj5);
IkReal x1866=(cj5*r10);
IkReal x1867=(r21*sj5);
IkReal x1868=(cj5*r20);
IkReal x1869=(r01*sj5);
IkReal x1870=((1.0)*x1862);
IkReal x1871=((1.0)*x1861);
evalcond[0]=((((-1.0)*r22*x1870))+(((-1.0)*x1868*x1871))+((x1861*x1867)));
evalcond[1]=((((-1.0)*r22*x1871))+((x1862*x1868))+(((-1.0)*x1867*x1870)));
evalcond[2]=(cj0+(((-1.0)*x1866*x1871))+(((-1.0)*r12*x1870))+((x1861*x1865)));
evalcond[3]=((((-1.0)*r02*x1870))+(((-1.0)*x1864*x1871))+(((-1.0)*x1863))+((x1861*x1869)));
evalcond[4]=((((-1.0)*x1869*x1870))+(((-1.0)*r02*x1871))+((x1862*x1864))+(((-1.0)*cj0)));
evalcond[5]=(((x1862*x1866))+(((-1.0)*r12*x1871))+(((-1.0)*x1865*x1870))+(((-1.0)*x1863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1872=((1.0)*cj5);
CheckValue<IkReal> x1873 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
CheckValue<IkReal> x1874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1872))+(((-1.0)*r00*sj5)))),-1);
if(!x1874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1873.value)+(((1.5707963267949)*(x1874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1875=IKsin(j4);
IkReal x1876=IKcos(j4);
IkReal x1877=((1.0)*sj0);
IkReal x1878=(cj5*r00);
IkReal x1879=(r11*sj5);
IkReal x1880=(cj5*r10);
IkReal x1881=(r21*sj5);
IkReal x1882=(cj5*r20);
IkReal x1883=(r01*sj5);
IkReal x1884=((1.0)*x1876);
IkReal x1885=((1.0)*x1875);
evalcond[0]=((((-1.0)*x1882*x1885))+(((-1.0)*r22*x1884))+((x1875*x1881)));
evalcond[1]=(((x1876*x1882))+(((-1.0)*r22*x1885))+(((-1.0)*x1881*x1884)));
evalcond[2]=((((-1.0)*x1880*x1885))+cj0+(((-1.0)*r12*x1884))+((x1875*x1879)));
evalcond[3]=((((-1.0)*x1877))+(((-1.0)*r02*x1884))+(((-1.0)*x1878*x1885))+((x1875*x1883)));
evalcond[4]=(((x1876*x1878))+(((-1.0)*x1883*x1884))+(((-1.0)*r02*x1885))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1879*x1884))+(((-1.0)*x1877))+((x1876*x1880))+(((-1.0)*r12*x1885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1886=(sj1*sj2);
IkReal x1887=(cj5*r01);
IkReal x1888=(cj1*cj2);
IkReal x1889=(r00*sj5);
IkReal x1890=((20000.0)*px);
IkReal x1891=((8500.0)*cj1);
CheckValue<IkReal> x1892=IKPowWithIntegerCheck(((((-2183.0)*x1888))+(((2183.0)*x1886))),-1);
if(!x1892.valid){
continue;
}
CheckValue<IkReal> x1893=IKPowWithIntegerCheck((x1886+(((-1.0)*x1888))),-1);
if(!x1893.valid){
continue;
}
if( IKabs(((x1892.value)*(((((-5952.0)*x1888*x1889))+(((-5952.0)*x1887*x1888))+((x1888*x1890))+(((-1.0)*x1889*x1891))+(((-1.0)*x1886*x1890))+(((-1.0)*x1887*x1891))+(((5952.0)*x1886*x1887))+(((5952.0)*x1886*x1889)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1893.value)*(((((-1.0)*x1887))+(((-1.0)*x1889)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1892.value)*(((((-5952.0)*x1888*x1889))+(((-5952.0)*x1887*x1888))+((x1888*x1890))+(((-1.0)*x1889*x1891))+(((-1.0)*x1886*x1890))+(((-1.0)*x1887*x1891))+(((5952.0)*x1886*x1887))+(((5952.0)*x1886*x1889))))))+IKsqr(((x1893.value)*(((((-1.0)*x1887))+(((-1.0)*x1889))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1892.value)*(((((-5952.0)*x1888*x1889))+(((-5952.0)*x1887*x1888))+((x1888*x1890))+(((-1.0)*x1889*x1891))+(((-1.0)*x1886*x1890))+(((-1.0)*x1887*x1891))+(((5952.0)*x1886*x1887))+(((5952.0)*x1886*x1889))))), ((x1893.value)*(((((-1.0)*x1887))+(((-1.0)*x1889))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1894=IKcos(j0);
IkReal x1895=IKsin(j0);
IkReal x1896=(cj5*r01);
IkReal x1897=(cj5*r11);
IkReal x1898=(r00*sj5);
IkReal x1899=(sj1*sj2);
IkReal x1900=((0.39225)*cj2);
IkReal x1901=((1.0)*cj2);
IkReal x1902=(r10*sj5);
IkReal x1903=((0.39225)*x1899);
IkReal x1904=(cj1*x1894);
IkReal x1905=(cj1*x1895);
evalcond[0]=((((-1.0)*x1901*x1904))+x1898+x1896+((x1894*x1899)));
evalcond[1]=((((-1.0)*x1901*x1905))+x1902+x1897+((x1895*x1899)));
evalcond[2]=((((-0.10915)*x1895))+(((0.425)*x1904))+(((-0.09465)*x1898))+(((-0.09465)*x1896))+((x1900*x1904))+(((-1.0)*x1894*x1903))+(((-1.0)*px)));
evalcond[3]=((((0.425)*x1905))+(((-0.09465)*x1897))+(((0.10915)*x1894))+((x1900*x1905))+(((-1.0)*py))+(((-0.09465)*x1902))+(((-1.0)*x1895*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1906=((1.0)*cj5);
IkReal x1907=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1906)));
j4eval[0]=x1907;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1906)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1908=((1.0)*cj5);
IkReal x1909=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1908)));
j4eval[0]=x1909;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1908))))));
j4eval[2]=IKsign(x1909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1910=((1.0)*sj0);
IkReal x1911=((1.0)*cj0);
IkReal x1912=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1912;
j4eval[1]=((IKabs(((((-1.0)*r02*x1911))+(((-1.0)*r12*x1910)))))+(IKabs(((((-1.0)*r11*sj5*x1910))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1911))))));
j4eval[2]=IKsign(x1912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1913=((-1.0)*r20);
IkReal x1915 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1915)==0){
continue;
}
IkReal x1914=pow(x1915,-0.5);
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1913),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1916.value));
IkReal gconst79=(r21*x1914);
IkReal gconst80=(x1913*x1914);
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1917.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1918=((-1.0)*r20);
IkReal x1919=x1914;
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1918),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
IkReal x1920=((-1.0)*(x1921.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1920;
IkReal gconst78=x1920;
IkReal gconst79=(r21*x1919);
IkReal gconst80=(x1918*x1919);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1922=((-1.0)*r20);
IkReal x1923=x1914;
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1922),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
IkReal x1924=((-1.0)*(x1925.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1924;
IkReal gconst78=x1924;
IkReal gconst79=(r21*x1923);
IkReal gconst80=(x1922*x1923);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1926=((-1.0)*r20);
IkReal x1927=x1914;
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1926),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
IkReal x1928=((-1.0)*(x1929.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1928;
IkReal gconst78=x1928;
IkReal gconst79=(r21*x1927);
IkReal gconst80=(x1926*x1927);
IkReal x1930=r22*r22;
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1930))),-1);
if(!x1933.valid){
continue;
}
IkReal x1931=x1933.value;
IkReal x1932=(x1930+((x1931*(r20*r20*r20*r20)))+(((2.0)*x1931*(r20*r20)*(r21*r21)))+((x1931*(r21*r21*r21*r21))));
j4eval[0]=x1932;
j4eval[1]=IKsign(x1932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1934=(sj1*sj2);
IkReal x1935=(gconst80*r20);
IkReal x1936=(gconst79*r21);
IkReal x1937=(cj1*cj2);
CheckValue<IkReal> x1938=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1935*x1936))+(x1936*x1936)+(x1935*x1935))),-1);
if(!x1938.valid){
continue;
}
CheckValue<IkReal> x1939 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1937))+((r22*x1934)))),IkReal((((x1934*x1936))+(((-1.0)*x1934*x1935))+(((-1.0)*x1936*x1937))+((x1935*x1937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1938.value)))+(x1939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1940=IKsin(j4);
IkReal x1941=IKcos(j4);
IkReal x1942=(gconst79*r01);
IkReal x1943=(gconst79*r21);
IkReal x1944=((1.0)*cj2);
IkReal x1945=(gconst79*r11);
IkReal x1946=((1.0)*sj0);
IkReal x1947=(cj1*sj2);
IkReal x1948=((1.0)*x1941);
IkReal x1949=(gconst80*x1941);
IkReal x1950=((1.0)*x1940);
IkReal x1951=(gconst80*x1950);
evalcond[0]=((((-1.0)*r22*x1948))+((x1940*x1943))+(((-1.0)*r20*x1951)));
evalcond[1]=(cj0+((x1940*x1945))+(((-1.0)*r12*x1948))+(((-1.0)*r10*x1951)));
evalcond[2]=((((-1.0)*x1946))+(((-1.0)*r02*x1948))+((x1940*x1942))+(((-1.0)*r00*x1951)));
evalcond[3]=((((-1.0)*r22*x1950))+((r20*x1949))+(((-1.0)*x1943*x1948))+((sj1*sj2))+(((-1.0)*cj1*x1944)));
evalcond[4]=((((-1.0)*cj0*x1947))+(((-1.0)*x1942*x1948))+(((-1.0)*r02*x1950))+((r00*x1949))+(((-1.0)*cj0*sj1*x1944)));
evalcond[5]=((((-1.0)*sj0*sj1*x1944))+(((-1.0)*x1945*x1948))+((r10*x1949))+(((-1.0)*x1946*x1947))+(((-1.0)*r12*x1950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1952=((1.0)*gconst80);
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1952)))),-1);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1953.value)))+(x1954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1955=IKsin(j4);
IkReal x1956=IKcos(j4);
IkReal x1957=(gconst79*r01);
IkReal x1958=(gconst79*r21);
IkReal x1959=((1.0)*cj2);
IkReal x1960=(gconst79*r11);
IkReal x1961=((1.0)*sj0);
IkReal x1962=(cj1*sj2);
IkReal x1963=((1.0)*x1956);
IkReal x1964=(gconst80*x1956);
IkReal x1965=((1.0)*x1955);
IkReal x1966=(gconst80*x1965);
evalcond[0]=((((-1.0)*r22*x1963))+((x1955*x1958))+(((-1.0)*r20*x1966)));
evalcond[1]=(cj0+((x1955*x1960))+(((-1.0)*r10*x1966))+(((-1.0)*r12*x1963)));
evalcond[2]=((((-1.0)*r02*x1963))+((x1955*x1957))+(((-1.0)*x1961))+(((-1.0)*r00*x1966)));
evalcond[3]=((((-1.0)*x1958*x1963))+((r20*x1964))+(((-1.0)*r22*x1965))+((sj1*sj2))+(((-1.0)*cj1*x1959)));
evalcond[4]=((((-1.0)*x1957*x1963))+(((-1.0)*cj0*x1962))+(((-1.0)*cj0*sj1*x1959))+(((-1.0)*r02*x1965))+((r00*x1964)));
evalcond[5]=(((r10*x1964))+(((-1.0)*x1961*x1962))+(((-1.0)*x1960*x1963))+(((-1.0)*r12*x1965))+(((-1.0)*sj0*sj1*x1959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1967=((1.0)*gconst80);
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1967))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1967)))),-1);
if(!x1969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1968.value)+(((1.5707963267949)*(x1969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1970=IKsin(j4);
IkReal x1971=IKcos(j4);
IkReal x1972=(gconst79*r01);
IkReal x1973=(gconst79*r21);
IkReal x1974=((1.0)*cj2);
IkReal x1975=(gconst79*r11);
IkReal x1976=((1.0)*sj0);
IkReal x1977=(cj1*sj2);
IkReal x1978=((1.0)*x1971);
IkReal x1979=(gconst80*x1971);
IkReal x1980=((1.0)*x1970);
IkReal x1981=(gconst80*x1980);
evalcond[0]=((((-1.0)*r22*x1978))+((x1970*x1973))+(((-1.0)*r20*x1981)));
evalcond[1]=(cj0+((x1970*x1975))+(((-1.0)*r10*x1981))+(((-1.0)*r12*x1978)));
evalcond[2]=((((-1.0)*r02*x1978))+((x1970*x1972))+(((-1.0)*x1976))+(((-1.0)*r00*x1981)));
evalcond[3]=(((r20*x1979))+(((-1.0)*x1973*x1978))+((sj1*sj2))+(((-1.0)*cj1*x1974))+(((-1.0)*r22*x1980)));
evalcond[4]=((((-1.0)*cj0*x1977))+(((-1.0)*cj0*sj1*x1974))+(((-1.0)*r02*x1980))+(((-1.0)*x1972*x1978))+((r00*x1979)));
evalcond[5]=((((-1.0)*x1976*x1977))+(((-1.0)*x1975*x1978))+(((-1.0)*sj0*sj1*x1974))+((r10*x1979))+(((-1.0)*r12*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1982=((-1.0)*r21);
IkReal x1984 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1984)==0){
continue;
}
IkReal x1983=pow(x1984,-0.5);
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal(x1982),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1985.value))));
IkReal gconst82=(x1982*x1983);
IkReal gconst83=((1.0)*r20*x1983);
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1986.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1987=((-1.0)*r21);
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal(x1987),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
IkReal x1988=((1.0)*(x1990.value));
IkReal x1989=x1983;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1988)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1988)));
IkReal gconst82=(x1987*x1989);
IkReal gconst83=((1.0)*r20*x1989);
IkReal x1991=r22*r22;
IkReal x1992=((1.0)*x1991);
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(((-1.0)+x1991),-1);
if(!x1996.valid){
continue;
}
IkReal x1993=x1996.value;
if((((1.0)+(((-1.0)*x1992)))) < -0.00001)
continue;
IkReal x1994=IKsqrt(((1.0)+(((-1.0)*x1992))));
IkReal x1995=(cj0*x1993*x1994);
j4eval[0]=((IKabs((x1995+(((-1.0)*x1992*x1995)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1997=((-1.0)*r21);
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(x1997),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
IkReal x1998=((1.0)*(x2000.value));
IkReal x1999=x1983;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1998)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1998)));
IkReal gconst82=(x1997*x1999);
IkReal gconst83=((1.0)*r20*x1999);
IkReal x2001=r22*r22;
IkReal x2002=((1.0)*x2001);
CheckValue<IkReal> x2006=IKPowWithIntegerCheck(((-1.0)+x2001),-1);
if(!x2006.valid){
continue;
}
IkReal x2003=x2006.value;
if((((1.0)+(((-1.0)*x2002)))) < -0.00001)
continue;
IkReal x2004=IKsqrt(((1.0)+(((-1.0)*x2002))));
IkReal x2005=(sj0*x2003*x2004);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2005+(((-1.0)*x2002*x2005))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2007=((-1.0)*r21);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(x2007),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
IkReal x2008=((1.0)*(x2010.value));
IkReal x2009=x1983;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2008)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2008)));
IkReal gconst82=(x2007*x2009);
IkReal gconst83=((1.0)*r20*x2009);
IkReal x2011=r22*r22;
IkReal x2012=(r12*sj0);
IkReal x2013=(cj0*r02);
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(((-1.0)+x2011),-1);
if(!x2017.valid){
continue;
}
IkReal x2014=x2017.value;
if((((1.0)+(((-1.0)*x2011)))) < -0.00001)
continue;
IkReal x2015=IKsqrt(((1.0)+(((-1.0)*x2011))));
IkReal x2016=(r22*x2014*x2015);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2012*x2016))+((x2013*x2016)))))+(IKabs(((((-1.0)*x2012))+(((-1.0)*x2013))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2018=((1.0)*sj0);
IkReal x2019=((1.0)*cj0);
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2018))+(((-1.0)*r02*x2019)))),IkReal(((((-1.0)*gconst82*r11*x2018))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x2019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2020.value)))+(x2021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2022=IKsin(j4);
IkReal x2023=IKcos(j4);
IkReal x2024=(gconst82*r11);
IkReal x2025=((1.0)*cj2);
IkReal x2026=((1.0)*sj0);
IkReal x2027=(cj1*sj2);
IkReal x2028=((1.0)*x2023);
IkReal x2029=(gconst83*x2023);
IkReal x2030=(gconst82*x2022);
IkReal x2031=((1.0)*x2022);
evalcond[0]=((((-1.0)*gconst83*r20*x2031))+((r21*x2030))+(((-1.0)*r22*x2028)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2031))+((x2022*x2024))+(((-1.0)*r12*x2028)));
evalcond[2]=((((-1.0)*gconst83*r00*x2031))+((r01*x2030))+(((-1.0)*r02*x2028))+(((-1.0)*x2026)));
evalcond[3]=((((-1.0)*r22*x2031))+(((-1.0)*cj1*x2025))+((sj1*sj2))+((r20*x2029))+(((-1.0)*gconst82*r21*x2028)));
evalcond[4]=((((-1.0)*cj0*sj1*x2025))+((r00*x2029))+(((-1.0)*gconst82*r01*x2028))+(((-1.0)*cj0*x2027))+(((-1.0)*r02*x2031)));
evalcond[5]=(((r10*x2029))+(((-1.0)*r12*x2031))+(((-1.0)*x2024*x2028))+(((-1.0)*sj0*sj1*x2025))+(((-1.0)*x2026*x2027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2032=((1.0)*gconst83);
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
CheckValue<IkReal> x2034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2032))+(((-1.0)*gconst82*r10)))),-1);
if(!x2034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2033.value)+(((1.5707963267949)*(x2034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2035=IKsin(j4);
IkReal x2036=IKcos(j4);
IkReal x2037=(gconst82*r11);
IkReal x2038=((1.0)*cj2);
IkReal x2039=((1.0)*sj0);
IkReal x2040=(cj1*sj2);
IkReal x2041=((1.0)*x2036);
IkReal x2042=(gconst83*x2036);
IkReal x2043=(gconst82*x2035);
IkReal x2044=((1.0)*x2035);
evalcond[0]=((((-1.0)*gconst83*r20*x2044))+((r21*x2043))+(((-1.0)*r22*x2041)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2044))+((x2035*x2037))+(((-1.0)*r12*x2041)));
evalcond[2]=((((-1.0)*r02*x2041))+(((-1.0)*gconst83*r00*x2044))+(((-1.0)*x2039))+((r01*x2043)));
evalcond[3]=((((-1.0)*r22*x2044))+((r20*x2042))+(((-1.0)*cj1*x2038))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2041)));
evalcond[4]=((((-1.0)*cj0*x2040))+(((-1.0)*gconst82*r01*x2041))+(((-1.0)*r02*x2044))+(((-1.0)*cj0*sj1*x2038))+((r00*x2042)));
evalcond[5]=((((-1.0)*x2039*x2040))+(((-1.0)*sj0*sj1*x2038))+(((-1.0)*x2037*x2041))+((r10*x2042))+(((-1.0)*r12*x2044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2045=((1.0)*gconst83);
CheckValue<IkReal> x2046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x2045)))),-1);
if(!x2046.valid){
continue;
}
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2046.value)))+(x2047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2048=IKsin(j4);
IkReal x2049=IKcos(j4);
IkReal x2050=(gconst82*r11);
IkReal x2051=((1.0)*cj2);
IkReal x2052=((1.0)*sj0);
IkReal x2053=(cj1*sj2);
IkReal x2054=((1.0)*x2049);
IkReal x2055=(gconst83*x2049);
IkReal x2056=(gconst82*x2048);
IkReal x2057=((1.0)*x2048);
evalcond[0]=((((-1.0)*gconst83*r20*x2057))+(((-1.0)*r22*x2054))+((r21*x2056)));
evalcond[1]=(cj0+(((-1.0)*r12*x2054))+(((-1.0)*gconst83*r10*x2057))+((x2048*x2050)));
evalcond[2]=((((-1.0)*gconst83*r00*x2057))+((r01*x2056))+(((-1.0)*r02*x2054))+(((-1.0)*x2052)));
evalcond[3]=((((-1.0)*cj1*x2051))+(((-1.0)*r22*x2057))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2054))+((r20*x2055)));
evalcond[4]=((((-1.0)*gconst82*r01*x2054))+(((-1.0)*r02*x2057))+(((-1.0)*cj0*x2053))+(((-1.0)*cj0*sj1*x2051))+((r00*x2055)));
evalcond[5]=(((r10*x2055))+(((-1.0)*r12*x2057))+(((-1.0)*x2050*x2054))+(((-1.0)*sj0*sj1*x2051))+(((-1.0)*x2052*x2053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2058=((-1.0)*r10);
IkReal x2060 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2060)==0){
continue;
}
IkReal x2059=pow(x2060,-0.5);
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2058),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2061.value));
IkReal gconst85=(r11*x2059);
IkReal gconst86=(x2058*x2059);
CheckValue<IkReal> x2062 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2062.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2063=((-1.0)*r10);
IkReal x2064=x2059;
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2063),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
IkReal x2065=((-1.0)*(x2066.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2065;
IkReal gconst84=x2065;
IkReal gconst85=(r11*x2064);
IkReal gconst86=(x2063*x2064);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2067=((1.0)*sj0);
IkReal x2068=((1.0)*gconst85);
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2068)))),-1);
if(!x2069.valid){
continue;
}
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2067))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2067))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x2068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2069.value)))+(x2070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2071=IKsin(j4);
IkReal x2072=IKcos(j4);
IkReal x2073=(gconst85*r21);
IkReal x2074=(gconst86*r00);
IkReal x2075=(gconst86*r10);
IkReal x2076=((1.0)*cj2);
IkReal x2077=(gconst85*r11);
IkReal x2078=(gconst85*r01);
IkReal x2079=((1.0)*sj0);
IkReal x2080=(gconst86*r20);
IkReal x2081=(cj1*sj2);
IkReal x2082=((1.0)*x2072);
IkReal x2083=((1.0)*x2071);
evalcond[0]=((((-1.0)*r22*x2082))+((x2071*x2073))+(((-1.0)*x2080*x2083)));
evalcond[1]=(cj0+((x2071*x2077))+(((-1.0)*r12*x2082))+(((-1.0)*x2075*x2083)));
evalcond[2]=((((-1.0)*r02*x2082))+(((-1.0)*x2074*x2083))+(((-1.0)*x2079))+((x2071*x2078)));
evalcond[3]=((((-1.0)*r22*x2083))+((sj1*sj2))+((x2072*x2080))+(((-1.0)*x2073*x2082))+(((-1.0)*cj1*x2076)));
evalcond[4]=((((-1.0)*r02*x2083))+(((-1.0)*x2078*x2082))+(((-1.0)*cj0*x2081))+(((-1.0)*cj0*sj1*x2076))+((x2072*x2074)));
evalcond[5]=((((-1.0)*sj0*sj1*x2076))+(((-1.0)*x2077*x2082))+(((-1.0)*r12*x2083))+((x2072*x2075))+(((-1.0)*x2079*x2081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2084=((1.0)*gconst86);
CheckValue<IkReal> x2085 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2084))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2085.valid){
continue;
}
CheckValue<IkReal> x2086=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2084)))),-1);
if(!x2086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2085.value)+(((1.5707963267949)*(x2086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2087=IKsin(j4);
IkReal x2088=IKcos(j4);
IkReal x2089=(gconst85*r21);
IkReal x2090=(gconst86*r00);
IkReal x2091=(gconst86*r10);
IkReal x2092=((1.0)*cj2);
IkReal x2093=(gconst85*r11);
IkReal x2094=(gconst85*r01);
IkReal x2095=((1.0)*sj0);
IkReal x2096=(gconst86*r20);
IkReal x2097=(cj1*sj2);
IkReal x2098=((1.0)*x2088);
IkReal x2099=((1.0)*x2087);
evalcond[0]=((((-1.0)*x2096*x2099))+((x2087*x2089))+(((-1.0)*r22*x2098)));
evalcond[1]=(cj0+(((-1.0)*x2091*x2099))+((x2087*x2093))+(((-1.0)*r12*x2098)));
evalcond[2]=((((-1.0)*x2095))+(((-1.0)*x2090*x2099))+((x2087*x2094))+(((-1.0)*r02*x2098)));
evalcond[3]=(((x2088*x2096))+((sj1*sj2))+(((-1.0)*x2089*x2098))+(((-1.0)*cj1*x2092))+(((-1.0)*r22*x2099)));
evalcond[4]=((((-1.0)*x2094*x2098))+((x2088*x2090))+(((-1.0)*cj0*sj1*x2092))+(((-1.0)*r02*x2099))+(((-1.0)*cj0*x2097)));
evalcond[5]=(((x2088*x2091))+(((-1.0)*x2095*x2097))+(((-1.0)*x2093*x2098))+(((-1.0)*r12*x2099))+(((-1.0)*sj0*sj1*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2100=((-1.0)*r11);
IkReal x2102 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2102)==0){
continue;
}
IkReal x2101=pow(x2102,-0.5);
CheckValue<IkReal> x2103 = IKatan2WithCheck(IkReal(x2100),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2103.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2103.value))));
IkReal gconst88=(x2100*x2101);
IkReal gconst89=((1.0)*r10*x2101);
CheckValue<IkReal> x2104 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2104.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2104.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2105=((-1.0)*r11);
CheckValue<IkReal> x2108 = IKatan2WithCheck(IkReal(x2105),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2108.valid){
continue;
}
IkReal x2106=((1.0)*(x2108.value));
IkReal x2107=x2101;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2106)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2106)));
IkReal gconst88=(x2105*x2107);
IkReal gconst89=((1.0)*r10*x2107);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2109=((-1.0)*r11);
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal(x2109),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
IkReal x2110=((1.0)*(x2112.value));
IkReal x2111=x2101;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2110)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2110)));
IkReal gconst88=(x2109*x2111);
IkReal gconst89=((1.0)*r10*x2111);
IkReal x2113=r12*r12;
IkReal x2114=((1.0)*sj0);
IkReal x2115=(cj0*r02);
IkReal x2116=x2101;
j4eval[0]=((IKabs(((((-1.0)*x2114*x2116))+((sj0*x2113*x2116))+((r12*x2115*x2116)))))+(IKabs(((((-1.0)*r12*x2114))+(((-1.0)*x2115))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2117=((-1.0)*r11);
CheckValue<IkReal> x2120 = IKatan2WithCheck(IkReal(x2117),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2120.valid){
continue;
}
IkReal x2118=((1.0)*(x2120.value));
IkReal x2119=x2101;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2118)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2118)));
IkReal gconst88=(x2117*x2119);
IkReal gconst89=((1.0)*r10*x2119);
IkReal x2121=r12*r12;
IkReal x2122=(cj1*cj2*r22);
IkReal x2123=(r22*sj1*sj2);
CheckValue<IkReal> x2127=IKPowWithIntegerCheck(((-1.0)+x2121),-1);
if(!x2127.valid){
continue;
}
IkReal x2124=x2127.value;
if((((1.0)+(((-1.0)*x2121)))) < -0.00001)
continue;
IkReal x2125=IKsqrt(((1.0)+(((-1.0)*x2121))));
IkReal x2126=(r12*x2124*x2125);
j4eval[0]=((IKabs((x2123+(((-1.0)*x2122)))))+(IKabs((((x2122*x2126))+(((-1.0)*x2123*x2126))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2128=(cj1*cj2);
IkReal x2129=(gconst89*r20);
IkReal x2130=(gconst88*r21);
IkReal x2131=(sj1*sj2);
CheckValue<IkReal> x2132 = IKatan2WithCheck(IkReal((((r22*x2131))+(((-1.0)*r22*x2128)))),IkReal(((((-1.0)*x2128*x2130))+((x2128*x2129))+(((-1.0)*x2129*x2131))+((x2130*x2131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
CheckValue<IkReal> x2133=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2129*x2129)+(((-2.0)*x2129*x2130))+(x2130*x2130))),-1);
if(!x2133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2132.value)+(((1.5707963267949)*(x2133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2134=IKsin(j4);
IkReal x2135=IKcos(j4);
IkReal x2136=((1.0)*sj0);
IkReal x2137=((1.0)*cj2);
IkReal x2138=(gconst89*r20);
IkReal x2139=(gconst89*r10);
IkReal x2140=(gconst89*r00);
IkReal x2141=(cj1*sj2);
IkReal x2142=((1.0)*x2135);
IkReal x2143=((1.0)*x2134);
IkReal x2144=(gconst88*x2134);
evalcond[0]=((((-1.0)*x2138*x2143))+(((-1.0)*r22*x2142))+((r21*x2144)));
evalcond[1]=(((r11*x2144))+cj0+(((-1.0)*r12*x2142))+(((-1.0)*x2139*x2143)));
evalcond[2]=((((-1.0)*x2136))+(((-1.0)*r02*x2142))+(((-1.0)*x2140*x2143))+((r01*x2144)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2137))+((x2135*x2138))+(((-1.0)*r22*x2143))+(((-1.0)*gconst88*r21*x2142)));
evalcond[4]=((((-1.0)*r02*x2143))+(((-1.0)*cj0*x2141))+(((-1.0)*gconst88*r01*x2142))+((x2135*x2140))+(((-1.0)*cj0*sj1*x2137)));
evalcond[5]=((((-1.0)*x2136*x2141))+((x2135*x2139))+(((-1.0)*r12*x2143))+(((-1.0)*gconst88*r11*x2142))+(((-1.0)*cj2*sj1*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2145=((1.0)*sj0);
IkReal x2146=((1.0)*cj0);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2146))+(((-1.0)*r12*x2145)))),IkReal(((((-1.0)*gconst88*r01*x2146))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2145))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2147.value)))+(x2148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2149=IKsin(j4);
IkReal x2150=IKcos(j4);
IkReal x2151=((1.0)*sj0);
IkReal x2152=((1.0)*cj2);
IkReal x2153=(gconst89*r20);
IkReal x2154=(gconst89*r10);
IkReal x2155=(gconst89*r00);
IkReal x2156=(cj1*sj2);
IkReal x2157=((1.0)*x2150);
IkReal x2158=((1.0)*x2149);
IkReal x2159=(gconst88*x2149);
evalcond[0]=((((-1.0)*x2153*x2158))+(((-1.0)*r22*x2157))+((r21*x2159)));
evalcond[1]=(cj0+(((-1.0)*r12*x2157))+(((-1.0)*x2154*x2158))+((r11*x2159)));
evalcond[2]=((((-1.0)*r02*x2157))+(((-1.0)*x2151))+((r01*x2159))+(((-1.0)*x2155*x2158)));
evalcond[3]=(((sj1*sj2))+((x2150*x2153))+(((-1.0)*cj1*x2152))+(((-1.0)*gconst88*r21*x2157))+(((-1.0)*r22*x2158)));
evalcond[4]=((((-1.0)*cj0*sj1*x2152))+(((-1.0)*r02*x2158))+((x2150*x2155))+(((-1.0)*cj0*x2156))+(((-1.0)*gconst88*r01*x2157)));
evalcond[5]=((((-1.0)*r12*x2158))+((x2150*x2154))+(((-1.0)*cj2*sj1*x2151))+(((-1.0)*gconst88*r11*x2157))+(((-1.0)*x2151*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2160=((1.0)*gconst89);
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2160))+(((-1.0)*gconst88*r00)))),-1);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2160))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2161.value)))+(x2162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2163=IKsin(j4);
IkReal x2164=IKcos(j4);
IkReal x2165=((1.0)*sj0);
IkReal x2166=((1.0)*cj2);
IkReal x2167=(gconst89*r20);
IkReal x2168=(gconst89*r10);
IkReal x2169=(gconst89*r00);
IkReal x2170=(cj1*sj2);
IkReal x2171=((1.0)*x2164);
IkReal x2172=((1.0)*x2163);
IkReal x2173=(gconst88*x2163);
evalcond[0]=(((r21*x2173))+(((-1.0)*r22*x2171))+(((-1.0)*x2167*x2172)));
evalcond[1]=((((-1.0)*x2168*x2172))+((r11*x2173))+cj0+(((-1.0)*r12*x2171)));
evalcond[2]=(((r01*x2173))+(((-1.0)*x2169*x2172))+(((-1.0)*r02*x2171))+(((-1.0)*x2165)));
evalcond[3]=(((x2164*x2167))+((sj1*sj2))+(((-1.0)*cj1*x2166))+(((-1.0)*gconst88*r21*x2171))+(((-1.0)*r22*x2172)));
evalcond[4]=((((-1.0)*gconst88*r01*x2171))+((x2164*x2169))+(((-1.0)*cj0*sj1*x2166))+(((-1.0)*r02*x2172))+(((-1.0)*cj0*x2170)));
evalcond[5]=(((x2164*x2168))+(((-1.0)*gconst88*r11*x2171))+(((-1.0)*cj2*sj1*x2165))+(((-1.0)*x2165*x2170))+(((-1.0)*r12*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2174=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2174;
j4eval[1]=IKsign(x2174);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2175=((1.0)*cj5);
IkReal x2176=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2175)));
j4eval[0]=x2176;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2175))+((r21*sj5))))));
j4eval[2]=IKsign(x2176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2177=cj5*cj5;
IkReal x2178=r11*r11;
IkReal x2179=(r11*sj5);
IkReal x2180=(cj5*r10);
IkReal x2181=((r12*r12)+(((-1.0)*x2177*x2178))+(((-2.0)*x2179*x2180))+x2178+((x2177*(r10*r10))));
j4eval[0]=x2181;
j4eval[1]=IKsign(x2181);
j4eval[2]=((IKabs(r12))+(IKabs((x2180+(((-1.0)*x2179))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2182=cj5*cj5;
IkReal x2183=r11*r11;
IkReal x2184=(cj5*r10);
IkReal x2185=(r11*sj5);
CheckValue<IkReal> x2186=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2182*(r10*r10)))+x2183+(((-2.0)*x2184*x2185))+(((-1.0)*x2182*x2183)))),-1);
if(!x2186.valid){
continue;
}
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal((x2184+(((-1.0)*x2185)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2186.value)))+(x2187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2188=IKsin(j4);
IkReal x2189=IKcos(j4);
IkReal x2190=(cj5*r10);
IkReal x2191=(r01*sj5);
IkReal x2192=((1.0)*cj2);
IkReal x2193=(cj5*r00);
IkReal x2194=(cj5*r20);
IkReal x2195=((1.0)*x2189);
IkReal x2196=((1.0)*x2188);
IkReal x2197=(sj5*x2188);
evalcond[0]=((((-1.0)*x2194*x2196))+((r21*x2197))+(((-1.0)*r22*x2195)));
evalcond[1]=((((-1.0)*x2193*x2196))+(((-1.0)*r02*x2195))+((x2188*x2191)));
evalcond[2]=(((x2189*x2190))+(((-1.0)*r12*x2196))+(((-1.0)*r11*sj5*x2195)));
evalcond[3]=((1.0)+((r11*x2197))+(((-1.0)*r12*x2195))+(((-1.0)*x2190*x2196)));
evalcond[4]=((((-1.0)*r21*sj5*x2195))+((sj1*sj2))+((x2189*x2194))+(((-1.0)*r22*x2196))+(((-1.0)*cj1*x2192)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2191*x2195))+(((-1.0)*sj1*x2192))+((x2189*x2193))+(((-1.0)*r02*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2198=((1.0)*cj5);
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2198))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2198))+(((-1.0)*r00*sj5)))),-1);
if(!x2200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2199.value)+(((1.5707963267949)*(x2200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2201=IKsin(j4);
IkReal x2202=IKcos(j4);
IkReal x2203=(cj5*r10);
IkReal x2204=(r01*sj5);
IkReal x2205=((1.0)*cj2);
IkReal x2206=(cj5*r00);
IkReal x2207=(cj5*r20);
IkReal x2208=((1.0)*x2202);
IkReal x2209=((1.0)*x2201);
IkReal x2210=(sj5*x2201);
evalcond[0]=((((-1.0)*x2207*x2209))+(((-1.0)*r22*x2208))+((r21*x2210)));
evalcond[1]=(((x2201*x2204))+(((-1.0)*x2206*x2209))+(((-1.0)*r02*x2208)));
evalcond[2]=(((x2202*x2203))+(((-1.0)*r12*x2209))+(((-1.0)*r11*sj5*x2208)));
evalcond[3]=((1.0)+(((-1.0)*x2203*x2209))+(((-1.0)*r12*x2208))+((r11*x2210)));
evalcond[4]=(((x2202*x2207))+(((-1.0)*cj1*x2205))+(((-1.0)*r22*x2209))+((sj1*sj2))+(((-1.0)*r21*sj5*x2208)));
evalcond[5]=(((x2202*x2206))+(((-1.0)*x2204*x2208))+(((-1.0)*sj1*x2205))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2211=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2211.valid){
continue;
}
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2211.value)))+(x2212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2213=IKsin(j4);
IkReal x2214=IKcos(j4);
IkReal x2215=(cj5*r10);
IkReal x2216=(r01*sj5);
IkReal x2217=((1.0)*cj2);
IkReal x2218=(cj5*r00);
IkReal x2219=(cj5*r20);
IkReal x2220=((1.0)*x2214);
IkReal x2221=((1.0)*x2213);
IkReal x2222=(sj5*x2213);
evalcond[0]=((((-1.0)*x2219*x2221))+((r21*x2222))+(((-1.0)*r22*x2220)));
evalcond[1]=((((-1.0)*r02*x2220))+(((-1.0)*x2218*x2221))+((x2213*x2216)));
evalcond[2]=((((-1.0)*r11*sj5*x2220))+((x2214*x2215))+(((-1.0)*r12*x2221)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2220))+(((-1.0)*x2215*x2221))+((r11*x2222)));
evalcond[4]=((((-1.0)*cj1*x2217))+((sj1*sj2))+((x2214*x2219))+(((-1.0)*r21*sj5*x2220))+(((-1.0)*r22*x2221)));
evalcond[5]=((((-1.0)*sj1*x2217))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2221))+((x2214*x2218))+(((-1.0)*x2216*x2220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2223=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2223;
j4eval[1]=IKsign(x2223);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2224=((1.0)*cj5);
IkReal x2225=((((-1.0)*r21*x2224))+(((-1.0)*r20*sj5)));
j4eval[0]=x2225;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2224))))));
j4eval[2]=IKsign(x2225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2226=cj5*cj5;
IkReal x2227=r11*r11;
IkReal x2228=(cj5*r10);
IkReal x2229=(r11*sj5);
IkReal x2230=(((x2226*x2227))+(((-1.0)*x2227))+(((-1.0)*(r12*r12)))+(((-1.0)*x2226*(r10*r10)))+(((2.0)*x2228*x2229)));
j4eval[0]=x2230;
j4eval[1]=((IKabs((x2228+(((-1.0)*x2229)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2231=cj5*cj5;
IkReal x2232=r11*r11;
IkReal x2233=(cj5*r10);
IkReal x2234=(r11*sj5);
CheckValue<IkReal> x2235=IKPowWithIntegerCheck(IKsign(((((2.0)*x2233*x2234))+(((-1.0)*x2231*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2232))+((x2231*x2232)))),-1);
if(!x2235.valid){
continue;
}
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal((x2233+(((-1.0)*x2234)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2235.value)))+(x2236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2237=IKsin(j4);
IkReal x2238=IKcos(j4);
IkReal x2239=(cj5*r10);
IkReal x2240=(r01*sj5);
IkReal x2241=(cj5*r00);
IkReal x2242=(cj5*r20);
IkReal x2243=((1.0)*x2238);
IkReal x2244=((1.0)*x2237);
IkReal x2245=(sj5*x2237);
evalcond[0]=((((-1.0)*r22*x2243))+(((-1.0)*x2242*x2244))+((r21*x2245)));
evalcond[1]=((((-1.0)*r02*x2243))+(((-1.0)*x2241*x2244))+((x2237*x2240)));
evalcond[2]=(((x2238*x2239))+(((-1.0)*r12*x2244))+(((-1.0)*r11*sj5*x2243)));
evalcond[3]=((-1.0)+((r11*x2245))+(((-1.0)*r12*x2243))+(((-1.0)*x2239*x2244)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2244))+((cj1*sj2))+(((-1.0)*x2240*x2243))+((x2238*x2241)));
evalcond[5]=((((-1.0)*r22*x2244))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2243))+((x2238*x2242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2246=((1.0)*cj5);
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
CheckValue<IkReal> x2248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2246))+(((-1.0)*r20*sj5)))),-1);
if(!x2248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2247.value)+(((1.5707963267949)*(x2248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2249=IKsin(j4);
IkReal x2250=IKcos(j4);
IkReal x2251=(cj5*r10);
IkReal x2252=(r01*sj5);
IkReal x2253=(cj5*r00);
IkReal x2254=(cj5*r20);
IkReal x2255=((1.0)*x2250);
IkReal x2256=((1.0)*x2249);
IkReal x2257=(sj5*x2249);
evalcond[0]=((((-1.0)*r22*x2255))+((r21*x2257))+(((-1.0)*x2254*x2256)));
evalcond[1]=((((-1.0)*r02*x2255))+((x2249*x2252))+(((-1.0)*x2253*x2256)));
evalcond[2]=((((-1.0)*r12*x2256))+(((-1.0)*r11*sj5*x2255))+((x2250*x2251)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2255))+(((-1.0)*x2251*x2256))+((r11*x2257)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2256))+(((-1.0)*x2252*x2255))+((x2250*x2253)));
evalcond[5]=((((-1.0)*r22*x2256))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2255))+((x2250*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2258.value)+(((1.5707963267949)*(x2259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2260=IKsin(j4);
IkReal x2261=IKcos(j4);
IkReal x2262=(cj5*r10);
IkReal x2263=(r01*sj5);
IkReal x2264=(cj5*r00);
IkReal x2265=(cj5*r20);
IkReal x2266=((1.0)*x2261);
IkReal x2267=((1.0)*x2260);
IkReal x2268=(sj5*x2260);
evalcond[0]=(((r21*x2268))+(((-1.0)*r22*x2266))+(((-1.0)*x2265*x2267)));
evalcond[1]=(((x2260*x2263))+(((-1.0)*r02*x2266))+(((-1.0)*x2264*x2267)));
evalcond[2]=(((x2261*x2262))+(((-1.0)*r11*sj5*x2266))+(((-1.0)*r12*x2267)));
evalcond[3]=((-1.0)+((r11*x2268))+(((-1.0)*r12*x2266))+(((-1.0)*x2262*x2267)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2261*x2264))+(((-1.0)*x2263*x2266))+(((-1.0)*r02*x2267)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2261*x2265))+(((-1.0)*r22*x2267))+(((-1.0)*r21*sj5*x2266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2269=((-1.0)*r00);
IkReal x2271 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2271)==0){
continue;
}
IkReal x2270=pow(x2271,-0.5);
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2269),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2272.value));
IkReal gconst91=(r01*x2270);
IkReal gconst92=(x2269*x2270);
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2274=((-1.0)*r00);
IkReal x2275=x2270;
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2274),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
IkReal x2276=((-1.0)*(x2277.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2276;
IkReal gconst90=x2276;
IkReal gconst91=(r01*x2275);
IkReal gconst92=(x2274*x2275);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2278=((1.0)*sj0);
IkReal x2279=((1.0)*cj0);
CheckValue<IkReal> x2280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2280.valid){
continue;
}
CheckValue<IkReal> x2281 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2279))+(((-1.0)*r12*x2278)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2278))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2280.value)))+(x2281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2282=IKsin(j4);
IkReal x2283=IKcos(j4);
IkReal x2284=((1.0)*cj2);
IkReal x2285=(gconst92*r00);
IkReal x2286=(gconst92*r20);
IkReal x2287=((1.0)*sj0);
IkReal x2288=(gconst92*r10);
IkReal x2289=(cj1*sj2);
IkReal x2290=((1.0)*x2283);
IkReal x2291=(gconst91*x2282);
IkReal x2292=((1.0)*x2282);
evalcond[0]=(((r21*x2291))+(((-1.0)*x2286*x2292))+(((-1.0)*r22*x2290)));
evalcond[1]=(cj0+(((-1.0)*x2288*x2292))+(((-1.0)*r12*x2290))+((r11*x2291)));
evalcond[2]=((((-1.0)*x2285*x2292))+(((-1.0)*x2287))+(((-1.0)*r02*x2290))+((r01*x2291)));
evalcond[3]=((((-1.0)*gconst91*r21*x2290))+((sj1*sj2))+((x2283*x2286))+(((-1.0)*cj1*x2284))+(((-1.0)*r22*x2292)));
evalcond[4]=((((-1.0)*cj0*x2289))+(((-1.0)*r02*x2292))+(((-1.0)*cj0*sj1*x2284))+((x2283*x2285))+(((-1.0)*gconst91*r01*x2290)));
evalcond[5]=((((-1.0)*gconst91*r11*x2290))+((x2283*x2288))+(((-1.0)*r12*x2292))+(((-1.0)*x2287*x2289))+(((-1.0)*sj0*sj1*x2284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2293=((1.0)*gconst92);
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2293)))),-1);
if(!x2294.valid){
continue;
}
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2293))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2294.value)))+(x2295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2296=IKsin(j4);
IkReal x2297=IKcos(j4);
IkReal x2298=((1.0)*cj2);
IkReal x2299=(gconst92*r00);
IkReal x2300=(gconst92*r20);
IkReal x2301=((1.0)*sj0);
IkReal x2302=(gconst92*r10);
IkReal x2303=(cj1*sj2);
IkReal x2304=((1.0)*x2297);
IkReal x2305=(gconst91*x2296);
IkReal x2306=((1.0)*x2296);
evalcond[0]=((((-1.0)*r22*x2304))+(((-1.0)*x2300*x2306))+((r21*x2305)));
evalcond[1]=(((r11*x2305))+cj0+(((-1.0)*x2302*x2306))+(((-1.0)*r12*x2304)));
evalcond[2]=((((-1.0)*x2301))+(((-1.0)*x2299*x2306))+((r01*x2305))+(((-1.0)*r02*x2304)));
evalcond[3]=((((-1.0)*r22*x2306))+((sj1*sj2))+((x2297*x2300))+(((-1.0)*gconst91*r21*x2304))+(((-1.0)*cj1*x2298)));
evalcond[4]=((((-1.0)*cj0*x2303))+(((-1.0)*cj0*sj1*x2298))+(((-1.0)*gconst91*r01*x2304))+(((-1.0)*r02*x2306))+((x2297*x2299)));
evalcond[5]=((((-1.0)*x2301*x2303))+(((-1.0)*gconst91*r11*x2304))+(((-1.0)*sj0*sj1*x2298))+((x2297*x2302))+(((-1.0)*r12*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2307=((-1.0)*r01);
IkReal x2309 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2309)==0){
continue;
}
IkReal x2308=pow(x2309,-0.5);
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal(x2307),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2310.value))));
IkReal gconst94=(x2307*x2308);
IkReal gconst95=((1.0)*r00*x2308);
CheckValue<IkReal> x2311 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2311.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2311.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2312=((-1.0)*r01);
CheckValue<IkReal> x2315 = IKatan2WithCheck(IkReal(x2312),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2315.valid){
continue;
}
IkReal x2313=((1.0)*(x2315.value));
IkReal x2314=x2308;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2313)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2313)));
IkReal gconst94=(x2312*x2314);
IkReal gconst95=((1.0)*r00*x2314);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2316=((-1.0)*r01);
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal(x2316),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
IkReal x2317=((1.0)*(x2319.value));
IkReal x2318=x2308;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2317)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2317)));
IkReal gconst94=(x2316*x2318);
IkReal gconst95=((1.0)*r00*x2318);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2320=((-1.0)*r01);
CheckValue<IkReal> x2323 = IKatan2WithCheck(IkReal(x2320),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2323.valid){
continue;
}
IkReal x2321=((1.0)*(x2323.value));
IkReal x2322=x2308;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2321)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2321)));
IkReal gconst94=(x2320*x2322);
IkReal gconst95=((1.0)*r00*x2322);
IkReal x2324=r02*r02;
IkReal x2325=(r12*sj0);
IkReal x2326=((1.0)*cj0);
IkReal x2327=x2308;
j4eval[0]=((IKabs(((((-1.0)*r02*x2326))+(((-1.0)*x2325)))))+(IKabs((((r02*x2325*x2327))+(((-1.0)*x2326*x2327))+((cj0*x2324*x2327))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2328=((1.0)*sj0);
IkReal x2329=((1.0)*cj0);
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2330.valid){
continue;
}
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2328))+(((-1.0)*r02*x2329)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2328))+((cj0*gconst95*r00))+(((-1.0)*gconst94*r01*x2329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2330.value)))+(x2331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2332=IKsin(j4);
IkReal x2333=IKcos(j4);
IkReal x2334=(gconst94*r11);
IkReal x2335=((1.0)*cj2);
IkReal x2336=(gconst94*r21);
IkReal x2337=((1.0)*sj0);
IkReal x2338=(gconst94*r01);
IkReal x2339=(cj1*sj2);
IkReal x2340=((1.0)*x2333);
IkReal x2341=(gconst95*x2333);
IkReal x2342=((1.0)*x2332);
IkReal x2343=(gconst95*x2342);
evalcond[0]=(((x2332*x2336))+(((-1.0)*r20*x2343))+(((-1.0)*r22*x2340)));
evalcond[1]=(cj0+((x2332*x2334))+(((-1.0)*r10*x2343))+(((-1.0)*r12*x2340)));
evalcond[2]=((((-1.0)*x2337))+((x2332*x2338))+(((-1.0)*r00*x2343))+(((-1.0)*r02*x2340)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2335))+(((-1.0)*r22*x2342))+(((-1.0)*x2336*x2340))+((r20*x2341)));
evalcond[4]=((((-1.0)*cj0*sj1*x2335))+((r00*x2341))+(((-1.0)*r02*x2342))+(((-1.0)*x2338*x2340))+(((-1.0)*cj0*x2339)));
evalcond[5]=(((r10*x2341))+(((-1.0)*x2334*x2340))+(((-1.0)*x2337*x2339))+(((-1.0)*sj0*sj1*x2335))+(((-1.0)*r12*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2344=((1.0)*gconst95);
CheckValue<IkReal> x2345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2344)))),-1);
if(!x2345.valid){
continue;
}
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2345.value)))+(x2346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2347=IKsin(j4);
IkReal x2348=IKcos(j4);
IkReal x2349=(gconst94*r11);
IkReal x2350=((1.0)*cj2);
IkReal x2351=(gconst94*r21);
IkReal x2352=((1.0)*sj0);
IkReal x2353=(gconst94*r01);
IkReal x2354=(cj1*sj2);
IkReal x2355=((1.0)*x2348);
IkReal x2356=(gconst95*x2348);
IkReal x2357=((1.0)*x2347);
IkReal x2358=(gconst95*x2357);
evalcond[0]=((((-1.0)*r20*x2358))+(((-1.0)*r22*x2355))+((x2347*x2351)));
evalcond[1]=(cj0+(((-1.0)*r10*x2358))+(((-1.0)*r12*x2355))+((x2347*x2349)));
evalcond[2]=((((-1.0)*r00*x2358))+(((-1.0)*r02*x2355))+((x2347*x2353))+(((-1.0)*x2352)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2350))+(((-1.0)*r22*x2357))+((r20*x2356))+(((-1.0)*x2351*x2355)));
evalcond[4]=(((r00*x2356))+(((-1.0)*x2353*x2355))+(((-1.0)*r02*x2357))+(((-1.0)*cj0*x2354))+(((-1.0)*cj0*sj1*x2350)));
evalcond[5]=(((r10*x2356))+(((-1.0)*sj0*sj1*x2350))+(((-1.0)*x2352*x2354))+(((-1.0)*r12*x2357))+(((-1.0)*x2349*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2359=((1.0)*gconst95);
CheckValue<IkReal> x2360=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2359)))),-1);
if(!x2360.valid){
continue;
}
CheckValue<IkReal> x2361 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2360.value)))+(x2361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2362=IKsin(j4);
IkReal x2363=IKcos(j4);
IkReal x2364=(gconst94*r11);
IkReal x2365=((1.0)*cj2);
IkReal x2366=(gconst94*r21);
IkReal x2367=((1.0)*sj0);
IkReal x2368=(gconst94*r01);
IkReal x2369=(cj1*sj2);
IkReal x2370=((1.0)*x2363);
IkReal x2371=(gconst95*x2363);
IkReal x2372=((1.0)*x2362);
IkReal x2373=(gconst95*x2372);
evalcond[0]=((((-1.0)*r20*x2373))+((x2362*x2366))+(((-1.0)*r22*x2370)));
evalcond[1]=((((-1.0)*r10*x2373))+cj0+((x2362*x2364))+(((-1.0)*r12*x2370)));
evalcond[2]=((((-1.0)*r02*x2370))+(((-1.0)*x2367))+(((-1.0)*r00*x2373))+((x2362*x2368)));
evalcond[3]=(((r20*x2371))+((sj1*sj2))+(((-1.0)*r22*x2372))+(((-1.0)*x2366*x2370))+(((-1.0)*cj1*x2365)));
evalcond[4]=((((-1.0)*r02*x2372))+(((-1.0)*x2368*x2370))+(((-1.0)*cj0*x2369))+(((-1.0)*cj0*sj1*x2365))+((r00*x2371)));
evalcond[5]=(((r10*x2371))+(((-1.0)*x2364*x2370))+(((-1.0)*x2367*x2369))+(((-1.0)*sj0*sj1*x2365))+(((-1.0)*r12*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2374=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2374;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2375=((1.0)*cj5);
IkReal x2376=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2375)));
j4eval[0]=x2376;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2375))))));
j4eval[2]=IKsign(x2376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2377=cj5*cj5;
IkReal x2378=r01*r01;
IkReal x2379=(r01*sj5);
IkReal x2380=(cj5*r00);
IkReal x2381=((((2.0)*x2379*x2380))+(((-1.0)*x2378))+(((-1.0)*(r02*r02)))+(((-1.0)*x2377*(r00*r00)))+((x2377*x2378)));
j4eval[0]=x2381;
j4eval[1]=IKsign(x2381);
j4eval[2]=((IKabs((x2380+(((-1.0)*x2379)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2382=cj5*cj5;
IkReal x2383=r01*r01;
IkReal x2384=(r01*sj5);
IkReal x2385=(cj5*r00);
CheckValue<IkReal> x2386 = IKatan2WithCheck(IkReal((x2385+(((-1.0)*x2384)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2382*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2382*x2383))+(((-1.0)*x2383))+(((2.0)*x2384*x2385)))),-1);
if(!x2387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2386.value)+(((1.5707963267949)*(x2387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2388=IKsin(j4);
IkReal x2389=IKcos(j4);
IkReal x2390=(cj5*r10);
IkReal x2391=(r01*sj5);
IkReal x2392=((1.0)*cj2);
IkReal x2393=(cj5*r00);
IkReal x2394=(cj5*r20);
IkReal x2395=((1.0)*x2389);
IkReal x2396=((1.0)*x2388);
IkReal x2397=(sj5*x2388);
evalcond[0]=((((-1.0)*r22*x2395))+(((-1.0)*x2394*x2396))+((r21*x2397)));
evalcond[1]=((((-1.0)*x2390*x2396))+((r11*x2397))+(((-1.0)*r12*x2395)));
evalcond[2]=((((-1.0)*r02*x2396))+(((-1.0)*x2391*x2395))+((x2389*x2393)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2395))+((x2388*x2391))+(((-1.0)*x2393*x2396)));
evalcond[4]=((((-1.0)*cj1*x2392))+(((-1.0)*r21*sj5*x2395))+((sj1*sj2))+(((-1.0)*r22*x2396))+((x2389*x2394)));
evalcond[5]=((((-1.0)*sj1*x2392))+(((-1.0)*cj1*sj2))+((x2389*x2390))+(((-1.0)*r11*sj5*x2395))+(((-1.0)*r12*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2398=((1.0)*cj5);
CheckValue<IkReal> x2399 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2399.valid){
continue;
}
CheckValue<IkReal> x2400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2398)))),-1);
if(!x2400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2399.value)+(((1.5707963267949)*(x2400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2401=IKsin(j4);
IkReal x2402=IKcos(j4);
IkReal x2403=(cj5*r10);
IkReal x2404=(r01*sj5);
IkReal x2405=((1.0)*cj2);
IkReal x2406=(cj5*r00);
IkReal x2407=(cj5*r20);
IkReal x2408=((1.0)*x2402);
IkReal x2409=((1.0)*x2401);
IkReal x2410=(sj5*x2401);
evalcond[0]=((((-1.0)*x2407*x2409))+((r21*x2410))+(((-1.0)*r22*x2408)));
evalcond[1]=(((r11*x2410))+(((-1.0)*x2403*x2409))+(((-1.0)*r12*x2408)));
evalcond[2]=((((-1.0)*x2404*x2408))+(((-1.0)*r02*x2409))+((x2402*x2406)));
evalcond[3]=((-1.0)+((x2401*x2404))+(((-1.0)*r02*x2408))+(((-1.0)*x2406*x2409)));
evalcond[4]=((((-1.0)*r21*sj5*x2408))+((sj1*sj2))+(((-1.0)*cj1*x2405))+((x2402*x2407))+(((-1.0)*r22*x2409)));
evalcond[5]=((((-1.0)*sj1*x2405))+(((-1.0)*cj1*sj2))+((x2402*x2403))+(((-1.0)*r11*sj5*x2408))+(((-1.0)*r12*x2409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2411.valid){
continue;
}
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2411.value)))+(x2412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2413=IKsin(j4);
IkReal x2414=IKcos(j4);
IkReal x2415=(cj5*r10);
IkReal x2416=(r01*sj5);
IkReal x2417=((1.0)*cj2);
IkReal x2418=(cj5*r00);
IkReal x2419=(cj5*r20);
IkReal x2420=((1.0)*x2414);
IkReal x2421=((1.0)*x2413);
IkReal x2422=(sj5*x2413);
evalcond[0]=(((r21*x2422))+(((-1.0)*r22*x2420))+(((-1.0)*x2419*x2421)));
evalcond[1]=((((-1.0)*r12*x2420))+((r11*x2422))+(((-1.0)*x2415*x2421)));
evalcond[2]=((((-1.0)*r02*x2421))+((x2414*x2418))+(((-1.0)*x2416*x2420)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2420))+((x2413*x2416))+(((-1.0)*x2418*x2421)));
evalcond[4]=(((x2414*x2419))+((sj1*sj2))+(((-1.0)*r22*x2421))+(((-1.0)*cj1*x2417))+(((-1.0)*r21*sj5*x2420)));
evalcond[5]=((((-1.0)*r11*sj5*x2420))+((x2414*x2415))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2421))+(((-1.0)*sj1*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2423=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2423;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2424=((1.0)*cj5);
IkReal x2425=((((-1.0)*r21*x2424))+(((-1.0)*r20*sj5)));
j4eval[0]=x2425;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2424))+((r11*sj5))))));
j4eval[2]=IKsign(x2425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2426=cj5*cj5;
IkReal x2427=r01*r01;
IkReal x2428=(cj5*r00);
IkReal x2429=(r01*sj5);
IkReal x2430=(x2427+((x2426*(r00*r00)))+(((-1.0)*x2426*x2427))+(((-2.0)*x2428*x2429))+(r02*r02));
j4eval[0]=x2430;
j4eval[1]=((IKabs(r02))+(IKabs((x2428+(((-1.0)*x2429))))));
j4eval[2]=IKsign(x2430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2431=cj5*cj5;
IkReal x2432=r01*r01;
IkReal x2433=(r01*sj5);
IkReal x2434=(cj5*r00);
CheckValue<IkReal> x2435 = IKatan2WithCheck(IkReal(((((-1.0)*x2433))+x2434)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2435.valid){
continue;
}
CheckValue<IkReal> x2436=IKPowWithIntegerCheck(IKsign((x2432+((x2431*(r00*r00)))+(((-2.0)*x2433*x2434))+(((-1.0)*x2431*x2432))+(r02*r02))),-1);
if(!x2436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2435.value)+(((1.5707963267949)*(x2436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2437=IKsin(j4);
IkReal x2438=IKcos(j4);
IkReal x2439=(cj5*r10);
IkReal x2440=(r01*sj5);
IkReal x2441=(cj5*r00);
IkReal x2442=(cj5*r20);
IkReal x2443=((1.0)*x2438);
IkReal x2444=((1.0)*x2437);
IkReal x2445=(sj5*x2437);
evalcond[0]=((((-1.0)*r22*x2443))+(((-1.0)*x2442*x2444))+((r21*x2445)));
evalcond[1]=((((-1.0)*x2439*x2444))+(((-1.0)*r12*x2443))+((r11*x2445)));
evalcond[2]=((((-1.0)*x2440*x2443))+(((-1.0)*r02*x2444))+((x2438*x2441)));
evalcond[3]=((1.0)+(((-1.0)*x2441*x2444))+((x2437*x2440))+(((-1.0)*r02*x2443)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2443))+((cj1*sj2))+(((-1.0)*r12*x2444))+((x2438*x2439)));
evalcond[5]=((((-1.0)*r21*sj5*x2443))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2444))+((x2438*x2442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2446=((1.0)*cj5);
CheckValue<IkReal> x2447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2446))+(((-1.0)*r20*sj5)))),-1);
if(!x2447.valid){
continue;
}
CheckValue<IkReal> x2448 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2446))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2447.value)))+(x2448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2449=IKsin(j4);
IkReal x2450=IKcos(j4);
IkReal x2451=(cj5*r10);
IkReal x2452=(r01*sj5);
IkReal x2453=(cj5*r00);
IkReal x2454=(cj5*r20);
IkReal x2455=((1.0)*x2450);
IkReal x2456=((1.0)*x2449);
IkReal x2457=(sj5*x2449);
evalcond[0]=((((-1.0)*x2454*x2456))+(((-1.0)*r22*x2455))+((r21*x2457)));
evalcond[1]=((((-1.0)*x2451*x2456))+(((-1.0)*r12*x2455))+((r11*x2457)));
evalcond[2]=((((-1.0)*x2452*x2455))+((x2450*x2453))+(((-1.0)*r02*x2456)));
evalcond[3]=((1.0)+(((-1.0)*x2453*x2456))+((x2449*x2452))+(((-1.0)*r02*x2455)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2450*x2451))+(((-1.0)*r11*sj5*x2455))+(((-1.0)*r12*x2456)));
evalcond[5]=(((x2450*x2454))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2456))+(((-1.0)*r21*sj5*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2458 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2458.valid){
continue;
}
CheckValue<IkReal> x2459=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2458.value)+(((1.5707963267949)*(x2459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2460=IKsin(j4);
IkReal x2461=IKcos(j4);
IkReal x2462=(cj5*r10);
IkReal x2463=(r01*sj5);
IkReal x2464=(cj5*r00);
IkReal x2465=(cj5*r20);
IkReal x2466=((1.0)*x2461);
IkReal x2467=((1.0)*x2460);
IkReal x2468=(sj5*x2460);
evalcond[0]=((((-1.0)*r22*x2466))+(((-1.0)*x2465*x2467))+((r21*x2468)));
evalcond[1]=((((-1.0)*r12*x2466))+((r11*x2468))+(((-1.0)*x2462*x2467)));
evalcond[2]=(((x2461*x2464))+(((-1.0)*x2463*x2466))+(((-1.0)*r02*x2467)));
evalcond[3]=((1.0)+(((-1.0)*x2464*x2467))+((x2460*x2463))+(((-1.0)*r02*x2466)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2466))+((x2461*x2462))+(((-1.0)*r12*x2467))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x2467))+((x2461*x2465))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2469=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2469);
rxp1_1=(px*r21);
rxp1_2=(r11*x2469);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2470=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2470);
rxp1_1=(px*r21);
rxp1_2=(r11*x2470);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2471=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2471);
rxp1_1=(px*r21);
rxp1_2=(r11*x2471);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2474=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2474.valid){
continue;
}
IkReal x2472=x2474.value;
IkReal x2473=(sj0*x2472);
cj4array[0]=(((cj1*sj2*x2473))+((cj2*sj1*x2473)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2475=IKsin(j4);
IkReal x2476=IKcos(j4);
IkReal x2477=(cj5*r20);
IkReal x2478=(r21*sj5);
IkReal x2479=((1.0)*x2475);
IkReal x2480=((1.0)*x2476);
evalcond[0]=((-1.0)*r02*x2475);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2480)));
evalcond[2]=((((-1.0)*x2477*x2479))+((x2475*x2478)));
evalcond[3]=((((-1.0)*cj5*r10*x2479))+((r11*sj5*x2475)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2476*x2477))+(((-1.0)*x2478*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2482=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2482.valid){
continue;
}
IkReal x2481=x2482.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2481))+((cj1*cj2*x2481)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2483=IKsin(j4);
IkReal x2484=IKcos(j4);
IkReal x2485=(r11*sj5);
IkReal x2486=((1.0)*sj0);
IkReal x2487=((1.0)*x2484);
IkReal x2488=((1.0)*cj5*x2483);
evalcond[0]=((-1.0)*r02*x2483);
evalcond[1]=((((-1.0)*x2486))+(((-1.0)*r02*x2487)));
evalcond[2]=((((-1.0)*r20*x2488))+((r21*sj5*x2483)));
evalcond[3]=((((-1.0)*r10*x2488))+((x2483*x2485)));
evalcond[4]=((((-1.0)*cj1*sj2*x2486))+(((-1.0)*x2485*x2487))+((cj5*r10*x2484))+(((-1.0)*cj2*sj1*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(r02,-1);
if(!x2489.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2489.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2490=IKsin(j4);
IkReal x2491=IKcos(j4);
IkReal x2492=((1.0)*sj0);
IkReal x2493=(cj5*x2491);
IkReal x2494=(sj5*x2490);
IkReal x2495=((1.0)*sj5*x2491);
IkReal x2496=((1.0)*cj5*x2490);
evalcond[0]=((-1.0)*r02*x2490);
evalcond[1]=((((-1.0)*r20*x2496))+((r21*x2494)));
evalcond[2]=((((-1.0)*r10*x2496))+((r11*x2494)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2495))+((r20*x2493)));
evalcond[4]=((((-1.0)*cj1*sj2*x2492))+(((-1.0)*r11*x2495))+(((-1.0)*cj2*sj1*x2492))+((r10*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2497=((1.0)*sj0);
IkReal x2498=((1.0)*cj0);
CheckValue<IkReal> x2499 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2498))+(((-1.0)*r12*x2497)))),IkReal(((((-1.0)*r01*sj5*x2498))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2497))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
CheckValue<IkReal> x2500=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2499.value)+(((1.5707963267949)*(x2500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2501=IKsin(j4);
IkReal x2502=IKcos(j4);
IkReal x2503=(cj5*r10);
IkReal x2504=(r01*sj5);
IkReal x2505=((1.0)*cj2);
IkReal x2506=(cj5*r00);
IkReal x2507=((1.0)*sj0);
IkReal x2508=(cj5*r20);
IkReal x2509=(cj1*sj2);
IkReal x2510=((1.0)*x2502);
IkReal x2511=((1.0)*x2501);
IkReal x2512=(sj5*x2501);
evalcond[0]=((((-1.0)*x2508*x2511))+(((-1.0)*r22*x2510))+((r21*x2512)));
evalcond[1]=(((r11*x2512))+cj0+(((-1.0)*x2503*x2511))+(((-1.0)*r12*x2510)));
evalcond[2]=((((-1.0)*x2507))+(((-1.0)*x2506*x2511))+((x2501*x2504))+(((-1.0)*r02*x2510)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2511))+(((-1.0)*r21*sj5*x2510))+(((-1.0)*cj1*x2505))+((x2502*x2508)));
evalcond[4]=((((-1.0)*cj0*x2509))+(((-1.0)*cj0*sj1*x2505))+(((-1.0)*x2504*x2510))+(((-1.0)*r02*x2511))+((x2502*x2506)));
evalcond[5]=((((-1.0)*x2507*x2509))+(((-1.0)*r12*x2511))+(((-1.0)*r11*sj5*x2510))+((x2502*x2503))+(((-1.0)*sj0*sj1*x2505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2513=((1.0)*cj5);
CheckValue<IkReal> x2514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2513)))),-1);
if(!x2514.valid){
continue;
}
CheckValue<IkReal> x2515 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2514.value)))+(x2515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2516=IKsin(j4);
IkReal x2517=IKcos(j4);
IkReal x2518=(cj5*r10);
IkReal x2519=(r01*sj5);
IkReal x2520=((1.0)*cj2);
IkReal x2521=(cj5*r00);
IkReal x2522=((1.0)*sj0);
IkReal x2523=(cj5*r20);
IkReal x2524=(cj1*sj2);
IkReal x2525=((1.0)*x2517);
IkReal x2526=((1.0)*x2516);
IkReal x2527=(sj5*x2516);
evalcond[0]=((((-1.0)*x2523*x2526))+((r21*x2527))+(((-1.0)*r22*x2525)));
evalcond[1]=(cj0+(((-1.0)*r12*x2525))+((r11*x2527))+(((-1.0)*x2518*x2526)));
evalcond[2]=((((-1.0)*r02*x2525))+(((-1.0)*x2522))+((x2516*x2519))+(((-1.0)*x2521*x2526)));
evalcond[3]=(((x2517*x2523))+((sj1*sj2))+(((-1.0)*cj1*x2520))+(((-1.0)*r21*sj5*x2525))+(((-1.0)*r22*x2526)));
evalcond[4]=((((-1.0)*cj0*sj1*x2520))+((x2517*x2521))+(((-1.0)*cj0*x2524))+(((-1.0)*r02*x2526))+(((-1.0)*x2519*x2525)));
evalcond[5]=((((-1.0)*r12*x2526))+(((-1.0)*x2522*x2524))+(((-1.0)*r11*sj5*x2525))+(((-1.0)*sj0*sj1*x2520))+((x2517*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2528=((1.0)*cj5);
CheckValue<IkReal> x2529=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2528)))),-1);
if(!x2529.valid){
continue;
}
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2529.value)))+(x2530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2531=IKsin(j4);
IkReal x2532=IKcos(j4);
IkReal x2533=(cj5*r10);
IkReal x2534=(r01*sj5);
IkReal x2535=((1.0)*cj2);
IkReal x2536=(cj5*r00);
IkReal x2537=((1.0)*sj0);
IkReal x2538=(cj5*r20);
IkReal x2539=(cj1*sj2);
IkReal x2540=((1.0)*x2532);
IkReal x2541=((1.0)*x2531);
IkReal x2542=(sj5*x2531);
evalcond[0]=(((r21*x2542))+(((-1.0)*x2538*x2541))+(((-1.0)*r22*x2540)));
evalcond[1]=((((-1.0)*r12*x2540))+cj0+((r11*x2542))+(((-1.0)*x2533*x2541)));
evalcond[2]=((((-1.0)*x2536*x2541))+((x2531*x2534))+(((-1.0)*x2537))+(((-1.0)*r02*x2540)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2540))+((x2532*x2538))+(((-1.0)*r22*x2541))+(((-1.0)*cj1*x2535)));
evalcond[4]=((((-1.0)*cj0*sj1*x2535))+((x2532*x2536))+(((-1.0)*r02*x2541))+(((-1.0)*x2534*x2540))+(((-1.0)*cj0*x2539)));
evalcond[5]=((((-1.0)*r12*x2541))+(((-1.0)*x2537*x2539))+(((-1.0)*sj0*sj1*x2535))+(((-1.0)*r11*sj5*x2540))+((x2532*x2533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2543=cj5*cj5;
IkReal x2544=r21*r21;
IkReal x2545=(sj1*sj2);
IkReal x2546=(r21*sj5);
IkReal x2547=(cj1*cj2);
IkReal x2548=(cj5*r20);
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal((((r22*x2545))+(((-1.0)*r22*x2547)))),IkReal(((((-1.0)*x2546*x2547))+((x2547*x2548))+(((-1.0)*x2545*x2548))+((x2545*x2546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550=IKPowWithIntegerCheck(IKsign((x2544+(r22*r22)+(((-1.0)*x2543*x2544))+(((-2.0)*x2546*x2548))+((x2543*(r20*r20))))),-1);
if(!x2550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2549.value)+(((1.5707963267949)*(x2550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2551=IKsin(j4);
IkReal x2552=IKcos(j4);
IkReal x2553=(r21*sj5);
IkReal x2554=(cj5*r20);
IkReal x2555=((1.0)*x2552);
IkReal x2556=((1.0)*x2551);
evalcond[0]=((((-1.0)*x2554*x2556))+((x2551*x2553))+(((-1.0)*r22*x2555)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2552*x2554))+(((-1.0)*x2553*x2555))+(((-1.0)*r22*x2556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2557=(cj5*sj4);
IkReal x2558=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x2557))+(((-1.0)*cj4*r02))+((r01*x2558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2558))+((r10*x2557))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2557))+(((-1.0)*cj4*r02))+((r01*x2558))))+IKsqr(((((-1.0)*r11*x2558))+((r10*x2557))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x2557))+(((-1.0)*cj4*r02))+((r01*x2558))), ((((-1.0)*r11*x2558))+((r10*x2557))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2559=IKcos(j0);
IkReal x2560=IKsin(j0);
IkReal x2561=(cj4*cj5);
IkReal x2562=(cj5*r01);
IkReal x2563=((1.0)*cj1);
IkReal x2564=((0.39225)*sj1);
IkReal x2565=(r11*sj5);
IkReal x2566=((1.0)*sj4);
IkReal x2567=((0.39225)*cj2);
IkReal x2568=((1.0)*sj1);
IkReal x2569=(r00*sj5);
IkReal x2570=(cj5*r11);
IkReal x2571=((1.0)*cj4);
IkReal x2572=(r01*sj5);
IkReal x2573=(r10*sj5);
IkReal x2574=(sj2*x2559);
IkReal x2575=(sj2*x2560);
IkReal x2576=(cj1*x2559);
IkReal x2577=(cj1*x2560);
IkReal x2578=(cj2*x2559);
IkReal x2579=(cj2*x2560);
evalcond[0]=(x2559+(((-1.0)*r12*x2571))+((sj4*x2565))+(((-1.0)*cj5*r10*x2566)));
evalcond[1]=((((-1.0)*x2560))+(((-1.0)*r02*x2571))+((sj4*x2572))+(((-1.0)*cj5*r00*x2566)));
evalcond[2]=(x2569+x2562+(((-1.0)*x2563*x2578))+((sj1*x2574)));
evalcond[3]=(x2573+x2570+(((-1.0)*x2563*x2579))+((sj1*x2575)));
evalcond[4]=(((r00*x2561))+(((-1.0)*x2571*x2572))+(((-1.0)*r02*x2566))+(((-1.0)*x2563*x2574))+(((-1.0)*x2568*x2578)));
evalcond[5]=((((-1.0)*x2563*x2575))+(((-1.0)*x2568*x2579))+((r10*x2561))+(((-1.0)*x2565*x2571))+(((-1.0)*r12*x2566)));
evalcond[6]=(((x2567*x2576))+(((-1.0)*px))+(((-1.0)*x2564*x2574))+(((0.425)*x2576))+(((-0.10915)*x2560))+(((-0.09465)*x2569))+(((-0.09465)*x2562)));
evalcond[7]=(((x2567*x2577))+(((-0.09465)*x2573))+(((-0.09465)*x2570))+(((-1.0)*py))+(((0.10915)*x2559))+(((-1.0)*x2564*x2575))+(((0.425)*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2580=((1.0)*cj5);
IkReal x2581=((1.0)*sj5);
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2581))+(((-1.0)*r11*x2580)))),IkReal(((((-1.0)*r01*x2580))+(((-1.0)*r00*x2581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
CheckValue<IkReal> x2583=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2583.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2582.value)+(((1.5707963267949)*(x2583.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2584=IKcos(j0);
IkReal x2585=IKsin(j0);
IkReal x2586=(cj5*r01);
IkReal x2587=(cj5*r11);
IkReal x2588=(r00*sj5);
IkReal x2589=(sj1*sj2);
IkReal x2590=((0.39225)*cj2);
IkReal x2591=((1.0)*cj2);
IkReal x2592=(r10*sj5);
IkReal x2593=((0.39225)*x2589);
IkReal x2594=(cj1*x2584);
IkReal x2595=(cj1*x2585);
evalcond[0]=(((x2584*x2589))+x2586+x2588+(((-1.0)*x2591*x2594)));
evalcond[1]=(x2592+x2587+(((-1.0)*x2591*x2595))+((x2585*x2589)));
evalcond[2]=((((-0.09465)*x2586))+(((-0.09465)*x2588))+(((-1.0)*px))+(((-1.0)*x2584*x2593))+(((0.425)*x2594))+((x2590*x2594))+(((-0.10915)*x2585)));
evalcond[3]=((((-0.09465)*x2587))+(((-1.0)*x2585*x2593))+(((0.10915)*x2584))+(((-1.0)*py))+(((0.425)*x2595))+((x2590*x2595))+(((-0.09465)*x2592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2596=((1.0)*cj5);
IkReal x2597=((((-1.0)*r01*x2596))+(((-1.0)*r00*sj5)));
j4eval[0]=x2597;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2596))))));
j4eval[2]=IKsign(x2597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2598=((1.0)*cj5);
IkReal x2599=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2598)));
j4eval[0]=x2599;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2598)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2600=((1.0)*sj0);
IkReal x2601=((1.0)*cj0);
IkReal x2602=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2602;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2600))+(((-1.0)*r01*sj5*x2601)))))+(IKabs(((((-1.0)*r12*x2600))+(((-1.0)*r02*x2601))))));
j4eval[2]=IKsign(x2602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2603=((-1.0)*r20);
IkReal x2605 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2605)==0){
continue;
}
IkReal x2604=pow(x2605,-0.5);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2603),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2606.value));
IkReal gconst79=(r21*x2604);
IkReal gconst80=(x2603*x2604);
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2607.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2608=((-1.0)*r20);
IkReal x2609=x2604;
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2608),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
IkReal x2610=((-1.0)*(x2611.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2610;
IkReal gconst78=x2610;
IkReal gconst79=(r21*x2609);
IkReal gconst80=(x2608*x2609);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2612=((-1.0)*r20);
IkReal x2613=x2604;
CheckValue<IkReal> x2615 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2612),IKFAST_ATAN2_MAGTHRESH);
if(!x2615.valid){
continue;
}
IkReal x2614=((-1.0)*(x2615.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2614;
IkReal gconst78=x2614;
IkReal gconst79=(r21*x2613);
IkReal gconst80=(x2612*x2613);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2616=((-1.0)*r20);
IkReal x2617=x2604;
CheckValue<IkReal> x2619 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2616),IKFAST_ATAN2_MAGTHRESH);
if(!x2619.valid){
continue;
}
IkReal x2618=((-1.0)*(x2619.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2618;
IkReal gconst78=x2618;
IkReal gconst79=(r21*x2617);
IkReal gconst80=(x2616*x2617);
IkReal x2620=r22*r22;
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2620))),-1);
if(!x2623.valid){
continue;
}
IkReal x2621=x2623.value;
IkReal x2622=(((x2621*(r20*r20*r20*r20)))+((x2621*(r21*r21*r21*r21)))+(((2.0)*x2621*(r20*r20)*(r21*r21)))+x2620);
j4eval[0]=x2622;
j4eval[1]=IKsign(x2622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2624=(sj1*sj2);
IkReal x2625=(gconst80*r20);
IkReal x2626=(gconst79*r21);
IkReal x2627=(cj1*cj2);
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2625*x2625)+(x2626*x2626)+(((-2.0)*x2625*x2626)))),-1);
if(!x2628.valid){
continue;
}
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2627))+((r22*x2624)))),IkReal((((x2624*x2626))+(((-1.0)*x2626*x2627))+(((-1.0)*x2624*x2625))+((x2625*x2627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2628.value)))+(x2629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2630=IKsin(j4);
IkReal x2631=IKcos(j4);
IkReal x2632=(gconst79*r01);
IkReal x2633=(gconst79*r21);
IkReal x2634=((1.0)*cj2);
IkReal x2635=(gconst79*r11);
IkReal x2636=((1.0)*sj0);
IkReal x2637=(cj1*sj2);
IkReal x2638=((1.0)*x2631);
IkReal x2639=(gconst80*x2631);
IkReal x2640=((1.0)*x2630);
IkReal x2641=(gconst80*x2640);
evalcond[0]=((((-1.0)*r20*x2641))+((x2630*x2633))+(((-1.0)*r22*x2638)));
evalcond[1]=(cj0+(((-1.0)*r12*x2638))+((x2630*x2635))+(((-1.0)*r10*x2641)));
evalcond[2]=((((-1.0)*r02*x2638))+(((-1.0)*r00*x2641))+(((-1.0)*x2636))+((x2630*x2632)));
evalcond[3]=((((-1.0)*r22*x2640))+(((-1.0)*cj1*x2634))+((sj1*sj2))+((r20*x2639))+(((-1.0)*x2633*x2638)));
evalcond[4]=((((-1.0)*cj0*sj1*x2634))+(((-1.0)*r02*x2640))+(((-1.0)*x2632*x2638))+((r00*x2639))+(((-1.0)*cj0*x2637)));
evalcond[5]=((((-1.0)*sj0*sj1*x2634))+(((-1.0)*r12*x2640))+((r10*x2639))+(((-1.0)*x2635*x2638))+(((-1.0)*x2636*x2637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2642=((1.0)*gconst80);
CheckValue<IkReal> x2643 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2642))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2642))+(((-1.0)*gconst79*r10)))),-1);
if(!x2644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2643.value)+(((1.5707963267949)*(x2644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2645=IKsin(j4);
IkReal x2646=IKcos(j4);
IkReal x2647=(gconst79*r01);
IkReal x2648=(gconst79*r21);
IkReal x2649=((1.0)*cj2);
IkReal x2650=(gconst79*r11);
IkReal x2651=((1.0)*sj0);
IkReal x2652=(cj1*sj2);
IkReal x2653=((1.0)*x2646);
IkReal x2654=(gconst80*x2646);
IkReal x2655=((1.0)*x2645);
IkReal x2656=(gconst80*x2655);
evalcond[0]=((((-1.0)*r22*x2653))+(((-1.0)*r20*x2656))+((x2645*x2648)));
evalcond[1]=(cj0+(((-1.0)*r12*x2653))+((x2645*x2650))+(((-1.0)*r10*x2656)));
evalcond[2]=((((-1.0)*r00*x2656))+(((-1.0)*r02*x2653))+((x2645*x2647))+(((-1.0)*x2651)));
evalcond[3]=((((-1.0)*r22*x2655))+(((-1.0)*cj1*x2649))+((sj1*sj2))+(((-1.0)*x2648*x2653))+((r20*x2654)));
evalcond[4]=((((-1.0)*x2647*x2653))+(((-1.0)*r02*x2655))+(((-1.0)*cj0*sj1*x2649))+((r00*x2654))+(((-1.0)*cj0*x2652)));
evalcond[5]=((((-1.0)*x2651*x2652))+(((-1.0)*x2650*x2653))+(((-1.0)*r12*x2655))+((r10*x2654))+(((-1.0)*sj0*sj1*x2649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2657=((1.0)*gconst80);
CheckValue<IkReal> x2658=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2657))+(((-1.0)*gconst79*r00)))),-1);
if(!x2658.valid){
continue;
}
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2658.value)))+(x2659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2660=IKsin(j4);
IkReal x2661=IKcos(j4);
IkReal x2662=(gconst79*r01);
IkReal x2663=(gconst79*r21);
IkReal x2664=((1.0)*cj2);
IkReal x2665=(gconst79*r11);
IkReal x2666=((1.0)*sj0);
IkReal x2667=(cj1*sj2);
IkReal x2668=((1.0)*x2661);
IkReal x2669=(gconst80*x2661);
IkReal x2670=((1.0)*x2660);
IkReal x2671=(gconst80*x2670);
evalcond[0]=((((-1.0)*r20*x2671))+((x2660*x2663))+(((-1.0)*r22*x2668)));
evalcond[1]=((((-1.0)*r12*x2668))+cj0+((x2660*x2665))+(((-1.0)*r10*x2671)));
evalcond[2]=((((-1.0)*r00*x2671))+(((-1.0)*r02*x2668))+(((-1.0)*x2666))+((x2660*x2662)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2664))+(((-1.0)*x2663*x2668))+(((-1.0)*r22*x2670))+((r20*x2669)));
evalcond[4]=((((-1.0)*cj0*x2667))+(((-1.0)*cj0*sj1*x2664))+(((-1.0)*x2662*x2668))+(((-1.0)*r02*x2670))+((r00*x2669)));
evalcond[5]=((((-1.0)*r12*x2670))+(((-1.0)*sj0*sj1*x2664))+((r10*x2669))+(((-1.0)*x2665*x2668))+(((-1.0)*x2666*x2667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2672=((-1.0)*r21);
IkReal x2674 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2674)==0){
continue;
}
IkReal x2673=pow(x2674,-0.5);
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(x2672),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2675.value))));
IkReal gconst82=(x2672*x2673);
IkReal gconst83=((1.0)*r20*x2673);
CheckValue<IkReal> x2676 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2676.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2676.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2677=((-1.0)*r21);
CheckValue<IkReal> x2680 = IKatan2WithCheck(IkReal(x2677),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2680.valid){
continue;
}
IkReal x2678=((1.0)*(x2680.value));
IkReal x2679=x2673;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2678)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2678)));
IkReal gconst82=(x2677*x2679);
IkReal gconst83=((1.0)*r20*x2679);
IkReal x2681=r22*r22;
IkReal x2682=((1.0)*x2681);
CheckValue<IkReal> x2686=IKPowWithIntegerCheck(((-1.0)+x2681),-1);
if(!x2686.valid){
continue;
}
IkReal x2683=x2686.value;
if((((1.0)+(((-1.0)*x2682)))) < -0.00001)
continue;
IkReal x2684=IKsqrt(((1.0)+(((-1.0)*x2682))));
IkReal x2685=(cj0*x2683*x2684);
j4eval[0]=((IKabs(((((-1.0)*x2682*x2685))+x2685)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2687=((-1.0)*r21);
CheckValue<IkReal> x2690 = IKatan2WithCheck(IkReal(x2687),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2690.valid){
continue;
}
IkReal x2688=((1.0)*(x2690.value));
IkReal x2689=x2673;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2688)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2688)));
IkReal gconst82=(x2687*x2689);
IkReal gconst83=((1.0)*r20*x2689);
IkReal x2691=r22*r22;
IkReal x2692=((1.0)*x2691);
CheckValue<IkReal> x2696=IKPowWithIntegerCheck(((-1.0)+x2691),-1);
if(!x2696.valid){
continue;
}
IkReal x2693=x2696.value;
if((((1.0)+(((-1.0)*x2692)))) < -0.00001)
continue;
IkReal x2694=IKsqrt(((1.0)+(((-1.0)*x2692))));
IkReal x2695=(sj0*x2693*x2694);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2692*x2695))+x2695))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2697=((-1.0)*r21);
CheckValue<IkReal> x2700 = IKatan2WithCheck(IkReal(x2697),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2700.valid){
continue;
}
IkReal x2698=((1.0)*(x2700.value));
IkReal x2699=x2673;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2698)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2698)));
IkReal gconst82=(x2697*x2699);
IkReal gconst83=((1.0)*r20*x2699);
IkReal x2701=r22*r22;
IkReal x2702=(r12*sj0);
IkReal x2703=(cj0*r02);
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(((-1.0)+x2701),-1);
if(!x2707.valid){
continue;
}
IkReal x2704=x2707.value;
if((((1.0)+(((-1.0)*x2701)))) < -0.00001)
continue;
IkReal x2705=IKsqrt(((1.0)+(((-1.0)*x2701))));
IkReal x2706=(r22*x2704*x2705);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2703*x2706))+((x2702*x2706)))))+(IKabs(((((-1.0)*x2703))+(((-1.0)*x2702))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2708=((1.0)*sj0);
IkReal x2709=((1.0)*cj0);
CheckValue<IkReal> x2710=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2710.valid){
continue;
}
CheckValue<IkReal> x2711 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2708))+(((-1.0)*r02*x2709)))),IkReal(((((-1.0)*gconst82*r01*x2709))+(((-1.0)*gconst82*r11*x2708))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2710.value)))+(x2711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2712=IKsin(j4);
IkReal x2713=IKcos(j4);
IkReal x2714=(gconst82*r11);
IkReal x2715=((1.0)*cj2);
IkReal x2716=((1.0)*sj0);
IkReal x2717=(cj1*sj2);
IkReal x2718=((1.0)*x2713);
IkReal x2719=(gconst83*x2713);
IkReal x2720=(gconst82*x2712);
IkReal x2721=((1.0)*x2712);
evalcond[0]=((((-1.0)*gconst83*r20*x2721))+((r21*x2720))+(((-1.0)*r22*x2718)));
evalcond[1]=(cj0+((x2712*x2714))+(((-1.0)*gconst83*r10*x2721))+(((-1.0)*r12*x2718)));
evalcond[2]=((((-1.0)*gconst83*r00*x2721))+(((-1.0)*x2716))+(((-1.0)*r02*x2718))+((r01*x2720)));
evalcond[3]=((((-1.0)*gconst82*r21*x2718))+((sj1*sj2))+(((-1.0)*r22*x2721))+(((-1.0)*cj1*x2715))+((r20*x2719)));
evalcond[4]=((((-1.0)*gconst82*r01*x2718))+(((-1.0)*cj0*sj1*x2715))+(((-1.0)*r02*x2721))+((r00*x2719))+(((-1.0)*cj0*x2717)));
evalcond[5]=((((-1.0)*sj0*sj1*x2715))+(((-1.0)*r12*x2721))+((r10*x2719))+(((-1.0)*x2714*x2718))+(((-1.0)*x2716*x2717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2722=((1.0)*gconst83);
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2722)))),-1);
if(!x2724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2723.value)+(((1.5707963267949)*(x2724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2725=IKsin(j4);
IkReal x2726=IKcos(j4);
IkReal x2727=(gconst82*r11);
IkReal x2728=((1.0)*cj2);
IkReal x2729=((1.0)*sj0);
IkReal x2730=(cj1*sj2);
IkReal x2731=((1.0)*x2726);
IkReal x2732=(gconst83*x2726);
IkReal x2733=(gconst82*x2725);
IkReal x2734=((1.0)*x2725);
evalcond[0]=(((r21*x2733))+(((-1.0)*gconst83*r20*x2734))+(((-1.0)*r22*x2731)));
evalcond[1]=(cj0+((x2725*x2727))+(((-1.0)*gconst83*r10*x2734))+(((-1.0)*r12*x2731)));
evalcond[2]=(((r01*x2733))+(((-1.0)*r02*x2731))+(((-1.0)*x2729))+(((-1.0)*gconst83*r00*x2734)));
evalcond[3]=((((-1.0)*gconst82*r21*x2731))+((sj1*sj2))+(((-1.0)*r22*x2734))+((r20*x2732))+(((-1.0)*cj1*x2728)));
evalcond[4]=((((-1.0)*cj0*x2730))+((r00*x2732))+(((-1.0)*r02*x2734))+(((-1.0)*cj0*sj1*x2728))+(((-1.0)*gconst82*r01*x2731)));
evalcond[5]=((((-1.0)*x2727*x2731))+(((-1.0)*sj0*sj1*x2728))+(((-1.0)*r12*x2734))+((r10*x2732))+(((-1.0)*x2729*x2730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2735=((1.0)*gconst83);
CheckValue<IkReal> x2736 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2736.valid){
continue;
}
CheckValue<IkReal> x2737=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x2735)))),-1);
if(!x2737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2736.value)+(((1.5707963267949)*(x2737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2738=IKsin(j4);
IkReal x2739=IKcos(j4);
IkReal x2740=(gconst82*r11);
IkReal x2741=((1.0)*cj2);
IkReal x2742=((1.0)*sj0);
IkReal x2743=(cj1*sj2);
IkReal x2744=((1.0)*x2739);
IkReal x2745=(gconst83*x2739);
IkReal x2746=(gconst82*x2738);
IkReal x2747=((1.0)*x2738);
evalcond[0]=(((r21*x2746))+(((-1.0)*gconst83*r20*x2747))+(((-1.0)*r22*x2744)));
evalcond[1]=((((-1.0)*gconst83*r10*x2747))+cj0+((x2738*x2740))+(((-1.0)*r12*x2744)));
evalcond[2]=((((-1.0)*gconst83*r00*x2747))+((r01*x2746))+(((-1.0)*x2742))+(((-1.0)*r02*x2744)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst82*r21*x2744))+((r20*x2745))+(((-1.0)*cj1*x2741))+(((-1.0)*r22*x2747)));
evalcond[4]=((((-1.0)*cj0*x2743))+(((-1.0)*gconst82*r01*x2744))+((r00*x2745))+(((-1.0)*r02*x2747))+(((-1.0)*cj0*sj1*x2741)));
evalcond[5]=((((-1.0)*x2740*x2744))+((r10*x2745))+(((-1.0)*r12*x2747))+(((-1.0)*sj0*sj1*x2741))+(((-1.0)*x2742*x2743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2748=((-1.0)*r10);
IkReal x2750 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2750)==0){
continue;
}
IkReal x2749=pow(x2750,-0.5);
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2748),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2751.value));
IkReal gconst85=(r11*x2749);
IkReal gconst86=(x2748*x2749);
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2752.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2753=((-1.0)*r10);
IkReal x2754=x2749;
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2753),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
IkReal x2755=((-1.0)*(x2756.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2755;
IkReal gconst84=x2755;
IkReal gconst85=(r11*x2754);
IkReal gconst86=(x2753*x2754);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2757=((1.0)*sj0);
IkReal x2758=((1.0)*gconst85);
CheckValue<IkReal> x2759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2758)))),-1);
if(!x2759.valid){
continue;
}
CheckValue<IkReal> x2760 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2757)))),IkReal(((((-1.0)*gconst85*r11*x2757))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2758))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2759.value)))+(x2760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2761=IKsin(j4);
IkReal x2762=IKcos(j4);
IkReal x2763=(gconst85*r21);
IkReal x2764=(gconst86*r00);
IkReal x2765=(gconst86*r10);
IkReal x2766=((1.0)*cj2);
IkReal x2767=(gconst85*r11);
IkReal x2768=(gconst85*r01);
IkReal x2769=((1.0)*sj0);
IkReal x2770=(gconst86*r20);
IkReal x2771=(cj1*sj2);
IkReal x2772=((1.0)*x2762);
IkReal x2773=((1.0)*x2761);
evalcond[0]=(((x2761*x2763))+(((-1.0)*x2770*x2773))+(((-1.0)*r22*x2772)));
evalcond[1]=(cj0+((x2761*x2767))+(((-1.0)*r12*x2772))+(((-1.0)*x2765*x2773)));
evalcond[2]=((((-1.0)*r02*x2772))+((x2761*x2768))+(((-1.0)*x2769))+(((-1.0)*x2764*x2773)));
evalcond[3]=((((-1.0)*x2763*x2772))+((x2762*x2770))+((sj1*sj2))+(((-1.0)*cj1*x2766))+(((-1.0)*r22*x2773)));
evalcond[4]=((((-1.0)*x2768*x2772))+(((-1.0)*cj0*x2771))+((x2762*x2764))+(((-1.0)*r02*x2773))+(((-1.0)*cj0*sj1*x2766)));
evalcond[5]=((((-1.0)*x2769*x2771))+((x2762*x2765))+(((-1.0)*sj0*sj1*x2766))+(((-1.0)*r12*x2773))+(((-1.0)*x2767*x2772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2774=((1.0)*gconst86);
CheckValue<IkReal> x2775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2774))+(((-1.0)*gconst85*r00)))),-1);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2774))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2775.value)))+(x2776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2777=IKsin(j4);
IkReal x2778=IKcos(j4);
IkReal x2779=(gconst85*r21);
IkReal x2780=(gconst86*r00);
IkReal x2781=(gconst86*r10);
IkReal x2782=((1.0)*cj2);
IkReal x2783=(gconst85*r11);
IkReal x2784=(gconst85*r01);
IkReal x2785=((1.0)*sj0);
IkReal x2786=(gconst86*r20);
IkReal x2787=(cj1*sj2);
IkReal x2788=((1.0)*x2778);
IkReal x2789=((1.0)*x2777);
evalcond[0]=((((-1.0)*x2786*x2789))+(((-1.0)*r22*x2788))+((x2777*x2779)));
evalcond[1]=((((-1.0)*r12*x2788))+(((-1.0)*x2781*x2789))+cj0+((x2777*x2783)));
evalcond[2]=((((-1.0)*x2785))+((x2777*x2784))+(((-1.0)*x2780*x2789))+(((-1.0)*r02*x2788)));
evalcond[3]=((((-1.0)*cj1*x2782))+((x2778*x2786))+((sj1*sj2))+(((-1.0)*r22*x2789))+(((-1.0)*x2779*x2788)));
evalcond[4]=(((x2778*x2780))+(((-1.0)*x2784*x2788))+(((-1.0)*cj0*sj1*x2782))+(((-1.0)*cj0*x2787))+(((-1.0)*r02*x2789)));
evalcond[5]=((((-1.0)*r12*x2789))+((x2778*x2781))+(((-1.0)*sj0*sj1*x2782))+(((-1.0)*x2783*x2788))+(((-1.0)*x2785*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2790=((-1.0)*r11);
IkReal x2792 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2792)==0){
continue;
}
IkReal x2791=pow(x2792,-0.5);
CheckValue<IkReal> x2793 = IKatan2WithCheck(IkReal(x2790),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2793.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2793.value))));
IkReal gconst88=(x2790*x2791);
IkReal gconst89=((1.0)*r10*x2791);
CheckValue<IkReal> x2794 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2794.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2794.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2795=((-1.0)*r11);
CheckValue<IkReal> x2798 = IKatan2WithCheck(IkReal(x2795),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2798.valid){
continue;
}
IkReal x2796=((1.0)*(x2798.value));
IkReal x2797=x2791;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2796)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2796)));
IkReal gconst88=(x2795*x2797);
IkReal gconst89=((1.0)*r10*x2797);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2799=((-1.0)*r11);
CheckValue<IkReal> x2802 = IKatan2WithCheck(IkReal(x2799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2802.valid){
continue;
}
IkReal x2800=((1.0)*(x2802.value));
IkReal x2801=x2791;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2800)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2800)));
IkReal gconst88=(x2799*x2801);
IkReal gconst89=((1.0)*r10*x2801);
IkReal x2803=r12*r12;
IkReal x2804=((1.0)*sj0);
IkReal x2805=(cj0*r02);
IkReal x2806=x2791;
j4eval[0]=((IKabs((((r12*x2805*x2806))+((sj0*x2803*x2806))+(((-1.0)*x2804*x2806)))))+(IKabs(((((-1.0)*x2805))+(((-1.0)*r12*x2804))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2807=((-1.0)*r11);
CheckValue<IkReal> x2810 = IKatan2WithCheck(IkReal(x2807),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2810.valid){
continue;
}
IkReal x2808=((1.0)*(x2810.value));
IkReal x2809=x2791;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2808)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2808)));
IkReal gconst88=(x2807*x2809);
IkReal gconst89=((1.0)*r10*x2809);
IkReal x2811=r12*r12;
IkReal x2812=(cj1*cj2*r22);
IkReal x2813=(r22*sj1*sj2);
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(((-1.0)+x2811),-1);
if(!x2817.valid){
continue;
}
IkReal x2814=x2817.value;
if((((1.0)+(((-1.0)*x2811)))) < -0.00001)
continue;
IkReal x2815=IKsqrt(((1.0)+(((-1.0)*x2811))));
IkReal x2816=(r12*x2814*x2815);
j4eval[0]=((IKabs(((((-1.0)*x2812))+x2813)))+(IKabs((((x2812*x2816))+(((-1.0)*x2813*x2816))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2818=(cj1*cj2);
IkReal x2819=(gconst89*r20);
IkReal x2820=(gconst88*r21);
IkReal x2821=(sj1*sj2);
CheckValue<IkReal> x2822 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2818))+((r22*x2821)))),IkReal(((((-1.0)*x2819*x2821))+((x2818*x2819))+(((-1.0)*x2818*x2820))+((x2820*x2821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2822.valid){
continue;
}
CheckValue<IkReal> x2823=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2819*x2820))+(x2819*x2819)+(x2820*x2820))),-1);
if(!x2823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2822.value)+(((1.5707963267949)*(x2823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2824=IKsin(j4);
IkReal x2825=IKcos(j4);
IkReal x2826=((1.0)*sj0);
IkReal x2827=((1.0)*cj2);
IkReal x2828=(gconst89*r20);
IkReal x2829=(gconst89*r10);
IkReal x2830=(gconst89*r00);
IkReal x2831=(cj1*sj2);
IkReal x2832=((1.0)*x2825);
IkReal x2833=((1.0)*x2824);
IkReal x2834=(gconst88*x2824);
evalcond[0]=((((-1.0)*r22*x2832))+(((-1.0)*x2828*x2833))+((r21*x2834)));
evalcond[1]=(cj0+(((-1.0)*r12*x2832))+((r11*x2834))+(((-1.0)*x2829*x2833)));
evalcond[2]=((((-1.0)*x2826))+((r01*x2834))+(((-1.0)*r02*x2832))+(((-1.0)*x2830*x2833)));
evalcond[3]=((((-1.0)*cj1*x2827))+((sj1*sj2))+((x2825*x2828))+(((-1.0)*r22*x2833))+(((-1.0)*gconst88*r21*x2832)));
evalcond[4]=(((x2825*x2830))+(((-1.0)*cj0*sj1*x2827))+(((-1.0)*gconst88*r01*x2832))+(((-1.0)*r02*x2833))+(((-1.0)*cj0*x2831)));
evalcond[5]=((((-1.0)*cj2*sj1*x2826))+(((-1.0)*gconst88*r11*x2832))+(((-1.0)*x2826*x2831))+(((-1.0)*r12*x2833))+((x2825*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2835=((1.0)*sj0);
IkReal x2836=((1.0)*cj0);
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2835))+(((-1.0)*r02*x2836)))),IkReal(((((-1.0)*gconst88*r11*x2835))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2836))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2837.value)))+(x2838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2839=IKsin(j4);
IkReal x2840=IKcos(j4);
IkReal x2841=((1.0)*sj0);
IkReal x2842=((1.0)*cj2);
IkReal x2843=(gconst89*r20);
IkReal x2844=(gconst89*r10);
IkReal x2845=(gconst89*r00);
IkReal x2846=(cj1*sj2);
IkReal x2847=((1.0)*x2840);
IkReal x2848=((1.0)*x2839);
IkReal x2849=(gconst88*x2839);
evalcond[0]=((((-1.0)*x2843*x2848))+((r21*x2849))+(((-1.0)*r22*x2847)));
evalcond[1]=(((r11*x2849))+cj0+(((-1.0)*r12*x2847))+(((-1.0)*x2844*x2848)));
evalcond[2]=((((-1.0)*x2845*x2848))+(((-1.0)*r02*x2847))+((r01*x2849))+(((-1.0)*x2841)));
evalcond[3]=((((-1.0)*gconst88*r21*x2847))+((sj1*sj2))+((x2840*x2843))+(((-1.0)*r22*x2848))+(((-1.0)*cj1*x2842)));
evalcond[4]=(((x2840*x2845))+(((-1.0)*cj0*sj1*x2842))+(((-1.0)*gconst88*r01*x2847))+(((-1.0)*r02*x2848))+(((-1.0)*cj0*x2846)));
evalcond[5]=((((-1.0)*cj2*sj1*x2841))+(((-1.0)*r12*x2848))+((x2840*x2844))+(((-1.0)*gconst88*r11*x2847))+(((-1.0)*x2841*x2846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2850=((1.0)*gconst89);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2850))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2850))+(((-1.0)*gconst88*r00)))),-1);
if(!x2852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2851.value)+(((1.5707963267949)*(x2852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2853=IKsin(j4);
IkReal x2854=IKcos(j4);
IkReal x2855=((1.0)*sj0);
IkReal x2856=((1.0)*cj2);
IkReal x2857=(gconst89*r20);
IkReal x2858=(gconst89*r10);
IkReal x2859=(gconst89*r00);
IkReal x2860=(cj1*sj2);
IkReal x2861=((1.0)*x2854);
IkReal x2862=((1.0)*x2853);
IkReal x2863=(gconst88*x2853);
evalcond[0]=((((-1.0)*x2857*x2862))+((r21*x2863))+(((-1.0)*r22*x2861)));
evalcond[1]=((((-1.0)*r12*x2861))+cj0+(((-1.0)*x2858*x2862))+((r11*x2863)));
evalcond[2]=((((-1.0)*r02*x2861))+(((-1.0)*x2859*x2862))+(((-1.0)*x2855))+((r01*x2863)));
evalcond[3]=((((-1.0)*cj1*x2856))+(((-1.0)*gconst88*r21*x2861))+((sj1*sj2))+(((-1.0)*r22*x2862))+((x2854*x2857)));
evalcond[4]=((((-1.0)*gconst88*r01*x2861))+(((-1.0)*r02*x2862))+(((-1.0)*cj0*x2860))+(((-1.0)*cj0*sj1*x2856))+((x2854*x2859)));
evalcond[5]=((((-1.0)*r12*x2862))+(((-1.0)*x2855*x2860))+(((-1.0)*cj2*sj1*x2855))+(((-1.0)*gconst88*r11*x2861))+((x2854*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2864=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2864;
j4eval[1]=IKsign(x2864);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2865=((1.0)*cj5);
IkReal x2866=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2865)));
j4eval[0]=x2866;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2865)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2867=cj5*cj5;
IkReal x2868=r11*r11;
IkReal x2869=(r11*sj5);
IkReal x2870=(cj5*r10);
IkReal x2871=((((-2.0)*x2869*x2870))+(r12*r12)+((x2867*(r10*r10)))+(((-1.0)*x2867*x2868))+x2868);
j4eval[0]=x2871;
j4eval[1]=IKsign(x2871);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2869))+x2870))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2872=cj5*cj5;
IkReal x2873=r11*r11;
IkReal x2874=(cj5*r10);
IkReal x2875=(r11*sj5);
CheckValue<IkReal> x2876=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2874*x2875))+((x2872*(r10*r10)))+x2873+(((-1.0)*x2872*x2873)))),-1);
if(!x2876.valid){
continue;
}
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal(((((-1.0)*x2875))+x2874)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2876.value)))+(x2877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2878=IKsin(j4);
IkReal x2879=IKcos(j4);
IkReal x2880=(cj5*r10);
IkReal x2881=(r01*sj5);
IkReal x2882=((1.0)*cj2);
IkReal x2883=(cj5*r00);
IkReal x2884=(cj5*r20);
IkReal x2885=((1.0)*x2879);
IkReal x2886=((1.0)*x2878);
IkReal x2887=(sj5*x2878);
evalcond[0]=((((-1.0)*r22*x2885))+((r21*x2887))+(((-1.0)*x2884*x2886)));
evalcond[1]=((((-1.0)*x2883*x2886))+(((-1.0)*r02*x2885))+((x2878*x2881)));
evalcond[2]=((((-1.0)*r11*sj5*x2885))+((x2879*x2880))+(((-1.0)*r12*x2886)));
evalcond[3]=((1.0)+((r11*x2887))+(((-1.0)*x2880*x2886))+(((-1.0)*r12*x2885)));
evalcond[4]=((((-1.0)*r22*x2886))+((sj1*sj2))+((x2879*x2884))+(((-1.0)*r21*sj5*x2885))+(((-1.0)*cj1*x2882)));
evalcond[5]=((((-1.0)*r02*x2886))+(((-1.0)*cj1*sj2))+((x2879*x2883))+(((-1.0)*sj1*x2882))+(((-1.0)*x2881*x2885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2888=((1.0)*cj5);
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2888)))),-1);
if(!x2889.valid){
continue;
}
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2889.value)))+(x2890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2891=IKsin(j4);
IkReal x2892=IKcos(j4);
IkReal x2893=(cj5*r10);
IkReal x2894=(r01*sj5);
IkReal x2895=((1.0)*cj2);
IkReal x2896=(cj5*r00);
IkReal x2897=(cj5*r20);
IkReal x2898=((1.0)*x2892);
IkReal x2899=((1.0)*x2891);
IkReal x2900=(sj5*x2891);
evalcond[0]=((((-1.0)*r22*x2898))+((r21*x2900))+(((-1.0)*x2897*x2899)));
evalcond[1]=(((x2891*x2894))+(((-1.0)*r02*x2898))+(((-1.0)*x2896*x2899)));
evalcond[2]=(((x2892*x2893))+(((-1.0)*r11*sj5*x2898))+(((-1.0)*r12*x2899)));
evalcond[3]=((1.0)+(((-1.0)*x2893*x2899))+((r11*x2900))+(((-1.0)*r12*x2898)));
evalcond[4]=((((-1.0)*r22*x2899))+((x2892*x2897))+((sj1*sj2))+(((-1.0)*r21*sj5*x2898))+(((-1.0)*cj1*x2895)));
evalcond[5]=((((-1.0)*r02*x2899))+((x2892*x2896))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2895))+(((-1.0)*x2894*x2898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2901=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2901.valid){
continue;
}
CheckValue<IkReal> x2902 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2901.value)))+(x2902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2903=IKsin(j4);
IkReal x2904=IKcos(j4);
IkReal x2905=(cj5*r10);
IkReal x2906=(r01*sj5);
IkReal x2907=((1.0)*cj2);
IkReal x2908=(cj5*r00);
IkReal x2909=(cj5*r20);
IkReal x2910=((1.0)*x2904);
IkReal x2911=((1.0)*x2903);
IkReal x2912=(sj5*x2903);
evalcond[0]=(((r21*x2912))+(((-1.0)*x2909*x2911))+(((-1.0)*r22*x2910)));
evalcond[1]=(((x2903*x2906))+(((-1.0)*x2908*x2911))+(((-1.0)*r02*x2910)));
evalcond[2]=(((x2904*x2905))+(((-1.0)*r12*x2911))+(((-1.0)*r11*sj5*x2910)));
evalcond[3]=((1.0)+((r11*x2912))+(((-1.0)*r12*x2910))+(((-1.0)*x2905*x2911)));
evalcond[4]=(((x2904*x2909))+((sj1*sj2))+(((-1.0)*cj1*x2907))+(((-1.0)*r21*sj5*x2910))+(((-1.0)*r22*x2911)));
evalcond[5]=(((x2904*x2908))+(((-1.0)*cj1*sj2))+(((-1.0)*x2906*x2910))+(((-1.0)*sj1*x2907))+(((-1.0)*r02*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2913=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2913;
j4eval[1]=IKsign(x2913);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2914=((1.0)*cj5);
IkReal x2915=((((-1.0)*r21*x2914))+(((-1.0)*r20*sj5)));
j4eval[0]=x2915;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2914))))));
j4eval[2]=IKsign(x2915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2916=cj5*cj5;
IkReal x2917=r11*r11;
IkReal x2918=(cj5*r10);
IkReal x2919=(r11*sj5);
IkReal x2920=((((-1.0)*x2916*(r10*r10)))+((x2916*x2917))+(((-1.0)*(r12*r12)))+(((2.0)*x2918*x2919))+(((-1.0)*x2917)));
j4eval[0]=x2920;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2919))+x2918))));
j4eval[2]=IKsign(x2920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2921=cj5*cj5;
IkReal x2922=r11*r11;
IkReal x2923=(cj5*r10);
IkReal x2924=(r11*sj5);
CheckValue<IkReal> x2925=IKPowWithIntegerCheck(IKsign((((x2921*x2922))+(((-1.0)*(r12*r12)))+(((2.0)*x2923*x2924))+(((-1.0)*x2921*(r10*r10)))+(((-1.0)*x2922)))),-1);
if(!x2925.valid){
continue;
}
CheckValue<IkReal> x2926 = IKatan2WithCheck(IkReal((x2923+(((-1.0)*x2924)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2925.value)))+(x2926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2927=IKsin(j4);
IkReal x2928=IKcos(j4);
IkReal x2929=(cj5*r10);
IkReal x2930=(r01*sj5);
IkReal x2931=(cj5*r00);
IkReal x2932=(cj5*r20);
IkReal x2933=((1.0)*x2928);
IkReal x2934=((1.0)*x2927);
IkReal x2935=(sj5*x2927);
evalcond[0]=(((r21*x2935))+(((-1.0)*x2932*x2934))+(((-1.0)*r22*x2933)));
evalcond[1]=((((-1.0)*x2931*x2934))+((x2927*x2930))+(((-1.0)*r02*x2933)));
evalcond[2]=(((x2928*x2929))+(((-1.0)*r11*sj5*x2933))+(((-1.0)*r12*x2934)));
evalcond[3]=((-1.0)+(((-1.0)*x2929*x2934))+(((-1.0)*r12*x2933))+((r11*x2935)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2930*x2933))+((x2928*x2931))+((cj1*sj2))+(((-1.0)*r02*x2934)));
evalcond[5]=((((-1.0)*r21*sj5*x2933))+((x2928*x2932))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2936=((1.0)*cj5);
CheckValue<IkReal> x2937=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2936))+(((-1.0)*r20*sj5)))),-1);
if(!x2937.valid){
continue;
}
CheckValue<IkReal> x2938 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2937.value)))+(x2938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2939=IKsin(j4);
IkReal x2940=IKcos(j4);
IkReal x2941=(cj5*r10);
IkReal x2942=(r01*sj5);
IkReal x2943=(cj5*r00);
IkReal x2944=(cj5*r20);
IkReal x2945=((1.0)*x2940);
IkReal x2946=((1.0)*x2939);
IkReal x2947=(sj5*x2939);
evalcond[0]=(((r21*x2947))+(((-1.0)*r22*x2945))+(((-1.0)*x2944*x2946)));
evalcond[1]=(((x2939*x2942))+(((-1.0)*r02*x2945))+(((-1.0)*x2943*x2946)));
evalcond[2]=((((-1.0)*r12*x2946))+(((-1.0)*r11*sj5*x2945))+((x2940*x2941)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2945))+((r11*x2947))+(((-1.0)*x2941*x2946)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2946))+(((-1.0)*x2942*x2945))+((x2940*x2943)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2940*x2944))+(((-1.0)*r21*sj5*x2945))+(((-1.0)*r22*x2946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2948 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2948.valid){
continue;
}
CheckValue<IkReal> x2949=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2948.value)+(((1.5707963267949)*(x2949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2950=IKsin(j4);
IkReal x2951=IKcos(j4);
IkReal x2952=(cj5*r10);
IkReal x2953=(r01*sj5);
IkReal x2954=(cj5*r00);
IkReal x2955=(cj5*r20);
IkReal x2956=((1.0)*x2951);
IkReal x2957=((1.0)*x2950);
IkReal x2958=(sj5*x2950);
evalcond[0]=(((r21*x2958))+(((-1.0)*x2955*x2957))+(((-1.0)*r22*x2956)));
evalcond[1]=((((-1.0)*r02*x2956))+((x2950*x2953))+(((-1.0)*x2954*x2957)));
evalcond[2]=(((x2951*x2952))+(((-1.0)*r11*sj5*x2956))+(((-1.0)*r12*x2957)));
evalcond[3]=((-1.0)+(((-1.0)*x2952*x2957))+(((-1.0)*r12*x2956))+((r11*x2958)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2953*x2956))+(((-1.0)*r02*x2957))+((x2951*x2954))+((cj1*sj2)));
evalcond[5]=(((x2951*x2955))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2957))+(((-1.0)*r21*sj5*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2959=((-1.0)*r00);
IkReal x2961 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2961)==0){
continue;
}
IkReal x2960=pow(x2961,-0.5);
CheckValue<IkReal> x2962 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2959),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2962.value));
IkReal gconst91=(r01*x2960);
IkReal gconst92=(x2959*x2960);
CheckValue<IkReal> x2963 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2963.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2963.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2964=((-1.0)*r00);
IkReal x2965=x2960;
CheckValue<IkReal> x2967 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2964),IKFAST_ATAN2_MAGTHRESH);
if(!x2967.valid){
continue;
}
IkReal x2966=((-1.0)*(x2967.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2966;
IkReal gconst90=x2966;
IkReal gconst91=(r01*x2965);
IkReal gconst92=(x2964*x2965);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2968=((1.0)*sj0);
IkReal x2969=((1.0)*cj0);
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2969))+(((-1.0)*r12*x2968)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2968))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2970.value)+(((1.5707963267949)*(x2971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2972=IKsin(j4);
IkReal x2973=IKcos(j4);
IkReal x2974=((1.0)*cj2);
IkReal x2975=(gconst92*r00);
IkReal x2976=(gconst92*r20);
IkReal x2977=((1.0)*sj0);
IkReal x2978=(gconst92*r10);
IkReal x2979=(cj1*sj2);
IkReal x2980=((1.0)*x2973);
IkReal x2981=(gconst91*x2972);
IkReal x2982=((1.0)*x2972);
evalcond[0]=((((-1.0)*x2976*x2982))+(((-1.0)*r22*x2980))+((r21*x2981)));
evalcond[1]=((((-1.0)*x2978*x2982))+cj0+((r11*x2981))+(((-1.0)*r12*x2980)));
evalcond[2]=(((r01*x2981))+(((-1.0)*x2977))+(((-1.0)*r02*x2980))+(((-1.0)*x2975*x2982)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst91*r21*x2980))+(((-1.0)*r22*x2982))+(((-1.0)*cj1*x2974))+((x2973*x2976)));
evalcond[4]=((((-1.0)*cj0*x2979))+(((-1.0)*r02*x2982))+(((-1.0)*cj0*sj1*x2974))+(((-1.0)*gconst91*r01*x2980))+((x2973*x2975)));
evalcond[5]=((((-1.0)*r12*x2982))+(((-1.0)*x2977*x2979))+(((-1.0)*gconst91*r11*x2980))+(((-1.0)*sj0*sj1*x2974))+((x2973*x2978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2983=((1.0)*gconst92);
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2983)))),-1);
if(!x2984.valid){
continue;
}
CheckValue<IkReal> x2985 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2984.value)))+(x2985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2986=IKsin(j4);
IkReal x2987=IKcos(j4);
IkReal x2988=((1.0)*cj2);
IkReal x2989=(gconst92*r00);
IkReal x2990=(gconst92*r20);
IkReal x2991=((1.0)*sj0);
IkReal x2992=(gconst92*r10);
IkReal x2993=(cj1*sj2);
IkReal x2994=((1.0)*x2987);
IkReal x2995=(gconst91*x2986);
IkReal x2996=((1.0)*x2986);
evalcond[0]=((((-1.0)*r22*x2994))+((r21*x2995))+(((-1.0)*x2990*x2996)));
evalcond[1]=((((-1.0)*x2992*x2996))+cj0+(((-1.0)*r12*x2994))+((r11*x2995)));
evalcond[2]=((((-1.0)*x2991))+((r01*x2995))+(((-1.0)*x2989*x2996))+(((-1.0)*r02*x2994)));
evalcond[3]=((((-1.0)*r22*x2996))+((x2987*x2990))+(((-1.0)*cj1*x2988))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2994)));
evalcond[4]=((((-1.0)*cj0*x2993))+(((-1.0)*gconst91*r01*x2994))+((x2987*x2989))+(((-1.0)*cj0*sj1*x2988))+(((-1.0)*r02*x2996)));
evalcond[5]=((((-1.0)*gconst91*r11*x2994))+((x2987*x2992))+(((-1.0)*r12*x2996))+(((-1.0)*sj0*sj1*x2988))+(((-1.0)*x2991*x2993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2997=((-1.0)*r01);
IkReal x2999 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2999)==0){
continue;
}
IkReal x2998=pow(x2999,-0.5);
CheckValue<IkReal> x3000 = IKatan2WithCheck(IkReal(x2997),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3000.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x3000.value))));
IkReal gconst94=(x2997*x2998);
IkReal gconst95=((1.0)*r00*x2998);
CheckValue<IkReal> x3001 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3001.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3001.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3002=((-1.0)*r01);
CheckValue<IkReal> x3005 = IKatan2WithCheck(IkReal(x3002),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3005.valid){
continue;
}
IkReal x3003=((1.0)*(x3005.value));
IkReal x3004=x2998;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3003)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3003)));
IkReal gconst94=(x3002*x3004);
IkReal gconst95=((1.0)*r00*x3004);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3006=((-1.0)*r01);
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(x3006),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
IkReal x3007=((1.0)*(x3009.value));
IkReal x3008=x2998;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3007)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3007)));
IkReal gconst94=(x3006*x3008);
IkReal gconst95=((1.0)*r00*x3008);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3010=((-1.0)*r01);
CheckValue<IkReal> x3013 = IKatan2WithCheck(IkReal(x3010),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3013.valid){
continue;
}
IkReal x3011=((1.0)*(x3013.value));
IkReal x3012=x2998;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3011)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3011)));
IkReal gconst94=(x3010*x3012);
IkReal gconst95=((1.0)*r00*x3012);
IkReal x3014=r02*r02;
IkReal x3015=(r12*sj0);
IkReal x3016=((1.0)*cj0);
IkReal x3017=x2998;
j4eval[0]=((IKabs(((((-1.0)*r02*x3016))+(((-1.0)*x3015)))))+(IKabs((((cj0*x3014*x3017))+((r02*x3015*x3017))+(((-1.0)*x3016*x3017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3018=((1.0)*sj0);
IkReal x3019=((1.0)*cj0);
CheckValue<IkReal> x3020 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3019))+(((-1.0)*r12*x3018)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x3019))+(((-1.0)*gconst94*r11*x3018))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3020.valid){
continue;
}
CheckValue<IkReal> x3021=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x3021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3020.value)+(((1.5707963267949)*(x3021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3022=IKsin(j4);
IkReal x3023=IKcos(j4);
IkReal x3024=(gconst94*r11);
IkReal x3025=((1.0)*cj2);
IkReal x3026=(gconst94*r21);
IkReal x3027=((1.0)*sj0);
IkReal x3028=(gconst94*r01);
IkReal x3029=(cj1*sj2);
IkReal x3030=((1.0)*x3023);
IkReal x3031=(gconst95*x3023);
IkReal x3032=((1.0)*x3022);
IkReal x3033=(gconst95*x3032);
evalcond[0]=((((-1.0)*r20*x3033))+(((-1.0)*r22*x3030))+((x3022*x3026)));
evalcond[1]=(cj0+(((-1.0)*r12*x3030))+((x3022*x3024))+(((-1.0)*r10*x3033)));
evalcond[2]=((((-1.0)*x3027))+(((-1.0)*r00*x3033))+(((-1.0)*r02*x3030))+((x3022*x3028)));
evalcond[3]=((((-1.0)*cj1*x3025))+((sj1*sj2))+(((-1.0)*x3026*x3030))+(((-1.0)*r22*x3032))+((r20*x3031)));
evalcond[4]=((((-1.0)*cj0*sj1*x3025))+((r00*x3031))+(((-1.0)*r02*x3032))+(((-1.0)*x3028*x3030))+(((-1.0)*cj0*x3029)));
evalcond[5]=((((-1.0)*x3024*x3030))+(((-1.0)*x3027*x3029))+(((-1.0)*r12*x3032))+((r10*x3031))+(((-1.0)*sj0*sj1*x3025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3034=((1.0)*gconst95);
CheckValue<IkReal> x3035=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x3034)))),-1);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x3034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3035.value)))+(x3036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3037=IKsin(j4);
IkReal x3038=IKcos(j4);
IkReal x3039=(gconst94*r11);
IkReal x3040=((1.0)*cj2);
IkReal x3041=(gconst94*r21);
IkReal x3042=((1.0)*sj0);
IkReal x3043=(gconst94*r01);
IkReal x3044=(cj1*sj2);
IkReal x3045=((1.0)*x3038);
IkReal x3046=(gconst95*x3038);
IkReal x3047=((1.0)*x3037);
IkReal x3048=(gconst95*x3047);
evalcond[0]=(((x3037*x3041))+(((-1.0)*r22*x3045))+(((-1.0)*r20*x3048)));
evalcond[1]=(cj0+(((-1.0)*r12*x3045))+((x3037*x3039))+(((-1.0)*r10*x3048)));
evalcond[2]=(((x3037*x3043))+(((-1.0)*x3042))+(((-1.0)*r00*x3048))+(((-1.0)*r02*x3045)));
evalcond[3]=((((-1.0)*r22*x3047))+((sj1*sj2))+(((-1.0)*cj1*x3040))+((r20*x3046))+(((-1.0)*x3041*x3045)));
evalcond[4]=((((-1.0)*cj0*sj1*x3040))+(((-1.0)*cj0*x3044))+((r00*x3046))+(((-1.0)*r02*x3047))+(((-1.0)*x3043*x3045)));
evalcond[5]=((((-1.0)*x3042*x3044))+((r10*x3046))+(((-1.0)*r12*x3047))+(((-1.0)*x3039*x3045))+(((-1.0)*sj0*sj1*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3049=((1.0)*gconst95);
CheckValue<IkReal> x3050=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x3049)))),-1);
if(!x3050.valid){
continue;
}
CheckValue<IkReal> x3051 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3049))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3050.value)))+(x3051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3052=IKsin(j4);
IkReal x3053=IKcos(j4);
IkReal x3054=(gconst94*r11);
IkReal x3055=((1.0)*cj2);
IkReal x3056=(gconst94*r21);
IkReal x3057=((1.0)*sj0);
IkReal x3058=(gconst94*r01);
IkReal x3059=(cj1*sj2);
IkReal x3060=((1.0)*x3053);
IkReal x3061=(gconst95*x3053);
IkReal x3062=((1.0)*x3052);
IkReal x3063=(gconst95*x3062);
evalcond[0]=((((-1.0)*r22*x3060))+((x3052*x3056))+(((-1.0)*r20*x3063)));
evalcond[1]=(cj0+(((-1.0)*r10*x3063))+(((-1.0)*r12*x3060))+((x3052*x3054)));
evalcond[2]=((((-1.0)*r00*x3063))+(((-1.0)*r02*x3060))+((x3052*x3058))+(((-1.0)*x3057)));
evalcond[3]=((((-1.0)*r22*x3062))+((sj1*sj2))+((r20*x3061))+(((-1.0)*cj1*x3055))+(((-1.0)*x3056*x3060)));
evalcond[4]=((((-1.0)*x3058*x3060))+(((-1.0)*cj0*sj1*x3055))+((r00*x3061))+(((-1.0)*cj0*x3059))+(((-1.0)*r02*x3062)));
evalcond[5]=((((-1.0)*x3054*x3060))+(((-1.0)*r12*x3062))+(((-1.0)*x3057*x3059))+((r10*x3061))+(((-1.0)*sj0*sj1*x3055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3064=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3064;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3065=((1.0)*cj5);
IkReal x3066=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3065)));
j4eval[0]=x3066;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3065))))));
j4eval[2]=IKsign(x3066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3067=cj5*cj5;
IkReal x3068=r01*r01;
IkReal x3069=(r01*sj5);
IkReal x3070=(cj5*r00);
IkReal x3071=((((2.0)*x3069*x3070))+(((-1.0)*x3068))+(((-1.0)*(r02*r02)))+(((-1.0)*x3067*(r00*r00)))+((x3067*x3068)));
j4eval[0]=x3071;
j4eval[1]=IKsign(x3071);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3069))+x3070))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3072=cj5*cj5;
IkReal x3073=r01*r01;
IkReal x3074=(r01*sj5);
IkReal x3075=(cj5*r00);
CheckValue<IkReal> x3076=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3073))+(((-1.0)*(r02*r02)))+(((-1.0)*x3072*(r00*r00)))+(((2.0)*x3074*x3075))+((x3072*x3073)))),-1);
if(!x3076.valid){
continue;
}
CheckValue<IkReal> x3077 = IKatan2WithCheck(IkReal(((((-1.0)*x3074))+x3075)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3076.value)))+(x3077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3078=IKsin(j4);
IkReal x3079=IKcos(j4);
IkReal x3080=(cj5*r10);
IkReal x3081=(r01*sj5);
IkReal x3082=((1.0)*cj2);
IkReal x3083=(cj5*r00);
IkReal x3084=(cj5*r20);
IkReal x3085=((1.0)*x3079);
IkReal x3086=((1.0)*x3078);
IkReal x3087=(sj5*x3078);
evalcond[0]=(((r21*x3087))+(((-1.0)*r22*x3085))+(((-1.0)*x3084*x3086)));
evalcond[1]=((((-1.0)*x3080*x3086))+((r11*x3087))+(((-1.0)*r12*x3085)));
evalcond[2]=((((-1.0)*r02*x3086))+((x3079*x3083))+(((-1.0)*x3081*x3085)));
evalcond[3]=((-1.0)+(((-1.0)*x3083*x3086))+(((-1.0)*r02*x3085))+((x3078*x3081)));
evalcond[4]=((((-1.0)*cj1*x3082))+((sj1*sj2))+(((-1.0)*r21*sj5*x3085))+(((-1.0)*r22*x3086))+((x3079*x3084)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3082))+((x3079*x3080))+(((-1.0)*r12*x3086))+(((-1.0)*r11*sj5*x3085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3088=((1.0)*cj5);
CheckValue<IkReal> x3089 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3088))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3089.valid){
continue;
}
CheckValue<IkReal> x3090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3088)))),-1);
if(!x3090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3089.value)+(((1.5707963267949)*(x3090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3091=IKsin(j4);
IkReal x3092=IKcos(j4);
IkReal x3093=(cj5*r10);
IkReal x3094=(r01*sj5);
IkReal x3095=((1.0)*cj2);
IkReal x3096=(cj5*r00);
IkReal x3097=(cj5*r20);
IkReal x3098=((1.0)*x3092);
IkReal x3099=((1.0)*x3091);
IkReal x3100=(sj5*x3091);
evalcond[0]=((((-1.0)*r22*x3098))+((r21*x3100))+(((-1.0)*x3097*x3099)));
evalcond[1]=(((r11*x3100))+(((-1.0)*r12*x3098))+(((-1.0)*x3093*x3099)));
evalcond[2]=((((-1.0)*r02*x3099))+((x3092*x3096))+(((-1.0)*x3094*x3098)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3098))+(((-1.0)*x3096*x3099))+((x3091*x3094)));
evalcond[4]=((((-1.0)*r22*x3099))+((x3092*x3097))+((sj1*sj2))+(((-1.0)*cj1*x3095))+(((-1.0)*r21*sj5*x3098)));
evalcond[5]=((((-1.0)*r12*x3099))+((x3092*x3093))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3095))+(((-1.0)*r11*sj5*x3098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3101.valid){
continue;
}
CheckValue<IkReal> x3102 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3101.value)))+(x3102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3103=IKsin(j4);
IkReal x3104=IKcos(j4);
IkReal x3105=(cj5*r10);
IkReal x3106=(r01*sj5);
IkReal x3107=((1.0)*cj2);
IkReal x3108=(cj5*r00);
IkReal x3109=(cj5*r20);
IkReal x3110=((1.0)*x3104);
IkReal x3111=((1.0)*x3103);
IkReal x3112=(sj5*x3103);
evalcond[0]=((((-1.0)*x3109*x3111))+((r21*x3112))+(((-1.0)*r22*x3110)));
evalcond[1]=((((-1.0)*r12*x3110))+(((-1.0)*x3105*x3111))+((r11*x3112)));
evalcond[2]=((((-1.0)*r02*x3111))+(((-1.0)*x3106*x3110))+((x3104*x3108)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3110))+((x3103*x3106))+(((-1.0)*x3108*x3111)));
evalcond[4]=((((-1.0)*cj1*x3107))+((sj1*sj2))+(((-1.0)*r22*x3111))+(((-1.0)*r21*sj5*x3110))+((x3104*x3109)));
evalcond[5]=((((-1.0)*sj1*x3107))+(((-1.0)*r12*x3111))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3110))+((x3104*x3105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3113=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3113;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3114=((1.0)*cj5);
IkReal x3115=((((-1.0)*r21*x3114))+(((-1.0)*r20*sj5)));
j4eval[0]=x3115;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3114))))));
j4eval[2]=IKsign(x3115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3116=cj5*cj5;
IkReal x3117=r01*r01;
IkReal x3118=(cj5*r00);
IkReal x3119=(r01*sj5);
IkReal x3120=(x3117+((x3116*(r00*r00)))+(((-1.0)*x3116*x3117))+(r02*r02)+(((-2.0)*x3118*x3119)));
j4eval[0]=x3120;
j4eval[1]=((IKabs(r02))+(IKabs((x3118+(((-1.0)*x3119))))));
j4eval[2]=IKsign(x3120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3121=cj5*cj5;
IkReal x3122=r01*r01;
IkReal x3123=(r01*sj5);
IkReal x3124=(cj5*r00);
CheckValue<IkReal> x3125=IKPowWithIntegerCheck(IKsign((x3122+(((-2.0)*x3123*x3124))+((x3121*(r00*r00)))+(r02*r02)+(((-1.0)*x3121*x3122)))),-1);
if(!x3125.valid){
continue;
}
CheckValue<IkReal> x3126 = IKatan2WithCheck(IkReal((x3124+(((-1.0)*x3123)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3125.value)))+(x3126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3127=IKsin(j4);
IkReal x3128=IKcos(j4);
IkReal x3129=(cj5*r10);
IkReal x3130=(r01*sj5);
IkReal x3131=(cj5*r00);
IkReal x3132=(cj5*r20);
IkReal x3133=((1.0)*x3128);
IkReal x3134=((1.0)*x3127);
IkReal x3135=(sj5*x3127);
evalcond[0]=((((-1.0)*x3132*x3134))+((r21*x3135))+(((-1.0)*r22*x3133)));
evalcond[1]=((((-1.0)*r12*x3133))+((r11*x3135))+(((-1.0)*x3129*x3134)));
evalcond[2]=((((-1.0)*x3130*x3133))+(((-1.0)*r02*x3134))+((x3128*x3131)));
evalcond[3]=((1.0)+(((-1.0)*x3131*x3134))+(((-1.0)*r02*x3133))+((x3127*x3130)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x3134))+(((-1.0)*r11*sj5*x3133))+((x3128*x3129)));
evalcond[5]=((((-1.0)*r21*sj5*x3133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3134))+((x3128*x3132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3136=((1.0)*cj5);
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3136))+(((-1.0)*r20*sj5)))),-1);
if(!x3137.valid){
continue;
}
CheckValue<IkReal> x3138 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3137.value)))+(x3138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3139=IKsin(j4);
IkReal x3140=IKcos(j4);
IkReal x3141=(cj5*r10);
IkReal x3142=(r01*sj5);
IkReal x3143=(cj5*r00);
IkReal x3144=(cj5*r20);
IkReal x3145=((1.0)*x3140);
IkReal x3146=((1.0)*x3139);
IkReal x3147=(sj5*x3139);
evalcond[0]=((((-1.0)*r22*x3145))+(((-1.0)*x3144*x3146))+((r21*x3147)));
evalcond[1]=((((-1.0)*r12*x3145))+(((-1.0)*x3141*x3146))+((r11*x3147)));
evalcond[2]=((((-1.0)*x3142*x3145))+(((-1.0)*r02*x3146))+((x3140*x3143)));
evalcond[3]=((1.0)+(((-1.0)*x3143*x3146))+(((-1.0)*r02*x3145))+((x3139*x3142)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3146))+((cj1*sj2))+((x3140*x3141))+(((-1.0)*r11*sj5*x3145)));
evalcond[5]=((((-1.0)*r22*x3146))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3145))+((x3140*x3144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3148 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3148.valid){
continue;
}
CheckValue<IkReal> x3149=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3148.value)+(((1.5707963267949)*(x3149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3150=IKsin(j4);
IkReal x3151=IKcos(j4);
IkReal x3152=(cj5*r10);
IkReal x3153=(r01*sj5);
IkReal x3154=(cj5*r00);
IkReal x3155=(cj5*r20);
IkReal x3156=((1.0)*x3151);
IkReal x3157=((1.0)*x3150);
IkReal x3158=(sj5*x3150);
evalcond[0]=((((-1.0)*r22*x3156))+(((-1.0)*x3155*x3157))+((r21*x3158)));
evalcond[1]=(((r11*x3158))+(((-1.0)*r12*x3156))+(((-1.0)*x3152*x3157)));
evalcond[2]=(((x3151*x3154))+(((-1.0)*x3153*x3156))+(((-1.0)*r02*x3157)));
evalcond[3]=((1.0)+((x3150*x3153))+(((-1.0)*x3154*x3157))+(((-1.0)*r02*x3156)));
evalcond[4]=(((x3151*x3152))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3156))+(((-1.0)*r12*x3157)));
evalcond[5]=(((x3151*x3155))+(((-1.0)*r22*x3157))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3159=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3159);
rxp1_1=(px*r21);
rxp1_2=(r11*x3159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3160=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3160);
rxp1_1=(px*r21);
rxp1_2=(r11*x3160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3161=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3161);
rxp1_1=(px*r21);
rxp1_2=(r11*x3161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3164=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3164.valid){
continue;
}
IkReal x3162=x3164.value;
IkReal x3163=(sj0*x3162);
cj4array[0]=(((cj1*sj2*x3163))+((cj2*sj1*x3163)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3165=IKsin(j4);
IkReal x3166=IKcos(j4);
IkReal x3167=(cj5*r20);
IkReal x3168=(r21*sj5);
IkReal x3169=((1.0)*x3165);
IkReal x3170=((1.0)*x3166);
evalcond[0]=((-1.0)*r02*x3165);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3170)));
evalcond[2]=((((-1.0)*x3167*x3169))+((x3165*x3168)));
evalcond[3]=((((-1.0)*cj5*r10*x3169))+((r11*sj5*x3165)));
evalcond[4]=(((x3166*x3167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3168*x3170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3172=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3172.valid){
continue;
}
IkReal x3171=x3172.value;
cj4array[0]=(((cj1*cj2*x3171))+(((-1.0)*sj1*sj2*x3171)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3173=IKsin(j4);
IkReal x3174=IKcos(j4);
IkReal x3175=(r11*sj5);
IkReal x3176=((1.0)*sj0);
IkReal x3177=((1.0)*x3174);
IkReal x3178=((1.0)*cj5*x3173);
evalcond[0]=((-1.0)*r02*x3173);
evalcond[1]=((((-1.0)*x3176))+(((-1.0)*r02*x3177)));
evalcond[2]=(((r21*sj5*x3173))+(((-1.0)*r20*x3178)));
evalcond[3]=((((-1.0)*r10*x3178))+((x3173*x3175)));
evalcond[4]=((((-1.0)*cj1*sj2*x3176))+(((-1.0)*cj2*sj1*x3176))+((cj5*r10*x3174))+(((-1.0)*x3175*x3177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3179=IKPowWithIntegerCheck(r02,-1);
if(!x3179.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3179.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3180=IKsin(j4);
IkReal x3181=IKcos(j4);
IkReal x3182=((1.0)*sj0);
IkReal x3183=(cj5*x3181);
IkReal x3184=(sj5*x3180);
IkReal x3185=((1.0)*sj5*x3181);
IkReal x3186=((1.0)*cj5*x3180);
evalcond[0]=((-1.0)*r02*x3180);
evalcond[1]=((((-1.0)*r20*x3186))+((r21*x3184)));
evalcond[2]=(((r11*x3184))+(((-1.0)*r10*x3186)));
evalcond[3]=((((-1.0)*r21*x3185))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3183)));
evalcond[4]=((((-1.0)*cj2*sj1*x3182))+(((-1.0)*cj1*sj2*x3182))+(((-1.0)*r11*x3185))+((r10*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3187=((1.0)*sj0);
IkReal x3188=((1.0)*cj0);
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3188))+(((-1.0)*r12*x3187)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x3187))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3189.value)+(((1.5707963267949)*(x3190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKsin(j4);
IkReal x3192=IKcos(j4);
IkReal x3193=(cj5*r10);
IkReal x3194=(r01*sj5);
IkReal x3195=((1.0)*cj2);
IkReal x3196=(cj5*r00);
IkReal x3197=((1.0)*sj0);
IkReal x3198=(cj5*r20);
IkReal x3199=(cj1*sj2);
IkReal x3200=((1.0)*x3192);
IkReal x3201=((1.0)*x3191);
IkReal x3202=(sj5*x3191);
evalcond[0]=((((-1.0)*r22*x3200))+((r21*x3202))+(((-1.0)*x3198*x3201)));
evalcond[1]=((((-1.0)*x3193*x3201))+cj0+((r11*x3202))+(((-1.0)*r12*x3200)));
evalcond[2]=((((-1.0)*x3196*x3201))+(((-1.0)*r02*x3200))+(((-1.0)*x3197))+((x3191*x3194)));
evalcond[3]=((((-1.0)*r21*sj5*x3200))+((sj1*sj2))+(((-1.0)*r22*x3201))+((x3192*x3198))+(((-1.0)*cj1*x3195)));
evalcond[4]=((((-1.0)*x3194*x3200))+(((-1.0)*cj0*sj1*x3195))+(((-1.0)*r02*x3201))+(((-1.0)*cj0*x3199))+((x3192*x3196)));
evalcond[5]=((((-1.0)*r11*sj5*x3200))+(((-1.0)*x3197*x3199))+(((-1.0)*r12*x3201))+((x3192*x3193))+(((-1.0)*sj0*sj1*x3195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3203=((1.0)*cj5);
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3203)))),-1);
if(!x3204.valid){
continue;
}
CheckValue<IkReal> x3205 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3204.value)))+(x3205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3206=IKsin(j4);
IkReal x3207=IKcos(j4);
IkReal x3208=(cj5*r10);
IkReal x3209=(r01*sj5);
IkReal x3210=((1.0)*cj2);
IkReal x3211=(cj5*r00);
IkReal x3212=((1.0)*sj0);
IkReal x3213=(cj5*r20);
IkReal x3214=(cj1*sj2);
IkReal x3215=((1.0)*x3207);
IkReal x3216=((1.0)*x3206);
IkReal x3217=(sj5*x3206);
evalcond[0]=(((r21*x3217))+(((-1.0)*r22*x3215))+(((-1.0)*x3213*x3216)));
evalcond[1]=(cj0+((r11*x3217))+(((-1.0)*r12*x3215))+(((-1.0)*x3208*x3216)));
evalcond[2]=((((-1.0)*x3211*x3216))+((x3206*x3209))+(((-1.0)*x3212))+(((-1.0)*r02*x3215)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x3215))+((x3207*x3213))+(((-1.0)*cj1*x3210))+(((-1.0)*r22*x3216)));
evalcond[4]=((((-1.0)*cj0*x3214))+((x3207*x3211))+(((-1.0)*x3209*x3215))+(((-1.0)*r02*x3216))+(((-1.0)*cj0*sj1*x3210)));
evalcond[5]=(((x3207*x3208))+(((-1.0)*r11*sj5*x3215))+(((-1.0)*x3212*x3214))+(((-1.0)*r12*x3216))+(((-1.0)*sj0*sj1*x3210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3218=((1.0)*cj5);
CheckValue<IkReal> x3219 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3219.valid){
continue;
}
CheckValue<IkReal> x3220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3218))+(((-1.0)*r00*sj5)))),-1);
if(!x3220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3219.value)+(((1.5707963267949)*(x3220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3221=IKsin(j4);
IkReal x3222=IKcos(j4);
IkReal x3223=(cj5*r10);
IkReal x3224=(r01*sj5);
IkReal x3225=((1.0)*cj2);
IkReal x3226=(cj5*r00);
IkReal x3227=((1.0)*sj0);
IkReal x3228=(cj5*r20);
IkReal x3229=(cj1*sj2);
IkReal x3230=((1.0)*x3222);
IkReal x3231=((1.0)*x3221);
IkReal x3232=(sj5*x3221);
evalcond[0]=((((-1.0)*x3228*x3231))+(((-1.0)*r22*x3230))+((r21*x3232)));
evalcond[1]=((((-1.0)*x3223*x3231))+cj0+((r11*x3232))+(((-1.0)*r12*x3230)));
evalcond[2]=((((-1.0)*r02*x3230))+(((-1.0)*x3226*x3231))+((x3221*x3224))+(((-1.0)*x3227)));
evalcond[3]=(((x3222*x3228))+(((-1.0)*r21*sj5*x3230))+((sj1*sj2))+(((-1.0)*r22*x3231))+(((-1.0)*cj1*x3225)));
evalcond[4]=((((-1.0)*r02*x3231))+((x3222*x3226))+(((-1.0)*cj0*sj1*x3225))+(((-1.0)*x3224*x3230))+(((-1.0)*cj0*x3229)));
evalcond[5]=(((x3222*x3223))+(((-1.0)*r11*sj5*x3230))+(((-1.0)*sj0*sj1*x3225))+(((-1.0)*x3227*x3229))+(((-1.0)*r12*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3233=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3233;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3233);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3234=r21*r21;
IkReal x3235=cj5*cj5;
IkReal x3236=(sj1*sj2);
IkReal x3237=(r21*sj5);
IkReal x3238=(cj5*r20);
IkReal x3239=(cj1*cj2);
IkReal x3240=((((2.0)*x3237*x3238))+((x3234*x3235))+(((-1.0)*x3235*(r20*r20)))+(((-1.0)*x3234))+(((-1.0)*(r22*r22))));
j4eval[0]=x3240;
j4eval[1]=((IKabs(((((-1.0)*x3237*x3239))+((x3236*x3237))+(((-1.0)*x3236*x3238))+((x3238*x3239)))))+(IKabs((((r22*x3236))+(((-1.0)*r22*x3239))))));
j4eval[2]=IKsign(x3240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3241=IKsin(j0);
IkReal x3242=IKcos(j0);
evalcond[0]=((((-0.10915)*x3241))+(((-1.0)*px))+(((0.425)*x3242)));
evalcond[1]=((((0.10915)*x3242))+(((-1.0)*py))+(((0.425)*x3241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3243=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3243;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3244=((1.0)*cj5);
IkReal x3245=((((-1.0)*r01*x3244))+(((-1.0)*r00*sj5)));
j4eval[0]=x3245;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3244))))));
j4eval[2]=IKsign(x3245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3246=((1.0)*cj5);
IkReal x3247=((((-1.0)*r01*x3246))+(((-1.0)*r00*sj5)));
j4eval[0]=x3247;
j4eval[1]=IKsign(x3247);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3246))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3248=((1.0)*cj5);
CheckValue<IkReal> x3249 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3248)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3249.valid){
continue;
}
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3248))+(((-1.0)*r00*sj5)))),-1);
if(!x3250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3249.value)+(((1.5707963267949)*(x3250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3251=IKcos(j4);
IkReal x3252=IKsin(j4);
IkReal x3253=((1.0)*sj0);
IkReal x3254=(cj5*r00);
IkReal x3255=(cj5*r10);
IkReal x3256=(cj5*r20);
IkReal x3257=((1.0)*x3251);
IkReal x3258=((1.0)*x3252);
IkReal x3259=(sj5*x3251);
IkReal x3260=(sj5*x3252);
evalcond[0]=(((r21*x3259))+((r22*x3252))+(((-1.0)*x3256*x3257)));
evalcond[1]=(((r21*x3260))+(((-1.0)*r22*x3257))+(((-1.0)*x3256*x3258)));
evalcond[2]=(cj0+((r11*x3260))+(((-1.0)*r12*x3257))+(((-1.0)*x3255*x3258)));
evalcond[3]=(((r02*x3252))+(((-1.0)*x3254*x3257))+((r01*x3259))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3252))+((r11*x3259))+(((-1.0)*x3255*x3257))+(((-1.0)*x3253)));
evalcond[5]=((((-1.0)*r02*x3257))+((r01*x3260))+(((-1.0)*x3254*x3258))+(((-1.0)*x3253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3261=((1.0)*cj5);
CheckValue<IkReal> x3262 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3261))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3262.valid){
continue;
}
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3261)))),-1);
if(!x3263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3262.value)+(((1.5707963267949)*(x3263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3264=IKcos(j4);
IkReal x3265=IKsin(j4);
IkReal x3266=((1.0)*sj0);
IkReal x3267=(cj5*r00);
IkReal x3268=(cj5*r10);
IkReal x3269=(cj5*r20);
IkReal x3270=((1.0)*x3264);
IkReal x3271=((1.0)*x3265);
IkReal x3272=(sj5*x3264);
IkReal x3273=(sj5*x3265);
evalcond[0]=(((r21*x3272))+(((-1.0)*x3269*x3270))+((r22*x3265)));
evalcond[1]=(((r21*x3273))+(((-1.0)*x3269*x3271))+(((-1.0)*r22*x3270)));
evalcond[2]=((((-1.0)*x3268*x3271))+(((-1.0)*r12*x3270))+cj0+((r11*x3273)));
evalcond[3]=(((r01*x3272))+((r02*x3265))+(((-1.0)*x3267*x3270))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3268*x3270))+(((-1.0)*x3266))+((r11*x3272))+((r12*x3265)));
evalcond[5]=(((r01*x3273))+(((-1.0)*x3266))+(((-1.0)*x3267*x3271))+(((-1.0)*r02*x3270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3274 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3274.valid){
continue;
}
CheckValue<IkReal> x3275=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3274.value)+(((1.5707963267949)*(x3275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3276=IKcos(j4);
IkReal x3277=IKsin(j4);
IkReal x3278=((1.0)*sj0);
IkReal x3279=(cj5*r00);
IkReal x3280=(cj5*r10);
IkReal x3281=(cj5*r20);
IkReal x3282=((1.0)*x3276);
IkReal x3283=((1.0)*x3277);
IkReal x3284=(sj5*x3276);
IkReal x3285=(sj5*x3277);
evalcond[0]=((((-1.0)*x3281*x3282))+((r21*x3284))+((r22*x3277)));
evalcond[1]=((((-1.0)*x3281*x3283))+(((-1.0)*r22*x3282))+((r21*x3285)));
evalcond[2]=((((-1.0)*r12*x3282))+(((-1.0)*x3280*x3283))+cj0+((r11*x3285)));
evalcond[3]=((((-1.0)*x3279*x3282))+((r02*x3277))+(((-1.0)*cj0))+((r01*x3284)));
evalcond[4]=((((-1.0)*x3280*x3282))+(((-1.0)*x3278))+((r12*x3277))+((r11*x3284)));
evalcond[5]=((((-1.0)*x3279*x3283))+(((-1.0)*x3278))+(((-1.0)*r02*x3282))+((r01*x3285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3286=IKsin(j0);
IkReal x3287=IKcos(j0);
evalcond[0]=((((0.425)*x3287))+(((-0.10915)*x3286))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x3287))+(((0.425)*x3286))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3288=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3288;
j4eval[1]=IKsign(x3288);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3289=((1.0)*cj5);
IkReal x3290=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3289)));
j4eval[0]=x3290;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3289))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3291=cj5*cj5;
IkReal x3292=((1.0)*r20);
IkReal x3293=(r01*r21);
IkReal x3294=(r21*sj5);
IkReal x3295=((((-1.0)*r00*x3291*x3292))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3291*x3293))+((cj5*r00*x3294))+(((-1.0)*x3293)));
j4eval[0]=x3295;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3292))+((cj0*x3294))))));
j4eval[2]=IKsign(x3295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3296=cj5*cj5;
IkReal x3297=((1.0)*r20);
IkReal x3298=(r01*r21);
IkReal x3299=(r21*sj5);
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3297))+((cj0*x3299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3296*x3298))+(((-1.0)*r00*x3296*x3297))+((cj5*r00*x3299))+(((-1.0)*x3298)))),-1);
if(!x3301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3300.value)+(((1.5707963267949)*(x3301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3302=IKcos(j4);
IkReal x3303=IKsin(j4);
IkReal x3304=(cj5*r00);
IkReal x3305=(cj5*r10);
IkReal x3306=(cj5*r20);
IkReal x3307=((1.0)*x3302);
IkReal x3308=((1.0)*x3303);
IkReal x3309=(sj5*x3302);
IkReal x3310=(sj5*x3303);
evalcond[0]=(((r21*x3309))+((r22*x3303))+(((-1.0)*x3306*x3307)));
evalcond[1]=(((r21*x3310))+(((-1.0)*r22*x3307))+(((-1.0)*x3306*x3308)));
evalcond[2]=((((-1.0)*x3304*x3307))+cj0+((r02*x3303))+((r01*x3309)));
evalcond[3]=(sj0+(((-1.0)*x3305*x3307))+((r11*x3309))+((r12*x3303)));
evalcond[4]=(cj0+(((-1.0)*x3305*x3308))+((r11*x3310))+(((-1.0)*r12*x3307)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3304*x3308))+(((-1.0)*r02*x3307))+((r01*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3311=((1.0)*cj5);
CheckValue<IkReal> x3312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3311)))),-1);
if(!x3312.valid){
continue;
}
CheckValue<IkReal> x3313 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3311)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3312.value)))+(x3313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3314=IKcos(j4);
IkReal x3315=IKsin(j4);
IkReal x3316=(cj5*r00);
IkReal x3317=(cj5*r10);
IkReal x3318=(cj5*r20);
IkReal x3319=((1.0)*x3314);
IkReal x3320=((1.0)*x3315);
IkReal x3321=(sj5*x3314);
IkReal x3322=(sj5*x3315);
evalcond[0]=((((-1.0)*x3318*x3319))+((r22*x3315))+((r21*x3321)));
evalcond[1]=((((-1.0)*r22*x3319))+((r21*x3322))+(((-1.0)*x3318*x3320)));
evalcond[2]=(cj0+((r01*x3321))+((r02*x3315))+(((-1.0)*x3316*x3319)));
evalcond[3]=(sj0+((r11*x3321))+(((-1.0)*x3317*x3319))+((r12*x3315)));
evalcond[4]=(cj0+((r11*x3322))+(((-1.0)*x3317*x3320))+(((-1.0)*r12*x3319)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3322))+(((-1.0)*r02*x3319))+(((-1.0)*x3316*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3323.value)+(((1.5707963267949)*(x3324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3325=IKcos(j4);
IkReal x3326=IKsin(j4);
IkReal x3327=(cj5*r00);
IkReal x3328=(cj5*r10);
IkReal x3329=(cj5*r20);
IkReal x3330=((1.0)*x3325);
IkReal x3331=((1.0)*x3326);
IkReal x3332=(sj5*x3325);
IkReal x3333=(sj5*x3326);
evalcond[0]=(((r22*x3326))+((r21*x3332))+(((-1.0)*x3329*x3330)));
evalcond[1]=(((r21*x3333))+(((-1.0)*r22*x3330))+(((-1.0)*x3329*x3331)));
evalcond[2]=(cj0+((r01*x3332))+((r02*x3326))+(((-1.0)*x3327*x3330)));
evalcond[3]=(((r12*x3326))+sj0+((r11*x3332))+(((-1.0)*x3328*x3330)));
evalcond[4]=(cj0+((r11*x3333))+(((-1.0)*x3328*x3331))+(((-1.0)*r12*x3330)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3330))+((r01*x3333))+(((-1.0)*x3327*x3331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3334=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3334;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3335=((1.0)*cj5);
IkReal x3336=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3335)));
j4eval[0]=x3336;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3335)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3337=((1.0)*cj5);
IkReal x3338=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3337)));
j4eval[0]=x3338;
j4eval[1]=IKsign(x3338);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3337)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3339=((1.0)*cj5);
CheckValue<IkReal> x3340 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3339)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3340.valid){
continue;
}
CheckValue<IkReal> x3341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3339)))),-1);
if(!x3341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3340.value)+(((1.5707963267949)*(x3341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3342=IKcos(j4);
IkReal x3343=IKsin(j4);
IkReal x3344=((1.0)*sj0);
IkReal x3345=(cj5*r00);
IkReal x3346=(cj5*r10);
IkReal x3347=(cj5*r20);
IkReal x3348=((1.0)*x3342);
IkReal x3349=((1.0)*x3343);
IkReal x3350=(sj5*x3342);
IkReal x3351=(sj5*x3343);
evalcond[0]=((((-1.0)*x3347*x3348))+((r22*x3343))+((r21*x3350)));
evalcond[1]=((((-1.0)*x3347*x3349))+((r21*x3351))+(((-1.0)*r22*x3348)));
evalcond[2]=(cj0+((r11*x3351))+(((-1.0)*x3346*x3349))+(((-1.0)*r12*x3348)));
evalcond[3]=(((r01*x3350))+((r02*x3343))+(((-1.0)*x3345*x3348))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3350))+(((-1.0)*x3346*x3348))+(((-1.0)*x3344))+((r12*x3343)));
evalcond[5]=(((r01*x3351))+(((-1.0)*x3344))+(((-1.0)*r02*x3348))+(((-1.0)*x3345*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3352=((1.0)*cj5);
CheckValue<IkReal> x3353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3352)))),-1);
if(!x3353.valid){
continue;
}
CheckValue<IkReal> x3354 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3353.value)))+(x3354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3355=IKcos(j4);
IkReal x3356=IKsin(j4);
IkReal x3357=((1.0)*sj0);
IkReal x3358=(cj5*r00);
IkReal x3359=(cj5*r10);
IkReal x3360=(cj5*r20);
IkReal x3361=((1.0)*x3355);
IkReal x3362=((1.0)*x3356);
IkReal x3363=(sj5*x3355);
IkReal x3364=(sj5*x3356);
evalcond[0]=((((-1.0)*x3360*x3361))+((r21*x3363))+((r22*x3356)));
evalcond[1]=((((-1.0)*x3360*x3362))+((r21*x3364))+(((-1.0)*r22*x3361)));
evalcond[2]=((((-1.0)*x3359*x3362))+(((-1.0)*r12*x3361))+cj0+((r11*x3364)));
evalcond[3]=(((r01*x3363))+((r02*x3356))+(((-1.0)*cj0))+(((-1.0)*x3358*x3361)));
evalcond[4]=((((-1.0)*x3359*x3361))+(((-1.0)*x3357))+((r12*x3356))+((r11*x3363)));
evalcond[5]=((((-1.0)*x3357))+((r01*x3364))+(((-1.0)*r02*x3361))+(((-1.0)*x3358*x3362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3365 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3365.value)+(((1.5707963267949)*(x3366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3367=IKcos(j4);
IkReal x3368=IKsin(j4);
IkReal x3369=((1.0)*sj0);
IkReal x3370=(cj5*r00);
IkReal x3371=(cj5*r10);
IkReal x3372=(cj5*r20);
IkReal x3373=((1.0)*x3367);
IkReal x3374=((1.0)*x3368);
IkReal x3375=(sj5*x3367);
IkReal x3376=(sj5*x3368);
evalcond[0]=(((r22*x3368))+((r21*x3375))+(((-1.0)*x3372*x3373)));
evalcond[1]=((((-1.0)*r22*x3373))+((r21*x3376))+(((-1.0)*x3372*x3374)));
evalcond[2]=(cj0+(((-1.0)*x3371*x3374))+(((-1.0)*r12*x3373))+((r11*x3376)));
evalcond[3]=(((r01*x3375))+((r02*x3368))+(((-1.0)*x3370*x3373))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3369))+(((-1.0)*x3371*x3373))+((r12*x3368))+((r11*x3375)));
evalcond[5]=(((r01*x3376))+(((-1.0)*x3369))+(((-1.0)*x3370*x3374))+(((-1.0)*r02*x3373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3377=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3377;
j4eval[1]=IKsign(x3377);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3378=((1.0)*cj5);
IkReal x3379=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3378)));
j4eval[0]=x3379;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3378))))));
j4eval[2]=IKsign(x3379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3380=cj5*cj5;
IkReal x3381=((1.0)*r20);
IkReal x3382=(r01*r21);
IkReal x3383=(r21*sj5);
IkReal x3384=(((cj5*r01*r20*sj5))+((x3380*x3382))+(((-1.0)*r02*r22))+(((-1.0)*x3382))+(((-1.0)*r00*x3380*x3381))+((cj5*r00*x3383)));
j4eval[0]=x3384;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3381))+((cj0*x3383))))));
j4eval[2]=IKsign(x3384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3385=cj5*cj5;
IkReal x3386=((1.0)*r20);
IkReal x3387=(r01*r21);
IkReal x3388=(r21*sj5);
CheckValue<IkReal> x3389 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3386))+((cj0*x3388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3387))+((cj5*r00*x3388))+((x3385*x3387))+(((-1.0)*r00*x3385*x3386)))),-1);
if(!x3390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3389.value)+(((1.5707963267949)*(x3390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3391=IKcos(j4);
IkReal x3392=IKsin(j4);
IkReal x3393=(cj5*r00);
IkReal x3394=(cj5*r10);
IkReal x3395=(cj5*r20);
IkReal x3396=((1.0)*x3391);
IkReal x3397=((1.0)*x3392);
IkReal x3398=(sj5*x3391);
IkReal x3399=(sj5*x3392);
evalcond[0]=((((-1.0)*x3395*x3396))+((r21*x3398))+((r22*x3392)));
evalcond[1]=((((-1.0)*r22*x3396))+(((-1.0)*x3395*x3397))+((r21*x3399)));
evalcond[2]=(cj0+((r01*x3398))+((r02*x3392))+(((-1.0)*x3393*x3396)));
evalcond[3]=(sj0+(((-1.0)*x3394*x3396))+((r11*x3398))+((r12*x3392)));
evalcond[4]=((((-1.0)*x3394*x3397))+cj0+((r11*x3399))+(((-1.0)*r12*x3396)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3399))+(((-1.0)*r02*x3396))+(((-1.0)*x3393*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3400=((1.0)*cj5);
CheckValue<IkReal> x3401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3400)))),-1);
if(!x3401.valid){
continue;
}
CheckValue<IkReal> x3402 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3400)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3401.value)))+(x3402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3403=IKcos(j4);
IkReal x3404=IKsin(j4);
IkReal x3405=(cj5*r00);
IkReal x3406=(cj5*r10);
IkReal x3407=(cj5*r20);
IkReal x3408=((1.0)*x3403);
IkReal x3409=((1.0)*x3404);
IkReal x3410=(sj5*x3403);
IkReal x3411=(sj5*x3404);
evalcond[0]=(((r22*x3404))+(((-1.0)*x3407*x3408))+((r21*x3410)));
evalcond[1]=((((-1.0)*x3407*x3409))+((r21*x3411))+(((-1.0)*r22*x3408)));
evalcond[2]=((((-1.0)*x3405*x3408))+((r02*x3404))+cj0+((r01*x3410)));
evalcond[3]=(sj0+((r11*x3410))+((r12*x3404))+(((-1.0)*x3406*x3408)));
evalcond[4]=(cj0+(((-1.0)*r12*x3408))+((r11*x3411))+(((-1.0)*x3406*x3409)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3405*x3409))+((r01*x3411))+(((-1.0)*r02*x3408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3412 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3412.valid){
continue;
}
CheckValue<IkReal> x3413=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3412.value)+(((1.5707963267949)*(x3413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3414=IKcos(j4);
IkReal x3415=IKsin(j4);
IkReal x3416=(cj5*r00);
IkReal x3417=(cj5*r10);
IkReal x3418=(cj5*r20);
IkReal x3419=((1.0)*x3414);
IkReal x3420=((1.0)*x3415);
IkReal x3421=(sj5*x3414);
IkReal x3422=(sj5*x3415);
evalcond[0]=((((-1.0)*x3418*x3419))+((r22*x3415))+((r21*x3421)));
evalcond[1]=((((-1.0)*r22*x3419))+(((-1.0)*x3418*x3420))+((r21*x3422)));
evalcond[2]=(cj0+((r02*x3415))+(((-1.0)*x3416*x3419))+((r01*x3421)));
evalcond[3]=(sj0+((r12*x3415))+(((-1.0)*x3417*x3419))+((r11*x3421)));
evalcond[4]=(cj0+(((-1.0)*x3417*x3420))+(((-1.0)*r12*x3419))+((r11*x3422)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3419))+(((-1.0)*x3416*x3420))+((r01*x3422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3423=IKcos(j0);
IkReal x3424=IKsin(j0);
evalcond[0]=((((-0.425)*x3423))+(((-1.0)*px))+(((-0.10915)*x3424)));
evalcond[1]=((((0.10915)*x3423))+(((-0.425)*x3424))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3425=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3425;
j4eval[1]=IKsign(x3425);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3426=((1.0)*cj5);
IkReal x3427=((((-1.0)*r11*x3426))+(((-1.0)*r10*sj5)));
j4eval[0]=x3427;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3426))))));
j4eval[2]=IKsign(x3427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3428=cj5*cj5;
IkReal x3429=((1.0)*r20);
IkReal x3430=(r01*r21);
IkReal x3431=(r21*sj5);
IkReal x3432=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3428*x3430))+((cj5*r00*x3431))+(((-1.0)*r00*x3428*x3429))+(((-1.0)*x3430)));
j4eval[0]=x3432;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3431))+(((-1.0)*cj0*cj5*x3429))))));
j4eval[2]=IKsign(x3432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3433=cj5*cj5;
IkReal x3434=((1.0)*r20);
IkReal x3435=(r01*r21);
IkReal x3436=(r21*sj5);
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3436))+(((-1.0)*cj0*cj5*x3434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3433*x3434))+(((-1.0)*r02*r22))+((cj5*r00*x3436))+((x3433*x3435))+(((-1.0)*x3435)))),-1);
if(!x3438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3437.value)+(((1.5707963267949)*(x3438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3439=IKcos(j4);
IkReal x3440=IKsin(j4);
IkReal x3441=(cj5*r00);
IkReal x3442=(cj5*r10);
IkReal x3443=(cj5*r20);
IkReal x3444=((1.0)*x3439);
IkReal x3445=((1.0)*x3440);
IkReal x3446=(sj5*x3439);
IkReal x3447=(sj5*x3440);
evalcond[0]=(((r21*x3446))+((r22*x3440))+(((-1.0)*x3443*x3444)));
evalcond[1]=(((r21*x3447))+(((-1.0)*x3443*x3445))+(((-1.0)*r22*x3444)));
evalcond[2]=(cj0+((r02*x3440))+(((-1.0)*x3441*x3444))+((r01*x3446)));
evalcond[3]=(((r11*x3446))+sj0+((r12*x3440))+(((-1.0)*x3442*x3444)));
evalcond[4]=(((r11*x3447))+cj0+(((-1.0)*r12*x3444))+(((-1.0)*x3442*x3445)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3441*x3445))+(((-1.0)*r02*x3444))+((r01*x3447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3448=((1.0)*cj5);
CheckValue<IkReal> x3449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3448)))),-1);
if(!x3449.valid){
continue;
}
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3448))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3449.value)))+(x3450.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3451=IKcos(j4);
IkReal x3452=IKsin(j4);
IkReal x3453=(cj5*r00);
IkReal x3454=(cj5*r10);
IkReal x3455=(cj5*r20);
IkReal x3456=((1.0)*x3451);
IkReal x3457=((1.0)*x3452);
IkReal x3458=(sj5*x3451);
IkReal x3459=(sj5*x3452);
evalcond[0]=(((r21*x3458))+((r22*x3452))+(((-1.0)*x3455*x3456)));
evalcond[1]=(((r21*x3459))+(((-1.0)*x3455*x3457))+(((-1.0)*r22*x3456)));
evalcond[2]=((((-1.0)*x3453*x3456))+cj0+((r02*x3452))+((r01*x3458)));
evalcond[3]=(sj0+((r12*x3452))+(((-1.0)*x3454*x3456))+((r11*x3458)));
evalcond[4]=(cj0+(((-1.0)*x3454*x3457))+(((-1.0)*r12*x3456))+((r11*x3459)));
evalcond[5]=((((-1.0)*x3453*x3457))+(((-1.0)*sj0))+(((-1.0)*r02*x3456))+((r01*x3459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3460 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3460.valid){
continue;
}
CheckValue<IkReal> x3461=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3460.value)+(((1.5707963267949)*(x3461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3462=IKcos(j4);
IkReal x3463=IKsin(j4);
IkReal x3464=(cj5*r00);
IkReal x3465=(cj5*r10);
IkReal x3466=(cj5*r20);
IkReal x3467=((1.0)*x3462);
IkReal x3468=((1.0)*x3463);
IkReal x3469=(sj5*x3462);
IkReal x3470=(sj5*x3463);
evalcond[0]=(((r21*x3469))+((r22*x3463))+(((-1.0)*x3466*x3467)));
evalcond[1]=((((-1.0)*r22*x3467))+((r21*x3470))+(((-1.0)*x3466*x3468)));
evalcond[2]=(cj0+((r01*x3469))+((r02*x3463))+(((-1.0)*x3464*x3467)));
evalcond[3]=(sj0+(((-1.0)*x3465*x3467))+((r12*x3463))+((r11*x3469)));
evalcond[4]=((((-1.0)*x3465*x3468))+cj0+(((-1.0)*r12*x3467))+((r11*x3470)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3467))+((r01*x3470))+(((-1.0)*x3464*x3468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3471=IKcos(j0);
IkReal x3472=IKsin(j0);
evalcond[0]=((((-0.10915)*x3472))+(((-1.0)*px))+(((-0.425)*x3471)));
evalcond[1]=((((0.10915)*x3471))+(((-1.0)*py))+(((-0.425)*x3472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3473=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3473;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3474=((1.0)*cj5);
IkReal x3475=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3474)));
j4eval[0]=x3475;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3474))))));
j4eval[2]=IKsign(x3475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3476=((1.0)*cj5);
IkReal x3477=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3476)));
j4eval[0]=x3477;
j4eval[1]=IKsign(x3477);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3476))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3478=((1.0)*cj5);
CheckValue<IkReal> x3479 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3478))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3479.valid){
continue;
}
CheckValue<IkReal> x3480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3478)))),-1);
if(!x3480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3479.value)+(((1.5707963267949)*(x3480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3481=IKcos(j4);
IkReal x3482=IKsin(j4);
IkReal x3483=((1.0)*sj0);
IkReal x3484=(cj5*r00);
IkReal x3485=(cj5*r10);
IkReal x3486=(cj5*r20);
IkReal x3487=((1.0)*x3481);
IkReal x3488=((1.0)*x3482);
IkReal x3489=(sj5*x3481);
IkReal x3490=(sj5*x3482);
evalcond[0]=(((r21*x3489))+((r22*x3482))+(((-1.0)*x3486*x3487)));
evalcond[1]=((((-1.0)*r22*x3487))+((r21*x3490))+(((-1.0)*x3486*x3488)));
evalcond[2]=(cj0+(((-1.0)*x3485*x3488))+(((-1.0)*r12*x3487))+((r11*x3490)));
evalcond[3]=(((r01*x3489))+(((-1.0)*x3484*x3487))+((r02*x3482))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3485*x3487))+((r12*x3482))+((r11*x3489))+(((-1.0)*x3483)));
evalcond[5]=(((r01*x3490))+(((-1.0)*r02*x3487))+(((-1.0)*x3484*x3488))+(((-1.0)*x3483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3491=((1.0)*cj5);
CheckValue<IkReal> x3492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3491)))),-1);
if(!x3492.valid){
continue;
}
CheckValue<IkReal> x3493 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3492.value)))+(x3493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3494=IKcos(j4);
IkReal x3495=IKsin(j4);
IkReal x3496=((1.0)*sj0);
IkReal x3497=(cj5*r00);
IkReal x3498=(cj5*r10);
IkReal x3499=(cj5*r20);
IkReal x3500=((1.0)*x3494);
IkReal x3501=((1.0)*x3495);
IkReal x3502=(sj5*x3494);
IkReal x3503=(sj5*x3495);
evalcond[0]=(((r22*x3495))+(((-1.0)*x3499*x3500))+((r21*x3502)));
evalcond[1]=((((-1.0)*r22*x3500))+(((-1.0)*x3499*x3501))+((r21*x3503)));
evalcond[2]=((((-1.0)*r12*x3500))+cj0+(((-1.0)*x3498*x3501))+((r11*x3503)));
evalcond[3]=(((r01*x3502))+((r02*x3495))+(((-1.0)*x3497*x3500))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3496))+(((-1.0)*x3498*x3500))+((r11*x3502))+((r12*x3495)));
evalcond[5]=(((r01*x3503))+(((-1.0)*x3496))+(((-1.0)*r02*x3500))+(((-1.0)*x3497*x3501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3504.value)+(((1.5707963267949)*(x3505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKcos(j4);
IkReal x3507=IKsin(j4);
IkReal x3508=((1.0)*sj0);
IkReal x3509=(cj5*r00);
IkReal x3510=(cj5*r10);
IkReal x3511=(cj5*r20);
IkReal x3512=((1.0)*x3506);
IkReal x3513=((1.0)*x3507);
IkReal x3514=(sj5*x3506);
IkReal x3515=(sj5*x3507);
evalcond[0]=(((r21*x3514))+(((-1.0)*x3511*x3512))+((r22*x3507)));
evalcond[1]=(((r21*x3515))+(((-1.0)*x3511*x3513))+(((-1.0)*r22*x3512)));
evalcond[2]=(cj0+(((-1.0)*x3510*x3513))+((r11*x3515))+(((-1.0)*r12*x3512)));
evalcond[3]=((((-1.0)*x3509*x3512))+((r01*x3514))+((r02*x3507))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3508))+(((-1.0)*x3510*x3512))+((r12*x3507))+((r11*x3514)));
evalcond[5]=((((-1.0)*r02*x3512))+(((-1.0)*x3509*x3513))+((r01*x3515))+(((-1.0)*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3516=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3516;
j4eval[1]=IKsign(x3516);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3517=((1.0)*cj5);
IkReal x3518=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3517)));
j4eval[0]=x3518;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3517))))));
j4eval[2]=IKsign(x3518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3519=cj5*cj5;
IkReal x3520=((1.0)*r20);
IkReal x3521=(r01*r21);
IkReal x3522=(r21*sj5);
IkReal x3523=(((cj5*r01*r20*sj5))+(((-1.0)*x3521))+(((-1.0)*r02*r22))+((cj5*r00*x3522))+((x3519*x3521))+(((-1.0)*r00*x3519*x3520)));
j4eval[0]=x3523;
j4eval[1]=((IKabs((((cj0*x3522))+(((-1.0)*cj0*cj5*x3520)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3524=cj5*cj5;
IkReal x3525=((1.0)*r20);
IkReal x3526=(r01*r21);
IkReal x3527=(r21*sj5);
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3527))+(((-1.0)*cj0*cj5*x3525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3526))+((x3524*x3526))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3524*x3525))+((cj5*r00*x3527)))),-1);
if(!x3529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3528.value)+(((1.5707963267949)*(x3529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3530=IKcos(j4);
IkReal x3531=IKsin(j4);
IkReal x3532=(cj5*r00);
IkReal x3533=(cj5*r10);
IkReal x3534=(cj5*r20);
IkReal x3535=((1.0)*x3530);
IkReal x3536=((1.0)*x3531);
IkReal x3537=(sj5*x3530);
IkReal x3538=(sj5*x3531);
evalcond[0]=(((r22*x3531))+((r21*x3537))+(((-1.0)*x3534*x3535)));
evalcond[1]=(((r21*x3538))+(((-1.0)*r22*x3535))+(((-1.0)*x3534*x3536)));
evalcond[2]=(((r02*x3531))+cj0+((r01*x3537))+(((-1.0)*x3532*x3535)));
evalcond[3]=(((r11*x3537))+((r12*x3531))+sj0+(((-1.0)*x3533*x3535)));
evalcond[4]=(((r11*x3538))+cj0+(((-1.0)*r12*x3535))+(((-1.0)*x3533*x3536)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3535))+((r01*x3538))+(((-1.0)*x3532*x3536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3539=((1.0)*cj5);
CheckValue<IkReal> x3540 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3539)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3539))+(((-1.0)*r10*sj5)))),-1);
if(!x3541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3540.value)+(((1.5707963267949)*(x3541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3542=IKcos(j4);
IkReal x3543=IKsin(j4);
IkReal x3544=(cj5*r00);
IkReal x3545=(cj5*r10);
IkReal x3546=(cj5*r20);
IkReal x3547=((1.0)*x3542);
IkReal x3548=((1.0)*x3543);
IkReal x3549=(sj5*x3542);
IkReal x3550=(sj5*x3543);
evalcond[0]=(((r21*x3549))+(((-1.0)*x3546*x3547))+((r22*x3543)));
evalcond[1]=(((r21*x3550))+(((-1.0)*x3546*x3548))+(((-1.0)*r22*x3547)));
evalcond[2]=(((r02*x3543))+cj0+((r01*x3549))+(((-1.0)*x3544*x3547)));
evalcond[3]=((((-1.0)*x3545*x3547))+sj0+((r12*x3543))+((r11*x3549)));
evalcond[4]=((((-1.0)*x3545*x3548))+cj0+(((-1.0)*r12*x3547))+((r11*x3550)));
evalcond[5]=((((-1.0)*r02*x3547))+(((-1.0)*sj0))+((r01*x3550))+(((-1.0)*x3544*x3548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3551.value)+(((1.5707963267949)*(x3552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3553=IKcos(j4);
IkReal x3554=IKsin(j4);
IkReal x3555=(cj5*r00);
IkReal x3556=(cj5*r10);
IkReal x3557=(cj5*r20);
IkReal x3558=((1.0)*x3553);
IkReal x3559=((1.0)*x3554);
IkReal x3560=(sj5*x3553);
IkReal x3561=(sj5*x3554);
evalcond[0]=((((-1.0)*x3557*x3558))+((r21*x3560))+((r22*x3554)));
evalcond[1]=((((-1.0)*x3557*x3559))+((r21*x3561))+(((-1.0)*r22*x3558)));
evalcond[2]=((((-1.0)*x3555*x3558))+cj0+((r01*x3560))+((r02*x3554)));
evalcond[3]=(sj0+((r12*x3554))+((r11*x3560))+(((-1.0)*x3556*x3558)));
evalcond[4]=(cj0+((r11*x3561))+(((-1.0)*r12*x3558))+(((-1.0)*x3556*x3559)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3555*x3559))+((r01*x3561))+(((-1.0)*r02*x3558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3562=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3562;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3563=((1.0)*cj5);
IkReal x3564=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3563)));
j4eval[0]=x3564;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3563))))));
j4eval[2]=IKsign(x3564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3565=((1.0)*cj5);
IkReal x3566=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3565)));
j4eval[0]=x3566;
j4eval[1]=IKsign(x3566);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3565))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3567=((1.0)*cj5);
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3567))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
CheckValue<IkReal> x3569=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3567)))),-1);
if(!x3569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3568.value)+(((1.5707963267949)*(x3569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3570=IKcos(j4);
IkReal x3571=IKsin(j4);
IkReal x3572=((1.0)*sj0);
IkReal x3573=(cj5*r00);
IkReal x3574=(cj5*r10);
IkReal x3575=(cj5*r20);
IkReal x3576=((1.0)*x3570);
IkReal x3577=((1.0)*x3571);
IkReal x3578=(sj5*x3570);
IkReal x3579=(sj5*x3571);
evalcond[0]=(((r21*x3578))+(((-1.0)*x3575*x3576))+((r22*x3571)));
evalcond[1]=(((r21*x3579))+(((-1.0)*x3575*x3577))+(((-1.0)*r22*x3576)));
evalcond[2]=(cj0+((r11*x3579))+(((-1.0)*x3574*x3577))+(((-1.0)*r12*x3576)));
evalcond[3]=(((r01*x3578))+(((-1.0)*x3573*x3576))+((r02*x3571))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3572))+((r12*x3571))+((r11*x3578))+(((-1.0)*x3574*x3576)));
evalcond[5]=(((r01*x3579))+(((-1.0)*x3572))+(((-1.0)*x3573*x3577))+(((-1.0)*r02*x3576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3580=((1.0)*cj5);
CheckValue<IkReal> x3581 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3581.valid){
continue;
}
CheckValue<IkReal> x3582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3580)))),-1);
if(!x3582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3581.value)+(((1.5707963267949)*(x3582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3583=IKcos(j4);
IkReal x3584=IKsin(j4);
IkReal x3585=((1.0)*sj0);
IkReal x3586=(cj5*r00);
IkReal x3587=(cj5*r10);
IkReal x3588=(cj5*r20);
IkReal x3589=((1.0)*x3583);
IkReal x3590=((1.0)*x3584);
IkReal x3591=(sj5*x3583);
IkReal x3592=(sj5*x3584);
evalcond[0]=(((r21*x3591))+(((-1.0)*x3588*x3589))+((r22*x3584)));
evalcond[1]=(((r21*x3592))+(((-1.0)*r22*x3589))+(((-1.0)*x3588*x3590)));
evalcond[2]=((((-1.0)*x3587*x3590))+cj0+((r11*x3592))+(((-1.0)*r12*x3589)));
evalcond[3]=(((r02*x3584))+(((-1.0)*x3586*x3589))+((r01*x3591))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3587*x3589))+((r12*x3584))+((r11*x3591))+(((-1.0)*x3585)));
evalcond[5]=((((-1.0)*r02*x3589))+(((-1.0)*x3586*x3590))+((r01*x3592))+(((-1.0)*x3585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3593 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3593.valid){
continue;
}
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3593.value)+(((1.5707963267949)*(x3594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3595=IKcos(j4);
IkReal x3596=IKsin(j4);
IkReal x3597=((1.0)*sj0);
IkReal x3598=(cj5*r00);
IkReal x3599=(cj5*r10);
IkReal x3600=(cj5*r20);
IkReal x3601=((1.0)*x3595);
IkReal x3602=((1.0)*x3596);
IkReal x3603=(sj5*x3595);
IkReal x3604=(sj5*x3596);
evalcond[0]=(((r21*x3603))+(((-1.0)*x3600*x3601))+((r22*x3596)));
evalcond[1]=(((r21*x3604))+(((-1.0)*x3600*x3602))+(((-1.0)*r22*x3601)));
evalcond[2]=(((r11*x3604))+cj0+(((-1.0)*r12*x3601))+(((-1.0)*x3599*x3602)));
evalcond[3]=(((r02*x3596))+(((-1.0)*x3598*x3601))+((r01*x3603))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3603))+((r12*x3596))+(((-1.0)*x3599*x3601))+(((-1.0)*x3597)));
evalcond[5]=((((-1.0)*x3598*x3602))+(((-1.0)*r02*x3601))+((r01*x3604))+(((-1.0)*x3597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3605=(r00*sj5);
IkReal x3606=(cj5*r01);
IkReal x3607=(sj1*sj2);
IkReal x3608=(cj1*cj2);
IkReal x3609=((20000.0)*px);
IkReal x3610=((8500.0)*cj1);
IkReal x3611=((9738.0)*x3608);
CheckValue<IkReal> x3612=IKPowWithIntegerCheck(((((2183.0)*x3607))+(((-2183.0)*x3608))),-1);
if(!x3612.valid){
continue;
}
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(((((-1.0)*x3608))+x3607),-1);
if(!x3613.valid){
continue;
}
if( IKabs(((x3612.value)*((((x3605*x3610))+((x3605*x3611))+(((-9738.0)*x3605*x3607))+((x3608*x3609))+(((-1.0)*x3607*x3609))+(((-9738.0)*x3606*x3607))+((x3606*x3611))+((x3606*x3610)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3613.value)*((x3606+x3605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3612.value)*((((x3605*x3610))+((x3605*x3611))+(((-9738.0)*x3605*x3607))+((x3608*x3609))+(((-1.0)*x3607*x3609))+(((-9738.0)*x3606*x3607))+((x3606*x3611))+((x3606*x3610))))))+IKsqr(((x3613.value)*((x3606+x3605))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3612.value)*((((x3605*x3610))+((x3605*x3611))+(((-9738.0)*x3605*x3607))+((x3608*x3609))+(((-1.0)*x3607*x3609))+(((-9738.0)*x3606*x3607))+((x3606*x3611))+((x3606*x3610))))), ((x3613.value)*((x3606+x3605))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3614=IKcos(j0);
IkReal x3615=IKsin(j0);
IkReal x3616=(cj5*r11);
IkReal x3617=(cj5*r01);
IkReal x3618=((1.0)*sj5);
IkReal x3619=((0.09465)*sj5);
IkReal x3620=(sj1*sj2);
IkReal x3621=((0.39225)*cj2);
IkReal x3622=((1.0)*cj2);
IkReal x3623=((0.39225)*x3620);
IkReal x3624=(cj1*x3614);
IkReal x3625=(cj1*x3615);
evalcond[0]=((((-1.0)*r00*x3618))+((x3614*x3620))+(((-1.0)*x3622*x3624))+(((-1.0)*x3617)));
evalcond[1]=(((x3615*x3620))+(((-1.0)*r10*x3618))+(((-1.0)*x3622*x3625))+(((-1.0)*x3616)));
evalcond[2]=((((-1.0)*x3614*x3623))+(((-1.0)*r00*x3619))+(((0.425)*x3624))+(((-1.0)*px))+((x3621*x3624))+(((-0.10915)*x3615))+(((-0.09465)*x3617)));
evalcond[3]=((((0.10915)*x3614))+(((-1.0)*r10*x3619))+(((0.425)*x3625))+(((-1.0)*py))+((x3621*x3625))+(((-0.09465)*x3616))+(((-1.0)*x3615*x3623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3626=((1.0)*cj5);
IkReal x3627=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3626)));
j4eval[0]=x3627;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3626))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3628=((1.0)*cj5);
IkReal x3629=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3628)));
j4eval[0]=x3629;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3628))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3630=((1.0)*sj0);
IkReal x3631=((1.0)*cj0);
IkReal x3632=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3632;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3630))+(((-1.0)*r01*sj5*x3631)))))+(IKabs(((((-1.0)*r12*x3630))+(((-1.0)*r02*x3631))))));
j4eval[2]=IKsign(x3632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3633=((-1.0)*r20);
IkReal x3635 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3635)==0){
continue;
}
IkReal x3634=pow(x3635,-0.5);
CheckValue<IkReal> x3636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3633),IKFAST_ATAN2_MAGTHRESH);
if(!x3636.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3636.value));
IkReal gconst97=(r21*x3634);
IkReal gconst98=(x3633*x3634);
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3637.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3638=((-1.0)*r20);
IkReal x3639=x3634;
CheckValue<IkReal> x3641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3638),IKFAST_ATAN2_MAGTHRESH);
if(!x3641.valid){
continue;
}
IkReal x3640=((-1.0)*(x3641.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3640;
IkReal gconst96=x3640;
IkReal gconst97=(r21*x3639);
IkReal gconst98=(x3638*x3639);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3642=((-1.0)*r20);
IkReal x3643=x3634;
CheckValue<IkReal> x3645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3642),IKFAST_ATAN2_MAGTHRESH);
if(!x3645.valid){
continue;
}
IkReal x3644=((-1.0)*(x3645.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3644;
IkReal gconst96=x3644;
IkReal gconst97=(r21*x3643);
IkReal gconst98=(x3642*x3643);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3646=((-1.0)*r20);
IkReal x3647=x3634;
CheckValue<IkReal> x3649 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3646),IKFAST_ATAN2_MAGTHRESH);
if(!x3649.valid){
continue;
}
IkReal x3648=((-1.0)*(x3649.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3648;
IkReal gconst96=x3648;
IkReal gconst97=(r21*x3647);
IkReal gconst98=(x3646*x3647);
IkReal x3650=((1.0)*(r22*r22));
CheckValue<IkReal> x3654=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3650))),-1);
if(!x3654.valid){
continue;
}
IkReal x3651=x3654.value;
IkReal x3652=((1.0)*x3651);
IkReal x3653=((((-2.0)*x3651*(r20*r20)*(r21*r21)))+(((-1.0)*x3652*(r21*r21*r21*r21)))+(((-1.0)*x3652*(r20*r20*r20*r20)))+(((-1.0)*x3650)));
j4eval[0]=x3653;
j4eval[1]=IKsign(x3653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3655=(cj1*cj2);
IkReal x3656=(gconst98*r20);
IkReal x3657=(sj1*sj2);
IkReal x3658=(gconst97*r21);
CheckValue<IkReal> x3659 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3655))+((r22*x3657)))),IkReal(((((-1.0)*x3655*x3658))+(((-1.0)*x3656*x3657))+((x3657*x3658))+((x3655*x3656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3659.valid){
continue;
}
CheckValue<IkReal> x3660=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3656*x3656)))+(((-1.0)*(x3658*x3658)))+(((-1.0)*(r22*r22)))+(((2.0)*x3656*x3658)))),-1);
if(!x3660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3659.value)+(((1.5707963267949)*(x3660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3661=IKsin(j4);
IkReal x3662=IKcos(j4);
IkReal x3663=(gconst98*r10);
IkReal x3664=(gconst97*r21);
IkReal x3665=(gconst98*r20);
IkReal x3666=((1.0)*cj2);
IkReal x3667=((1.0)*sj0);
IkReal x3668=(gconst98*r00);
IkReal x3669=(cj1*sj2);
IkReal x3670=((1.0)*x3662);
IkReal x3671=((1.0)*x3661);
IkReal x3672=(gconst97*x3661);
IkReal x3673=(gconst97*x3662);
evalcond[0]=((((-1.0)*x3665*x3671))+(((-1.0)*r22*x3670))+((x3661*x3664)));
evalcond[1]=(cj0+((r11*x3672))+(((-1.0)*r12*x3670))+(((-1.0)*x3663*x3671)));
evalcond[2]=(((r01*x3672))+(((-1.0)*x3667))+(((-1.0)*x3668*x3671))+(((-1.0)*r02*x3670)));
evalcond[3]=(((r22*x3661))+((x3662*x3664))+(((-1.0)*x3665*x3670))+((sj1*sj2))+(((-1.0)*cj1*x3666)));
evalcond[4]=(((r01*x3673))+(((-1.0)*cj0*sj1*x3666))+(((-1.0)*cj0*x3669))+((r02*x3661))+(((-1.0)*x3668*x3670)));
evalcond[5]=(((r11*x3673))+(((-1.0)*sj0*sj1*x3666))+((r12*x3661))+(((-1.0)*x3667*x3669))+(((-1.0)*x3663*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3674=((1.0)*gconst98);
CheckValue<IkReal> x3675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3675.valid){
continue;
}
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3674))+(((-1.0)*gconst97*r10)))),-1);
if(!x3676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3675.value)+(((1.5707963267949)*(x3676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3677=IKsin(j4);
IkReal x3678=IKcos(j4);
IkReal x3679=(gconst98*r10);
IkReal x3680=(gconst97*r21);
IkReal x3681=(gconst98*r20);
IkReal x3682=((1.0)*cj2);
IkReal x3683=((1.0)*sj0);
IkReal x3684=(gconst98*r00);
IkReal x3685=(cj1*sj2);
IkReal x3686=((1.0)*x3678);
IkReal x3687=((1.0)*x3677);
IkReal x3688=(gconst97*x3677);
IkReal x3689=(gconst97*x3678);
evalcond[0]=((((-1.0)*r22*x3686))+((x3677*x3680))+(((-1.0)*x3681*x3687)));
evalcond[1]=(cj0+(((-1.0)*x3679*x3687))+(((-1.0)*r12*x3686))+((r11*x3688)));
evalcond[2]=(((r01*x3688))+(((-1.0)*x3683))+(((-1.0)*x3684*x3687))+(((-1.0)*r02*x3686)));
evalcond[3]=(((x3678*x3680))+((sj1*sj2))+(((-1.0)*cj1*x3682))+((r22*x3677))+(((-1.0)*x3681*x3686)));
evalcond[4]=(((r01*x3689))+(((-1.0)*cj0*x3685))+((r02*x3677))+(((-1.0)*x3684*x3686))+(((-1.0)*cj0*sj1*x3682)));
evalcond[5]=((((-1.0)*sj0*sj1*x3682))+((r12*x3677))+(((-1.0)*x3683*x3685))+(((-1.0)*x3679*x3686))+((r11*x3689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3690=((1.0)*gconst98);
CheckValue<IkReal> x3691 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r00))+(((-1.0)*r01*x3690)))),-1);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3691.value)+(((1.5707963267949)*(x3692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j4);
IkReal x3694=IKcos(j4);
IkReal x3695=(gconst98*r10);
IkReal x3696=(gconst97*r21);
IkReal x3697=(gconst98*r20);
IkReal x3698=((1.0)*cj2);
IkReal x3699=((1.0)*sj0);
IkReal x3700=(gconst98*r00);
IkReal x3701=(cj1*sj2);
IkReal x3702=((1.0)*x3694);
IkReal x3703=((1.0)*x3693);
IkReal x3704=(gconst97*x3693);
IkReal x3705=(gconst97*x3694);
evalcond[0]=((((-1.0)*x3697*x3703))+((x3693*x3696))+(((-1.0)*r22*x3702)));
evalcond[1]=(cj0+((r11*x3704))+(((-1.0)*r12*x3702))+(((-1.0)*x3695*x3703)));
evalcond[2]=((((-1.0)*r02*x3702))+((r01*x3704))+(((-1.0)*x3700*x3703))+(((-1.0)*x3699)));
evalcond[3]=((((-1.0)*x3697*x3702))+(((-1.0)*cj1*x3698))+((sj1*sj2))+((x3694*x3696))+((r22*x3693)));
evalcond[4]=((((-1.0)*cj0*x3701))+((r01*x3705))+((r02*x3693))+(((-1.0)*x3700*x3702))+(((-1.0)*cj0*sj1*x3698)));
evalcond[5]=((((-1.0)*x3699*x3701))+((r11*x3705))+(((-1.0)*sj0*sj1*x3698))+(((-1.0)*x3695*x3702))+((r12*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3706=((-1.0)*r21);
IkReal x3708 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3708)==0){
continue;
}
IkReal x3707=pow(x3708,-0.5);
CheckValue<IkReal> x3709 = IKatan2WithCheck(IkReal(x3706),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3709.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3709.value))));
IkReal gconst100=(x3706*x3707);
IkReal gconst101=((1.0)*r20*x3707);
CheckValue<IkReal> x3710 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3710.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3710.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3711=((-1.0)*r21);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(x3711),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal x3712=((1.0)*(x3714.value));
IkReal x3713=x3707;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3712)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3712)));
IkReal gconst100=(x3711*x3713);
IkReal gconst101=((1.0)*r20*x3713);
IkReal x3715=r22*r22;
IkReal x3716=((1.0)*x3715);
CheckValue<IkReal> x3720=IKPowWithIntegerCheck(((-1.0)+x3715),-1);
if(!x3720.valid){
continue;
}
IkReal x3717=x3720.value;
if((((1.0)+(((-1.0)*x3716)))) < -0.00001)
continue;
IkReal x3718=IKsqrt(((1.0)+(((-1.0)*x3716))));
IkReal x3719=(cj0*x3717*x3718);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x3716*x3719))+x3719))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3721=((-1.0)*r21);
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(x3721),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
IkReal x3722=((1.0)*(x3724.value));
IkReal x3723=x3707;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3722)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3722)));
IkReal gconst100=(x3721*x3723);
IkReal gconst101=((1.0)*r20*x3723);
IkReal x3725=r22*r22;
IkReal x3726=((1.0)*x3725);
CheckValue<IkReal> x3730=IKPowWithIntegerCheck(((-1.0)+x3725),-1);
if(!x3730.valid){
continue;
}
IkReal x3727=x3730.value;
if((((1.0)+(((-1.0)*x3726)))) < -0.00001)
continue;
IkReal x3728=IKsqrt(((1.0)+(((-1.0)*x3726))));
IkReal x3729=(sj0*x3727*x3728);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3726*x3729))+x3729))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3731=((-1.0)*r21);
CheckValue<IkReal> x3734 = IKatan2WithCheck(IkReal(x3731),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3734.valid){
continue;
}
IkReal x3732=((1.0)*(x3734.value));
IkReal x3733=x3707;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3732)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3732)));
IkReal gconst100=(x3731*x3733);
IkReal gconst101=((1.0)*r20*x3733);
IkReal x3735=r22*r22;
IkReal x3736=(r12*sj0);
IkReal x3737=(cj0*r02);
CheckValue<IkReal> x3741=IKPowWithIntegerCheck(((-1.0)+x3735),-1);
if(!x3741.valid){
continue;
}
IkReal x3738=x3741.value;
if((((1.0)+(((-1.0)*x3735)))) < -0.00001)
continue;
IkReal x3739=IKsqrt(((1.0)+(((-1.0)*x3735))));
IkReal x3740=(r22*x3738*x3739);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3737))+(((-1.0)*x3736)))))+(IKabs((((x3737*x3740))+((x3736*x3740))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3742=((1.0)*sj0);
IkReal x3743=((1.0)*gconst100);
CheckValue<IkReal> x3744 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3742))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3742))+(((-1.0)*cj0*r01*x3743))+((gconst101*r10*sj0))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3744.valid){
continue;
}
CheckValue<IkReal> x3745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3743))+(((-1.0)*gconst101*r21)))),-1);
if(!x3745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3744.value)+(((1.5707963267949)*(x3745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3746=IKsin(j4);
IkReal x3747=IKcos(j4);
IkReal x3748=(gconst101*r20);
IkReal x3749=(gconst101*r10);
IkReal x3750=((1.0)*cj2);
IkReal x3751=(gconst101*r00);
IkReal x3752=((1.0)*sj0);
IkReal x3753=(cj1*sj2);
IkReal x3754=((1.0)*x3747);
IkReal x3755=((1.0)*x3746);
IkReal x3756=(gconst100*x3746);
IkReal x3757=(gconst100*x3747);
evalcond[0]=((((-1.0)*x3748*x3755))+(((-1.0)*r22*x3754))+((r21*x3756)));
evalcond[1]=((((-1.0)*x3749*x3755))+cj0+(((-1.0)*r12*x3754))+((r11*x3756)));
evalcond[2]=(((r01*x3756))+(((-1.0)*x3752))+(((-1.0)*x3751*x3755))+(((-1.0)*r02*x3754)));
evalcond[3]=((((-1.0)*cj1*x3750))+(((-1.0)*x3748*x3754))+((sj1*sj2))+((r22*x3746))+((r21*x3757)));
evalcond[4]=(((r01*x3757))+(((-1.0)*cj0*x3753))+(((-1.0)*x3751*x3754))+((r02*x3746))+(((-1.0)*cj0*sj1*x3750)));
evalcond[5]=((((-1.0)*x3752*x3753))+(((-1.0)*x3749*x3754))+(((-1.0)*sj0*sj1*x3750))+((r12*x3746))+((r11*x3757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3758=((1.0)*gconst101);
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3758)))),-1);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3758))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3759.value)))+(x3760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3761=IKsin(j4);
IkReal x3762=IKcos(j4);
IkReal x3763=(gconst101*r20);
IkReal x3764=(gconst101*r10);
IkReal x3765=((1.0)*cj2);
IkReal x3766=(gconst101*r00);
IkReal x3767=((1.0)*sj0);
IkReal x3768=(cj1*sj2);
IkReal x3769=((1.0)*x3762);
IkReal x3770=((1.0)*x3761);
IkReal x3771=(gconst100*x3761);
IkReal x3772=(gconst100*x3762);
evalcond[0]=(((r21*x3771))+(((-1.0)*r22*x3769))+(((-1.0)*x3763*x3770)));
evalcond[1]=(cj0+(((-1.0)*x3764*x3770))+((r11*x3771))+(((-1.0)*r12*x3769)));
evalcond[2]=((((-1.0)*r02*x3769))+(((-1.0)*x3766*x3770))+(((-1.0)*x3767))+((r01*x3771)));
evalcond[3]=(((r22*x3761))+((r21*x3772))+(((-1.0)*x3763*x3769))+((sj1*sj2))+(((-1.0)*cj1*x3765)));
evalcond[4]=(((r02*x3761))+(((-1.0)*cj0*sj1*x3765))+(((-1.0)*x3766*x3769))+((r01*x3772))+(((-1.0)*cj0*x3768)));
evalcond[5]=((((-1.0)*x3767*x3768))+(((-1.0)*x3764*x3769))+((r11*x3772))+((r12*x3761))+(((-1.0)*sj0*sj1*x3765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3773=((1.0)*gconst101);
CheckValue<IkReal> x3774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3773)))),-1);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3774.value)))+(x3775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3776=IKsin(j4);
IkReal x3777=IKcos(j4);
IkReal x3778=(gconst101*r20);
IkReal x3779=(gconst101*r10);
IkReal x3780=((1.0)*cj2);
IkReal x3781=(gconst101*r00);
IkReal x3782=((1.0)*sj0);
IkReal x3783=(cj1*sj2);
IkReal x3784=((1.0)*x3777);
IkReal x3785=((1.0)*x3776);
IkReal x3786=(gconst100*x3776);
IkReal x3787=(gconst100*x3777);
evalcond[0]=((((-1.0)*x3778*x3785))+((r21*x3786))+(((-1.0)*r22*x3784)));
evalcond[1]=(cj0+(((-1.0)*x3779*x3785))+(((-1.0)*r12*x3784))+((r11*x3786)));
evalcond[2]=((((-1.0)*r02*x3784))+(((-1.0)*x3782))+((r01*x3786))+(((-1.0)*x3781*x3785)));
evalcond[3]=((((-1.0)*x3778*x3784))+((r22*x3776))+((r21*x3787))+((sj1*sj2))+(((-1.0)*cj1*x3780)));
evalcond[4]=(((r02*x3776))+(((-1.0)*cj0*x3783))+((r01*x3787))+(((-1.0)*x3781*x3784))+(((-1.0)*cj0*sj1*x3780)));
evalcond[5]=((((-1.0)*x3779*x3784))+(((-1.0)*x3782*x3783))+(((-1.0)*sj0*sj1*x3780))+((r12*x3776))+((r11*x3787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3788=((-1.0)*r10);
IkReal x3790 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3790)==0){
continue;
}
IkReal x3789=pow(x3790,-0.5);
CheckValue<IkReal> x3791 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3788),IKFAST_ATAN2_MAGTHRESH);
if(!x3791.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3791.value));
IkReal gconst103=(r11*x3789);
IkReal gconst104=(x3788*x3789);
CheckValue<IkReal> x3792 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3792.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3792.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3793=((-1.0)*r10);
IkReal x3794=x3789;
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3793),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
IkReal x3795=((-1.0)*(x3796.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3795;
IkReal gconst102=x3795;
IkReal gconst103=(r11*x3794);
IkReal gconst104=(x3793*x3794);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3797=((1.0)*sj0);
IkReal x3798=((1.0)*gconst103);
CheckValue<IkReal> x3799=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3798)))),-1);
if(!x3799.valid){
continue;
}
CheckValue<IkReal> x3800 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3797))+(((-1.0)*cj0*r02)))),IkReal((((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x3798))+(((-1.0)*gconst103*r11*x3797))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3799.value)))+(x3800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3801=IKsin(j4);
IkReal x3802=IKcos(j4);
IkReal x3803=(gconst103*r11);
IkReal x3804=((1.0)*cj2);
IkReal x3805=((1.0)*sj0);
IkReal x3806=(cj1*sj2);
IkReal x3807=((1.0)*x3802);
IkReal x3808=(gconst103*x3802);
IkReal x3809=(gconst103*x3801);
IkReal x3810=((1.0)*gconst104*x3801);
evalcond[0]=(((r21*x3809))+(((-1.0)*r20*x3810))+(((-1.0)*r22*x3807)));
evalcond[1]=(cj0+((x3801*x3803))+(((-1.0)*r10*x3810))+(((-1.0)*r12*x3807)));
evalcond[2]=(((r01*x3809))+(((-1.0)*r00*x3810))+(((-1.0)*x3805))+(((-1.0)*r02*x3807)));
evalcond[3]=((((-1.0)*gconst104*r20*x3807))+((r21*x3808))+((r22*x3801))+((sj1*sj2))+(((-1.0)*cj1*x3804)));
evalcond[4]=(((r01*x3808))+((r02*x3801))+(((-1.0)*cj0*x3806))+(((-1.0)*cj0*sj1*x3804))+(((-1.0)*gconst104*r00*x3807)));
evalcond[5]=((((-1.0)*sj0*sj1*x3804))+(((-1.0)*x3805*x3806))+((x3802*x3803))+((r12*x3801))+(((-1.0)*gconst104*r10*x3807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3811=((1.0)*gconst104);
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3811))+(((-1.0)*gconst103*r00)))),-1);
if(!x3812.valid){
continue;
}
CheckValue<IkReal> x3813 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3811))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3812.value)))+(x3813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3814=IKsin(j4);
IkReal x3815=IKcos(j4);
IkReal x3816=(gconst103*r11);
IkReal x3817=((1.0)*cj2);
IkReal x3818=((1.0)*sj0);
IkReal x3819=(cj1*sj2);
IkReal x3820=((1.0)*x3815);
IkReal x3821=(gconst103*x3815);
IkReal x3822=(gconst103*x3814);
IkReal x3823=((1.0)*gconst104*x3814);
evalcond[0]=((((-1.0)*r22*x3820))+(((-1.0)*r20*x3823))+((r21*x3822)));
evalcond[1]=((((-1.0)*r12*x3820))+cj0+(((-1.0)*r10*x3823))+((x3814*x3816)));
evalcond[2]=((((-1.0)*r00*x3823))+(((-1.0)*r02*x3820))+(((-1.0)*x3818))+((r01*x3822)));
evalcond[3]=((((-1.0)*cj1*x3817))+((sj1*sj2))+((r22*x3814))+(((-1.0)*gconst104*r20*x3820))+((r21*x3821)));
evalcond[4]=((((-1.0)*cj0*x3819))+(((-1.0)*gconst104*r00*x3820))+((r02*x3814))+(((-1.0)*cj0*sj1*x3817))+((r01*x3821)));
evalcond[5]=(((r12*x3814))+(((-1.0)*sj0*sj1*x3817))+((x3815*x3816))+(((-1.0)*gconst104*r10*x3820))+(((-1.0)*x3818*x3819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3824=((-1.0)*r11);
IkReal x3826 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3826)==0){
continue;
}
IkReal x3825=pow(x3826,-0.5);
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal(x3824),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3827.value))));
IkReal gconst106=(x3824*x3825);
IkReal gconst107=((1.0)*r10*x3825);
CheckValue<IkReal> x3828 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3828.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3828.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3829=((-1.0)*r11);
CheckValue<IkReal> x3832 = IKatan2WithCheck(IkReal(x3829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3832.valid){
continue;
}
IkReal x3830=((1.0)*(x3832.value));
IkReal x3831=x3825;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3830)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3830)));
IkReal gconst106=(x3829*x3831);
IkReal gconst107=((1.0)*r10*x3831);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3833=((-1.0)*r11);
CheckValue<IkReal> x3836 = IKatan2WithCheck(IkReal(x3833),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3836.valid){
continue;
}
IkReal x3834=((1.0)*(x3836.value));
IkReal x3835=x3825;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3834)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3834)));
IkReal gconst106=(x3833*x3835);
IkReal gconst107=((1.0)*r10*x3835);
IkReal x3837=r12*r12;
IkReal x3838=((1.0)*sj0);
IkReal x3839=(cj0*r02);
IkReal x3840=x3825;
j4eval[0]=((IKabs(((((-1.0)*x3839))+(((-1.0)*r12*x3838)))))+(IKabs(((((-1.0)*x3838*x3840))+((r12*x3839*x3840))+((sj0*x3837*x3840))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3841=((-1.0)*r11);
CheckValue<IkReal> x3844 = IKatan2WithCheck(IkReal(x3841),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3844.valid){
continue;
}
IkReal x3842=((1.0)*(x3844.value));
IkReal x3843=x3825;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3842)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3842)));
IkReal gconst106=(x3841*x3843);
IkReal gconst107=((1.0)*r10*x3843);
IkReal x3845=r12*r12;
IkReal x3846=((1.0)+(((-1.0)*x3845)));
IkReal x3847=(r22*sj1*sj2);
IkReal x3848=(cj1*cj2*r22);
CheckValue<IkReal> x3855=IKPowWithIntegerCheck(x3846,-1);
if(!x3855.valid){
continue;
}
IkReal x3849=x3855.value;
CheckValue<IkReal> x3856=IKPowWithIntegerCheck(((-1.0)+x3845),-1);
if(!x3856.valid){
continue;
}
IkReal x3850=x3856.value;
IkReal x3851=((1.0)*x3849);
if((x3846) < -0.00001)
continue;
IkReal x3852=IKsqrt(x3846);
IkReal x3853=(r12*x3850*x3852);
IkReal x3854=((((-2.0)*r10*r11*r20*r21*x3849))+(((-1.0)*x3851*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3851*(r10*r10)*(r20*r20))));
j4eval[0]=x3854;
j4eval[1]=((IKabs(((((-1.0)*x3847*x3853))+((x3848*x3853)))))+(IKabs(((((-1.0)*x3848))+x3847))));
j4eval[2]=IKsign(x3854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3857=(sj1*sj2);
IkReal x3858=(gconst106*r21);
IkReal x3859=(gconst107*r20);
IkReal x3860=(cj1*cj2);
CheckValue<IkReal> x3861 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3860))+((r22*x3857)))),IkReal(((((-1.0)*x3858*x3860))+((x3857*x3858))+((x3859*x3860))+(((-1.0)*x3857*x3859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3861.valid){
continue;
}
CheckValue<IkReal> x3862=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x3858*x3859))+(((-1.0)*(x3858*x3858)))+(((-1.0)*(x3859*x3859))))),-1);
if(!x3862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3861.value)+(((1.5707963267949)*(x3862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3863=IKsin(j4);
IkReal x3864=IKcos(j4);
IkReal x3865=(gconst107*r10);
IkReal x3866=(gconst107*r00);
IkReal x3867=((1.0)*cj2);
IkReal x3868=(gconst107*r20);
IkReal x3869=((1.0)*sj0);
IkReal x3870=(cj1*sj2);
IkReal x3871=((1.0)*x3864);
IkReal x3872=(gconst106*x3864);
IkReal x3873=(gconst106*x3863);
IkReal x3874=((1.0)*x3863);
evalcond[0]=((((-1.0)*x3868*x3874))+((r21*x3873))+(((-1.0)*r22*x3871)));
evalcond[1]=(cj0+(((-1.0)*x3865*x3874))+(((-1.0)*r12*x3871))+((r11*x3873)));
evalcond[2]=((((-1.0)*x3869))+(((-1.0)*x3866*x3874))+((r01*x3873))+(((-1.0)*r02*x3871)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3867))+(((-1.0)*x3868*x3871))+((r21*x3872))+((r22*x3863)));
evalcond[4]=(((r02*x3863))+(((-1.0)*x3866*x3871))+((r01*x3872))+(((-1.0)*cj0*sj1*x3867))+(((-1.0)*cj0*x3870)));
evalcond[5]=((((-1.0)*x3865*x3871))+(((-1.0)*x3869*x3870))+(((-1.0)*sj0*sj1*x3867))+((r11*x3872))+((r12*x3863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3875=((1.0)*sj0);
IkReal x3876=((1.0)*gconst106);
CheckValue<IkReal> x3877 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3875))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3876))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3875))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3877.valid){
continue;
}
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3876)))),-1);
if(!x3878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3877.value)+(((1.5707963267949)*(x3878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3879=IKsin(j4);
IkReal x3880=IKcos(j4);
IkReal x3881=(gconst107*r10);
IkReal x3882=(gconst107*r00);
IkReal x3883=((1.0)*cj2);
IkReal x3884=(gconst107*r20);
IkReal x3885=((1.0)*sj0);
IkReal x3886=(cj1*sj2);
IkReal x3887=((1.0)*x3880);
IkReal x3888=(gconst106*x3880);
IkReal x3889=(gconst106*x3879);
IkReal x3890=((1.0)*x3879);
evalcond[0]=(((r21*x3889))+(((-1.0)*r22*x3887))+(((-1.0)*x3884*x3890)));
evalcond[1]=(cj0+((r11*x3889))+(((-1.0)*x3881*x3890))+(((-1.0)*r12*x3887)));
evalcond[2]=((((-1.0)*r02*x3887))+(((-1.0)*x3885))+((r01*x3889))+(((-1.0)*x3882*x3890)));
evalcond[3]=((((-1.0)*cj1*x3883))+((r21*x3888))+((sj1*sj2))+((r22*x3879))+(((-1.0)*x3884*x3887)));
evalcond[4]=((((-1.0)*cj0*x3886))+((r01*x3888))+(((-1.0)*cj0*sj1*x3883))+((r02*x3879))+(((-1.0)*x3882*x3887)));
evalcond[5]=((((-1.0)*sj0*sj1*x3883))+((r11*x3888))+(((-1.0)*x3885*x3886))+((r12*x3879))+(((-1.0)*x3881*x3887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3891=((1.0)*gconst107);
CheckValue<IkReal> x3892 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3891))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3892.valid){
continue;
}
CheckValue<IkReal> x3893=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3891)))),-1);
if(!x3893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3892.value)+(((1.5707963267949)*(x3893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3894=IKsin(j4);
IkReal x3895=IKcos(j4);
IkReal x3896=(gconst107*r10);
IkReal x3897=(gconst107*r00);
IkReal x3898=((1.0)*cj2);
IkReal x3899=(gconst107*r20);
IkReal x3900=((1.0)*sj0);
IkReal x3901=(cj1*sj2);
IkReal x3902=((1.0)*x3895);
IkReal x3903=(gconst106*x3895);
IkReal x3904=(gconst106*x3894);
IkReal x3905=((1.0)*x3894);
evalcond[0]=((((-1.0)*r22*x3902))+(((-1.0)*x3899*x3905))+((r21*x3904)));
evalcond[1]=((((-1.0)*r12*x3902))+cj0+((r11*x3904))+(((-1.0)*x3896*x3905)));
evalcond[2]=((((-1.0)*x3900))+(((-1.0)*x3897*x3905))+((r01*x3904))+(((-1.0)*r02*x3902)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3899*x3902))+((r22*x3894))+((r21*x3903))+(((-1.0)*cj1*x3898)));
evalcond[4]=((((-1.0)*x3897*x3902))+(((-1.0)*cj0*sj1*x3898))+((r01*x3903))+(((-1.0)*cj0*x3901))+((r02*x3894)));
evalcond[5]=((((-1.0)*x3900*x3901))+(((-1.0)*sj0*sj1*x3898))+((r12*x3894))+((r11*x3903))+(((-1.0)*x3896*x3902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3906=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3906;
j4eval[1]=IKsign(x3906);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3907=((1.0)*cj5);
IkReal x3908=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3907)));
j4eval[0]=x3908;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3907)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3909=(sj1*sj2);
IkReal x3910=(cj5*r10);
IkReal x3911=(r11*sj5);
IkReal x3912=(cj1*cj2);
IkReal x3913=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3913;
j4eval[1]=((IKabs((((x3910*x3912))+(((-1.0)*x3909*x3910))+(((-1.0)*x3911*x3912))+((x3909*x3911)))))+(IKabs((((r12*x3912))+(((-1.0)*r12*x3909))))));
j4eval[2]=IKsign(x3913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3914=(sj1*sj2);
IkReal x3915=(cj5*r10);
IkReal x3916=(r11*sj5);
IkReal x3917=(cj1*cj2);
CheckValue<IkReal> x3918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3918.valid){
continue;
}
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal((((x3914*x3916))+((x3915*x3917))+(((-1.0)*x3916*x3917))+(((-1.0)*x3914*x3915)))),IkReal(((((-1.0)*r12*x3914))+((r12*x3917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3918.value)))+(x3919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3920=IKcos(j4);
IkReal x3921=IKsin(j4);
IkReal x3922=(cj5*r00);
IkReal x3923=(cj5*r10);
IkReal x3924=(r21*sj5);
IkReal x3925=((1.0)*cj2);
IkReal x3926=(cj5*r20);
IkReal x3927=((1.0)*x3920);
IkReal x3928=((1.0)*x3921);
IkReal x3929=(sj5*x3921);
IkReal x3930=(sj5*x3920);
evalcond[0]=(((r12*x3921))+(((-1.0)*x3923*x3927))+((r11*x3930)));
evalcond[1]=(((x3921*x3924))+(((-1.0)*x3926*x3928))+(((-1.0)*r22*x3927)));
evalcond[2]=((((-1.0)*x3922*x3928))+(((-1.0)*r02*x3927))+((r01*x3929)));
evalcond[3]=((1.0)+((r11*x3929))+(((-1.0)*r12*x3927))+(((-1.0)*x3923*x3928)));
evalcond[4]=((((-1.0)*cj1*x3925))+((x3920*x3924))+((sj1*sj2))+(((-1.0)*x3926*x3927))+((r22*x3921)));
evalcond[5]=(((r01*x3930))+(((-1.0)*x3922*x3927))+(((-1.0)*cj1*sj2))+((r02*x3921))+(((-1.0)*sj1*x3925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3931=((1.0)*cj5);
CheckValue<IkReal> x3932 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3932.valid){
continue;
}
CheckValue<IkReal> x3933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3931)))),-1);
if(!x3933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3932.value)+(((1.5707963267949)*(x3933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3934=IKcos(j4);
IkReal x3935=IKsin(j4);
IkReal x3936=(cj5*r00);
IkReal x3937=(cj5*r10);
IkReal x3938=(r21*sj5);
IkReal x3939=((1.0)*cj2);
IkReal x3940=(cj5*r20);
IkReal x3941=((1.0)*x3934);
IkReal x3942=((1.0)*x3935);
IkReal x3943=(sj5*x3935);
IkReal x3944=(sj5*x3934);
evalcond[0]=((((-1.0)*x3937*x3941))+((r12*x3935))+((r11*x3944)));
evalcond[1]=((((-1.0)*r22*x3941))+((x3935*x3938))+(((-1.0)*x3940*x3942)));
evalcond[2]=(((r01*x3943))+(((-1.0)*r02*x3941))+(((-1.0)*x3936*x3942)));
evalcond[3]=((1.0)+(((-1.0)*x3937*x3942))+(((-1.0)*r12*x3941))+((r11*x3943)));
evalcond[4]=(((r22*x3935))+(((-1.0)*cj1*x3939))+((sj1*sj2))+((x3934*x3938))+(((-1.0)*x3940*x3941)));
evalcond[5]=(((r01*x3944))+(((-1.0)*sj1*x3939))+(((-1.0)*cj1*sj2))+((r02*x3935))+(((-1.0)*x3936*x3941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3945=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3945.valid){
continue;
}
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3945.value)))+(x3946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3947=IKcos(j4);
IkReal x3948=IKsin(j4);
IkReal x3949=(cj5*r00);
IkReal x3950=(cj5*r10);
IkReal x3951=(r21*sj5);
IkReal x3952=((1.0)*cj2);
IkReal x3953=(cj5*r20);
IkReal x3954=((1.0)*x3947);
IkReal x3955=((1.0)*x3948);
IkReal x3956=(sj5*x3948);
IkReal x3957=(sj5*x3947);
evalcond[0]=((((-1.0)*x3950*x3954))+((r11*x3957))+((r12*x3948)));
evalcond[1]=((((-1.0)*x3953*x3955))+(((-1.0)*r22*x3954))+((x3948*x3951)));
evalcond[2]=((((-1.0)*x3949*x3955))+((r01*x3956))+(((-1.0)*r02*x3954)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3954))+(((-1.0)*x3950*x3955))+((r11*x3956)));
evalcond[4]=((((-1.0)*x3953*x3954))+((r22*x3948))+((sj1*sj2))+(((-1.0)*cj1*x3952))+((x3947*x3951)));
evalcond[5]=((((-1.0)*sj1*x3952))+(((-1.0)*x3949*x3954))+((r01*x3957))+(((-1.0)*cj1*sj2))+((r02*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3958=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3958;
j4eval[1]=IKsign(x3958);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3959=((1.0)*cj5);
IkReal x3960=((((-1.0)*r21*x3959))+(((-1.0)*r20*sj5)));
j4eval[0]=x3960;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3959))))));
j4eval[2]=IKsign(x3960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3961=cj5*cj5;
IkReal x3962=r11*r11;
IkReal x3963=(r11*sj5);
IkReal x3964=(cj5*r10);
IkReal x3965=((r12*r12)+((x3961*(r10*r10)))+(((-1.0)*x3961*x3962))+x3962+(((-2.0)*x3963*x3964)));
j4eval[0]=x3965;
j4eval[1]=IKsign(x3965);
j4eval[2]=((IKabs(r12))+(IKabs((x3963+(((-1.0)*x3964))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3966=cj5*cj5;
IkReal x3967=r11*r11;
IkReal x3968=(cj5*r10);
IkReal x3969=(r11*sj5);
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal((x3969+(((-1.0)*x3968)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
CheckValue<IkReal> x3971=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3966*x3967))+(r12*r12)+(((-2.0)*x3968*x3969))+x3967+((x3966*(r10*r10))))),-1);
if(!x3971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3970.value)+(((1.5707963267949)*(x3971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3972=IKcos(j4);
IkReal x3973=IKsin(j4);
IkReal x3974=(cj5*r00);
IkReal x3975=(cj5*r10);
IkReal x3976=(r21*sj5);
IkReal x3977=(cj5*r20);
IkReal x3978=((1.0)*x3972);
IkReal x3979=((1.0)*x3973);
IkReal x3980=(sj5*x3973);
IkReal x3981=(sj5*x3972);
evalcond[0]=(((r11*x3981))+((r12*x3973))+(((-1.0)*x3975*x3978)));
evalcond[1]=((((-1.0)*x3977*x3979))+((x3973*x3976))+(((-1.0)*r22*x3978)));
evalcond[2]=((((-1.0)*r02*x3978))+((r01*x3980))+(((-1.0)*x3974*x3979)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3978))+((r11*x3980))+(((-1.0)*x3975*x3979)));
evalcond[4]=(((cj2*sj1))+((r02*x3973))+((cj1*sj2))+((r01*x3981))+(((-1.0)*x3974*x3978)));
evalcond[5]=((((-1.0)*x3977*x3978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3973))+((x3972*x3976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3982=((1.0)*cj5);
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
CheckValue<IkReal> x3984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3982))+(((-1.0)*r20*sj5)))),-1);
if(!x3984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3983.value)+(((1.5707963267949)*(x3984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3985=IKcos(j4);
IkReal x3986=IKsin(j4);
IkReal x3987=(cj5*r00);
IkReal x3988=(cj5*r10);
IkReal x3989=(r21*sj5);
IkReal x3990=(cj5*r20);
IkReal x3991=((1.0)*x3985);
IkReal x3992=((1.0)*x3986);
IkReal x3993=(sj5*x3986);
IkReal x3994=(sj5*x3985);
evalcond[0]=((((-1.0)*x3988*x3991))+((r11*x3994))+((r12*x3986)));
evalcond[1]=((((-1.0)*x3990*x3992))+((x3986*x3989))+(((-1.0)*r22*x3991)));
evalcond[2]=((((-1.0)*r02*x3991))+(((-1.0)*x3987*x3992))+((r01*x3993)));
evalcond[3]=((-1.0)+(((-1.0)*x3988*x3992))+(((-1.0)*r12*x3991))+((r11*x3993)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3987*x3991))+((r01*x3994))+((r02*x3986)));
evalcond[5]=(((x3985*x3989))+(((-1.0)*x3990*x3991))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3995 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3995.valid){
continue;
}
CheckValue<IkReal> x3996=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3995.value)+(((1.5707963267949)*(x3996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3997=IKcos(j4);
IkReal x3998=IKsin(j4);
IkReal x3999=(cj5*r00);
IkReal x4000=(cj5*r10);
IkReal x4001=(r21*sj5);
IkReal x4002=(cj5*r20);
IkReal x4003=((1.0)*x3997);
IkReal x4004=((1.0)*x3998);
IkReal x4005=(sj5*x3998);
IkReal x4006=(sj5*x3997);
evalcond[0]=((((-1.0)*x4000*x4003))+((r12*x3998))+((r11*x4006)));
evalcond[1]=((((-1.0)*r22*x4003))+(((-1.0)*x4002*x4004))+((x3998*x4001)));
evalcond[2]=((((-1.0)*x3999*x4004))+(((-1.0)*r02*x4003))+((r01*x4005)));
evalcond[3]=((-1.0)+(((-1.0)*x4000*x4004))+(((-1.0)*r12*x4003))+((r11*x4005)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3999*x4003))+((cj1*sj2))+((r01*x4006))+((r02*x3998)));
evalcond[5]=(((x3997*x4001))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4002*x4003))+((r22*x3998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4007=((-1.0)*r00);
IkReal x4009 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4009)==0){
continue;
}
IkReal x4008=pow(x4009,-0.5);
CheckValue<IkReal> x4010 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4007),IKFAST_ATAN2_MAGTHRESH);
if(!x4010.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4010.value));
IkReal gconst109=(r01*x4008);
IkReal gconst110=(x4007*x4008);
CheckValue<IkReal> x4011 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4011.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4011.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4012=((-1.0)*r00);
IkReal x4013=x4008;
CheckValue<IkReal> x4015 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4012),IKFAST_ATAN2_MAGTHRESH);
if(!x4015.valid){
continue;
}
IkReal x4014=((-1.0)*(x4015.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4014;
IkReal gconst108=x4014;
IkReal gconst109=(r01*x4013);
IkReal gconst110=(x4012*x4013);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4016=((1.0)*sj0);
IkReal x4017=((1.0)*gconst109);
CheckValue<IkReal> x4018 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4016))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4017))+(((-1.0)*gconst109*r11*x4016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4018.valid){
continue;
}
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4017))+(((-1.0)*gconst110*r21)))),-1);
if(!x4019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4018.value)+(((1.5707963267949)*(x4019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4020=IKsin(j4);
IkReal x4021=IKcos(j4);
IkReal x4022=(gconst109*r21);
IkReal x4023=((1.0)*cj2);
IkReal x4024=((1.0)*sj0);
IkReal x4025=(cj1*sj2);
IkReal x4026=((1.0)*x4021);
IkReal x4027=(gconst109*x4020);
IkReal x4028=(gconst109*x4021);
IkReal x4029=((1.0)*gconst110*x4020);
evalcond[0]=((((-1.0)*r22*x4026))+((x4020*x4022))+(((-1.0)*r20*x4029)));
evalcond[1]=((((-1.0)*r12*x4026))+cj0+(((-1.0)*r10*x4029))+((r11*x4027)));
evalcond[2]=((((-1.0)*r02*x4026))+((r01*x4027))+(((-1.0)*x4024))+(((-1.0)*r00*x4029)));
evalcond[3]=(((x4021*x4022))+((sj1*sj2))+(((-1.0)*cj1*x4023))+(((-1.0)*gconst110*r20*x4026))+((r22*x4020)));
evalcond[4]=((((-1.0)*cj0*x4025))+((r01*x4028))+(((-1.0)*cj0*sj1*x4023))+(((-1.0)*gconst110*r00*x4026))+((r02*x4020)));
evalcond[5]=((((-1.0)*sj0*sj1*x4023))+(((-1.0)*x4024*x4025))+((r12*x4020))+(((-1.0)*gconst110*r10*x4026))+((r11*x4028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4030=((1.0)*gconst110);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4030))+(((-1.0)*gconst109*r10)))),-1);
if(!x4032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4031.value)+(((1.5707963267949)*(x4032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4033=IKsin(j4);
IkReal x4034=IKcos(j4);
IkReal x4035=(gconst109*r21);
IkReal x4036=((1.0)*cj2);
IkReal x4037=((1.0)*sj0);
IkReal x4038=(cj1*sj2);
IkReal x4039=((1.0)*x4034);
IkReal x4040=(gconst109*x4033);
IkReal x4041=(gconst109*x4034);
IkReal x4042=((1.0)*gconst110*x4033);
evalcond[0]=((((-1.0)*r20*x4042))+(((-1.0)*r22*x4039))+((x4033*x4035)));
evalcond[1]=(cj0+(((-1.0)*r10*x4042))+(((-1.0)*r12*x4039))+((r11*x4040)));
evalcond[2]=((((-1.0)*r00*x4042))+(((-1.0)*x4037))+((r01*x4040))+(((-1.0)*r02*x4039)));
evalcond[3]=((((-1.0)*cj1*x4036))+(((-1.0)*gconst110*r20*x4039))+((sj1*sj2))+((x4034*x4035))+((r22*x4033)));
evalcond[4]=((((-1.0)*cj0*x4038))+((r02*x4033))+(((-1.0)*gconst110*r00*x4039))+((r01*x4041))+(((-1.0)*cj0*sj1*x4036)));
evalcond[5]=((((-1.0)*x4037*x4038))+(((-1.0)*gconst110*r10*x4039))+((r11*x4041))+((r12*x4033))+(((-1.0)*sj0*sj1*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4043=((-1.0)*r01);
IkReal x4045 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4045)==0){
continue;
}
IkReal x4044=pow(x4045,-0.5);
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal(x4043),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4046.value))));
IkReal gconst112=(x4043*x4044);
IkReal gconst113=((1.0)*r00*x4044);
CheckValue<IkReal> x4047 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4047.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4048=((-1.0)*r01);
CheckValue<IkReal> x4051 = IKatan2WithCheck(IkReal(x4048),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4051.valid){
continue;
}
IkReal x4049=((1.0)*(x4051.value));
IkReal x4050=x4044;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4049)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4049)));
IkReal gconst112=(x4048*x4050);
IkReal gconst113=((1.0)*r00*x4050);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4052=((-1.0)*r01);
CheckValue<IkReal> x4055 = IKatan2WithCheck(IkReal(x4052),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
IkReal x4053=((1.0)*(x4055.value));
IkReal x4054=x4044;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4053)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4053)));
IkReal gconst112=(x4052*x4054);
IkReal gconst113=((1.0)*r00*x4054);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4056=((-1.0)*r01);
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal(x4056),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
IkReal x4057=((1.0)*(x4059.value));
IkReal x4058=x4044;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4057)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4057)));
IkReal gconst112=(x4056*x4058);
IkReal gconst113=((1.0)*r00*x4058);
IkReal x4060=r02*r02;
IkReal x4061=(r12*sj0);
IkReal x4062=((1.0)*cj0);
IkReal x4063=x4044;
j4eval[0]=((IKabs(((((-1.0)*x4061))+(((-1.0)*r02*x4062)))))+(IKabs((((cj0*x4060*x4063))+(((-1.0)*x4062*x4063))+((r02*x4061*x4063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4064=((1.0)*sj0);
IkReal x4065=((1.0)*gconst112);
CheckValue<IkReal> x4066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4065))+(((-1.0)*gconst113*r21)))),-1);
if(!x4066.valid){
continue;
}
CheckValue<IkReal> x4067 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4064))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4065))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x4064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4066.value)))+(x4067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4068=IKsin(j4);
IkReal x4069=IKcos(j4);
IkReal x4070=(gconst113*r20);
IkReal x4071=(gconst112*r21);
IkReal x4072=((1.0)*cj2);
IkReal x4073=(gconst113*r00);
IkReal x4074=(gconst113*r10);
IkReal x4075=((1.0)*sj0);
IkReal x4076=(cj1*sj2);
IkReal x4077=((1.0)*x4069);
IkReal x4078=((1.0)*x4068);
IkReal x4079=(gconst112*x4069);
IkReal x4080=(gconst112*x4068);
evalcond[0]=((((-1.0)*x4070*x4078))+(((-1.0)*r22*x4077))+((x4068*x4071)));
evalcond[1]=((((-1.0)*x4074*x4078))+cj0+(((-1.0)*r12*x4077))+((r11*x4080)));
evalcond[2]=(((r01*x4080))+(((-1.0)*r02*x4077))+(((-1.0)*x4075))+(((-1.0)*x4073*x4078)));
evalcond[3]=((((-1.0)*x4070*x4077))+((sj1*sj2))+(((-1.0)*cj1*x4072))+((x4069*x4071))+((r22*x4068)));
evalcond[4]=(((r02*x4068))+(((-1.0)*cj0*x4076))+((r01*x4079))+(((-1.0)*cj0*sj1*x4072))+(((-1.0)*x4073*x4077)));
evalcond[5]=((((-1.0)*x4075*x4076))+(((-1.0)*x4074*x4077))+((r12*x4068))+(((-1.0)*sj0*sj1*x4072))+((r11*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4081=((1.0)*gconst113);
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4081))+(((-1.0)*gconst112*r10)))),-1);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4082.value)))+(x4083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4084=IKsin(j4);
IkReal x4085=IKcos(j4);
IkReal x4086=(gconst113*r20);
IkReal x4087=(gconst112*r21);
IkReal x4088=((1.0)*cj2);
IkReal x4089=(gconst113*r00);
IkReal x4090=(gconst113*r10);
IkReal x4091=((1.0)*sj0);
IkReal x4092=(cj1*sj2);
IkReal x4093=((1.0)*x4085);
IkReal x4094=((1.0)*x4084);
IkReal x4095=(gconst112*x4085);
IkReal x4096=(gconst112*x4084);
evalcond[0]=(((x4084*x4087))+(((-1.0)*r22*x4093))+(((-1.0)*x4086*x4094)));
evalcond[1]=((((-1.0)*r12*x4093))+cj0+(((-1.0)*x4090*x4094))+((r11*x4096)));
evalcond[2]=((((-1.0)*x4089*x4094))+(((-1.0)*x4091))+((r01*x4096))+(((-1.0)*r02*x4093)));
evalcond[3]=(((x4085*x4087))+((sj1*sj2))+(((-1.0)*x4086*x4093))+(((-1.0)*cj1*x4088))+((r22*x4084)));
evalcond[4]=((((-1.0)*x4089*x4093))+(((-1.0)*cj0*x4092))+((r01*x4095))+(((-1.0)*cj0*sj1*x4088))+((r02*x4084)));
evalcond[5]=((((-1.0)*x4090*x4093))+((r11*x4095))+((r12*x4084))+(((-1.0)*sj0*sj1*x4088))+(((-1.0)*x4091*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4097=((1.0)*gconst113);
CheckValue<IkReal> x4098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4097))+(((-1.0)*gconst112*r00)))),-1);
if(!x4098.valid){
continue;
}
CheckValue<IkReal> x4099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4097))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4098.value)))+(x4099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4100=IKsin(j4);
IkReal x4101=IKcos(j4);
IkReal x4102=(gconst113*r20);
IkReal x4103=(gconst112*r21);
IkReal x4104=((1.0)*cj2);
IkReal x4105=(gconst113*r00);
IkReal x4106=(gconst113*r10);
IkReal x4107=((1.0)*sj0);
IkReal x4108=(cj1*sj2);
IkReal x4109=((1.0)*x4101);
IkReal x4110=((1.0)*x4100);
IkReal x4111=(gconst112*x4101);
IkReal x4112=(gconst112*x4100);
evalcond[0]=((((-1.0)*r22*x4109))+((x4100*x4103))+(((-1.0)*x4102*x4110)));
evalcond[1]=(cj0+(((-1.0)*r12*x4109))+((r11*x4112))+(((-1.0)*x4106*x4110)));
evalcond[2]=((((-1.0)*x4105*x4110))+(((-1.0)*x4107))+((r01*x4112))+(((-1.0)*r02*x4109)));
evalcond[3]=(((r22*x4100))+(((-1.0)*cj1*x4104))+((sj1*sj2))+((x4101*x4103))+(((-1.0)*x4102*x4109)));
evalcond[4]=((((-1.0)*x4105*x4109))+(((-1.0)*cj0*sj1*x4104))+(((-1.0)*cj0*x4108))+((r02*x4100))+((r01*x4111)));
evalcond[5]=((((-1.0)*sj0*sj1*x4104))+(((-1.0)*x4107*x4108))+(((-1.0)*x4106*x4109))+((r12*x4100))+((r11*x4111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4113=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4113;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4114=((1.0)*cj5);
IkReal x4115=((((-1.0)*r11*x4114))+(((-1.0)*r10*sj5)));
j4eval[0]=x4115;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4114))))));
j4eval[2]=IKsign(x4115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4116=cj5*cj5;
IkReal x4117=r01*r01;
IkReal x4118=(cj5*r00);
IkReal x4119=(r01*sj5);
IkReal x4120=((((-1.0)*x4116*x4117))+((x4116*(r00*r00)))+x4117+(((-2.0)*x4118*x4119))+(r02*r02));
j4eval[0]=x4120;
j4eval[1]=IKsign(x4120);
j4eval[2]=((IKabs(r02))+(IKabs((x4119+(((-1.0)*x4118))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4121=cj5*cj5;
IkReal x4122=r01*r01;
IkReal x4123=(r01*sj5);
IkReal x4124=(cj5*r00);
CheckValue<IkReal> x4125 = IKatan2WithCheck(IkReal((x4123+(((-1.0)*x4124)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4125.valid){
continue;
}
CheckValue<IkReal> x4126=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4123*x4124))+(((-1.0)*x4121*x4122))+x4122+(r02*r02)+((x4121*(r00*r00))))),-1);
if(!x4126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4125.value)+(((1.5707963267949)*(x4126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4127=IKcos(j4);
IkReal x4128=IKsin(j4);
IkReal x4129=(cj5*r00);
IkReal x4130=(cj5*r10);
IkReal x4131=(r21*sj5);
IkReal x4132=((1.0)*cj2);
IkReal x4133=(cj5*r20);
IkReal x4134=((1.0)*x4127);
IkReal x4135=((1.0)*x4128);
IkReal x4136=(sj5*x4128);
IkReal x4137=(sj5*x4127);
evalcond[0]=(((r02*x4128))+((r01*x4137))+(((-1.0)*x4129*x4134)));
evalcond[1]=(((x4128*x4131))+(((-1.0)*x4133*x4135))+(((-1.0)*r22*x4134)));
evalcond[2]=((((-1.0)*x4130*x4135))+((r11*x4136))+(((-1.0)*r12*x4134)));
evalcond[3]=((-1.0)+((r01*x4136))+(((-1.0)*r02*x4134))+(((-1.0)*x4129*x4135)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4133*x4134))+((x4127*x4131))+(((-1.0)*cj1*x4132))+((r22*x4128)));
evalcond[5]=(((r12*x4128))+(((-1.0)*x4130*x4134))+((r11*x4137))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4138=((1.0)*cj5);
CheckValue<IkReal> x4139 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4138))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4139.valid){
continue;
}
CheckValue<IkReal> x4140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4138)))),-1);
if(!x4140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4139.value)+(((1.5707963267949)*(x4140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4141=IKcos(j4);
IkReal x4142=IKsin(j4);
IkReal x4143=(cj5*r00);
IkReal x4144=(cj5*r10);
IkReal x4145=(r21*sj5);
IkReal x4146=((1.0)*cj2);
IkReal x4147=(cj5*r20);
IkReal x4148=((1.0)*x4141);
IkReal x4149=((1.0)*x4142);
IkReal x4150=(sj5*x4142);
IkReal x4151=(sj5*x4141);
evalcond[0]=(((r02*x4142))+((r01*x4151))+(((-1.0)*x4143*x4148)));
evalcond[1]=(((x4142*x4145))+(((-1.0)*x4147*x4149))+(((-1.0)*r22*x4148)));
evalcond[2]=((((-1.0)*x4144*x4149))+((r11*x4150))+(((-1.0)*r12*x4148)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4148))+((r01*x4150))+(((-1.0)*x4143*x4149)));
evalcond[4]=((((-1.0)*x4147*x4148))+((sj1*sj2))+((x4141*x4145))+((r22*x4142))+(((-1.0)*cj1*x4146)));
evalcond[5]=((((-1.0)*x4144*x4148))+((r12*x4142))+(((-1.0)*cj1*sj2))+((r11*x4151))+(((-1.0)*sj1*x4146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4152=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4152.valid){
continue;
}
CheckValue<IkReal> x4153 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4152.value)))+(x4153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4154=IKcos(j4);
IkReal x4155=IKsin(j4);
IkReal x4156=(cj5*r00);
IkReal x4157=(cj5*r10);
IkReal x4158=(r21*sj5);
IkReal x4159=((1.0)*cj2);
IkReal x4160=(cj5*r20);
IkReal x4161=((1.0)*x4154);
IkReal x4162=((1.0)*x4155);
IkReal x4163=(sj5*x4155);
IkReal x4164=(sj5*x4154);
evalcond[0]=(((r01*x4164))+((r02*x4155))+(((-1.0)*x4156*x4161)));
evalcond[1]=(((x4155*x4158))+(((-1.0)*x4160*x4162))+(((-1.0)*r22*x4161)));
evalcond[2]=((((-1.0)*r12*x4161))+((r11*x4163))+(((-1.0)*x4157*x4162)));
evalcond[3]=((-1.0)+((r01*x4163))+(((-1.0)*r02*x4161))+(((-1.0)*x4156*x4162)));
evalcond[4]=((((-1.0)*x4160*x4161))+((r22*x4155))+((sj1*sj2))+(((-1.0)*cj1*x4159))+((x4154*x4158)));
evalcond[5]=(((r12*x4155))+(((-1.0)*cj1*sj2))+((r11*x4164))+(((-1.0)*x4157*x4161))+(((-1.0)*sj1*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4165=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4165;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4165);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4166=((1.0)*cj5);
IkReal x4167=((((-1.0)*r21*x4166))+(((-1.0)*r20*sj5)));
j4eval[0]=x4167;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4166))+((r11*sj5))))));
j4eval[2]=IKsign(x4167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4168=cj5*cj5;
IkReal x4169=r01*r01;
IkReal x4170=(r01*sj5);
IkReal x4171=(cj5*r00);
IkReal x4172=(((x4168*x4169))+(((-1.0)*x4169))+(((-1.0)*(r02*r02)))+(((-1.0)*x4168*(r00*r00)))+(((2.0)*x4170*x4171)));
j4eval[0]=x4172;
j4eval[1]=IKsign(x4172);
j4eval[2]=((IKabs(((((-1.0)*x4171))+x4170)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4173=cj5*cj5;
IkReal x4174=r01*r01;
IkReal x4175=(r01*sj5);
IkReal x4176=(cj5*r00);
CheckValue<IkReal> x4177=IKPowWithIntegerCheck(IKsign(((((2.0)*x4175*x4176))+((x4173*x4174))+(((-1.0)*(r02*r02)))+(((-1.0)*x4174))+(((-1.0)*x4173*(r00*r00))))),-1);
if(!x4177.valid){
continue;
}
CheckValue<IkReal> x4178 = IKatan2WithCheck(IkReal(((((-1.0)*x4176))+x4175)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4177.value)))+(x4178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4179=IKcos(j4);
IkReal x4180=IKsin(j4);
IkReal x4181=(cj5*r00);
IkReal x4182=(cj5*r10);
IkReal x4183=(r21*sj5);
IkReal x4184=(cj5*r20);
IkReal x4185=((1.0)*x4179);
IkReal x4186=((1.0)*x4180);
IkReal x4187=(sj5*x4180);
IkReal x4188=(sj5*x4179);
evalcond[0]=((((-1.0)*x4181*x4185))+((r02*x4180))+((r01*x4188)));
evalcond[1]=(((x4180*x4183))+(((-1.0)*x4184*x4186))+(((-1.0)*r22*x4185)));
evalcond[2]=((((-1.0)*r12*x4185))+((r11*x4187))+(((-1.0)*x4182*x4186)));
evalcond[3]=((1.0)+(((-1.0)*x4181*x4186))+(((-1.0)*r02*x4185))+((r01*x4187)));
evalcond[4]=(((r12*x4180))+((cj2*sj1))+((r11*x4188))+((cj1*sj2))+(((-1.0)*x4182*x4185)));
evalcond[5]=(((x4179*x4183))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4180))+(((-1.0)*x4184*x4185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4189=((1.0)*cj5);
CheckValue<IkReal> x4190 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4190.valid){
continue;
}
CheckValue<IkReal> x4191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4189))+(((-1.0)*r20*sj5)))),-1);
if(!x4191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4190.value)+(((1.5707963267949)*(x4191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4192=IKcos(j4);
IkReal x4193=IKsin(j4);
IkReal x4194=(cj5*r00);
IkReal x4195=(cj5*r10);
IkReal x4196=(r21*sj5);
IkReal x4197=(cj5*r20);
IkReal x4198=((1.0)*x4192);
IkReal x4199=((1.0)*x4193);
IkReal x4200=(sj5*x4193);
IkReal x4201=(sj5*x4192);
evalcond[0]=((((-1.0)*x4194*x4198))+((r02*x4193))+((r01*x4201)));
evalcond[1]=(((x4193*x4196))+(((-1.0)*r22*x4198))+(((-1.0)*x4197*x4199)));
evalcond[2]=((((-1.0)*r12*x4198))+((r11*x4200))+(((-1.0)*x4195*x4199)));
evalcond[3]=((1.0)+(((-1.0)*x4194*x4199))+((r01*x4200))+(((-1.0)*r02*x4198)));
evalcond[4]=(((cj2*sj1))+((r11*x4201))+((r12*x4193))+(((-1.0)*x4195*x4198))+((cj1*sj2)));
evalcond[5]=(((x4192*x4196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4193))+(((-1.0)*x4197*x4198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4202 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4202.valid){
continue;
}
CheckValue<IkReal> x4203=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4202.value)+(((1.5707963267949)*(x4203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4204=IKcos(j4);
IkReal x4205=IKsin(j4);
IkReal x4206=(cj5*r00);
IkReal x4207=(cj5*r10);
IkReal x4208=(r21*sj5);
IkReal x4209=(cj5*r20);
IkReal x4210=((1.0)*x4204);
IkReal x4211=((1.0)*x4205);
IkReal x4212=(sj5*x4205);
IkReal x4213=(sj5*x4204);
evalcond[0]=(((r02*x4205))+(((-1.0)*x4206*x4210))+((r01*x4213)));
evalcond[1]=(((x4205*x4208))+(((-1.0)*r22*x4210))+(((-1.0)*x4209*x4211)));
evalcond[2]=(((r11*x4212))+(((-1.0)*r12*x4210))+(((-1.0)*x4207*x4211)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4210))+(((-1.0)*x4206*x4211))+((r01*x4212)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4213))+(((-1.0)*x4207*x4210))+((r12*x4205)));
evalcond[5]=(((r22*x4205))+((x4204*x4208))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4209*x4210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4214=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4214);
rxp1_1=(px*r21);
rxp1_2=(r11*x4214);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4215=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4215);
rxp1_1=(px*r21);
rxp1_2=(r11*x4215);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4216=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4216);
rxp1_1=(px*r21);
rxp1_2=(r11*x4216);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4219=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4219.valid){
continue;
}
IkReal x4217=x4219.value;
IkReal x4218=(sj0*x4217);
cj4array[0]=(((cj2*sj1*x4218))+((cj1*sj2*x4218)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4220=IKsin(j4);
IkReal x4221=IKcos(j4);
IkReal x4222=(r21*sj5);
IkReal x4223=((1.0)*cj5*r20);
evalcond[0]=(r02*x4220);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4221)));
evalcond[2]=(((x4220*x4222))+(((-1.0)*x4220*x4223)));
evalcond[3]=((((-1.0)*cj5*r10*x4220))+((r11*sj5*x4220)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4221*x4223))+((x4221*x4222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4225=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4225.valid){
continue;
}
IkReal x4224=x4225.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4224))+((cj1*cj2*x4224)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4226=IKsin(j4);
IkReal x4227=IKcos(j4);
IkReal x4228=((1.0)*sj0);
IkReal x4229=((1.0)*cj5);
IkReal x4230=(sj5*x4226);
evalcond[0]=(r02*x4226);
evalcond[1]=((((-1.0)*x4228))+(((-1.0)*r02*x4227)));
evalcond[2]=((((-1.0)*r20*x4226*x4229))+((r21*x4230)));
evalcond[3]=((((-1.0)*r10*x4226*x4229))+((r11*x4230)));
evalcond[4]=((((-1.0)*cj1*sj2*x4228))+(((-1.0)*cj2*sj1*x4228))+(((-1.0)*r10*x4227*x4229))+((r11*sj5*x4227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4231=IKPowWithIntegerCheck(r02,-1);
if(!x4231.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4231.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4232=IKsin(j4);
IkReal x4233=IKcos(j4);
IkReal x4234=((1.0)*cj1);
IkReal x4235=(r21*sj5);
IkReal x4236=((1.0)*cj5);
IkReal x4237=(r11*sj5);
evalcond[0]=(r02*x4232);
evalcond[1]=(((x4232*x4235))+(((-1.0)*r20*x4232*x4236)));
evalcond[2]=(((x4232*x4237))+(((-1.0)*r10*x4232*x4236)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x4233*x4236))+((x4233*x4235))+(((-1.0)*cj2*x4234)));
evalcond[4]=((((-1.0)*r10*x4233*x4236))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4234))+((x4233*x4237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4238=((1.0)*sj0);
IkReal x4239=((1.0)*cj0);
CheckValue<IkReal> x4240 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4238))+(((-1.0)*r02*x4239)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4238))+(((-1.0)*r01*sj5*x4239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4240.valid){
continue;
}
CheckValue<IkReal> x4241=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4240.value)+(((1.5707963267949)*(x4241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4242=IKsin(j4);
IkReal x4243=IKcos(j4);
IkReal x4244=(cj5*r00);
IkReal x4245=(cj5*r10);
IkReal x4246=(r21*sj5);
IkReal x4247=((1.0)*cj2);
IkReal x4248=((1.0)*sj0);
IkReal x4249=(cj1*sj2);
IkReal x4250=(cj5*r20);
IkReal x4251=((1.0)*x4243);
IkReal x4252=((1.0)*x4242);
IkReal x4253=(sj5*x4242);
IkReal x4254=(sj5*x4243);
evalcond[0]=((((-1.0)*r22*x4251))+((x4242*x4246))+(((-1.0)*x4250*x4252)));
evalcond[1]=((((-1.0)*x4245*x4252))+cj0+((r11*x4253))+(((-1.0)*r12*x4251)));
evalcond[2]=((((-1.0)*x4248))+((r01*x4253))+(((-1.0)*x4244*x4252))+(((-1.0)*r02*x4251)));
evalcond[3]=((((-1.0)*cj1*x4247))+((r22*x4242))+((sj1*sj2))+((x4243*x4246))+(((-1.0)*x4250*x4251)));
evalcond[4]=((((-1.0)*cj0*sj1*x4247))+((r01*x4254))+(((-1.0)*cj0*x4249))+((r02*x4242))+(((-1.0)*x4244*x4251)));
evalcond[5]=((((-1.0)*x4245*x4251))+(((-1.0)*x4248*x4249))+((r11*x4254))+((r12*x4242))+(((-1.0)*sj0*sj1*x4247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4255=((1.0)*cj5);
CheckValue<IkReal> x4256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4255)))),-1);
if(!x4256.valid){
continue;
}
CheckValue<IkReal> x4257 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4256.value)))+(x4257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4258=IKsin(j4);
IkReal x4259=IKcos(j4);
IkReal x4260=(cj5*r00);
IkReal x4261=(cj5*r10);
IkReal x4262=(r21*sj5);
IkReal x4263=((1.0)*cj2);
IkReal x4264=((1.0)*sj0);
IkReal x4265=(cj1*sj2);
IkReal x4266=(cj5*r20);
IkReal x4267=((1.0)*x4259);
IkReal x4268=((1.0)*x4258);
IkReal x4269=(sj5*x4258);
IkReal x4270=(sj5*x4259);
evalcond[0]=((((-1.0)*r22*x4267))+((x4258*x4262))+(((-1.0)*x4266*x4268)));
evalcond[1]=((((-1.0)*r12*x4267))+((r11*x4269))+cj0+(((-1.0)*x4261*x4268)));
evalcond[2]=(((r01*x4269))+(((-1.0)*r02*x4267))+(((-1.0)*x4260*x4268))+(((-1.0)*x4264)));
evalcond[3]=(((r22*x4258))+((sj1*sj2))+((x4259*x4262))+(((-1.0)*x4266*x4267))+(((-1.0)*cj1*x4263)));
evalcond[4]=(((r02*x4258))+(((-1.0)*cj0*x4265))+(((-1.0)*x4260*x4267))+(((-1.0)*cj0*sj1*x4263))+((r01*x4270)));
evalcond[5]=(((r11*x4270))+(((-1.0)*x4264*x4265))+(((-1.0)*sj0*sj1*x4263))+((r12*x4258))+(((-1.0)*x4261*x4267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4271=((1.0)*cj5);
CheckValue<IkReal> x4272 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4272.valid){
continue;
}
CheckValue<IkReal> x4273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4271)))),-1);
if(!x4273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4272.value)+(((1.5707963267949)*(x4273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4274=IKsin(j4);
IkReal x4275=IKcos(j4);
IkReal x4276=(cj5*r00);
IkReal x4277=(cj5*r10);
IkReal x4278=(r21*sj5);
IkReal x4279=((1.0)*cj2);
IkReal x4280=((1.0)*sj0);
IkReal x4281=(cj1*sj2);
IkReal x4282=(cj5*r20);
IkReal x4283=((1.0)*x4275);
IkReal x4284=((1.0)*x4274);
IkReal x4285=(sj5*x4274);
IkReal x4286=(sj5*x4275);
evalcond[0]=((((-1.0)*x4282*x4284))+((x4274*x4278))+(((-1.0)*r22*x4283)));
evalcond[1]=(cj0+((r11*x4285))+(((-1.0)*r12*x4283))+(((-1.0)*x4277*x4284)));
evalcond[2]=((((-1.0)*x4280))+(((-1.0)*r02*x4283))+(((-1.0)*x4276*x4284))+((r01*x4285)));
evalcond[3]=((((-1.0)*cj1*x4279))+(((-1.0)*x4282*x4283))+((sj1*sj2))+((x4275*x4278))+((r22*x4274)));
evalcond[4]=(((r02*x4274))+(((-1.0)*cj0*x4281))+(((-1.0)*x4276*x4283))+(((-1.0)*cj0*sj1*x4279))+((r01*x4286)));
evalcond[5]=(((r11*x4286))+(((-1.0)*x4280*x4281))+((r12*x4274))+(((-1.0)*sj0*sj1*x4279))+(((-1.0)*x4277*x4283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4287=r21*r21;
IkReal x4288=cj5*cj5;
IkReal x4289=(sj1*sj2);
IkReal x4290=(r21*sj5);
IkReal x4291=(cj1*cj2);
IkReal x4292=(cj5*r20);
CheckValue<IkReal> x4293 = IKatan2WithCheck(IkReal((((r22*x4289))+(((-1.0)*r22*x4291)))),IkReal(((((-1.0)*x4290*x4291))+((x4289*x4290))+(((-1.0)*x4289*x4292))+((x4291*x4292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4293.valid){
continue;
}
CheckValue<IkReal> x4294=IKPowWithIntegerCheck(IKsign((((x4287*x4288))+(((-1.0)*x4288*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4287))+(((2.0)*x4290*x4292)))),-1);
if(!x4294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4293.value)+(((1.5707963267949)*(x4294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4295=IKsin(j4);
IkReal x4296=IKcos(j4);
IkReal x4297=(r21*sj5);
IkReal x4298=(cj5*r20);
IkReal x4299=((1.0)*x4296);
evalcond[0]=((((-1.0)*x4295*x4298))+(((-1.0)*r22*x4299))+((x4295*x4297)));
evalcond[1]=((((-1.0)*x4298*x4299))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4296*x4297))+((r22*x4295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4300=(cj5*sj4);
IkReal x4301=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4300))+((r01*x4301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4300))+(((-1.0)*r11*x4301))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4300))+((r01*x4301))))+IKsqr((((r10*x4300))+(((-1.0)*r11*x4301))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4300))+((r01*x4301))), (((r10*x4300))+(((-1.0)*r11*x4301))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4302=IKcos(j0);
IkReal x4303=IKsin(j0);
IkReal x4304=((1.0)*cj1);
IkReal x4305=((0.39225)*sj1);
IkReal x4306=(r11*sj5);
IkReal x4307=(cj5*r11);
IkReal x4308=((1.0)*sj5);
IkReal x4309=((1.0)*sj1);
IkReal x4310=((0.09465)*sj5);
IkReal x4311=((1.0)*cj5);
IkReal x4312=((0.425)*cj1);
IkReal x4313=((1.0)*cj4);
IkReal x4314=(r01*sj5);
IkReal x4315=(sj2*x4302);
IkReal x4316=(sj2*x4303);
IkReal x4317=(cj4*x4311);
IkReal x4318=((0.39225)*cj1*cj2);
IkReal x4319=(cj2*x4302);
IkReal x4320=(cj2*x4303);
evalcond[0]=(((sj4*x4306))+(((-1.0)*r10*sj4*x4311))+(((-1.0)*r12*x4313))+x4302);
evalcond[1]=((((-1.0)*x4303))+(((-1.0)*r02*x4313))+(((-1.0)*r00*sj4*x4311))+((sj4*x4314)));
evalcond[2]=((((-1.0)*r00*x4308))+((sj1*x4315))+(((-1.0)*r01*x4311))+(((-1.0)*x4304*x4319)));
evalcond[3]=((((-1.0)*x4304*x4320))+((sj1*x4316))+(((-1.0)*x4307))+(((-1.0)*r10*x4308)));
evalcond[4]=((((-1.0)*x4309*x4319))+((r02*sj4))+((cj4*x4314))+(((-1.0)*r00*x4317))+(((-1.0)*x4304*x4315)));
evalcond[5]=(((cj4*x4306))+((r12*sj4))+(((-1.0)*r10*x4317))+(((-1.0)*x4309*x4320))+(((-1.0)*x4304*x4316)));
evalcond[6]=((((-1.0)*x4305*x4315))+(((-0.09465)*cj5*r01))+(((-1.0)*px))+((x4302*x4318))+((x4302*x4312))+(((-1.0)*r00*x4310))+(((-0.10915)*x4303)));
evalcond[7]=((((-0.09465)*x4307))+(((-1.0)*x4305*x4316))+(((-1.0)*py))+(((0.10915)*x4302))+(((-1.0)*r10*x4310))+((x4303*x4312))+((x4303*x4318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4321 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4321.valid){
continue;
}
CheckValue<IkReal> x4322=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4322.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4321.value)+(((1.5707963267949)*(x4322.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4323=IKcos(j0);
IkReal x4324=IKsin(j0);
IkReal x4325=(cj5*r11);
IkReal x4326=(cj5*r01);
IkReal x4327=((1.0)*sj5);
IkReal x4328=((0.09465)*sj5);
IkReal x4329=(sj1*sj2);
IkReal x4330=((0.39225)*cj2);
IkReal x4331=((1.0)*cj2);
IkReal x4332=((0.39225)*x4329);
IkReal x4333=(cj1*x4323);
IkReal x4334=(cj1*x4324);
evalcond[0]=((((-1.0)*r00*x4327))+(((-1.0)*x4331*x4333))+(((-1.0)*x4326))+((x4323*x4329)));
evalcond[1]=((((-1.0)*r10*x4327))+((x4324*x4329))+(((-1.0)*x4331*x4334))+(((-1.0)*x4325)));
evalcond[2]=((((-1.0)*r00*x4328))+(((0.425)*x4333))+(((-1.0)*px))+(((-0.09465)*x4326))+(((-1.0)*x4323*x4332))+(((-0.10915)*x4324))+((x4330*x4333)));
evalcond[3]=((((-1.0)*r10*x4328))+(((0.10915)*x4323))+(((-1.0)*x4324*x4332))+(((0.425)*x4334))+(((-1.0)*py))+(((-0.09465)*x4325))+((x4330*x4334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4335=((1.0)*cj5);
IkReal x4336=((((-1.0)*r01*x4335))+(((-1.0)*r00*sj5)));
j4eval[0]=x4336;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4335)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4337=((1.0)*cj5);
IkReal x4338=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4337)));
j4eval[0]=x4338;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4337))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4339=((1.0)*sj0);
IkReal x4340=((1.0)*cj0);
IkReal x4341=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4341;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4340))+(((-1.0)*r11*sj5*x4339)))))+(IKabs(((((-1.0)*r02*x4340))+(((-1.0)*r12*x4339))))));
j4eval[2]=IKsign(x4341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4342=((-1.0)*r20);
IkReal x4344 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4344)==0){
continue;
}
IkReal x4343=pow(x4344,-0.5);
CheckValue<IkReal> x4345 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4342),IKFAST_ATAN2_MAGTHRESH);
if(!x4345.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4345.value));
IkReal gconst97=(r21*x4343);
IkReal gconst98=(x4342*x4343);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4346.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4347=((-1.0)*r20);
IkReal x4348=x4343;
CheckValue<IkReal> x4350 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4347),IKFAST_ATAN2_MAGTHRESH);
if(!x4350.valid){
continue;
}
IkReal x4349=((-1.0)*(x4350.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4349;
IkReal gconst96=x4349;
IkReal gconst97=(r21*x4348);
IkReal gconst98=(x4347*x4348);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4351=((-1.0)*r20);
IkReal x4352=x4343;
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4351),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
IkReal x4353=((-1.0)*(x4354.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4353;
IkReal gconst96=x4353;
IkReal gconst97=(r21*x4352);
IkReal gconst98=(x4351*x4352);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4355=((-1.0)*r20);
IkReal x4356=x4343;
CheckValue<IkReal> x4358 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4355),IKFAST_ATAN2_MAGTHRESH);
if(!x4358.valid){
continue;
}
IkReal x4357=((-1.0)*(x4358.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4357;
IkReal gconst96=x4357;
IkReal gconst97=(r21*x4356);
IkReal gconst98=(x4355*x4356);
IkReal x4359=((1.0)*(r22*r22));
CheckValue<IkReal> x4363=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4359))),-1);
if(!x4363.valid){
continue;
}
IkReal x4360=x4363.value;
IkReal x4361=((1.0)*x4360);
IkReal x4362=((((-1.0)*x4361*(r21*r21*r21*r21)))+(((-1.0)*x4359))+(((-1.0)*x4361*(r20*r20*r20*r20)))+(((-2.0)*x4360*(r20*r20)*(r21*r21))));
j4eval[0]=x4362;
j4eval[1]=IKsign(x4362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4364=(cj1*cj2);
IkReal x4365=(gconst98*r20);
IkReal x4366=(sj1*sj2);
IkReal x4367=(gconst97*r21);
CheckValue<IkReal> x4368=IKPowWithIntegerCheck(IKsign(((((2.0)*x4365*x4367))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4367*x4367)))+(((-1.0)*(x4365*x4365))))),-1);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal((((r22*x4366))+(((-1.0)*r22*x4364)))),IkReal(((((-1.0)*x4365*x4366))+((x4366*x4367))+((x4364*x4365))+(((-1.0)*x4364*x4367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4368.value)))+(x4369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4370=IKsin(j4);
IkReal x4371=IKcos(j4);
IkReal x4372=(gconst98*r10);
IkReal x4373=(gconst97*r21);
IkReal x4374=(gconst98*r20);
IkReal x4375=((1.0)*cj2);
IkReal x4376=((1.0)*sj0);
IkReal x4377=(gconst98*r00);
IkReal x4378=(cj1*sj2);
IkReal x4379=((1.0)*x4371);
IkReal x4380=((1.0)*x4370);
IkReal x4381=(gconst97*x4370);
IkReal x4382=(gconst97*x4371);
evalcond[0]=(((x4370*x4373))+(((-1.0)*r22*x4379))+(((-1.0)*x4374*x4380)));
evalcond[1]=(cj0+(((-1.0)*x4372*x4380))+((r11*x4381))+(((-1.0)*r12*x4379)));
evalcond[2]=((((-1.0)*r02*x4379))+(((-1.0)*x4376))+(((-1.0)*x4377*x4380))+((r01*x4381)));
evalcond[3]=(((x4371*x4373))+((r22*x4370))+((sj1*sj2))+(((-1.0)*x4374*x4379))+(((-1.0)*cj1*x4375)));
evalcond[4]=((((-1.0)*cj0*sj1*x4375))+((r02*x4370))+(((-1.0)*cj0*x4378))+(((-1.0)*x4377*x4379))+((r01*x4382)));
evalcond[5]=(((r12*x4370))+(((-1.0)*x4376*x4378))+(((-1.0)*sj0*sj1*x4375))+((r11*x4382))+(((-1.0)*x4372*x4379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4383=((1.0)*gconst98);
CheckValue<IkReal> x4384 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4384.valid){
continue;
}
CheckValue<IkReal> x4385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4383))+(((-1.0)*gconst97*r10)))),-1);
if(!x4385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4384.value)+(((1.5707963267949)*(x4385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4386=IKsin(j4);
IkReal x4387=IKcos(j4);
IkReal x4388=(gconst98*r10);
IkReal x4389=(gconst97*r21);
IkReal x4390=(gconst98*r20);
IkReal x4391=((1.0)*cj2);
IkReal x4392=((1.0)*sj0);
IkReal x4393=(gconst98*r00);
IkReal x4394=(cj1*sj2);
IkReal x4395=((1.0)*x4387);
IkReal x4396=((1.0)*x4386);
IkReal x4397=(gconst97*x4386);
IkReal x4398=(gconst97*x4387);
evalcond[0]=((((-1.0)*x4390*x4396))+(((-1.0)*r22*x4395))+((x4386*x4389)));
evalcond[1]=((((-1.0)*r12*x4395))+cj0+(((-1.0)*x4388*x4396))+((r11*x4397)));
evalcond[2]=((((-1.0)*x4392))+((r01*x4397))+(((-1.0)*r02*x4395))+(((-1.0)*x4393*x4396)));
evalcond[3]=(((r22*x4386))+((sj1*sj2))+(((-1.0)*x4390*x4395))+((x4387*x4389))+(((-1.0)*cj1*x4391)));
evalcond[4]=(((r01*x4398))+(((-1.0)*cj0*sj1*x4391))+((r02*x4386))+(((-1.0)*x4393*x4395))+(((-1.0)*cj0*x4394)));
evalcond[5]=((((-1.0)*sj0*sj1*x4391))+(((-1.0)*x4388*x4395))+((r11*x4398))+(((-1.0)*x4392*x4394))+((r12*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4399=((1.0)*gconst98);
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4399))+(((-1.0)*gconst97*r00)))),-1);
if(!x4400.valid){
continue;
}
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4400.value)))+(x4401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4402=IKsin(j4);
IkReal x4403=IKcos(j4);
IkReal x4404=(gconst98*r10);
IkReal x4405=(gconst97*r21);
IkReal x4406=(gconst98*r20);
IkReal x4407=((1.0)*cj2);
IkReal x4408=((1.0)*sj0);
IkReal x4409=(gconst98*r00);
IkReal x4410=(cj1*sj2);
IkReal x4411=((1.0)*x4403);
IkReal x4412=((1.0)*x4402);
IkReal x4413=(gconst97*x4402);
IkReal x4414=(gconst97*x4403);
evalcond[0]=(((x4402*x4405))+(((-1.0)*r22*x4411))+(((-1.0)*x4406*x4412)));
evalcond[1]=(((r11*x4413))+cj0+(((-1.0)*r12*x4411))+(((-1.0)*x4404*x4412)));
evalcond[2]=((((-1.0)*x4409*x4412))+((r01*x4413))+(((-1.0)*r02*x4411))+(((-1.0)*x4408)));
evalcond[3]=(((r22*x4402))+((x4403*x4405))+((sj1*sj2))+(((-1.0)*x4406*x4411))+(((-1.0)*cj1*x4407)));
evalcond[4]=((((-1.0)*x4409*x4411))+(((-1.0)*cj0*x4410))+((r01*x4414))+((r02*x4402))+(((-1.0)*cj0*sj1*x4407)));
evalcond[5]=(((r11*x4414))+(((-1.0)*x4408*x4410))+((r12*x4402))+(((-1.0)*x4404*x4411))+(((-1.0)*sj0*sj1*x4407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4415=((-1.0)*r21);
IkReal x4417 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4417)==0){
continue;
}
IkReal x4416=pow(x4417,-0.5);
CheckValue<IkReal> x4418 = IKatan2WithCheck(IkReal(x4415),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4418.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4418.value))));
IkReal gconst100=(x4415*x4416);
IkReal gconst101=((1.0)*r20*x4416);
CheckValue<IkReal> x4419 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4419.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4419.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4420=((-1.0)*r21);
CheckValue<IkReal> x4423 = IKatan2WithCheck(IkReal(x4420),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4423.valid){
continue;
}
IkReal x4421=((1.0)*(x4423.value));
IkReal x4422=x4416;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4421)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4421)));
IkReal gconst100=(x4420*x4422);
IkReal gconst101=((1.0)*r20*x4422);
IkReal x4424=r22*r22;
IkReal x4425=((1.0)*x4424);
CheckValue<IkReal> x4429=IKPowWithIntegerCheck(((-1.0)+x4424),-1);
if(!x4429.valid){
continue;
}
IkReal x4426=x4429.value;
if((((1.0)+(((-1.0)*x4425)))) < -0.00001)
continue;
IkReal x4427=IKsqrt(((1.0)+(((-1.0)*x4425))));
IkReal x4428=(cj0*x4426*x4427);
j4eval[0]=((IKabs(((((-1.0)*x4425*x4428))+x4428)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4430=((-1.0)*r21);
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal(x4430),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
IkReal x4431=((1.0)*(x4433.value));
IkReal x4432=x4416;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4431)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4431)));
IkReal gconst100=(x4430*x4432);
IkReal gconst101=((1.0)*r20*x4432);
IkReal x4434=r22*r22;
IkReal x4435=((1.0)*x4434);
CheckValue<IkReal> x4439=IKPowWithIntegerCheck(((-1.0)+x4434),-1);
if(!x4439.valid){
continue;
}
IkReal x4436=x4439.value;
if((((1.0)+(((-1.0)*x4435)))) < -0.00001)
continue;
IkReal x4437=IKsqrt(((1.0)+(((-1.0)*x4435))));
IkReal x4438=(sj0*x4436*x4437);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4438+(((-1.0)*x4435*x4438))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4440=((-1.0)*r21);
CheckValue<IkReal> x4443 = IKatan2WithCheck(IkReal(x4440),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4443.valid){
continue;
}
IkReal x4441=((1.0)*(x4443.value));
IkReal x4442=x4416;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4441)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4441)));
IkReal gconst100=(x4440*x4442);
IkReal gconst101=((1.0)*r20*x4442);
IkReal x4444=r22*r22;
IkReal x4445=(r12*sj0);
IkReal x4446=(cj0*r02);
CheckValue<IkReal> x4450=IKPowWithIntegerCheck(((-1.0)+x4444),-1);
if(!x4450.valid){
continue;
}
IkReal x4447=x4450.value;
if((((1.0)+(((-1.0)*x4444)))) < -0.00001)
continue;
IkReal x4448=IKsqrt(((1.0)+(((-1.0)*x4444))));
IkReal x4449=(r22*x4447*x4448);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4446*x4449))+((x4445*x4449)))))+(IKabs(((((-1.0)*x4446))+(((-1.0)*x4445))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4451=((1.0)*sj0);
IkReal x4452=((1.0)*gconst100);
CheckValue<IkReal> x4453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4452)))),-1);
if(!x4453.valid){
continue;
}
CheckValue<IkReal> x4454 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4451))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4452))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4453.value)))+(x4454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4455=IKsin(j4);
IkReal x4456=IKcos(j4);
IkReal x4457=(gconst101*r20);
IkReal x4458=(gconst101*r10);
IkReal x4459=((1.0)*cj2);
IkReal x4460=(gconst101*r00);
IkReal x4461=((1.0)*sj0);
IkReal x4462=(cj1*sj2);
IkReal x4463=((1.0)*x4456);
IkReal x4464=((1.0)*x4455);
IkReal x4465=(gconst100*x4455);
IkReal x4466=(gconst100*x4456);
evalcond[0]=((((-1.0)*r22*x4463))+(((-1.0)*x4457*x4464))+((r21*x4465)));
evalcond[1]=(cj0+(((-1.0)*x4458*x4464))+((r11*x4465))+(((-1.0)*r12*x4463)));
evalcond[2]=(((r01*x4465))+(((-1.0)*r02*x4463))+(((-1.0)*x4461))+(((-1.0)*x4460*x4464)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4459))+(((-1.0)*x4457*x4463))+((r21*x4466))+((r22*x4455)));
evalcond[4]=((((-1.0)*cj0*sj1*x4459))+((r01*x4466))+((r02*x4455))+(((-1.0)*x4460*x4463))+(((-1.0)*cj0*x4462)));
evalcond[5]=((((-1.0)*x4458*x4463))+((r11*x4466))+((r12*x4455))+(((-1.0)*sj0*sj1*x4459))+(((-1.0)*x4461*x4462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4467=((1.0)*gconst101);
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4467))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
CheckValue<IkReal> x4469=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4467)))),-1);
if(!x4469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4468.value)+(((1.5707963267949)*(x4469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4470=IKsin(j4);
IkReal x4471=IKcos(j4);
IkReal x4472=(gconst101*r20);
IkReal x4473=(gconst101*r10);
IkReal x4474=((1.0)*cj2);
IkReal x4475=(gconst101*r00);
IkReal x4476=((1.0)*sj0);
IkReal x4477=(cj1*sj2);
IkReal x4478=((1.0)*x4471);
IkReal x4479=((1.0)*x4470);
IkReal x4480=(gconst100*x4470);
IkReal x4481=(gconst100*x4471);
evalcond[0]=(((r21*x4480))+(((-1.0)*x4472*x4479))+(((-1.0)*r22*x4478)));
evalcond[1]=(((r11*x4480))+(((-1.0)*r12*x4478))+cj0+(((-1.0)*x4473*x4479)));
evalcond[2]=((((-1.0)*x4476))+(((-1.0)*x4475*x4479))+((r01*x4480))+(((-1.0)*r02*x4478)));
evalcond[3]=((((-1.0)*cj1*x4474))+((r21*x4481))+(((-1.0)*x4472*x4478))+((sj1*sj2))+((r22*x4470)));
evalcond[4]=((((-1.0)*cj0*sj1*x4474))+(((-1.0)*cj0*x4477))+(((-1.0)*x4475*x4478))+((r02*x4470))+((r01*x4481)));
evalcond[5]=(((r11*x4481))+(((-1.0)*x4473*x4478))+(((-1.0)*x4476*x4477))+(((-1.0)*sj0*sj1*x4474))+((r12*x4470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4482=((1.0)*gconst101);
CheckValue<IkReal> x4483=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4482)))),-1);
if(!x4483.valid){
continue;
}
CheckValue<IkReal> x4484 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4483.value)))+(x4484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4485=IKsin(j4);
IkReal x4486=IKcos(j4);
IkReal x4487=(gconst101*r20);
IkReal x4488=(gconst101*r10);
IkReal x4489=((1.0)*cj2);
IkReal x4490=(gconst101*r00);
IkReal x4491=((1.0)*sj0);
IkReal x4492=(cj1*sj2);
IkReal x4493=((1.0)*x4486);
IkReal x4494=((1.0)*x4485);
IkReal x4495=(gconst100*x4485);
IkReal x4496=(gconst100*x4486);
evalcond[0]=(((r21*x4495))+(((-1.0)*r22*x4493))+(((-1.0)*x4487*x4494)));
evalcond[1]=(cj0+(((-1.0)*x4488*x4494))+((r11*x4495))+(((-1.0)*r12*x4493)));
evalcond[2]=((((-1.0)*r02*x4493))+(((-1.0)*x4490*x4494))+(((-1.0)*x4491))+((r01*x4495)));
evalcond[3]=((((-1.0)*cj1*x4489))+((sj1*sj2))+((r21*x4496))+((r22*x4485))+(((-1.0)*x4487*x4493)));
evalcond[4]=((((-1.0)*cj0*sj1*x4489))+(((-1.0)*cj0*x4492))+((r02*x4485))+(((-1.0)*x4490*x4493))+((r01*x4496)));
evalcond[5]=((((-1.0)*x4488*x4493))+(((-1.0)*sj0*sj1*x4489))+((r11*x4496))+(((-1.0)*x4491*x4492))+((r12*x4485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4497=((-1.0)*r10);
IkReal x4499 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4499)==0){
continue;
}
IkReal x4498=pow(x4499,-0.5);
CheckValue<IkReal> x4500 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4497),IKFAST_ATAN2_MAGTHRESH);
if(!x4500.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4500.value));
IkReal gconst103=(r11*x4498);
IkReal gconst104=(x4497*x4498);
CheckValue<IkReal> x4501 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4501.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4501.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4502=((-1.0)*r10);
IkReal x4503=x4498;
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4502),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
IkReal x4504=((-1.0)*(x4505.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4504;
IkReal gconst102=x4504;
IkReal gconst103=(r11*x4503);
IkReal gconst104=(x4502*x4503);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4506=((1.0)*sj0);
IkReal x4507=((1.0)*gconst103);
CheckValue<IkReal> x4508 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4506)))),IkReal(((((-1.0)*gconst103*r11*x4506))+(((-1.0)*cj0*r01*x4507))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4508.valid){
continue;
}
CheckValue<IkReal> x4509=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4507)))),-1);
if(!x4509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4508.value)+(((1.5707963267949)*(x4509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4510=IKsin(j4);
IkReal x4511=IKcos(j4);
IkReal x4512=(gconst103*r11);
IkReal x4513=((1.0)*cj2);
IkReal x4514=((1.0)*sj0);
IkReal x4515=(cj1*sj2);
IkReal x4516=((1.0)*x4511);
IkReal x4517=(gconst103*x4511);
IkReal x4518=(gconst103*x4510);
IkReal x4519=((1.0)*gconst104*x4510);
evalcond[0]=(((r21*x4518))+(((-1.0)*r20*x4519))+(((-1.0)*r22*x4516)));
evalcond[1]=(cj0+((x4510*x4512))+(((-1.0)*r12*x4516))+(((-1.0)*r10*x4519)));
evalcond[2]=((((-1.0)*r02*x4516))+((r01*x4518))+(((-1.0)*r00*x4519))+(((-1.0)*x4514)));
evalcond[3]=((((-1.0)*cj1*x4513))+((sj1*sj2))+(((-1.0)*gconst104*r20*x4516))+((r21*x4517))+((r22*x4510)));
evalcond[4]=(((r02*x4510))+(((-1.0)*gconst104*r00*x4516))+(((-1.0)*cj0*x4515))+(((-1.0)*cj0*sj1*x4513))+((r01*x4517)));
evalcond[5]=(((x4511*x4512))+(((-1.0)*sj0*sj1*x4513))+(((-1.0)*gconst104*r10*x4516))+((r12*x4510))+(((-1.0)*x4514*x4515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4520=((1.0)*gconst104);
CheckValue<IkReal> x4521 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4520))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4521.valid){
continue;
}
CheckValue<IkReal> x4522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4520))+(((-1.0)*gconst103*r00)))),-1);
if(!x4522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4521.value)+(((1.5707963267949)*(x4522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4523=IKsin(j4);
IkReal x4524=IKcos(j4);
IkReal x4525=(gconst103*r11);
IkReal x4526=((1.0)*cj2);
IkReal x4527=((1.0)*sj0);
IkReal x4528=(cj1*sj2);
IkReal x4529=((1.0)*x4524);
IkReal x4530=(gconst103*x4524);
IkReal x4531=(gconst103*x4523);
IkReal x4532=((1.0)*gconst104*x4523);
evalcond[0]=(((r21*x4531))+(((-1.0)*r20*x4532))+(((-1.0)*r22*x4529)));
evalcond[1]=((((-1.0)*r12*x4529))+((x4523*x4525))+cj0+(((-1.0)*r10*x4532)));
evalcond[2]=(((r01*x4531))+(((-1.0)*r00*x4532))+(((-1.0)*x4527))+(((-1.0)*r02*x4529)));
evalcond[3]=((((-1.0)*gconst104*r20*x4529))+((r21*x4530))+((sj1*sj2))+(((-1.0)*cj1*x4526))+((r22*x4523)));
evalcond[4]=((((-1.0)*cj0*sj1*x4526))+((r01*x4530))+((r02*x4523))+(((-1.0)*cj0*x4528))+(((-1.0)*gconst104*r00*x4529)));
evalcond[5]=(((r12*x4523))+((x4524*x4525))+(((-1.0)*x4527*x4528))+(((-1.0)*sj0*sj1*x4526))+(((-1.0)*gconst104*r10*x4529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4533=((-1.0)*r11);
IkReal x4535 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4535)==0){
continue;
}
IkReal x4534=pow(x4535,-0.5);
CheckValue<IkReal> x4536 = IKatan2WithCheck(IkReal(x4533),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4536.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4536.value))));
IkReal gconst106=(x4533*x4534);
IkReal gconst107=((1.0)*r10*x4534);
CheckValue<IkReal> x4537 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4537.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4537.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4538=((-1.0)*r11);
CheckValue<IkReal> x4541 = IKatan2WithCheck(IkReal(x4538),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4541.valid){
continue;
}
IkReal x4539=((1.0)*(x4541.value));
IkReal x4540=x4534;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4539)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4539)));
IkReal gconst106=(x4538*x4540);
IkReal gconst107=((1.0)*r10*x4540);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4542=((-1.0)*r11);
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(x4542),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
IkReal x4543=((1.0)*(x4545.value));
IkReal x4544=x4534;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4543)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4543)));
IkReal gconst106=(x4542*x4544);
IkReal gconst107=((1.0)*r10*x4544);
IkReal x4546=r12*r12;
IkReal x4547=((1.0)*sj0);
IkReal x4548=(cj0*r02);
IkReal x4549=x4534;
j4eval[0]=((IKabs((((sj0*x4546*x4549))+(((-1.0)*x4547*x4549))+((r12*x4548*x4549)))))+(IKabs(((((-1.0)*r12*x4547))+(((-1.0)*x4548))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4550=((-1.0)*r11);
CheckValue<IkReal> x4553 = IKatan2WithCheck(IkReal(x4550),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4553.valid){
continue;
}
IkReal x4551=((1.0)*(x4553.value));
IkReal x4552=x4534;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4551)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4551)));
IkReal gconst106=(x4550*x4552);
IkReal gconst107=((1.0)*r10*x4552);
IkReal x4554=r12*r12;
IkReal x4555=((1.0)+(((-1.0)*x4554)));
IkReal x4556=(r22*sj1*sj2);
IkReal x4557=(cj1*cj2*r22);
CheckValue<IkReal> x4564=IKPowWithIntegerCheck(x4555,-1);
if(!x4564.valid){
continue;
}
IkReal x4558=x4564.value;
CheckValue<IkReal> x4565=IKPowWithIntegerCheck(((-1.0)+x4554),-1);
if(!x4565.valid){
continue;
}
IkReal x4559=x4565.value;
IkReal x4560=((1.0)*x4558);
if((x4555) < -0.00001)
continue;
IkReal x4561=IKsqrt(x4555);
IkReal x4562=(r12*x4559*x4561);
IkReal x4563=((((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x4558))+(((-1.0)*x4560*(r11*r11)*(r21*r21)))+(((-1.0)*x4560*(r10*r10)*(r20*r20))));
j4eval[0]=x4563;
j4eval[1]=((IKabs((x4556+(((-1.0)*x4557)))))+(IKabs((((x4557*x4562))+(((-1.0)*x4556*x4562))))));
j4eval[2]=IKsign(x4563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4566=(sj1*sj2);
IkReal x4567=(gconst106*r21);
IkReal x4568=(gconst107*r20);
IkReal x4569=(cj1*cj2);
CheckValue<IkReal> x4570=IKPowWithIntegerCheck(IKsign(((((2.0)*x4567*x4568))+(((-1.0)*(x4568*x4568)))+(((-1.0)*(x4567*x4567)))+(((-1.0)*(r22*r22))))),-1);
if(!x4570.valid){
continue;
}
CheckValue<IkReal> x4571 = IKatan2WithCheck(IkReal((((r22*x4566))+(((-1.0)*r22*x4569)))),IkReal((((x4566*x4567))+(((-1.0)*x4566*x4568))+(((-1.0)*x4567*x4569))+((x4568*x4569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4570.value)))+(x4571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4572=IKsin(j4);
IkReal x4573=IKcos(j4);
IkReal x4574=(gconst107*r10);
IkReal x4575=(gconst107*r00);
IkReal x4576=((1.0)*cj2);
IkReal x4577=(gconst107*r20);
IkReal x4578=((1.0)*sj0);
IkReal x4579=(cj1*sj2);
IkReal x4580=((1.0)*x4573);
IkReal x4581=(gconst106*x4573);
IkReal x4582=(gconst106*x4572);
IkReal x4583=((1.0)*x4572);
evalcond[0]=(((r21*x4582))+(((-1.0)*r22*x4580))+(((-1.0)*x4577*x4583)));
evalcond[1]=(cj0+((r11*x4582))+(((-1.0)*x4574*x4583))+(((-1.0)*r12*x4580)));
evalcond[2]=((((-1.0)*x4575*x4583))+(((-1.0)*x4578))+(((-1.0)*r02*x4580))+((r01*x4582)));
evalcond[3]=(((r21*x4581))+(((-1.0)*cj1*x4576))+((r22*x4572))+((sj1*sj2))+(((-1.0)*x4577*x4580)));
evalcond[4]=((((-1.0)*x4575*x4580))+((r02*x4572))+(((-1.0)*cj0*x4579))+(((-1.0)*cj0*sj1*x4576))+((r01*x4581)));
evalcond[5]=(((r12*x4572))+(((-1.0)*x4578*x4579))+((r11*x4581))+(((-1.0)*sj0*sj1*x4576))+(((-1.0)*x4574*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4584=((1.0)*sj0);
IkReal x4585=((1.0)*gconst106);
CheckValue<IkReal> x4586=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4585)))),-1);
if(!x4586.valid){
continue;
}
CheckValue<IkReal> x4587 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4584)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4585))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x4584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4586.value)))+(x4587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4588=IKsin(j4);
IkReal x4589=IKcos(j4);
IkReal x4590=(gconst107*r10);
IkReal x4591=(gconst107*r00);
IkReal x4592=((1.0)*cj2);
IkReal x4593=(gconst107*r20);
IkReal x4594=((1.0)*sj0);
IkReal x4595=(cj1*sj2);
IkReal x4596=((1.0)*x4589);
IkReal x4597=(gconst106*x4589);
IkReal x4598=(gconst106*x4588);
IkReal x4599=((1.0)*x4588);
evalcond[0]=(((r21*x4598))+(((-1.0)*r22*x4596))+(((-1.0)*x4593*x4599)));
evalcond[1]=(cj0+((r11*x4598))+(((-1.0)*r12*x4596))+(((-1.0)*x4590*x4599)));
evalcond[2]=((((-1.0)*x4594))+(((-1.0)*x4591*x4599))+(((-1.0)*r02*x4596))+((r01*x4598)));
evalcond[3]=(((r21*x4597))+((r22*x4588))+((sj1*sj2))+(((-1.0)*x4593*x4596))+(((-1.0)*cj1*x4592)));
evalcond[4]=(((r02*x4588))+(((-1.0)*x4591*x4596))+(((-1.0)*cj0*x4595))+(((-1.0)*cj0*sj1*x4592))+((r01*x4597)));
evalcond[5]=((((-1.0)*x4594*x4595))+((r11*x4597))+(((-1.0)*sj0*sj1*x4592))+((r12*x4588))+(((-1.0)*x4590*x4596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4600=((1.0)*gconst107);
CheckValue<IkReal> x4601 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4600))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4601.valid){
continue;
}
CheckValue<IkReal> x4602=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4600)))),-1);
if(!x4602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4601.value)+(((1.5707963267949)*(x4602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4603=IKsin(j4);
IkReal x4604=IKcos(j4);
IkReal x4605=(gconst107*r10);
IkReal x4606=(gconst107*r00);
IkReal x4607=((1.0)*cj2);
IkReal x4608=(gconst107*r20);
IkReal x4609=((1.0)*sj0);
IkReal x4610=(cj1*sj2);
IkReal x4611=((1.0)*x4604);
IkReal x4612=(gconst106*x4604);
IkReal x4613=(gconst106*x4603);
IkReal x4614=((1.0)*x4603);
evalcond[0]=(((r21*x4613))+(((-1.0)*x4608*x4614))+(((-1.0)*r22*x4611)));
evalcond[1]=(cj0+((r11*x4613))+(((-1.0)*r12*x4611))+(((-1.0)*x4605*x4614)));
evalcond[2]=((((-1.0)*r02*x4611))+(((-1.0)*x4609))+(((-1.0)*x4606*x4614))+((r01*x4613)));
evalcond[3]=(((r21*x4612))+(((-1.0)*cj1*x4607))+((sj1*sj2))+(((-1.0)*x4608*x4611))+((r22*x4603)));
evalcond[4]=((((-1.0)*cj0*sj1*x4607))+(((-1.0)*cj0*x4610))+(((-1.0)*x4606*x4611))+((r01*x4612))+((r02*x4603)));
evalcond[5]=(((r12*x4603))+(((-1.0)*sj0*sj1*x4607))+((r11*x4612))+(((-1.0)*x4605*x4611))+(((-1.0)*x4609*x4610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4615=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4615;
j4eval[1]=IKsign(x4615);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4616=((1.0)*cj5);
IkReal x4617=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4616)));
j4eval[0]=x4617;
j4eval[1]=((IKabs(((((-1.0)*r20*x4616))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4617);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4618=(sj1*sj2);
IkReal x4619=(cj5*r10);
IkReal x4620=(r11*sj5);
IkReal x4621=(cj1*cj2);
IkReal x4622=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4622;
j4eval[1]=((IKabs(((((-1.0)*x4618*x4619))+((x4619*x4621))+(((-1.0)*x4620*x4621))+((x4618*x4620)))))+(IKabs((((r12*x4621))+(((-1.0)*r12*x4618))))));
j4eval[2]=IKsign(x4622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4623=(sj1*sj2);
IkReal x4624=(cj5*r10);
IkReal x4625=(r11*sj5);
IkReal x4626=(cj1*cj2);
CheckValue<IkReal> x4627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4627.valid){
continue;
}
CheckValue<IkReal> x4628 = IKatan2WithCheck(IkReal((((x4624*x4626))+((x4623*x4625))+(((-1.0)*x4625*x4626))+(((-1.0)*x4623*x4624)))),IkReal((((r12*x4626))+(((-1.0)*r12*x4623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4627.value)))+(x4628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4629=IKcos(j4);
IkReal x4630=IKsin(j4);
IkReal x4631=(cj5*r00);
IkReal x4632=(cj5*r10);
IkReal x4633=(r21*sj5);
IkReal x4634=((1.0)*cj2);
IkReal x4635=(cj5*r20);
IkReal x4636=((1.0)*x4629);
IkReal x4637=((1.0)*x4630);
IkReal x4638=(sj5*x4630);
IkReal x4639=(sj5*x4629);
evalcond[0]=(((r12*x4630))+((r11*x4639))+(((-1.0)*x4632*x4636)));
evalcond[1]=(((x4630*x4633))+(((-1.0)*x4635*x4637))+(((-1.0)*r22*x4636)));
evalcond[2]=(((r01*x4638))+(((-1.0)*r02*x4636))+(((-1.0)*x4631*x4637)));
evalcond[3]=((1.0)+((r11*x4638))+(((-1.0)*r12*x4636))+(((-1.0)*x4632*x4637)));
evalcond[4]=((((-1.0)*cj1*x4634))+(((-1.0)*x4635*x4636))+((sj1*sj2))+((x4629*x4633))+((r22*x4630)));
evalcond[5]=(((r01*x4639))+(((-1.0)*cj1*sj2))+(((-1.0)*x4631*x4636))+((r02*x4630))+(((-1.0)*sj1*x4634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4640=((1.0)*cj5);
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
CheckValue<IkReal> x4642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4640)))),-1);
if(!x4642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4641.value)+(((1.5707963267949)*(x4642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4643=IKcos(j4);
IkReal x4644=IKsin(j4);
IkReal x4645=(cj5*r00);
IkReal x4646=(cj5*r10);
IkReal x4647=(r21*sj5);
IkReal x4648=((1.0)*cj2);
IkReal x4649=(cj5*r20);
IkReal x4650=((1.0)*x4643);
IkReal x4651=((1.0)*x4644);
IkReal x4652=(sj5*x4644);
IkReal x4653=(sj5*x4643);
evalcond[0]=(((r11*x4653))+((r12*x4644))+(((-1.0)*x4646*x4650)));
evalcond[1]=((((-1.0)*x4649*x4651))+(((-1.0)*r22*x4650))+((x4644*x4647)));
evalcond[2]=((((-1.0)*r02*x4650))+(((-1.0)*x4645*x4651))+((r01*x4652)));
evalcond[3]=((1.0)+((r11*x4652))+(((-1.0)*x4646*x4651))+(((-1.0)*r12*x4650)));
evalcond[4]=((((-1.0)*cj1*x4648))+(((-1.0)*x4649*x4650))+((sj1*sj2))+((r22*x4644))+((x4643*x4647)));
evalcond[5]=(((r02*x4644))+(((-1.0)*cj1*sj2))+(((-1.0)*x4645*x4650))+((r01*x4653))+(((-1.0)*sj1*x4648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4654.valid){
continue;
}
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4654.value)))+(x4655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4656=IKcos(j4);
IkReal x4657=IKsin(j4);
IkReal x4658=(cj5*r00);
IkReal x4659=(cj5*r10);
IkReal x4660=(r21*sj5);
IkReal x4661=((1.0)*cj2);
IkReal x4662=(cj5*r20);
IkReal x4663=((1.0)*x4656);
IkReal x4664=((1.0)*x4657);
IkReal x4665=(sj5*x4657);
IkReal x4666=(sj5*x4656);
evalcond[0]=(((r12*x4657))+(((-1.0)*x4659*x4663))+((r11*x4666)));
evalcond[1]=((((-1.0)*x4662*x4664))+(((-1.0)*r22*x4663))+((x4657*x4660)));
evalcond[2]=((((-1.0)*x4658*x4664))+((r01*x4665))+(((-1.0)*r02*x4663)));
evalcond[3]=((1.0)+(((-1.0)*x4659*x4664))+((r11*x4665))+(((-1.0)*r12*x4663)));
evalcond[4]=((((-1.0)*x4662*x4663))+((sj1*sj2))+((r22*x4657))+((x4656*x4660))+(((-1.0)*cj1*x4661)));
evalcond[5]=((((-1.0)*sj1*x4661))+(((-1.0)*x4658*x4663))+(((-1.0)*cj1*sj2))+((r01*x4666))+((r02*x4657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4667=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4667;
j4eval[1]=IKsign(x4667);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4668=((1.0)*cj5);
IkReal x4669=((((-1.0)*r21*x4668))+(((-1.0)*r20*sj5)));
j4eval[0]=x4669;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x4668)))))+(IKabs(r02)));
j4eval[2]=IKsign(x4669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4670=cj5*cj5;
IkReal x4671=r11*r11;
IkReal x4672=(r11*sj5);
IkReal x4673=(cj5*r10);
IkReal x4674=((r12*r12)+x4671+(((-2.0)*x4672*x4673))+(((-1.0)*x4670*x4671))+((x4670*(r10*r10))));
j4eval[0]=x4674;
j4eval[1]=IKsign(x4674);
j4eval[2]=((IKabs(((((-1.0)*x4673))+x4672)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4675=cj5*cj5;
IkReal x4676=r11*r11;
IkReal x4677=(cj5*r10);
IkReal x4678=(r11*sj5);
CheckValue<IkReal> x4679=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4676+(((-1.0)*x4675*x4676))+(((-2.0)*x4677*x4678))+((x4675*(r10*r10))))),-1);
if(!x4679.valid){
continue;
}
CheckValue<IkReal> x4680 = IKatan2WithCheck(IkReal(((((-1.0)*x4677))+x4678)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4679.value)))+(x4680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4681=IKcos(j4);
IkReal x4682=IKsin(j4);
IkReal x4683=(cj5*r00);
IkReal x4684=(cj5*r10);
IkReal x4685=(r21*sj5);
IkReal x4686=(cj5*r20);
IkReal x4687=((1.0)*x4681);
IkReal x4688=((1.0)*x4682);
IkReal x4689=(sj5*x4682);
IkReal x4690=(sj5*x4681);
evalcond[0]=((((-1.0)*x4684*x4687))+((r12*x4682))+((r11*x4690)));
evalcond[1]=(((x4682*x4685))+(((-1.0)*x4686*x4688))+(((-1.0)*r22*x4687)));
evalcond[2]=((((-1.0)*x4683*x4688))+(((-1.0)*r02*x4687))+((r01*x4689)));
evalcond[3]=((-1.0)+(((-1.0)*x4684*x4688))+((r11*x4689))+(((-1.0)*r12*x4687)));
evalcond[4]=(((cj2*sj1))+((r02*x4682))+((cj1*sj2))+(((-1.0)*x4683*x4687))+((r01*x4690)));
evalcond[5]=((((-1.0)*x4686*x4687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4682))+((x4681*x4685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4691=((1.0)*cj5);
CheckValue<IkReal> x4692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4691))+(((-1.0)*r20*sj5)))),-1);
if(!x4692.valid){
continue;
}
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4692.value)))+(x4693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4694=IKcos(j4);
IkReal x4695=IKsin(j4);
IkReal x4696=(cj5*r00);
IkReal x4697=(cj5*r10);
IkReal x4698=(r21*sj5);
IkReal x4699=(cj5*r20);
IkReal x4700=((1.0)*x4694);
IkReal x4701=((1.0)*x4695);
IkReal x4702=(sj5*x4695);
IkReal x4703=(sj5*x4694);
evalcond[0]=((((-1.0)*x4697*x4700))+((r12*x4695))+((r11*x4703)));
evalcond[1]=((((-1.0)*r22*x4700))+((x4695*x4698))+(((-1.0)*x4699*x4701)));
evalcond[2]=((((-1.0)*x4696*x4701))+(((-1.0)*r02*x4700))+((r01*x4702)));
evalcond[3]=((-1.0)+(((-1.0)*x4697*x4701))+(((-1.0)*r12*x4700))+((r11*x4702)));
evalcond[4]=(((cj2*sj1))+((r02*x4695))+(((-1.0)*x4696*x4700))+((cj1*sj2))+((r01*x4703)));
evalcond[5]=(((x4694*x4698))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4695))+(((-1.0)*x4699*x4700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4704 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4704.valid){
continue;
}
CheckValue<IkReal> x4705=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4704.value)+(((1.5707963267949)*(x4705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4706=IKcos(j4);
IkReal x4707=IKsin(j4);
IkReal x4708=(cj5*r00);
IkReal x4709=(cj5*r10);
IkReal x4710=(r21*sj5);
IkReal x4711=(cj5*r20);
IkReal x4712=((1.0)*x4706);
IkReal x4713=((1.0)*x4707);
IkReal x4714=(sj5*x4707);
IkReal x4715=(sj5*x4706);
evalcond[0]=((((-1.0)*x4709*x4712))+((r11*x4715))+((r12*x4707)));
evalcond[1]=((((-1.0)*r22*x4712))+(((-1.0)*x4711*x4713))+((x4707*x4710)));
evalcond[2]=((((-1.0)*r02*x4712))+((r01*x4714))+(((-1.0)*x4708*x4713)));
evalcond[3]=((-1.0)+(((-1.0)*x4709*x4713))+(((-1.0)*r12*x4712))+((r11*x4714)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4715))+(((-1.0)*x4708*x4712))+((r02*x4707)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4711*x4712))+((x4706*x4710))+((r22*x4707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4716=((-1.0)*r00);
IkReal x4718 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4718)==0){
continue;
}
IkReal x4717=pow(x4718,-0.5);
CheckValue<IkReal> x4719 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4716),IKFAST_ATAN2_MAGTHRESH);
if(!x4719.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4719.value));
IkReal gconst109=(r01*x4717);
IkReal gconst110=(x4716*x4717);
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4720.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4721=((-1.0)*r00);
IkReal x4722=x4717;
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4721),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
IkReal x4723=((-1.0)*(x4724.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4723;
IkReal gconst108=x4723;
IkReal gconst109=(r01*x4722);
IkReal gconst110=(x4721*x4722);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4725=((1.0)*sj0);
IkReal x4726=((1.0)*gconst109);
CheckValue<IkReal> x4727 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4725))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4726))+(((-1.0)*gconst109*r11*x4725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4727.valid){
continue;
}
CheckValue<IkReal> x4728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4726))+(((-1.0)*gconst110*r21)))),-1);
if(!x4728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4727.value)+(((1.5707963267949)*(x4728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4729=IKsin(j4);
IkReal x4730=IKcos(j4);
IkReal x4731=(gconst109*r21);
IkReal x4732=((1.0)*cj2);
IkReal x4733=((1.0)*sj0);
IkReal x4734=(cj1*sj2);
IkReal x4735=((1.0)*x4730);
IkReal x4736=(gconst109*x4729);
IkReal x4737=(gconst109*x4730);
IkReal x4738=((1.0)*gconst110*x4729);
evalcond[0]=(((x4729*x4731))+(((-1.0)*r20*x4738))+(((-1.0)*r22*x4735)));
evalcond[1]=(((r11*x4736))+cj0+(((-1.0)*r10*x4738))+(((-1.0)*r12*x4735)));
evalcond[2]=((((-1.0)*x4733))+((r01*x4736))+(((-1.0)*r02*x4735))+(((-1.0)*r00*x4738)));
evalcond[3]=(((x4730*x4731))+(((-1.0)*cj1*x4732))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4735))+((r22*x4729)));
evalcond[4]=((((-1.0)*cj0*sj1*x4732))+((r02*x4729))+(((-1.0)*gconst110*r00*x4735))+(((-1.0)*cj0*x4734))+((r01*x4737)));
evalcond[5]=(((r11*x4737))+(((-1.0)*gconst110*r10*x4735))+(((-1.0)*sj0*sj1*x4732))+(((-1.0)*x4733*x4734))+((r12*x4729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4739=((1.0)*gconst110);
CheckValue<IkReal> x4740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4739))+(((-1.0)*gconst109*r10)))),-1);
if(!x4740.valid){
continue;
}
CheckValue<IkReal> x4741 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4740.value)))+(x4741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4742=IKsin(j4);
IkReal x4743=IKcos(j4);
IkReal x4744=(gconst109*r21);
IkReal x4745=((1.0)*cj2);
IkReal x4746=((1.0)*sj0);
IkReal x4747=(cj1*sj2);
IkReal x4748=((1.0)*x4743);
IkReal x4749=(gconst109*x4742);
IkReal x4750=(gconst109*x4743);
IkReal x4751=((1.0)*gconst110*x4742);
evalcond[0]=(((x4742*x4744))+(((-1.0)*r20*x4751))+(((-1.0)*r22*x4748)));
evalcond[1]=(((r11*x4749))+(((-1.0)*r12*x4748))+cj0+(((-1.0)*r10*x4751)));
evalcond[2]=((((-1.0)*r00*x4751))+((r01*x4749))+(((-1.0)*x4746))+(((-1.0)*r02*x4748)));
evalcond[3]=((((-1.0)*cj1*x4745))+((sj1*sj2))+((x4743*x4744))+((r22*x4742))+(((-1.0)*gconst110*r20*x4748)));
evalcond[4]=(((r01*x4750))+(((-1.0)*cj0*x4747))+(((-1.0)*gconst110*r00*x4748))+((r02*x4742))+(((-1.0)*cj0*sj1*x4745)));
evalcond[5]=((((-1.0)*gconst110*r10*x4748))+((r11*x4750))+((r12*x4742))+(((-1.0)*x4746*x4747))+(((-1.0)*sj0*sj1*x4745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4752=((-1.0)*r01);
IkReal x4754 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4754)==0){
continue;
}
IkReal x4753=pow(x4754,-0.5);
CheckValue<IkReal> x4755 = IKatan2WithCheck(IkReal(x4752),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4755.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4755.value))));
IkReal gconst112=(x4752*x4753);
IkReal gconst113=((1.0)*r00*x4753);
CheckValue<IkReal> x4756 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4756.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4756.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4757=((-1.0)*r01);
CheckValue<IkReal> x4760 = IKatan2WithCheck(IkReal(x4757),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4760.valid){
continue;
}
IkReal x4758=((1.0)*(x4760.value));
IkReal x4759=x4753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4758)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4758)));
IkReal gconst112=(x4757*x4759);
IkReal gconst113=((1.0)*r00*x4759);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4761=((-1.0)*r01);
CheckValue<IkReal> x4764 = IKatan2WithCheck(IkReal(x4761),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4764.valid){
continue;
}
IkReal x4762=((1.0)*(x4764.value));
IkReal x4763=x4753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4762)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4762)));
IkReal gconst112=(x4761*x4763);
IkReal gconst113=((1.0)*r00*x4763);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4765=((-1.0)*r01);
CheckValue<IkReal> x4768 = IKatan2WithCheck(IkReal(x4765),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4768.valid){
continue;
}
IkReal x4766=((1.0)*(x4768.value));
IkReal x4767=x4753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4766)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4766)));
IkReal gconst112=(x4765*x4767);
IkReal gconst113=((1.0)*r00*x4767);
IkReal x4769=r02*r02;
IkReal x4770=(r12*sj0);
IkReal x4771=((1.0)*cj0);
IkReal x4772=x4753;
j4eval[0]=((IKabs((((cj0*x4769*x4772))+(((-1.0)*x4771*x4772))+((r02*x4770*x4772)))))+(IKabs(((((-1.0)*x4770))+(((-1.0)*r02*x4771))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4773=((1.0)*sj0);
IkReal x4774=((1.0)*gconst112);
CheckValue<IkReal> x4775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4774))+(((-1.0)*gconst113*r21)))),-1);
if(!x4775.valid){
continue;
}
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4773))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x4773))+(((-1.0)*cj0*r01*x4774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4775.value)))+(x4776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4777=IKsin(j4);
IkReal x4778=IKcos(j4);
IkReal x4779=(gconst113*r20);
IkReal x4780=(gconst112*r21);
IkReal x4781=((1.0)*cj2);
IkReal x4782=(gconst113*r00);
IkReal x4783=(gconst113*r10);
IkReal x4784=((1.0)*sj0);
IkReal x4785=(cj1*sj2);
IkReal x4786=((1.0)*x4778);
IkReal x4787=((1.0)*x4777);
IkReal x4788=(gconst112*x4778);
IkReal x4789=(gconst112*x4777);
evalcond[0]=((((-1.0)*x4779*x4787))+((x4777*x4780))+(((-1.0)*r22*x4786)));
evalcond[1]=(cj0+(((-1.0)*x4783*x4787))+((r11*x4789))+(((-1.0)*r12*x4786)));
evalcond[2]=(((r01*x4789))+(((-1.0)*x4782*x4787))+(((-1.0)*r02*x4786))+(((-1.0)*x4784)));
evalcond[3]=((((-1.0)*x4779*x4786))+((x4778*x4780))+((sj1*sj2))+(((-1.0)*cj1*x4781))+((r22*x4777)));
evalcond[4]=((((-1.0)*cj0*sj1*x4781))+(((-1.0)*cj0*x4785))+((r01*x4788))+(((-1.0)*x4782*x4786))+((r02*x4777)));
evalcond[5]=((((-1.0)*sj0*sj1*x4781))+((r12*x4777))+(((-1.0)*x4783*x4786))+((r11*x4788))+(((-1.0)*x4784*x4785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4790=((1.0)*gconst113);
CheckValue<IkReal> x4791 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4791.valid){
continue;
}
CheckValue<IkReal> x4792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4790))+(((-1.0)*gconst112*r10)))),-1);
if(!x4792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4791.value)+(((1.5707963267949)*(x4792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4793=IKsin(j4);
IkReal x4794=IKcos(j4);
IkReal x4795=(gconst113*r20);
IkReal x4796=(gconst112*r21);
IkReal x4797=((1.0)*cj2);
IkReal x4798=(gconst113*r00);
IkReal x4799=(gconst113*r10);
IkReal x4800=((1.0)*sj0);
IkReal x4801=(cj1*sj2);
IkReal x4802=((1.0)*x4794);
IkReal x4803=((1.0)*x4793);
IkReal x4804=(gconst112*x4794);
IkReal x4805=(gconst112*x4793);
evalcond[0]=((((-1.0)*r22*x4802))+((x4793*x4796))+(((-1.0)*x4795*x4803)));
evalcond[1]=(cj0+(((-1.0)*x4799*x4803))+(((-1.0)*r12*x4802))+((r11*x4805)));
evalcond[2]=(((r01*x4805))+(((-1.0)*x4798*x4803))+(((-1.0)*r02*x4802))+(((-1.0)*x4800)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4797))+(((-1.0)*x4795*x4802))+((x4794*x4796))+((r22*x4793)));
evalcond[4]=(((r01*x4804))+(((-1.0)*x4798*x4802))+((r02*x4793))+(((-1.0)*cj0*sj1*x4797))+(((-1.0)*cj0*x4801)));
evalcond[5]=((((-1.0)*x4800*x4801))+(((-1.0)*x4799*x4802))+(((-1.0)*sj0*sj1*x4797))+((r12*x4793))+((r11*x4804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4806=((1.0)*gconst113);
CheckValue<IkReal> x4807 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4807.valid){
continue;
}
CheckValue<IkReal> x4808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4806))+(((-1.0)*gconst112*r00)))),-1);
if(!x4808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4807.value)+(((1.5707963267949)*(x4808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4809=IKsin(j4);
IkReal x4810=IKcos(j4);
IkReal x4811=(gconst113*r20);
IkReal x4812=(gconst112*r21);
IkReal x4813=((1.0)*cj2);
IkReal x4814=(gconst113*r00);
IkReal x4815=(gconst113*r10);
IkReal x4816=((1.0)*sj0);
IkReal x4817=(cj1*sj2);
IkReal x4818=((1.0)*x4810);
IkReal x4819=((1.0)*x4809);
IkReal x4820=(gconst112*x4810);
IkReal x4821=(gconst112*x4809);
evalcond[0]=((((-1.0)*x4811*x4819))+((x4809*x4812))+(((-1.0)*r22*x4818)));
evalcond[1]=((((-1.0)*x4815*x4819))+cj0+((r11*x4821))+(((-1.0)*r12*x4818)));
evalcond[2]=((((-1.0)*x4814*x4819))+(((-1.0)*x4816))+(((-1.0)*r02*x4818))+((r01*x4821)));
evalcond[3]=((((-1.0)*x4811*x4818))+((sj1*sj2))+(((-1.0)*cj1*x4813))+((x4810*x4812))+((r22*x4809)));
evalcond[4]=(((r02*x4809))+(((-1.0)*x4814*x4818))+(((-1.0)*cj0*x4817))+(((-1.0)*cj0*sj1*x4813))+((r01*x4820)));
evalcond[5]=((((-1.0)*x4815*x4818))+((r11*x4820))+(((-1.0)*x4816*x4817))+((r12*x4809))+(((-1.0)*sj0*sj1*x4813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4822=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4822;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4823=((1.0)*cj5);
IkReal x4824=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4823)));
j4eval[0]=x4824;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4823))))));
j4eval[2]=IKsign(x4824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4825=cj5*cj5;
IkReal x4826=r01*r01;
IkReal x4827=(cj5*r00);
IkReal x4828=(r01*sj5);
IkReal x4829=(((x4825*(r00*r00)))+(((-1.0)*x4825*x4826))+(((-2.0)*x4827*x4828))+(r02*r02)+x4826);
j4eval[0]=x4829;
j4eval[1]=IKsign(x4829);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4827))+x4828))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4830=cj5*cj5;
IkReal x4831=r01*r01;
IkReal x4832=(r01*sj5);
IkReal x4833=(cj5*r00);
CheckValue<IkReal> x4834=IKPowWithIntegerCheck(IKsign((((x4830*(r00*r00)))+(((-1.0)*x4830*x4831))+(((-2.0)*x4832*x4833))+(r02*r02)+x4831)),-1);
if(!x4834.valid){
continue;
}
CheckValue<IkReal> x4835 = IKatan2WithCheck(IkReal(((((-1.0)*x4833))+x4832)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4834.value)))+(x4835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4836=IKcos(j4);
IkReal x4837=IKsin(j4);
IkReal x4838=(cj5*r00);
IkReal x4839=(cj5*r10);
IkReal x4840=(r21*sj5);
IkReal x4841=((1.0)*cj2);
IkReal x4842=(cj5*r20);
IkReal x4843=((1.0)*x4836);
IkReal x4844=((1.0)*x4837);
IkReal x4845=(sj5*x4837);
IkReal x4846=(sj5*x4836);
evalcond[0]=((((-1.0)*x4838*x4843))+((r01*x4846))+((r02*x4837)));
evalcond[1]=((((-1.0)*x4842*x4844))+(((-1.0)*r22*x4843))+((x4837*x4840)));
evalcond[2]=((((-1.0)*x4839*x4844))+((r11*x4845))+(((-1.0)*r12*x4843)));
evalcond[3]=((-1.0)+(((-1.0)*x4838*x4844))+(((-1.0)*r02*x4843))+((r01*x4845)));
evalcond[4]=((((-1.0)*x4842*x4843))+((sj1*sj2))+((r22*x4837))+(((-1.0)*cj1*x4841))+((x4836*x4840)));
evalcond[5]=(((r12*x4837))+(((-1.0)*sj1*x4841))+(((-1.0)*x4839*x4843))+(((-1.0)*cj1*sj2))+((r11*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4847=((1.0)*cj5);
CheckValue<IkReal> x4848 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4848.valid){
continue;
}
CheckValue<IkReal> x4849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4847)))),-1);
if(!x4849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4848.value)+(((1.5707963267949)*(x4849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4850=IKcos(j4);
IkReal x4851=IKsin(j4);
IkReal x4852=(cj5*r00);
IkReal x4853=(cj5*r10);
IkReal x4854=(r21*sj5);
IkReal x4855=((1.0)*cj2);
IkReal x4856=(cj5*r20);
IkReal x4857=((1.0)*x4850);
IkReal x4858=((1.0)*x4851);
IkReal x4859=(sj5*x4851);
IkReal x4860=(sj5*x4850);
evalcond[0]=(((r01*x4860))+(((-1.0)*x4852*x4857))+((r02*x4851)));
evalcond[1]=((((-1.0)*x4856*x4858))+(((-1.0)*r22*x4857))+((x4851*x4854)));
evalcond[2]=((((-1.0)*x4853*x4858))+(((-1.0)*r12*x4857))+((r11*x4859)));
evalcond[3]=((-1.0)+((r01*x4859))+(((-1.0)*r02*x4857))+(((-1.0)*x4852*x4858)));
evalcond[4]=((((-1.0)*x4856*x4857))+((r22*x4851))+((sj1*sj2))+(((-1.0)*cj1*x4855))+((x4850*x4854)));
evalcond[5]=(((r11*x4860))+(((-1.0)*x4853*x4857))+((r12*x4851))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4861=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4861.valid){
continue;
}
CheckValue<IkReal> x4862 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4861.value)))+(x4862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4863=IKcos(j4);
IkReal x4864=IKsin(j4);
IkReal x4865=(cj5*r00);
IkReal x4866=(cj5*r10);
IkReal x4867=(r21*sj5);
IkReal x4868=((1.0)*cj2);
IkReal x4869=(cj5*r20);
IkReal x4870=((1.0)*x4863);
IkReal x4871=((1.0)*x4864);
IkReal x4872=(sj5*x4864);
IkReal x4873=(sj5*x4863);
evalcond[0]=(((r01*x4873))+(((-1.0)*x4865*x4870))+((r02*x4864)));
evalcond[1]=((((-1.0)*x4869*x4871))+(((-1.0)*r22*x4870))+((x4864*x4867)));
evalcond[2]=((((-1.0)*x4866*x4871))+(((-1.0)*r12*x4870))+((r11*x4872)));
evalcond[3]=((-1.0)+((r01*x4872))+(((-1.0)*x4865*x4871))+(((-1.0)*r02*x4870)));
evalcond[4]=((((-1.0)*x4869*x4870))+((r22*x4864))+((sj1*sj2))+((x4863*x4867))+(((-1.0)*cj1*x4868)));
evalcond[5]=(((r12*x4864))+(((-1.0)*x4866*x4870))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4868))+((r11*x4873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4874=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4874;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4875=((1.0)*cj5);
IkReal x4876=((((-1.0)*r21*x4875))+(((-1.0)*r20*sj5)));
j4eval[0]=x4876;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4875))))));
j4eval[2]=IKsign(x4876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4877=cj5*cj5;
IkReal x4878=r01*r01;
IkReal x4879=(r01*sj5);
IkReal x4880=(cj5*r00);
IkReal x4881=(((x4877*x4878))+(((-1.0)*x4877*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4879*x4880))+(((-1.0)*x4878)));
j4eval[0]=x4881;
j4eval[1]=IKsign(x4881);
j4eval[2]=((IKabs(((((-1.0)*x4880))+x4879)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4882=cj5*cj5;
IkReal x4883=r01*r01;
IkReal x4884=(r01*sj5);
IkReal x4885=(cj5*r00);
CheckValue<IkReal> x4886=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4882*(r00*r00)))+(((-1.0)*x4883))+(((-1.0)*(r02*r02)))+(((2.0)*x4884*x4885))+((x4882*x4883)))),-1);
if(!x4886.valid){
continue;
}
CheckValue<IkReal> x4887 = IKatan2WithCheck(IkReal(((((-1.0)*x4885))+x4884)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4886.value)))+(x4887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4888=IKcos(j4);
IkReal x4889=IKsin(j4);
IkReal x4890=(cj5*r00);
IkReal x4891=(cj5*r10);
IkReal x4892=(r21*sj5);
IkReal x4893=(cj5*r20);
IkReal x4894=((1.0)*x4888);
IkReal x4895=((1.0)*x4889);
IkReal x4896=(sj5*x4889);
IkReal x4897=(sj5*x4888);
evalcond[0]=(((r02*x4889))+(((-1.0)*x4890*x4894))+((r01*x4897)));
evalcond[1]=((((-1.0)*x4893*x4895))+((x4889*x4892))+(((-1.0)*r22*x4894)));
evalcond[2]=(((r11*x4896))+(((-1.0)*r12*x4894))+(((-1.0)*x4891*x4895)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4894))+(((-1.0)*x4890*x4895))+((r01*x4896)));
evalcond[4]=(((r11*x4897))+((cj2*sj1))+((r12*x4889))+((cj1*sj2))+(((-1.0)*x4891*x4894)));
evalcond[5]=((((-1.0)*x4893*x4894))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4888*x4892))+((r22*x4889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4898=((1.0)*cj5);
CheckValue<IkReal> x4899 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4898))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4899.valid){
continue;
}
CheckValue<IkReal> x4900=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4898))+(((-1.0)*r20*sj5)))),-1);
if(!x4900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4899.value)+(((1.5707963267949)*(x4900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4901=IKcos(j4);
IkReal x4902=IKsin(j4);
IkReal x4903=(cj5*r00);
IkReal x4904=(cj5*r10);
IkReal x4905=(r21*sj5);
IkReal x4906=(cj5*r20);
IkReal x4907=((1.0)*x4901);
IkReal x4908=((1.0)*x4902);
IkReal x4909=(sj5*x4902);
IkReal x4910=(sj5*x4901);
evalcond[0]=(((r02*x4902))+(((-1.0)*x4903*x4907))+((r01*x4910)));
evalcond[1]=(((x4902*x4905))+(((-1.0)*x4906*x4908))+(((-1.0)*r22*x4907)));
evalcond[2]=((((-1.0)*r12*x4907))+(((-1.0)*x4904*x4908))+((r11*x4909)));
evalcond[3]=((1.0)+(((-1.0)*x4903*x4908))+(((-1.0)*r02*x4907))+((r01*x4909)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4904*x4907))+((cj1*sj2))+((r11*x4910))+((r12*x4902)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4901*x4905))+(((-1.0)*x4906*x4907))+((r22*x4902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
CheckValue<IkReal> x4912=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4911.value)+(((1.5707963267949)*(x4912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4913=IKcos(j4);
IkReal x4914=IKsin(j4);
IkReal x4915=(cj5*r00);
IkReal x4916=(cj5*r10);
IkReal x4917=(r21*sj5);
IkReal x4918=(cj5*r20);
IkReal x4919=((1.0)*x4913);
IkReal x4920=((1.0)*x4914);
IkReal x4921=(sj5*x4914);
IkReal x4922=(sj5*x4913);
evalcond[0]=((((-1.0)*x4915*x4919))+((r02*x4914))+((r01*x4922)));
evalcond[1]=((((-1.0)*x4918*x4920))+(((-1.0)*r22*x4919))+((x4914*x4917)));
evalcond[2]=((((-1.0)*r12*x4919))+(((-1.0)*x4916*x4920))+((r11*x4921)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4919))+(((-1.0)*x4915*x4920))+((r01*x4921)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4914))+(((-1.0)*x4916*x4919))+((r11*x4922)));
evalcond[5]=((((-1.0)*x4918*x4919))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4913*x4917))+((r22*x4914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4923=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4923);
rxp1_1=(px*r21);
rxp1_2=(r11*x4923);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4924=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4924);
rxp1_1=(px*r21);
rxp1_2=(r11*x4924);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4925=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4925);
rxp1_1=(px*r21);
rxp1_2=(r11*x4925);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4928=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4928.valid){
continue;
}
IkReal x4926=x4928.value;
IkReal x4927=(sj0*x4926);
cj4array[0]=(((cj2*sj1*x4927))+((cj1*sj2*x4927)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4929=IKsin(j4);
IkReal x4930=IKcos(j4);
IkReal x4931=(r21*sj5);
IkReal x4932=((1.0)*cj5*r20);
evalcond[0]=(r02*x4929);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4930)));
evalcond[2]=(((x4929*x4931))+(((-1.0)*x4929*x4932)));
evalcond[3]=((((-1.0)*cj5*r10*x4929))+((r11*sj5*x4929)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4930*x4932))+((x4930*x4931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4934=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4934.valid){
continue;
}
IkReal x4933=x4934.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4933))+((cj1*cj2*x4933)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4935=IKsin(j4);
IkReal x4936=IKcos(j4);
IkReal x4937=((1.0)*sj0);
IkReal x4938=((1.0)*cj5);
IkReal x4939=(sj5*x4935);
evalcond[0]=(r02*x4935);
evalcond[1]=((((-1.0)*r02*x4936))+(((-1.0)*x4937)));
evalcond[2]=(((r21*x4939))+(((-1.0)*r20*x4935*x4938)));
evalcond[3]=(((r11*x4939))+(((-1.0)*r10*x4935*x4938)));
evalcond[4]=((((-1.0)*r10*x4936*x4938))+(((-1.0)*cj2*sj1*x4937))+((r11*sj5*x4936))+(((-1.0)*cj1*sj2*x4937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4940=IKPowWithIntegerCheck(r02,-1);
if(!x4940.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4940.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4941=IKsin(j4);
IkReal x4942=IKcos(j4);
IkReal x4943=((1.0)*cj1);
IkReal x4944=(r21*sj5);
IkReal x4945=((1.0)*cj5);
IkReal x4946=(r11*sj5);
evalcond[0]=(r02*x4941);
evalcond[1]=(((x4941*x4944))+(((-1.0)*r20*x4941*x4945)));
evalcond[2]=(((x4941*x4946))+(((-1.0)*r10*x4941*x4945)));
evalcond[3]=(((sj1*sj2))+((x4942*x4944))+(((-1.0)*r20*x4942*x4945))+(((-1.0)*cj2*x4943)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4942*x4945))+((x4942*x4946))+(((-1.0)*sj0*sj2*x4943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4947=((1.0)*sj0);
IkReal x4948=((1.0)*cj0);
CheckValue<IkReal> x4949 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4947))+(((-1.0)*r02*x4948)))),IkReal(((((-1.0)*r01*sj5*x4948))+(((-1.0)*r11*sj5*x4947))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4949.valid){
continue;
}
CheckValue<IkReal> x4950=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4949.value)+(((1.5707963267949)*(x4950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4951=IKsin(j4);
IkReal x4952=IKcos(j4);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(r21*sj5);
IkReal x4956=((1.0)*cj2);
IkReal x4957=((1.0)*sj0);
IkReal x4958=(cj1*sj2);
IkReal x4959=(cj5*r20);
IkReal x4960=((1.0)*x4952);
IkReal x4961=((1.0)*x4951);
IkReal x4962=(sj5*x4951);
IkReal x4963=(sj5*x4952);
evalcond[0]=((((-1.0)*x4959*x4961))+(((-1.0)*r22*x4960))+((x4951*x4955)));
evalcond[1]=(cj0+((r11*x4962))+(((-1.0)*x4954*x4961))+(((-1.0)*r12*x4960)));
evalcond[2]=((((-1.0)*x4957))+(((-1.0)*r02*x4960))+(((-1.0)*x4953*x4961))+((r01*x4962)));
evalcond[3]=(((r22*x4951))+(((-1.0)*x4959*x4960))+((sj1*sj2))+((x4952*x4955))+(((-1.0)*cj1*x4956)));
evalcond[4]=((((-1.0)*cj0*x4958))+(((-1.0)*cj0*sj1*x4956))+((r02*x4951))+(((-1.0)*x4953*x4960))+((r01*x4963)));
evalcond[5]=(((r12*x4951))+(((-1.0)*x4957*x4958))+((r11*x4963))+(((-1.0)*x4954*x4960))+(((-1.0)*sj0*sj1*x4956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4964=((1.0)*cj5);
CheckValue<IkReal> x4965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4964)))),-1);
if(!x4965.valid){
continue;
}
CheckValue<IkReal> x4966 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4964))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4965.value)))+(x4966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4967=IKsin(j4);
IkReal x4968=IKcos(j4);
IkReal x4969=(cj5*r00);
IkReal x4970=(cj5*r10);
IkReal x4971=(r21*sj5);
IkReal x4972=((1.0)*cj2);
IkReal x4973=((1.0)*sj0);
IkReal x4974=(cj1*sj2);
IkReal x4975=(cj5*r20);
IkReal x4976=((1.0)*x4968);
IkReal x4977=((1.0)*x4967);
IkReal x4978=(sj5*x4967);
IkReal x4979=(sj5*x4968);
evalcond[0]=((((-1.0)*x4975*x4977))+((x4967*x4971))+(((-1.0)*r22*x4976)));
evalcond[1]=(cj0+((r11*x4978))+(((-1.0)*r12*x4976))+(((-1.0)*x4970*x4977)));
evalcond[2]=((((-1.0)*x4973))+(((-1.0)*r02*x4976))+((r01*x4978))+(((-1.0)*x4969*x4977)));
evalcond[3]=((((-1.0)*x4975*x4976))+((r22*x4967))+((sj1*sj2))+((x4968*x4971))+(((-1.0)*cj1*x4972)));
evalcond[4]=((((-1.0)*cj0*x4974))+(((-1.0)*cj0*sj1*x4972))+((r02*x4967))+((r01*x4979))+(((-1.0)*x4969*x4976)));
evalcond[5]=(((r12*x4967))+((r11*x4979))+(((-1.0)*x4973*x4974))+(((-1.0)*x4970*x4976))+(((-1.0)*sj0*sj1*x4972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4980=((1.0)*cj5);
CheckValue<IkReal> x4981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4980)))),-1);
if(!x4981.valid){
continue;
}
CheckValue<IkReal> x4982 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4981.value)))+(x4982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4983=IKsin(j4);
IkReal x4984=IKcos(j4);
IkReal x4985=(cj5*r00);
IkReal x4986=(cj5*r10);
IkReal x4987=(r21*sj5);
IkReal x4988=((1.0)*cj2);
IkReal x4989=((1.0)*sj0);
IkReal x4990=(cj1*sj2);
IkReal x4991=(cj5*r20);
IkReal x4992=((1.0)*x4984);
IkReal x4993=((1.0)*x4983);
IkReal x4994=(sj5*x4983);
IkReal x4995=(sj5*x4984);
evalcond[0]=((((-1.0)*r22*x4992))+(((-1.0)*x4991*x4993))+((x4983*x4987)));
evalcond[1]=((((-1.0)*x4986*x4993))+cj0+(((-1.0)*r12*x4992))+((r11*x4994)));
evalcond[2]=((((-1.0)*r02*x4992))+(((-1.0)*x4989))+(((-1.0)*x4985*x4993))+((r01*x4994)));
evalcond[3]=((((-1.0)*cj1*x4988))+((x4984*x4987))+(((-1.0)*x4991*x4992))+((sj1*sj2))+((r22*x4983)));
evalcond[4]=((((-1.0)*cj0*x4990))+(((-1.0)*cj0*sj1*x4988))+(((-1.0)*x4985*x4992))+((r01*x4995))+((r02*x4983)));
evalcond[5]=((((-1.0)*x4986*x4992))+((r12*x4983))+((r11*x4995))+(((-1.0)*sj0*sj1*x4988))+(((-1.0)*x4989*x4990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4996=((1.0)*cj5);
IkReal x4997=((1.0)*sj5);
IkReal x4998=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4998;
j0eval[1]=((IKabs(((((-1.0)*r01*x4996))+(((-1.0)*r00*x4997)))))+(IKabs(((((-1.0)*r11*x4996))+(((-1.0)*r10*x4997))))));
j0eval[2]=IKsign(x4998);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4999=r21*r21;
IkReal x5000=cj5*cj5;
IkReal x5001=(cj2*sj1);
IkReal x5002=(cj1*sj2);
IkReal x5003=(r21*sj5);
IkReal x5004=((1.0)*cj5*r20);
IkReal x5005=(((x4999*x5000))+(((-1.0)*(r22*r22)))+(((-1.0)*x4999))+(((-1.0)*x5000*(r20*r20)))+(((2.0)*cj5*r20*x5003)));
j4eval[0]=x5005;
j4eval[1]=((IKabs((((r22*x5002))+((r22*x5001)))))+(IKabs((((x5001*x5003))+(((-1.0)*x5002*x5004))+((x5002*x5003))+(((-1.0)*x5001*x5004))))));
j4eval[2]=IKsign(x5005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5006=cj1*cj1;
IkReal x5007=(cj2*sj2);
IkReal x5008=(cj2*sj1);
IkReal x5009=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj1*x5008))+(((-1.08349267049076)*sj2*x5006))+x5007+x5009+(((-2.0)*x5006*x5007))+(((-2.0)*cj1*cj2*x5008)));
j0eval[1]=((((-1.0)*x5008))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5010=IKsin(j0);
IkReal x5011=IKcos(j0);
evalcond[0]=((((-0.10915)*x5010))+(((0.81725)*x5011))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x5010))+(((-1.0)*py))+(((0.10915)*x5011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5012=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5012;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5013=((1.0)*cj5);
IkReal x5014=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5013)));
j4eval[0]=x5014;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5013)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5015=((1.0)*cj5);
IkReal x5016=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5015)));
j4eval[0]=x5016;
j4eval[1]=IKsign(x5016);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5015))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5017=((1.0)*cj5);
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5017)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5017)))),-1);
if(!x5019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5018.value)+(((1.5707963267949)*(x5019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5020=IKcos(j4);
IkReal x5021=IKsin(j4);
IkReal x5022=((1.0)*sj0);
IkReal x5023=(cj5*r00);
IkReal x5024=(cj5*r10);
IkReal x5025=(cj5*r20);
IkReal x5026=((1.0)*x5020);
IkReal x5027=((1.0)*x5021);
IkReal x5028=(sj5*x5020);
IkReal x5029=(sj5*x5021);
evalcond[0]=((((-1.0)*x5025*x5026))+((r22*x5021))+((r21*x5028)));
evalcond[1]=((((-1.0)*x5025*x5027))+(((-1.0)*r22*x5026))+((r21*x5029)));
evalcond[2]=(((r11*x5029))+cj0+(((-1.0)*r12*x5026))+(((-1.0)*x5024*x5027)));
evalcond[3]=(((r02*x5021))+(((-1.0)*x5023*x5026))+((r01*x5028))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5028))+((r12*x5021))+(((-1.0)*x5024*x5026))+(((-1.0)*x5022)));
evalcond[5]=((((-1.0)*r02*x5026))+(((-1.0)*x5023*x5027))+((r01*x5029))+(((-1.0)*x5022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5030=((1.0)*cj5);
CheckValue<IkReal> x5031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5030)))),-1);
if(!x5031.valid){
continue;
}
CheckValue<IkReal> x5032 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5031.value)))+(x5032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5033=IKcos(j4);
IkReal x5034=IKsin(j4);
IkReal x5035=((1.0)*sj0);
IkReal x5036=(cj5*r00);
IkReal x5037=(cj5*r10);
IkReal x5038=(cj5*r20);
IkReal x5039=((1.0)*x5033);
IkReal x5040=((1.0)*x5034);
IkReal x5041=(sj5*x5033);
IkReal x5042=(sj5*x5034);
evalcond[0]=(((r21*x5041))+((r22*x5034))+(((-1.0)*x5038*x5039)));
evalcond[1]=(((r21*x5042))+(((-1.0)*x5038*x5040))+(((-1.0)*r22*x5039)));
evalcond[2]=(cj0+(((-1.0)*x5037*x5040))+(((-1.0)*r12*x5039))+((r11*x5042)));
evalcond[3]=(((r02*x5034))+(((-1.0)*x5036*x5039))+((r01*x5041))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5037*x5039))+((r12*x5034))+((r11*x5041))+(((-1.0)*x5035)));
evalcond[5]=((((-1.0)*x5036*x5040))+((r01*x5042))+(((-1.0)*r02*x5039))+(((-1.0)*x5035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5043 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5043.valid){
continue;
}
CheckValue<IkReal> x5044=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5043.value)+(((1.5707963267949)*(x5044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5045=IKcos(j4);
IkReal x5046=IKsin(j4);
IkReal x5047=((1.0)*sj0);
IkReal x5048=(cj5*r00);
IkReal x5049=(cj5*r10);
IkReal x5050=(cj5*r20);
IkReal x5051=((1.0)*x5045);
IkReal x5052=((1.0)*x5046);
IkReal x5053=(sj5*x5045);
IkReal x5054=(sj5*x5046);
evalcond[0]=(((r21*x5053))+(((-1.0)*x5050*x5051))+((r22*x5046)));
evalcond[1]=(((r21*x5054))+(((-1.0)*r22*x5051))+(((-1.0)*x5050*x5052)));
evalcond[2]=(cj0+(((-1.0)*r12*x5051))+((r11*x5054))+(((-1.0)*x5049*x5052)));
evalcond[3]=(((r01*x5053))+((r02*x5046))+(((-1.0)*x5048*x5051))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5047))+((r11*x5053))+(((-1.0)*x5049*x5051))+((r12*x5046)));
evalcond[5]=((((-1.0)*x5047))+((r01*x5054))+(((-1.0)*r02*x5051))+(((-1.0)*x5048*x5052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5055=IKsin(j0);
IkReal x5056=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.03275)*x5056))+(((-0.10915)*x5055)));
evalcond[1]=((((-1.0)*py))+(((0.03275)*x5055))+(((0.10915)*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5057=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5057;
j4eval[1]=IKsign(x5057);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5058=((1.0)*cj5);
IkReal x5059=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5058)));
j4eval[0]=x5059;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5058)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5060=cj5*cj5;
IkReal x5061=((1.0)*r20);
IkReal x5062=(r01*r21);
IkReal x5063=(r21*sj5);
IkReal x5064=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5060*x5062))+(((-1.0)*r00*x5060*x5061))+(((-1.0)*x5062))+((cj5*r00*x5063)));
j4eval[0]=x5064;
j4eval[1]=((IKabs((((cj0*x5063))+(((-1.0)*cj0*cj5*x5061)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5065=cj5*cj5;
IkReal x5066=((1.0)*r20);
IkReal x5067=(r01*r21);
IkReal x5068=(r21*sj5);
CheckValue<IkReal> x5069=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5065*x5066))+(((-1.0)*x5067))+((cj5*r00*x5068))+((x5065*x5067)))),-1);
if(!x5069.valid){
continue;
}
CheckValue<IkReal> x5070 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5068))+(((-1.0)*cj0*cj5*x5066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5069.value)))+(x5070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5071=IKcos(j4);
IkReal x5072=IKsin(j4);
IkReal x5073=(cj5*r00);
IkReal x5074=(cj5*r10);
IkReal x5075=(cj5*r20);
IkReal x5076=((1.0)*x5071);
IkReal x5077=((1.0)*x5072);
IkReal x5078=(sj5*x5071);
IkReal x5079=(sj5*x5072);
evalcond[0]=(((r21*x5078))+(((-1.0)*x5075*x5076))+((r22*x5072)));
evalcond[1]=(((r21*x5079))+(((-1.0)*r22*x5076))+(((-1.0)*x5075*x5077)));
evalcond[2]=(cj0+((r02*x5072))+(((-1.0)*x5073*x5076))+((r01*x5078)));
evalcond[3]=(sj0+((r12*x5072))+(((-1.0)*x5074*x5076))+((r11*x5078)));
evalcond[4]=(cj0+(((-1.0)*r12*x5076))+(((-1.0)*x5074*x5077))+((r11*x5079)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5076))+(((-1.0)*x5073*x5077))+((r01*x5079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5080=((1.0)*cj5);
CheckValue<IkReal> x5081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5080))+(((-1.0)*r10*sj5)))),-1);
if(!x5081.valid){
continue;
}
CheckValue<IkReal> x5082 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5080)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5081.value)))+(x5082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5083=IKcos(j4);
IkReal x5084=IKsin(j4);
IkReal x5085=(cj5*r00);
IkReal x5086=(cj5*r10);
IkReal x5087=(cj5*r20);
IkReal x5088=((1.0)*x5083);
IkReal x5089=((1.0)*x5084);
IkReal x5090=(sj5*x5083);
IkReal x5091=(sj5*x5084);
evalcond[0]=((((-1.0)*x5087*x5088))+((r21*x5090))+((r22*x5084)));
evalcond[1]=((((-1.0)*x5087*x5089))+((r21*x5091))+(((-1.0)*r22*x5088)));
evalcond[2]=(cj0+(((-1.0)*x5085*x5088))+((r01*x5090))+((r02*x5084)));
evalcond[3]=(sj0+((r11*x5090))+((r12*x5084))+(((-1.0)*x5086*x5088)));
evalcond[4]=((((-1.0)*r12*x5088))+cj0+((r11*x5091))+(((-1.0)*x5086*x5089)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5085*x5089))+((r01*x5091))+(((-1.0)*r02*x5088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5092 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5092.valid){
continue;
}
CheckValue<IkReal> x5093=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5092.value)+(((1.5707963267949)*(x5093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5094=IKcos(j4);
IkReal x5095=IKsin(j4);
IkReal x5096=(cj5*r00);
IkReal x5097=(cj5*r10);
IkReal x5098=(cj5*r20);
IkReal x5099=((1.0)*x5094);
IkReal x5100=((1.0)*x5095);
IkReal x5101=(sj5*x5094);
IkReal x5102=(sj5*x5095);
evalcond[0]=(((r22*x5095))+((r21*x5101))+(((-1.0)*x5098*x5099)));
evalcond[1]=((((-1.0)*r22*x5099))+((r21*x5102))+(((-1.0)*x5098*x5100)));
evalcond[2]=(((r01*x5101))+cj0+(((-1.0)*x5096*x5099))+((r02*x5095)));
evalcond[3]=(sj0+(((-1.0)*x5097*x5099))+((r12*x5095))+((r11*x5101)));
evalcond[4]=((((-1.0)*x5097*x5100))+cj0+((r11*x5102))+(((-1.0)*r12*x5099)));
evalcond[5]=((((-1.0)*x5096*x5100))+(((-1.0)*sj0))+((r01*x5102))+(((-1.0)*r02*x5099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5103=IKsin(j0);
IkReal x5104=IKcos(j0);
IkReal x5105=(r00*sj5);
IkReal x5106=(r10*sj5);
IkReal x5107=(cj5*r11);
IkReal x5108=(cj5*r01);
evalcond[0]=((((-1.0)*x5104))+x5108+x5105);
evalcond[1]=((((-1.0)*x5103))+x5106+x5107);
evalcond[2]=((((-0.09465)*x5108))+(((-0.09465)*x5105))+(((-1.0)*px))+(((-0.10915)*x5103)));
evalcond[3]=((((-0.09465)*x5106))+(((-0.09465)*x5107))+(((-1.0)*py))+(((0.10915)*x5104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5109=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5109;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5110=((1.0)*cj5);
IkReal x5111=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5110)));
j4eval[0]=x5111;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5110))))));
j4eval[2]=IKsign(x5111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5112=cj5*cj5;
IkReal x5113=(r01*r11);
IkReal x5114=((1.0)*r00);
IkReal x5115=(r01*sj5);
IkReal x5116=(((x5112*x5113))+((cj5*r10*x5115))+(((-1.0)*r02*r12))+(((-1.0)*x5113))+(((-1.0)*r10*x5112*x5114))+((cj5*r00*r11*sj5)));
j4eval[0]=x5116;
j4eval[1]=IKsign(x5116);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5115))+(((-1.0)*cj0*cj5*x5114))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5117=cj5*cj5;
IkReal x5118=(r01*r11);
IkReal x5119=(cj5*r00);
IkReal x5120=(r01*sj5);
CheckValue<IkReal> x5121 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5119))+((cj0*x5120)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5121.valid){
continue;
}
CheckValue<IkReal> x5122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x5117))+((x5117*x5118))+(((-1.0)*r02*r12))+(((-1.0)*x5118))+((cj5*r10*x5120))+((r11*sj5*x5119)))),-1);
if(!x5122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5121.value)+(((1.5707963267949)*(x5122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5123=IKcos(j4);
IkReal x5124=IKsin(j4);
IkReal x5125=(cj5*r00);
IkReal x5126=(r01*sj5);
IkReal x5127=(cj5*r10);
IkReal x5128=(cj5*r20);
IkReal x5129=((1.0)*x5123);
IkReal x5130=((1.0)*x5124);
IkReal x5131=(sj5*x5124);
IkReal x5132=(sj5*x5123);
evalcond[0]=((((-1.0)*x5125*x5129))+((x5123*x5126))+((r02*x5124)));
evalcond[1]=(((r12*x5124))+((r11*x5132))+(((-1.0)*x5127*x5129)));
evalcond[2]=((((-1.0)*x5128*x5130))+((r21*x5131))+(((-1.0)*r22*x5129)));
evalcond[3]=((1.0)+((r22*x5124))+(((-1.0)*x5128*x5129))+((r21*x5132)));
evalcond[4]=(cj0+((r11*x5131))+(((-1.0)*r12*x5129))+(((-1.0)*x5127*x5130)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5125*x5130))+((x5124*x5126))+(((-1.0)*r02*x5129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5133=((1.0)*cj5);
CheckValue<IkReal> x5134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5133))+(((-1.0)*r00*sj5)))),-1);
if(!x5134.valid){
continue;
}
CheckValue<IkReal> x5135 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5133))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5134.value)))+(x5135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5136=IKcos(j4);
IkReal x5137=IKsin(j4);
IkReal x5138=(cj5*r00);
IkReal x5139=(r01*sj5);
IkReal x5140=(cj5*r10);
IkReal x5141=(cj5*r20);
IkReal x5142=((1.0)*x5136);
IkReal x5143=((1.0)*x5137);
IkReal x5144=(sj5*x5137);
IkReal x5145=(sj5*x5136);
evalcond[0]=(((x5136*x5139))+((r02*x5137))+(((-1.0)*x5138*x5142)));
evalcond[1]=((((-1.0)*x5140*x5142))+((r12*x5137))+((r11*x5145)));
evalcond[2]=(((r21*x5144))+(((-1.0)*x5141*x5143))+(((-1.0)*r22*x5142)));
evalcond[3]=((1.0)+((r21*x5145))+((r22*x5137))+(((-1.0)*x5141*x5142)));
evalcond[4]=(cj0+(((-1.0)*x5140*x5143))+(((-1.0)*r12*x5142))+((r11*x5144)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5142))+((x5137*x5139))+(((-1.0)*x5138*x5143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5146 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5146.valid){
continue;
}
CheckValue<IkReal> x5147=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5146.value)+(((1.5707963267949)*(x5147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5148=IKcos(j4);
IkReal x5149=IKsin(j4);
IkReal x5150=(cj5*r00);
IkReal x5151=(r01*sj5);
IkReal x5152=(cj5*r10);
IkReal x5153=(cj5*r20);
IkReal x5154=((1.0)*x5148);
IkReal x5155=((1.0)*x5149);
IkReal x5156=(sj5*x5149);
IkReal x5157=(sj5*x5148);
evalcond[0]=(((r02*x5149))+((x5148*x5151))+(((-1.0)*x5150*x5154)));
evalcond[1]=(((r11*x5157))+((r12*x5149))+(((-1.0)*x5152*x5154)));
evalcond[2]=(((r21*x5156))+(((-1.0)*r22*x5154))+(((-1.0)*x5153*x5155)));
evalcond[3]=((1.0)+((r21*x5157))+(((-1.0)*x5153*x5154))+((r22*x5149)));
evalcond[4]=(((r11*x5156))+cj0+(((-1.0)*r12*x5154))+(((-1.0)*x5152*x5155)));
evalcond[5]=((((-1.0)*sj0))+((x5149*x5151))+(((-1.0)*x5150*x5155))+(((-1.0)*r02*x5154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5158=IKcos(j0);
IkReal x5159=IKsin(j0);
evalcond[0]=((((-0.10915)*x5159))+(((-1.0)*px))+(((-0.39225)*x5158)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5158))+(((-0.39225)*x5159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5160=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5160;
j4eval[1]=IKsign(x5160);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5161=((1.0)*cj5);
IkReal x5162=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5161)));
j4eval[0]=x5162;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5161)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5163=cj5*cj5;
IkReal x5164=((1.0)*r20);
IkReal x5165=(r01*r21);
IkReal x5166=(r21*sj5);
IkReal x5167=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5166))+(((-1.0)*x5165))+((x5163*x5165))+(((-1.0)*r00*x5163*x5164)));
j4eval[0]=x5167;
j4eval[1]=((IKabs((((cj0*x5166))+(((-1.0)*cj0*cj5*x5164)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5168=cj5*cj5;
IkReal x5169=((1.0)*r20);
IkReal x5170=(r01*r21);
IkReal x5171=(r21*sj5);
CheckValue<IkReal> x5172 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5171))+(((-1.0)*cj0*cj5*x5169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5172.valid){
continue;
}
CheckValue<IkReal> x5173=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5171))+(((-1.0)*r00*x5168*x5169))+(((-1.0)*x5170))+((x5168*x5170)))),-1);
if(!x5173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5172.value)+(((1.5707963267949)*(x5173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5174=IKcos(j4);
IkReal x5175=IKsin(j4);
IkReal x5176=(cj5*r00);
IkReal x5177=(cj5*r10);
IkReal x5178=(cj5*r20);
IkReal x5179=((1.0)*x5174);
IkReal x5180=((1.0)*x5175);
IkReal x5181=(sj5*x5174);
IkReal x5182=(sj5*x5175);
evalcond[0]=((((-1.0)*x5178*x5179))+((r21*x5181))+((r22*x5175)));
evalcond[1]=(((r21*x5182))+(((-1.0)*x5178*x5180))+(((-1.0)*r22*x5179)));
evalcond[2]=((((-1.0)*x5176*x5179))+cj0+((r01*x5181))+((r02*x5175)));
evalcond[3]=(sj0+((r12*x5175))+(((-1.0)*x5177*x5179))+((r11*x5181)));
evalcond[4]=(cj0+(((-1.0)*r12*x5179))+(((-1.0)*x5177*x5180))+((r11*x5182)));
evalcond[5]=((((-1.0)*x5176*x5180))+(((-1.0)*sj0))+((r01*x5182))+(((-1.0)*r02*x5179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5183=((1.0)*cj5);
CheckValue<IkReal> x5184 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5183)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5184.valid){
continue;
}
CheckValue<IkReal> x5185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5183)))),-1);
if(!x5185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5184.value)+(((1.5707963267949)*(x5185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5186=IKcos(j4);
IkReal x5187=IKsin(j4);
IkReal x5188=(cj5*r00);
IkReal x5189=(cj5*r10);
IkReal x5190=(cj5*r20);
IkReal x5191=((1.0)*x5186);
IkReal x5192=((1.0)*x5187);
IkReal x5193=(sj5*x5186);
IkReal x5194=(sj5*x5187);
evalcond[0]=(((r22*x5187))+((r21*x5193))+(((-1.0)*x5190*x5191)));
evalcond[1]=(((r21*x5194))+(((-1.0)*r22*x5191))+(((-1.0)*x5190*x5192)));
evalcond[2]=(cj0+((r02*x5187))+((r01*x5193))+(((-1.0)*x5188*x5191)));
evalcond[3]=(sj0+(((-1.0)*x5189*x5191))+((r11*x5193))+((r12*x5187)));
evalcond[4]=((((-1.0)*r12*x5191))+cj0+(((-1.0)*x5189*x5192))+((r11*x5194)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5191))+((r01*x5194))+(((-1.0)*x5188*x5192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5195 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5195.valid){
continue;
}
CheckValue<IkReal> x5196=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5195.value)+(((1.5707963267949)*(x5196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5197=IKcos(j4);
IkReal x5198=IKsin(j4);
IkReal x5199=(cj5*r00);
IkReal x5200=(cj5*r10);
IkReal x5201=(cj5*r20);
IkReal x5202=((1.0)*x5197);
IkReal x5203=((1.0)*x5198);
IkReal x5204=(sj5*x5197);
IkReal x5205=(sj5*x5198);
evalcond[0]=((((-1.0)*x5201*x5202))+((r22*x5198))+((r21*x5204)));
evalcond[1]=((((-1.0)*x5201*x5203))+(((-1.0)*r22*x5202))+((r21*x5205)));
evalcond[2]=((((-1.0)*x5199*x5202))+cj0+((r01*x5204))+((r02*x5198)));
evalcond[3]=(sj0+(((-1.0)*x5200*x5202))+((r11*x5204))+((r12*x5198)));
evalcond[4]=((((-1.0)*x5200*x5203))+cj0+((r11*x5205))+(((-1.0)*r12*x5202)));
evalcond[5]=((((-1.0)*x5199*x5203))+(((-1.0)*r02*x5202))+(((-1.0)*sj0))+((r01*x5205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5206=((1.0)*sj5);
IkReal x5207=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5206))+(((-1.0)*r11*x5207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5206))+(((-1.0)*r01*x5207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5206))+(((-1.0)*r11*x5207))))+IKsqr(((((-1.0)*r00*x5206))+(((-1.0)*r01*x5207))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5206))+(((-1.0)*r11*x5207))), ((((-1.0)*r00*x5206))+(((-1.0)*r01*x5207))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5208=IKsin(j0);
IkReal x5209=IKcos(j0);
IkReal x5210=(r00*sj5);
IkReal x5211=(r10*sj5);
IkReal x5212=(cj5*r11);
IkReal x5213=(cj5*r01);
evalcond[0]=(x5213+x5210+x5209);
evalcond[1]=(x5212+x5211+x5208);
evalcond[2]=((((-0.10915)*x5208))+(((-0.09465)*x5213))+(((-0.09465)*x5210))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5209))+(((-0.09465)*x5212))+(((-0.09465)*x5211))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5214=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5214;
j4eval[1]=IKsign(x5214);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5215=((1.0)*cj5);
IkReal x5216=((((-1.0)*r11*x5215))+(((-1.0)*r10*sj5)));
j4eval[0]=x5216;
j4eval[1]=IKsign(x5216);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5215))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5217=cj5*cj5;
IkReal x5218=(r01*r11);
IkReal x5219=((1.0)*r00);
IkReal x5220=(r01*sj5);
IkReal x5221=(((x5217*x5218))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5217*x5219))+((cj5*r10*x5220))+(((-1.0)*x5218))+((cj5*r00*r11*sj5)));
j4eval[0]=x5221;
j4eval[1]=IKsign(x5221);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5220))+(((-1.0)*cj0*cj5*x5219))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5222=cj5*cj5;
IkReal x5223=(r01*r11);
IkReal x5224=(cj5*r00);
IkReal x5225=(r01*sj5);
CheckValue<IkReal> x5226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x5222))+(((-1.0)*r02*r12))+((cj5*r10*x5225))+((x5222*x5223))+((r11*sj5*x5224))+(((-1.0)*x5223)))),-1);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5224))+((cj0*x5225)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5226.value)))+(x5227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKcos(j4);
IkReal x5229=IKsin(j4);
IkReal x5230=(cj5*r00);
IkReal x5231=(r01*sj5);
IkReal x5232=(cj5*r10);
IkReal x5233=(cj5*r20);
IkReal x5234=((1.0)*x5228);
IkReal x5235=((1.0)*x5229);
IkReal x5236=(sj5*x5229);
IkReal x5237=(sj5*x5228);
evalcond[0]=(((r02*x5229))+((x5228*x5231))+(((-1.0)*x5230*x5234)));
evalcond[1]=(((r11*x5237))+(((-1.0)*x5232*x5234))+((r12*x5229)));
evalcond[2]=((((-1.0)*r22*x5234))+((r21*x5236))+(((-1.0)*x5233*x5235)));
evalcond[3]=((-1.0)+((r22*x5229))+((r21*x5237))+(((-1.0)*x5233*x5234)));
evalcond[4]=(cj0+((r11*x5236))+(((-1.0)*r12*x5234))+(((-1.0)*x5232*x5235)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5234))+((x5229*x5231))+(((-1.0)*x5230*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5238=((1.0)*cj5);
CheckValue<IkReal> x5239=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5238))+(((-1.0)*r10*sj5)))),-1);
if(!x5239.valid){
continue;
}
CheckValue<IkReal> x5240 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5238)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5239.value)))+(x5240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5241=IKcos(j4);
IkReal x5242=IKsin(j4);
IkReal x5243=(cj5*r00);
IkReal x5244=(r01*sj5);
IkReal x5245=(cj5*r10);
IkReal x5246=(cj5*r20);
IkReal x5247=((1.0)*x5241);
IkReal x5248=((1.0)*x5242);
IkReal x5249=(sj5*x5242);
IkReal x5250=(sj5*x5241);
evalcond[0]=((((-1.0)*x5243*x5247))+((x5241*x5244))+((r02*x5242)));
evalcond[1]=(((r12*x5242))+((r11*x5250))+(((-1.0)*x5245*x5247)));
evalcond[2]=((((-1.0)*r22*x5247))+((r21*x5249))+(((-1.0)*x5246*x5248)));
evalcond[3]=((-1.0)+((r21*x5250))+(((-1.0)*x5246*x5247))+((r22*x5242)));
evalcond[4]=((((-1.0)*r12*x5247))+((r11*x5249))+cj0+(((-1.0)*x5245*x5248)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5243*x5248))+(((-1.0)*r02*x5247))+((x5242*x5244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5251=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5251.valid){
continue;
}
CheckValue<IkReal> x5252 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5251.value)))+(x5252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5253=IKcos(j4);
IkReal x5254=IKsin(j4);
IkReal x5255=(cj5*r00);
IkReal x5256=(r01*sj5);
IkReal x5257=(cj5*r10);
IkReal x5258=(cj5*r20);
IkReal x5259=((1.0)*x5253);
IkReal x5260=((1.0)*x5254);
IkReal x5261=(sj5*x5254);
IkReal x5262=(sj5*x5253);
evalcond[0]=(((x5253*x5256))+(((-1.0)*x5255*x5259))+((r02*x5254)));
evalcond[1]=(((r12*x5254))+((r11*x5262))+(((-1.0)*x5257*x5259)));
evalcond[2]=((((-1.0)*x5258*x5260))+(((-1.0)*r22*x5259))+((r21*x5261)));
evalcond[3]=((-1.0)+((r22*x5254))+(((-1.0)*x5258*x5259))+((r21*x5262)));
evalcond[4]=(cj0+((r11*x5261))+(((-1.0)*r12*x5259))+(((-1.0)*x5257*x5260)));
evalcond[5]=(((x5254*x5256))+(((-1.0)*sj0))+(((-1.0)*r02*x5259))+(((-1.0)*x5255*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5263=IKsin(j0);
IkReal x5264=IKcos(j0);
evalcond[0]=((((-0.10915)*x5263))+(((-1.0)*px))+(((0.39225)*x5264)));
evalcond[1]=((((0.10915)*x5264))+(((-1.0)*py))+(((0.39225)*x5263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5265=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5265;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5266=((1.0)*cj5);
IkReal x5267=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5266)));
j4eval[0]=x5267;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5266)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5268=((1.0)*cj5);
IkReal x5269=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5268)));
j4eval[0]=x5269;
j4eval[1]=IKsign(x5269);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5268))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5270=((1.0)*cj5);
CheckValue<IkReal> x5271 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5270)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5271.valid){
continue;
}
CheckValue<IkReal> x5272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5270))+(((-1.0)*r00*sj5)))),-1);
if(!x5272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5271.value)+(((1.5707963267949)*(x5272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5273=IKcos(j4);
IkReal x5274=IKsin(j4);
IkReal x5275=((1.0)*sj0);
IkReal x5276=(cj5*r00);
IkReal x5277=(cj5*r10);
IkReal x5278=(cj5*r20);
IkReal x5279=((1.0)*x5273);
IkReal x5280=((1.0)*x5274);
IkReal x5281=(sj5*x5273);
IkReal x5282=(sj5*x5274);
evalcond[0]=(((r22*x5274))+(((-1.0)*x5278*x5279))+((r21*x5281)));
evalcond[1]=((((-1.0)*x5278*x5280))+((r21*x5282))+(((-1.0)*r22*x5279)));
evalcond[2]=(cj0+(((-1.0)*r12*x5279))+(((-1.0)*x5277*x5280))+((r11*x5282)));
evalcond[3]=(((r02*x5274))+(((-1.0)*x5276*x5279))+((r01*x5281))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5275))+(((-1.0)*x5277*x5279))+((r11*x5281))+((r12*x5274)));
evalcond[5]=((((-1.0)*x5275))+(((-1.0)*x5276*x5280))+((r01*x5282))+(((-1.0)*r02*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5283=((1.0)*cj5);
CheckValue<IkReal> x5284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5283))+(((-1.0)*r00*sj5)))),-1);
if(!x5284.valid){
continue;
}
CheckValue<IkReal> x5285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5284.value)))+(x5285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5286=IKcos(j4);
IkReal x5287=IKsin(j4);
IkReal x5288=((1.0)*sj0);
IkReal x5289=(cj5*r00);
IkReal x5290=(cj5*r10);
IkReal x5291=(cj5*r20);
IkReal x5292=((1.0)*x5286);
IkReal x5293=((1.0)*x5287);
IkReal x5294=(sj5*x5286);
IkReal x5295=(sj5*x5287);
evalcond[0]=(((r22*x5287))+((r21*x5294))+(((-1.0)*x5291*x5292)));
evalcond[1]=((((-1.0)*r22*x5292))+((r21*x5295))+(((-1.0)*x5291*x5293)));
evalcond[2]=(cj0+(((-1.0)*r12*x5292))+((r11*x5295))+(((-1.0)*x5290*x5293)));
evalcond[3]=((((-1.0)*x5289*x5292))+((r02*x5287))+((r01*x5294))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5287))+(((-1.0)*x5288))+((r11*x5294))+(((-1.0)*x5290*x5292)));
evalcond[5]=((((-1.0)*x5289*x5293))+(((-1.0)*x5288))+((r01*x5295))+(((-1.0)*r02*x5292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5296 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5296.valid){
continue;
}
CheckValue<IkReal> x5297=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5296.value)+(((1.5707963267949)*(x5297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5298=IKcos(j4);
IkReal x5299=IKsin(j4);
IkReal x5300=((1.0)*sj0);
IkReal x5301=(cj5*r00);
IkReal x5302=(cj5*r10);
IkReal x5303=(cj5*r20);
IkReal x5304=((1.0)*x5298);
IkReal x5305=((1.0)*x5299);
IkReal x5306=(sj5*x5298);
IkReal x5307=(sj5*x5299);
evalcond[0]=((((-1.0)*x5303*x5304))+((r21*x5306))+((r22*x5299)));
evalcond[1]=((((-1.0)*r22*x5304))+(((-1.0)*x5303*x5305))+((r21*x5307)));
evalcond[2]=(cj0+(((-1.0)*r12*x5304))+(((-1.0)*x5302*x5305))+((r11*x5307)));
evalcond[3]=(((r02*x5299))+(((-1.0)*x5301*x5304))+((r01*x5306))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5299))+(((-1.0)*x5300))+(((-1.0)*x5302*x5304))+((r11*x5306)));
evalcond[5]=((((-1.0)*x5300))+(((-1.0)*x5301*x5305))+(((-1.0)*r02*x5304))+((r01*x5307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5308=IKcos(j0);
IkReal x5309=IKsin(j0);
evalcond[0]=((((-0.10915)*x5309))+(((-1.0)*px))+(((-0.81725)*x5308)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5308))+(((-0.81725)*x5309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5310=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5310;
j4eval[1]=IKsign(x5310);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5311=((1.0)*cj5);
IkReal x5312=((((-1.0)*r11*x5311))+(((-1.0)*r10*sj5)));
j4eval[0]=x5312;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5311)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5313=cj5*cj5;
IkReal x5314=((1.0)*r20);
IkReal x5315=(r01*r21);
IkReal x5316=(r21*sj5);
IkReal x5317=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5313*x5315))+((cj5*r00*x5316))+(((-1.0)*x5315))+(((-1.0)*r00*x5313*x5314)));
j4eval[0]=x5317;
j4eval[1]=((IKabs((((cj0*x5316))+(((-1.0)*cj0*cj5*x5314)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5318=cj5*cj5;
IkReal x5319=((1.0)*r20);
IkReal x5320=(r01*r21);
IkReal x5321=(r21*sj5);
CheckValue<IkReal> x5322 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5319))+((cj0*x5321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5322.valid){
continue;
}
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5320))+((x5318*x5320))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5318*x5319))+((cj5*r00*x5321)))),-1);
if(!x5323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5322.value)+(((1.5707963267949)*(x5323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5324=IKcos(j4);
IkReal x5325=IKsin(j4);
IkReal x5326=(cj5*r00);
IkReal x5327=(cj5*r10);
IkReal x5328=(cj5*r20);
IkReal x5329=((1.0)*x5324);
IkReal x5330=((1.0)*x5325);
IkReal x5331=(sj5*x5324);
IkReal x5332=(sj5*x5325);
evalcond[0]=((((-1.0)*x5328*x5329))+((r22*x5325))+((r21*x5331)));
evalcond[1]=((((-1.0)*r22*x5329))+(((-1.0)*x5328*x5330))+((r21*x5332)));
evalcond[2]=(cj0+(((-1.0)*x5326*x5329))+((r01*x5331))+((r02*x5325)));
evalcond[3]=(sj0+((r11*x5331))+((r12*x5325))+(((-1.0)*x5327*x5329)));
evalcond[4]=(cj0+((r11*x5332))+(((-1.0)*r12*x5329))+(((-1.0)*x5327*x5330)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5329))+(((-1.0)*x5326*x5330))+((r01*x5332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5333=((1.0)*cj5);
CheckValue<IkReal> x5334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5333)))),-1);
if(!x5334.valid){
continue;
}
CheckValue<IkReal> x5335 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5333)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5334.value)))+(x5335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5336=IKcos(j4);
IkReal x5337=IKsin(j4);
IkReal x5338=(cj5*r00);
IkReal x5339=(cj5*r10);
IkReal x5340=(cj5*r20);
IkReal x5341=((1.0)*x5336);
IkReal x5342=((1.0)*x5337);
IkReal x5343=(sj5*x5336);
IkReal x5344=(sj5*x5337);
evalcond[0]=(((r22*x5337))+((r21*x5343))+(((-1.0)*x5340*x5341)));
evalcond[1]=((((-1.0)*r22*x5341))+((r21*x5344))+(((-1.0)*x5340*x5342)));
evalcond[2]=(((r01*x5343))+cj0+(((-1.0)*x5338*x5341))+((r02*x5337)));
evalcond[3]=(sj0+((r12*x5337))+(((-1.0)*x5339*x5341))+((r11*x5343)));
evalcond[4]=(cj0+(((-1.0)*x5339*x5342))+((r11*x5344))+(((-1.0)*r12*x5341)));
evalcond[5]=((((-1.0)*r02*x5341))+(((-1.0)*sj0))+((r01*x5344))+(((-1.0)*x5338*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5345 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5345.valid){
continue;
}
CheckValue<IkReal> x5346=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5345.value)+(((1.5707963267949)*(x5346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5347=IKcos(j4);
IkReal x5348=IKsin(j4);
IkReal x5349=(cj5*r00);
IkReal x5350=(cj5*r10);
IkReal x5351=(cj5*r20);
IkReal x5352=((1.0)*x5347);
IkReal x5353=((1.0)*x5348);
IkReal x5354=(sj5*x5347);
IkReal x5355=(sj5*x5348);
evalcond[0]=((((-1.0)*x5351*x5352))+((r22*x5348))+((r21*x5354)));
evalcond[1]=((((-1.0)*x5351*x5353))+(((-1.0)*r22*x5352))+((r21*x5355)));
evalcond[2]=(cj0+((r01*x5354))+(((-1.0)*x5349*x5352))+((r02*x5348)));
evalcond[3]=(sj0+((r12*x5348))+((r11*x5354))+(((-1.0)*x5350*x5352)));
evalcond[4]=(cj0+((r11*x5355))+(((-1.0)*r12*x5352))+(((-1.0)*x5350*x5353)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5352))+((r01*x5355))+(((-1.0)*x5349*x5353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5356=IKcos(j0);
IkReal x5357=IKsin(j0);
evalcond[0]=((((-0.03275)*x5356))+(((-1.0)*px))+(((-0.10915)*x5357)));
evalcond[1]=((((-0.03275)*x5357))+(((0.10915)*x5356))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5358=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5358;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5359=((1.0)*cj5);
IkReal x5360=((((-1.0)*r01*x5359))+(((-1.0)*r00*sj5)));
j4eval[0]=x5360;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5359)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5361=((1.0)*cj5);
IkReal x5362=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5361)));
j4eval[0]=x5362;
j4eval[1]=IKsign(x5362);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5361))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5363=((1.0)*cj5);
CheckValue<IkReal> x5364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5363)))),-1);
if(!x5364.valid){
continue;
}
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5363)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5364.value)))+(x5365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5366=IKcos(j4);
IkReal x5367=IKsin(j4);
IkReal x5368=((1.0)*sj0);
IkReal x5369=(cj5*r00);
IkReal x5370=(cj5*r10);
IkReal x5371=(cj5*r20);
IkReal x5372=((1.0)*x5366);
IkReal x5373=((1.0)*x5367);
IkReal x5374=(sj5*x5366);
IkReal x5375=(sj5*x5367);
evalcond[0]=(((r22*x5367))+((r21*x5374))+(((-1.0)*x5371*x5372)));
evalcond[1]=((((-1.0)*r22*x5372))+((r21*x5375))+(((-1.0)*x5371*x5373)));
evalcond[2]=(cj0+(((-1.0)*r12*x5372))+(((-1.0)*x5370*x5373))+((r11*x5375)));
evalcond[3]=(((r02*x5367))+((r01*x5374))+(((-1.0)*cj0))+(((-1.0)*x5369*x5372)));
evalcond[4]=(((r12*x5367))+(((-1.0)*x5370*x5372))+((r11*x5374))+(((-1.0)*x5368)));
evalcond[5]=((((-1.0)*r02*x5372))+(((-1.0)*x5368))+((r01*x5375))+(((-1.0)*x5369*x5373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5376=((1.0)*cj5);
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5376)))),-1);
if(!x5377.valid){
continue;
}
CheckValue<IkReal> x5378 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5377.value)))+(x5378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5379=IKcos(j4);
IkReal x5380=IKsin(j4);
IkReal x5381=((1.0)*sj0);
IkReal x5382=(cj5*r00);
IkReal x5383=(cj5*r10);
IkReal x5384=(cj5*r20);
IkReal x5385=((1.0)*x5379);
IkReal x5386=((1.0)*x5380);
IkReal x5387=(sj5*x5379);
IkReal x5388=(sj5*x5380);
evalcond[0]=((((-1.0)*x5384*x5385))+((r21*x5387))+((r22*x5380)));
evalcond[1]=((((-1.0)*x5384*x5386))+(((-1.0)*r22*x5385))+((r21*x5388)));
evalcond[2]=(cj0+((r11*x5388))+(((-1.0)*r12*x5385))+(((-1.0)*x5383*x5386)));
evalcond[3]=((((-1.0)*x5382*x5385))+((r02*x5380))+((r01*x5387))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5387))+((r12*x5380))+(((-1.0)*x5381))+(((-1.0)*x5383*x5385)));
evalcond[5]=((((-1.0)*x5382*x5386))+(((-1.0)*r02*x5385))+(((-1.0)*x5381))+((r01*x5388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5389 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5389.valid){
continue;
}
CheckValue<IkReal> x5390=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5389.value)+(((1.5707963267949)*(x5390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5391=IKcos(j4);
IkReal x5392=IKsin(j4);
IkReal x5393=((1.0)*sj0);
IkReal x5394=(cj5*r00);
IkReal x5395=(cj5*r10);
IkReal x5396=(cj5*r20);
IkReal x5397=((1.0)*x5391);
IkReal x5398=((1.0)*x5392);
IkReal x5399=(sj5*x5391);
IkReal x5400=(sj5*x5392);
evalcond[0]=(((r22*x5392))+((r21*x5399))+(((-1.0)*x5396*x5397)));
evalcond[1]=(((r21*x5400))+(((-1.0)*r22*x5397))+(((-1.0)*x5396*x5398)));
evalcond[2]=(cj0+(((-1.0)*r12*x5397))+((r11*x5400))+(((-1.0)*x5395*x5398)));
evalcond[3]=(((r02*x5392))+(((-1.0)*x5394*x5397))+((r01*x5399))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5399))+((r12*x5392))+(((-1.0)*x5393))+(((-1.0)*x5395*x5397)));
evalcond[5]=((((-1.0)*x5394*x5398))+(((-1.0)*r02*x5397))+(((-1.0)*x5393))+((r01*x5400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5401=((1.0)*sj5);
IkReal x5402=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5402))+(((-1.0)*r10*x5401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5401))+(((-1.0)*r01*x5402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5402))+(((-1.0)*r10*x5401))))+IKsqr(((((-1.0)*r00*x5401))+(((-1.0)*r01*x5402))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5402))+(((-1.0)*r10*x5401))), ((((-1.0)*r00*x5401))+(((-1.0)*r01*x5402))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5403=IKsin(j0);
IkReal x5404=IKcos(j0);
IkReal x5405=(r00*sj5);
IkReal x5406=(r10*sj5);
IkReal x5407=(cj5*r11);
IkReal x5408=(cj5*r01);
evalcond[0]=(x5405+x5404+x5408);
evalcond[1]=(x5407+x5406+x5403);
evalcond[2]=((((-0.10915)*x5403))+(((-0.09465)*x5408))+(((-0.09465)*x5405))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5407))+(((-0.09465)*x5406))+(((-1.0)*py))+(((0.10915)*x5404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5409=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5409;
j4eval[1]=IKsign(x5409);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5410=((1.0)*cj5);
IkReal x5411=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5410)));
j4eval[0]=x5411;
j4eval[1]=IKsign(x5411);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5410))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5412=cj5*cj5;
IkReal x5413=(r01*r11);
IkReal x5414=((1.0)*r00);
IkReal x5415=(r01*sj5);
IkReal x5416=((((-1.0)*x5413))+((cj5*r10*x5415))+(((-1.0)*r10*x5412*x5414))+(((-1.0)*r02*r12))+((x5412*x5413))+((cj5*r00*r11*sj5)));
j4eval[0]=x5416;
j4eval[1]=IKsign(x5416);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5414))+((cj0*x5415))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5417=cj5*cj5;
IkReal x5418=(r01*r11);
IkReal x5419=(cj5*r00);
IkReal x5420=(r01*sj5);
CheckValue<IkReal> x5421 = IKatan2WithCheck(IkReal((((cj0*x5420))+(((-1.0)*cj0*x5419)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5421.valid){
continue;
}
CheckValue<IkReal> x5422=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5418))+((r11*sj5*x5419))+(((-1.0)*r02*r12))+((cj5*r10*x5420))+(((-1.0)*r00*r10*x5417))+((x5417*x5418)))),-1);
if(!x5422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5421.value)+(((1.5707963267949)*(x5422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5423=IKcos(j4);
IkReal x5424=IKsin(j4);
IkReal x5425=(cj5*r00);
IkReal x5426=(r01*sj5);
IkReal x5427=(cj5*r10);
IkReal x5428=(cj5*r20);
IkReal x5429=((1.0)*x5423);
IkReal x5430=((1.0)*x5424);
IkReal x5431=(sj5*x5424);
IkReal x5432=(sj5*x5423);
evalcond[0]=(((r02*x5424))+((x5423*x5426))+(((-1.0)*x5425*x5429)));
evalcond[1]=(((r12*x5424))+(((-1.0)*x5427*x5429))+((r11*x5432)));
evalcond[2]=((((-1.0)*x5428*x5430))+(((-1.0)*r22*x5429))+((r21*x5431)));
evalcond[3]=((-1.0)+((r22*x5424))+(((-1.0)*x5428*x5429))+((r21*x5432)));
evalcond[4]=(cj0+(((-1.0)*x5427*x5430))+((r11*x5431))+(((-1.0)*r12*x5429)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5425*x5430))+((x5424*x5426))+(((-1.0)*r02*x5429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5433=((1.0)*cj5);
CheckValue<IkReal> x5434 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5433)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5434.valid){
continue;
}
CheckValue<IkReal> x5435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5433)))),-1);
if(!x5435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5434.value)+(((1.5707963267949)*(x5435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5436=IKcos(j4);
IkReal x5437=IKsin(j4);
IkReal x5438=(cj5*r00);
IkReal x5439=(r01*sj5);
IkReal x5440=(cj5*r10);
IkReal x5441=(cj5*r20);
IkReal x5442=((1.0)*x5436);
IkReal x5443=((1.0)*x5437);
IkReal x5444=(sj5*x5437);
IkReal x5445=(sj5*x5436);
evalcond[0]=(((r02*x5437))+((x5436*x5439))+(((-1.0)*x5438*x5442)));
evalcond[1]=((((-1.0)*x5440*x5442))+((r11*x5445))+((r12*x5437)));
evalcond[2]=((((-1.0)*r22*x5442))+(((-1.0)*x5441*x5443))+((r21*x5444)));
evalcond[3]=((-1.0)+((r22*x5437))+(((-1.0)*x5441*x5442))+((r21*x5445)));
evalcond[4]=(cj0+(((-1.0)*r12*x5442))+(((-1.0)*x5440*x5443))+((r11*x5444)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5438*x5443))+(((-1.0)*r02*x5442))+((x5437*x5439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5446=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5446.valid){
continue;
}
CheckValue<IkReal> x5447 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5446.value)))+(x5447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5448=IKcos(j4);
IkReal x5449=IKsin(j4);
IkReal x5450=(cj5*r00);
IkReal x5451=(r01*sj5);
IkReal x5452=(cj5*r10);
IkReal x5453=(cj5*r20);
IkReal x5454=((1.0)*x5448);
IkReal x5455=((1.0)*x5449);
IkReal x5456=(sj5*x5449);
IkReal x5457=(sj5*x5448);
evalcond[0]=((((-1.0)*x5450*x5454))+((x5448*x5451))+((r02*x5449)));
evalcond[1]=((((-1.0)*x5452*x5454))+((r12*x5449))+((r11*x5457)));
evalcond[2]=(((r21*x5456))+(((-1.0)*r22*x5454))+(((-1.0)*x5453*x5455)));
evalcond[3]=((-1.0)+((r21*x5457))+((r22*x5449))+(((-1.0)*x5453*x5454)));
evalcond[4]=((((-1.0)*r12*x5454))+(((-1.0)*x5452*x5455))+cj0+((r11*x5456)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5450*x5455))+(((-1.0)*r02*x5454))+((x5449*x5451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5458=IKsin(j0);
IkReal x5459=IKcos(j0);
evalcond[0]=((((-0.10915)*x5458))+(((0.39225)*x5459))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5458))+(((0.10915)*x5459))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5460=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5460;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5460);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5461=((1.0)*cj5);
IkReal x5462=((((-1.0)*r01*x5461))+(((-1.0)*r00*sj5)));
j4eval[0]=x5462;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5461))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5463=((1.0)*cj5);
IkReal x5464=((((-1.0)*r01*x5463))+(((-1.0)*r00*sj5)));
j4eval[0]=x5464;
j4eval[1]=IKsign(x5464);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5463))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5465=((1.0)*cj5);
CheckValue<IkReal> x5466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5465))+(((-1.0)*r00*sj5)))),-1);
if(!x5466.valid){
continue;
}
CheckValue<IkReal> x5467 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5465))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5466.value)))+(x5467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5468=IKcos(j4);
IkReal x5469=IKsin(j4);
IkReal x5470=((1.0)*sj0);
IkReal x5471=(cj5*r00);
IkReal x5472=(cj5*r10);
IkReal x5473=(cj5*r20);
IkReal x5474=((1.0)*x5468);
IkReal x5475=((1.0)*x5469);
IkReal x5476=(sj5*x5468);
IkReal x5477=(sj5*x5469);
evalcond[0]=(((r22*x5469))+(((-1.0)*x5473*x5474))+((r21*x5476)));
evalcond[1]=((((-1.0)*x5473*x5475))+(((-1.0)*r22*x5474))+((r21*x5477)));
evalcond[2]=(cj0+(((-1.0)*r12*x5474))+(((-1.0)*x5472*x5475))+((r11*x5477)));
evalcond[3]=(((r02*x5469))+((r01*x5476))+(((-1.0)*x5471*x5474))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5470))+((r12*x5469))+(((-1.0)*x5472*x5474))+((r11*x5476)));
evalcond[5]=(((r01*x5477))+(((-1.0)*x5470))+(((-1.0)*x5471*x5475))+(((-1.0)*r02*x5474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5478=((1.0)*cj5);
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
CheckValue<IkReal> x5480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5478)))),-1);
if(!x5480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5479.value)+(((1.5707963267949)*(x5480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5481=IKcos(j4);
IkReal x5482=IKsin(j4);
IkReal x5483=((1.0)*sj0);
IkReal x5484=(cj5*r00);
IkReal x5485=(cj5*r10);
IkReal x5486=(cj5*r20);
IkReal x5487=((1.0)*x5481);
IkReal x5488=((1.0)*x5482);
IkReal x5489=(sj5*x5481);
IkReal x5490=(sj5*x5482);
evalcond[0]=((((-1.0)*x5486*x5487))+((r21*x5489))+((r22*x5482)));
evalcond[1]=((((-1.0)*x5486*x5488))+(((-1.0)*r22*x5487))+((r21*x5490)));
evalcond[2]=((((-1.0)*r12*x5487))+cj0+(((-1.0)*x5485*x5488))+((r11*x5490)));
evalcond[3]=((((-1.0)*x5484*x5487))+((r01*x5489))+((r02*x5482))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5483))+((r11*x5489))+(((-1.0)*x5485*x5487))+((r12*x5482)));
evalcond[5]=((((-1.0)*x5483))+((r01*x5490))+(((-1.0)*x5484*x5488))+(((-1.0)*r02*x5487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5491 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5491.valid){
continue;
}
CheckValue<IkReal> x5492=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5491.value)+(((1.5707963267949)*(x5492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5493=IKcos(j4);
IkReal x5494=IKsin(j4);
IkReal x5495=((1.0)*sj0);
IkReal x5496=(cj5*r00);
IkReal x5497=(cj5*r10);
IkReal x5498=(cj5*r20);
IkReal x5499=((1.0)*x5493);
IkReal x5500=((1.0)*x5494);
IkReal x5501=(sj5*x5493);
IkReal x5502=(sj5*x5494);
evalcond[0]=(((r21*x5501))+(((-1.0)*x5498*x5499))+((r22*x5494)));
evalcond[1]=((((-1.0)*x5498*x5500))+(((-1.0)*r22*x5499))+((r21*x5502)));
evalcond[2]=(cj0+(((-1.0)*x5497*x5500))+(((-1.0)*r12*x5499))+((r11*x5502)));
evalcond[3]=((((-1.0)*x5496*x5499))+((r01*x5501))+((r02*x5494))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5495))+((r12*x5494))+(((-1.0)*x5497*x5499))+((r11*x5501)));
evalcond[5]=((((-1.0)*x5495))+(((-1.0)*x5496*x5500))+(((-1.0)*r02*x5499))+((r01*x5502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5503=IKsin(j0);
IkReal x5504=IKcos(j0);
IkReal x5505=(r00*sj5);
IkReal x5506=(r10*sj5);
IkReal x5507=(cj5*r11);
IkReal x5508=(cj5*r01);
evalcond[0]=(x5508+x5505+(((-1.0)*x5504)));
evalcond[1]=(x5506+x5507+(((-1.0)*x5503)));
evalcond[2]=((((-0.10915)*x5503))+(((-1.0)*px))+(((-0.09465)*x5505))+(((-0.09465)*x5508)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x5504))+(((-0.09465)*x5506))+(((-0.09465)*x5507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5509=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5509;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5510=((1.0)*cj5);
IkReal x5511=((((-1.0)*r01*x5510))+(((-1.0)*r00*sj5)));
j4eval[0]=x5511;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5510))+((r11*sj5))))));
j4eval[2]=IKsign(x5511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5512=cj5*cj5;
IkReal x5513=(r01*r11);
IkReal x5514=((1.0)*r00);
IkReal x5515=(r01*sj5);
IkReal x5516=(((x5512*x5513))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5512*x5514))+(((-1.0)*x5513))+((cj5*r10*x5515))+((cj5*r00*r11*sj5)));
j4eval[0]=x5516;
j4eval[1]=IKsign(x5516);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5514))+((cj0*x5515))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5517=cj5*cj5;
IkReal x5518=(r01*r11);
IkReal x5519=(cj5*r00);
IkReal x5520=(r01*sj5);
CheckValue<IkReal> x5521 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5519))+((cj0*x5520)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5521.valid){
continue;
}
CheckValue<IkReal> x5522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x5518))+((r11*sj5*x5519))+((x5517*x5518))+(((-1.0)*r00*r10*x5517))+((cj5*r10*x5520)))),-1);
if(!x5522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5521.value)+(((1.5707963267949)*(x5522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5523=IKcos(j4);
IkReal x5524=IKsin(j4);
IkReal x5525=(cj5*r00);
IkReal x5526=(r01*sj5);
IkReal x5527=(cj5*r10);
IkReal x5528=(cj5*r20);
IkReal x5529=((1.0)*x5523);
IkReal x5530=((1.0)*x5524);
IkReal x5531=(sj5*x5524);
IkReal x5532=(sj5*x5523);
evalcond[0]=(((r02*x5524))+((x5523*x5526))+(((-1.0)*x5525*x5529)));
evalcond[1]=((((-1.0)*x5527*x5529))+((r11*x5532))+((r12*x5524)));
evalcond[2]=((((-1.0)*r22*x5529))+(((-1.0)*x5528*x5530))+((r21*x5531)));
evalcond[3]=((1.0)+(((-1.0)*x5528*x5529))+((r22*x5524))+((r21*x5532)));
evalcond[4]=(cj0+(((-1.0)*x5527*x5530))+((r11*x5531))+(((-1.0)*r12*x5529)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5529))+((x5524*x5526))+(((-1.0)*x5525*x5530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5533=((1.0)*cj5);
CheckValue<IkReal> x5534=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5533)))),-1);
if(!x5534.valid){
continue;
}
CheckValue<IkReal> x5535 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5533))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5534.value)))+(x5535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5536=IKcos(j4);
IkReal x5537=IKsin(j4);
IkReal x5538=(cj5*r00);
IkReal x5539=(r01*sj5);
IkReal x5540=(cj5*r10);
IkReal x5541=(cj5*r20);
IkReal x5542=((1.0)*x5536);
IkReal x5543=((1.0)*x5537);
IkReal x5544=(sj5*x5537);
IkReal x5545=(sj5*x5536);
evalcond[0]=((((-1.0)*x5538*x5542))+((x5536*x5539))+((r02*x5537)));
evalcond[1]=(((r11*x5545))+(((-1.0)*x5540*x5542))+((r12*x5537)));
evalcond[2]=((((-1.0)*x5541*x5543))+(((-1.0)*r22*x5542))+((r21*x5544)));
evalcond[3]=((1.0)+(((-1.0)*x5541*x5542))+((r22*x5537))+((r21*x5545)));
evalcond[4]=(cj0+((r11*x5544))+(((-1.0)*x5540*x5543))+(((-1.0)*r12*x5542)));
evalcond[5]=((((-1.0)*x5538*x5543))+(((-1.0)*sj0))+((x5537*x5539))+(((-1.0)*r02*x5542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5546 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5546.valid){
continue;
}
CheckValue<IkReal> x5547=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5546.value)+(((1.5707963267949)*(x5547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5548=IKcos(j4);
IkReal x5549=IKsin(j4);
IkReal x5550=(cj5*r00);
IkReal x5551=(r01*sj5);
IkReal x5552=(cj5*r10);
IkReal x5553=(cj5*r20);
IkReal x5554=((1.0)*x5548);
IkReal x5555=((1.0)*x5549);
IkReal x5556=(sj5*x5549);
IkReal x5557=(sj5*x5548);
evalcond[0]=((((-1.0)*x5550*x5554))+((r02*x5549))+((x5548*x5551)));
evalcond[1]=(((r12*x5549))+((r11*x5557))+(((-1.0)*x5552*x5554)));
evalcond[2]=(((r21*x5556))+(((-1.0)*x5553*x5555))+(((-1.0)*r22*x5554)));
evalcond[3]=((1.0)+((r21*x5557))+(((-1.0)*x5553*x5554))+((r22*x5549)));
evalcond[4]=(cj0+((r11*x5556))+(((-1.0)*x5552*x5555))+(((-1.0)*r12*x5554)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5550*x5555))+((x5549*x5551))+(((-1.0)*r02*x5554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5558=IKcos(j0);
IkReal x5559=IKsin(j0);
evalcond[0]=((((-0.39225)*x5558))+(((-1.0)*px))+(((-0.10915)*x5559)));
evalcond[1]=((((0.10915)*x5558))+(((-0.39225)*x5559))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5560=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5560;
j4eval[1]=IKsign(x5560);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5561=((1.0)*cj5);
IkReal x5562=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5561)));
j4eval[0]=x5562;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5561))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5563=cj5*cj5;
IkReal x5564=((1.0)*r20);
IkReal x5565=(r01*r21);
IkReal x5566=(r21*sj5);
IkReal x5567=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5563*x5564))+((x5563*x5565))+((cj5*r00*x5566))+(((-1.0)*x5565)));
j4eval[0]=x5567;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5566))+(((-1.0)*cj0*cj5*x5564))))));
j4eval[2]=IKsign(x5567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5568=cj5*cj5;
IkReal x5569=((1.0)*r20);
IkReal x5570=(r01*r21);
IkReal x5571=(r21*sj5);
CheckValue<IkReal> x5572=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5568*x5569))+((cj5*r00*x5571))+((x5568*x5570))+(((-1.0)*x5570)))),-1);
if(!x5572.valid){
continue;
}
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5571))+(((-1.0)*cj0*cj5*x5569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5572.value)))+(x5573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5574=IKcos(j4);
IkReal x5575=IKsin(j4);
IkReal x5576=(cj5*r00);
IkReal x5577=(cj5*r10);
IkReal x5578=(cj5*r20);
IkReal x5579=((1.0)*x5574);
IkReal x5580=((1.0)*x5575);
IkReal x5581=(sj5*x5574);
IkReal x5582=(sj5*x5575);
evalcond[0]=((((-1.0)*x5578*x5579))+((r21*x5581))+((r22*x5575)));
evalcond[1]=(((r21*x5582))+(((-1.0)*x5578*x5580))+(((-1.0)*r22*x5579)));
evalcond[2]=(((r02*x5575))+cj0+(((-1.0)*x5576*x5579))+((r01*x5581)));
evalcond[3]=(sj0+((r11*x5581))+((r12*x5575))+(((-1.0)*x5577*x5579)));
evalcond[4]=((((-1.0)*x5577*x5580))+cj0+(((-1.0)*r12*x5579))+((r11*x5582)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5576*x5580))+(((-1.0)*r02*x5579))+((r01*x5582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5583=((1.0)*cj5);
CheckValue<IkReal> x5584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5583)))),-1);
if(!x5584.valid){
continue;
}
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5583)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5584.value)))+(x5585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5586=IKcos(j4);
IkReal x5587=IKsin(j4);
IkReal x5588=(cj5*r00);
IkReal x5589=(cj5*r10);
IkReal x5590=(cj5*r20);
IkReal x5591=((1.0)*x5586);
IkReal x5592=((1.0)*x5587);
IkReal x5593=(sj5*x5586);
IkReal x5594=(sj5*x5587);
evalcond[0]=(((r21*x5593))+(((-1.0)*x5590*x5591))+((r22*x5587)));
evalcond[1]=(((r21*x5594))+(((-1.0)*x5590*x5592))+(((-1.0)*r22*x5591)));
evalcond[2]=((((-1.0)*x5588*x5591))+cj0+((r02*x5587))+((r01*x5593)));
evalcond[3]=(sj0+((r11*x5593))+((r12*x5587))+(((-1.0)*x5589*x5591)));
evalcond[4]=((((-1.0)*r12*x5591))+cj0+((r11*x5594))+(((-1.0)*x5589*x5592)));
evalcond[5]=((((-1.0)*x5588*x5592))+(((-1.0)*sj0))+(((-1.0)*r02*x5591))+((r01*x5594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5595 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
CheckValue<IkReal> x5596=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5595.value)+(((1.5707963267949)*(x5596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5597=IKcos(j4);
IkReal x5598=IKsin(j4);
IkReal x5599=(cj5*r00);
IkReal x5600=(cj5*r10);
IkReal x5601=(cj5*r20);
IkReal x5602=((1.0)*x5597);
IkReal x5603=((1.0)*x5598);
IkReal x5604=(sj5*x5597);
IkReal x5605=(sj5*x5598);
evalcond[0]=(((r21*x5604))+(((-1.0)*x5601*x5602))+((r22*x5598)));
evalcond[1]=((((-1.0)*r22*x5602))+((r21*x5605))+(((-1.0)*x5601*x5603)));
evalcond[2]=(cj0+((r02*x5598))+(((-1.0)*x5599*x5602))+((r01*x5604)));
evalcond[3]=(sj0+((r12*x5598))+((r11*x5604))+(((-1.0)*x5600*x5602)));
evalcond[4]=(cj0+(((-1.0)*r12*x5602))+((r11*x5605))+(((-1.0)*x5600*x5603)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5599*x5603))+((r01*x5605))+(((-1.0)*r02*x5602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5606=cj1*cj1;
IkReal x5607=(cj1*sj1);
IkReal x5608=(cj5*r01);
IkReal x5609=(r00*sj5);
IkReal x5610=(r10*sj5);
IkReal x5611=(cj5*r11);
IkReal x5612=(cj1*sj2);
IkReal x5613=((20000.0)*py);
IkReal x5614=(cj2*sj1);
IkReal x5615=((1893.0)*x5614);
IkReal x5616=(sj2*x5606);
CheckValue<IkReal> x5617=IKPowWithIntegerCheck(((((-15690.0)*x5607*(cj2*cj2)))+(((7845.0)*x5607))+(((7845.0)*cj2*sj2))+(((-15690.0)*cj2*x5616))+(((-8500.0)*cj2*x5607))+(((-8500.0)*x5616))),-1);
if(!x5617.valid){
continue;
}
CheckValue<IkReal> x5618=IKPowWithIntegerCheck(((((-1.0)*x5612))+(((-1.0)*x5614))),-1);
if(!x5618.valid){
continue;
}
if( IKabs(((x5617.value)*(((((-1.0)*x5613*x5614))+(((-1.0)*x5612*x5613))+(((-1893.0)*x5610*x5612))+(((2183.0)*x5608))+(((2183.0)*x5609))+(((-1893.0)*x5611*x5612))+(((-1.0)*x5610*x5615))+(((-1.0)*x5611*x5615)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5618.value)*(((((-1.0)*x5609))+(((-1.0)*x5608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5617.value)*(((((-1.0)*x5613*x5614))+(((-1.0)*x5612*x5613))+(((-1893.0)*x5610*x5612))+(((2183.0)*x5608))+(((2183.0)*x5609))+(((-1893.0)*x5611*x5612))+(((-1.0)*x5610*x5615))+(((-1.0)*x5611*x5615))))))+IKsqr(((x5618.value)*(((((-1.0)*x5609))+(((-1.0)*x5608))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5617.value)*(((((-1.0)*x5613*x5614))+(((-1.0)*x5612*x5613))+(((-1893.0)*x5610*x5612))+(((2183.0)*x5608))+(((2183.0)*x5609))+(((-1893.0)*x5611*x5612))+(((-1.0)*x5610*x5615))+(((-1.0)*x5611*x5615))))), ((x5618.value)*(((((-1.0)*x5609))+(((-1.0)*x5608))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5619=IKcos(j0);
IkReal x5620=IKsin(j0);
IkReal x5621=(cj5*r01);
IkReal x5622=((1.0)*cj1);
IkReal x5623=((0.39225)*sj1);
IkReal x5624=(cj5*r11);
IkReal x5625=(r00*sj5);
IkReal x5626=((0.39225)*cj2);
IkReal x5627=(r10*sj5);
IkReal x5628=(sj2*x5619);
IkReal x5629=(sj2*x5620);
IkReal x5630=(cj1*x5619);
IkReal x5631=((1.0)*cj2*sj1);
IkReal x5632=(cj1*x5620);
evalcond[0]=(x5625+x5621+(((-1.0)*x5622*x5628))+(((-1.0)*x5619*x5631)));
evalcond[1]=(x5627+x5624+(((-1.0)*x5620*x5631))+(((-1.0)*x5622*x5629)));
evalcond[2]=((((-0.10915)*x5620))+((x5626*x5630))+(((-1.0)*px))+(((-1.0)*x5623*x5628))+(((0.425)*x5630))+(((-0.09465)*x5625))+(((-0.09465)*x5621)));
evalcond[3]=(((x5626*x5632))+(((0.10915)*x5619))+(((-1.0)*py))+(((-1.0)*x5623*x5629))+(((0.425)*x5632))+(((-0.09465)*x5627))+(((-0.09465)*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5633=((1.0)*cj5);
IkReal x5634=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5633)));
j4eval[0]=x5634;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5633)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5634);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5635=((1.0)*cj5);
IkReal x5636=((((-1.0)*r11*x5635))+(((-1.0)*r10*sj5)));
j4eval[0]=x5636;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x5635))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5637=((1.0)*sj0);
IkReal x5638=((1.0)*cj0);
IkReal x5639=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5639;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5638))+(((-1.0)*r11*sj5*x5637))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x5637))+(((-1.0)*r02*x5638))))));
j4eval[2]=IKsign(x5639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5640=((-1.0)*r20);
IkReal x5642 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5642)==0){
continue;
}
IkReal x5641=pow(x5642,-0.5);
CheckValue<IkReal> x5643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5640),IKFAST_ATAN2_MAGTHRESH);
if(!x5643.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5643.value));
IkReal gconst115=(r21*x5641);
IkReal gconst116=(x5640*x5641);
CheckValue<IkReal> x5644 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5644.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5644.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5645=((-1.0)*r20);
IkReal x5646=x5641;
CheckValue<IkReal> x5648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5645),IKFAST_ATAN2_MAGTHRESH);
if(!x5648.valid){
continue;
}
IkReal x5647=((-1.0)*(x5648.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5647;
IkReal gconst114=x5647;
IkReal gconst115=(r21*x5646);
IkReal gconst116=(x5645*x5646);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5649=((-1.0)*r20);
IkReal x5650=x5641;
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5649),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
IkReal x5651=((-1.0)*(x5652.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5651;
IkReal gconst114=x5651;
IkReal gconst115=(r21*x5650);
IkReal gconst116=(x5649*x5650);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5653=((-1.0)*r20);
IkReal x5654=x5641;
CheckValue<IkReal> x5656 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5653),IKFAST_ATAN2_MAGTHRESH);
if(!x5656.valid){
continue;
}
IkReal x5655=((-1.0)*(x5656.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5655;
IkReal gconst114=x5655;
IkReal gconst115=(r21*x5654);
IkReal gconst116=(x5653*x5654);
IkReal x5657=((1.0)*(r22*r22));
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5657))),-1);
if(!x5661.valid){
continue;
}
IkReal x5658=x5661.value;
IkReal x5659=((1.0)*x5658);
IkReal x5660=((((-1.0)*x5659*(r21*r21*r21*r21)))+(((-2.0)*x5658*(r20*r20)*(r21*r21)))+(((-1.0)*x5657))+(((-1.0)*x5659*(r20*r20*r20*r20))));
j4eval[0]=x5660;
j4eval[1]=IKsign(x5660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5662=(cj2*sj1);
IkReal x5663=(gconst115*r21);
IkReal x5664=(cj1*sj2);
IkReal x5665=((1.0)*gconst116*r20);
CheckValue<IkReal> x5666=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5663))+(((-1.0)*(x5663*x5663)))+(((-1.0)*gconst116*r20*x5665)))),-1);
if(!x5666.valid){
continue;
}
CheckValue<IkReal> x5667 = IKatan2WithCheck(IkReal((((r22*x5664))+((r22*x5662)))),IkReal(((((-1.0)*x5662*x5665))+((x5663*x5664))+((x5662*x5663))+(((-1.0)*x5664*x5665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5666.value)))+(x5667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5668=IKsin(j4);
IkReal x5669=IKcos(j4);
IkReal x5670=(sj1*sj2);
IkReal x5671=((1.0)*x5669);
IkReal x5672=((1.0)*cj1*cj2);
IkReal x5673=(gconst115*x5668);
IkReal x5674=(gconst115*x5669);
IkReal x5675=((1.0)*gconst116*x5668);
evalcond[0]=((((-1.0)*r22*x5671))+((r21*x5673))+(((-1.0)*r20*x5675)));
evalcond[1]=(cj0+(((-1.0)*r12*x5671))+(((-1.0)*r10*x5675))+((r11*x5673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5675))+((r01*x5673))+(((-1.0)*r02*x5671)));
evalcond[3]=(((cj2*sj1))+((r22*x5668))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5671))+((r21*x5674)));
evalcond[4]=(((cj0*x5670))+((r02*x5668))+(((-1.0)*cj0*x5672))+((r01*x5674))+(((-1.0)*gconst116*r00*x5671)));
evalcond[5]=(((sj0*x5670))+((r11*x5674))+(((-1.0)*gconst116*r10*x5671))+((r12*x5668))+(((-1.0)*sj0*x5672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5676=((1.0)*gconst116);
CheckValue<IkReal> x5677=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5676)))),-1);
if(!x5677.valid){
continue;
}
CheckValue<IkReal> x5678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5676))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5677.value)))+(x5678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5679=IKsin(j4);
IkReal x5680=IKcos(j4);
IkReal x5681=(sj1*sj2);
IkReal x5682=((1.0)*x5680);
IkReal x5683=((1.0)*cj1*cj2);
IkReal x5684=(gconst115*x5679);
IkReal x5685=(gconst115*x5680);
IkReal x5686=((1.0)*gconst116*x5679);
evalcond[0]=((((-1.0)*r22*x5682))+((r21*x5684))+(((-1.0)*r20*x5686)));
evalcond[1]=(cj0+(((-1.0)*r10*x5686))+((r11*x5684))+(((-1.0)*r12*x5682)));
evalcond[2]=((((-1.0)*r02*x5682))+(((-1.0)*sj0))+((r01*x5684))+(((-1.0)*r00*x5686)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5682))+((r22*x5679))+((r21*x5685)));
evalcond[4]=(((r02*x5679))+(((-1.0)*cj0*x5683))+(((-1.0)*gconst116*r00*x5682))+((cj0*x5681))+((r01*x5685)));
evalcond[5]=((((-1.0)*sj0*x5683))+((sj0*x5681))+((r12*x5679))+(((-1.0)*gconst116*r10*x5682))+((r11*x5685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5687=((1.0)*gconst116);
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
CheckValue<IkReal> x5689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5687)))),-1);
if(!x5689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5688.value)+(((1.5707963267949)*(x5689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5690=IKsin(j4);
IkReal x5691=IKcos(j4);
IkReal x5692=(sj1*sj2);
IkReal x5693=((1.0)*x5691);
IkReal x5694=((1.0)*cj1*cj2);
IkReal x5695=(gconst115*x5690);
IkReal x5696=(gconst115*x5691);
IkReal x5697=((1.0)*gconst116*x5690);
evalcond[0]=((((-1.0)*r22*x5693))+((r21*x5695))+(((-1.0)*r20*x5697)));
evalcond[1]=(cj0+(((-1.0)*r10*x5697))+((r11*x5695))+(((-1.0)*r12*x5693)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5693))+(((-1.0)*r00*x5697))+((r01*x5695)));
evalcond[3]=(((cj2*sj1))+((r22*x5690))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5693))+((r21*x5696)));
evalcond[4]=((((-1.0)*cj0*x5694))+((r02*x5690))+(((-1.0)*gconst116*r00*x5693))+((cj0*x5692))+((r01*x5696)));
evalcond[5]=((((-1.0)*sj0*x5694))+((sj0*x5692))+((r12*x5690))+(((-1.0)*gconst116*r10*x5693))+((r11*x5696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5698=((-1.0)*r21);
IkReal x5700 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5700)==0){
continue;
}
IkReal x5699=pow(x5700,-0.5);
CheckValue<IkReal> x5701 = IKatan2WithCheck(IkReal(x5698),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5701.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5701.value))));
IkReal gconst118=(x5698*x5699);
IkReal gconst119=((1.0)*r20*x5699);
CheckValue<IkReal> x5702 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5702.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5702.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5703=((-1.0)*r21);
CheckValue<IkReal> x5706 = IKatan2WithCheck(IkReal(x5703),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5706.valid){
continue;
}
IkReal x5704=((1.0)*(x5706.value));
IkReal x5705=x5699;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5704)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5704)));
IkReal gconst118=(x5703*x5705);
IkReal gconst119=((1.0)*r20*x5705);
IkReal x5707=r22*r22;
IkReal x5708=((1.0)*x5707);
CheckValue<IkReal> x5712=IKPowWithIntegerCheck(((-1.0)+x5707),-1);
if(!x5712.valid){
continue;
}
IkReal x5709=x5712.value;
if((((1.0)+(((-1.0)*x5708)))) < -0.00001)
continue;
IkReal x5710=IKsqrt(((1.0)+(((-1.0)*x5708))));
IkReal x5711=(cj0*x5709*x5710);
j4eval[0]=((IKabs(((((-1.0)*x5708*x5711))+x5711)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5713=((-1.0)*r21);
CheckValue<IkReal> x5716 = IKatan2WithCheck(IkReal(x5713),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5716.valid){
continue;
}
IkReal x5714=((1.0)*(x5716.value));
IkReal x5715=x5699;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5714)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5714)));
IkReal gconst118=(x5713*x5715);
IkReal gconst119=((1.0)*r20*x5715);
IkReal x5717=r22*r22;
IkReal x5718=((1.0)*x5717);
CheckValue<IkReal> x5722=IKPowWithIntegerCheck(((-1.0)+x5717),-1);
if(!x5722.valid){
continue;
}
IkReal x5719=x5722.value;
if((((1.0)+(((-1.0)*x5718)))) < -0.00001)
continue;
IkReal x5720=IKsqrt(((1.0)+(((-1.0)*x5718))));
IkReal x5721=(sj0*x5719*x5720);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5718*x5721))+x5721))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5723=((-1.0)*r21);
CheckValue<IkReal> x5726 = IKatan2WithCheck(IkReal(x5723),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5726.valid){
continue;
}
IkReal x5724=((1.0)*(x5726.value));
IkReal x5725=x5699;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5724)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5724)));
IkReal gconst118=(x5723*x5725);
IkReal gconst119=((1.0)*r20*x5725);
IkReal x5727=r22*r22;
IkReal x5728=(r12*sj0);
IkReal x5729=(cj0*r02);
CheckValue<IkReal> x5733=IKPowWithIntegerCheck(((-1.0)+x5727),-1);
if(!x5733.valid){
continue;
}
IkReal x5730=x5733.value;
if((((1.0)+(((-1.0)*x5727)))) < -0.00001)
continue;
IkReal x5731=IKsqrt(((1.0)+(((-1.0)*x5727))));
IkReal x5732=(r22*x5730*x5731);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5728))+(((-1.0)*x5729)))))+(IKabs((((x5729*x5732))+((x5728*x5732))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5734=((1.0)*sj0);
IkReal x5735=((1.0)*gconst118);
CheckValue<IkReal> x5736 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5734))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5735))+(((-1.0)*gconst118*r11*x5734))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5736.valid){
continue;
}
CheckValue<IkReal> x5737=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5735)))),-1);
if(!x5737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5736.value)+(((1.5707963267949)*(x5737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5738=IKsin(j4);
IkReal x5739=IKcos(j4);
IkReal x5740=(gconst118*r01);
IkReal x5741=(sj1*sj2);
IkReal x5742=(gconst119*r20);
IkReal x5743=(gconst119*r10);
IkReal x5744=(gconst119*r00);
IkReal x5745=(gconst118*r21);
IkReal x5746=(gconst118*r11);
IkReal x5747=((1.0)*x5739);
IkReal x5748=((1.0)*cj1*cj2);
IkReal x5749=((1.0)*x5738);
evalcond[0]=((((-1.0)*r22*x5747))+(((-1.0)*x5742*x5749))+((x5738*x5745)));
evalcond[1]=(cj0+(((-1.0)*r12*x5747))+((x5738*x5746))+(((-1.0)*x5743*x5749)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5747))+(((-1.0)*x5744*x5749))+((x5738*x5740)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5742*x5747))+((x5739*x5745))+((r22*x5738)));
evalcond[4]=((((-1.0)*cj0*x5748))+((r02*x5738))+((cj0*x5741))+(((-1.0)*x5744*x5747))+((x5739*x5740)));
evalcond[5]=(((r12*x5738))+((sj0*x5741))+(((-1.0)*x5743*x5747))+((x5739*x5746))+(((-1.0)*sj0*x5748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5750=((1.0)*gconst119);
CheckValue<IkReal> x5751 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5750))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5751.valid){
continue;
}
CheckValue<IkReal> x5752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5750)))),-1);
if(!x5752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5751.value)+(((1.5707963267949)*(x5752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5753=IKsin(j4);
IkReal x5754=IKcos(j4);
IkReal x5755=(gconst118*r01);
IkReal x5756=(sj1*sj2);
IkReal x5757=(gconst119*r20);
IkReal x5758=(gconst119*r10);
IkReal x5759=(gconst119*r00);
IkReal x5760=(gconst118*r21);
IkReal x5761=(gconst118*r11);
IkReal x5762=((1.0)*x5754);
IkReal x5763=((1.0)*cj1*cj2);
IkReal x5764=((1.0)*x5753);
evalcond[0]=((((-1.0)*x5757*x5764))+(((-1.0)*r22*x5762))+((x5753*x5760)));
evalcond[1]=(cj0+(((-1.0)*r12*x5762))+(((-1.0)*x5758*x5764))+((x5753*x5761)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5759*x5764))+((x5753*x5755))+(((-1.0)*r02*x5762)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5754*x5760))+(((-1.0)*x5757*x5762))+((r22*x5753)));
evalcond[4]=(((x5754*x5755))+(((-1.0)*cj0*x5763))+(((-1.0)*x5759*x5762))+((r02*x5753))+((cj0*x5756)));
evalcond[5]=(((x5754*x5761))+(((-1.0)*sj0*x5763))+(((-1.0)*x5758*x5762))+((sj0*x5756))+((r12*x5753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5765=((1.0)*gconst119);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
CheckValue<IkReal> x5767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5765))+(((-1.0)*gconst118*r00)))),-1);
if(!x5767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5766.value)+(((1.5707963267949)*(x5767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5768=IKsin(j4);
IkReal x5769=IKcos(j4);
IkReal x5770=(gconst118*r01);
IkReal x5771=(sj1*sj2);
IkReal x5772=(gconst119*r20);
IkReal x5773=(gconst119*r10);
IkReal x5774=(gconst119*r00);
IkReal x5775=(gconst118*r21);
IkReal x5776=(gconst118*r11);
IkReal x5777=((1.0)*x5769);
IkReal x5778=((1.0)*cj1*cj2);
IkReal x5779=((1.0)*x5768);
evalcond[0]=((((-1.0)*r22*x5777))+((x5768*x5775))+(((-1.0)*x5772*x5779)));
evalcond[1]=(cj0+(((-1.0)*r12*x5777))+((x5768*x5776))+(((-1.0)*x5773*x5779)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5774*x5779))+(((-1.0)*r02*x5777))+((x5768*x5770)));
evalcond[3]=(((cj2*sj1))+((x5769*x5775))+((cj1*sj2))+((r22*x5768))+(((-1.0)*x5772*x5777)));
evalcond[4]=(((x5769*x5770))+(((-1.0)*x5774*x5777))+(((-1.0)*cj0*x5778))+((cj0*x5771))+((r02*x5768)));
evalcond[5]=(((x5769*x5776))+(((-1.0)*sj0*x5778))+((r12*x5768))+(((-1.0)*x5773*x5777))+((sj0*x5771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5780=((-1.0)*r10);
IkReal x5782 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5782)==0){
continue;
}
IkReal x5781=pow(x5782,-0.5);
CheckValue<IkReal> x5783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5780),IKFAST_ATAN2_MAGTHRESH);
if(!x5783.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5783.value));
IkReal gconst121=(r11*x5781);
IkReal gconst122=(x5780*x5781);
CheckValue<IkReal> x5784 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5784.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5784.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5785=((-1.0)*r10);
IkReal x5786=x5781;
CheckValue<IkReal> x5788 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5785),IKFAST_ATAN2_MAGTHRESH);
if(!x5788.valid){
continue;
}
IkReal x5787=((-1.0)*(x5788.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5787;
IkReal gconst120=x5787;
IkReal gconst121=(r11*x5786);
IkReal gconst122=(x5785*x5786);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5789=((1.0)*sj0);
IkReal x5790=((1.0)*gconst121);
CheckValue<IkReal> x5791 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5789)))),IkReal(((((-1.0)*gconst121*r11*x5789))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x5790))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5790))+(((-1.0)*gconst122*r21)))),-1);
if(!x5792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5791.value)+(((1.5707963267949)*(x5792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5793=IKsin(j4);
IkReal x5794=IKcos(j4);
IkReal x5795=(gconst121*r11);
IkReal x5796=(sj1*sj2);
IkReal x5797=(gconst122*r00);
IkReal x5798=(gconst122*r10);
IkReal x5799=(gconst122*r20);
IkReal x5800=((1.0)*x5794);
IkReal x5801=((1.0)*cj1*cj2);
IkReal x5802=((1.0)*x5793);
IkReal x5803=(gconst121*x5793);
IkReal x5804=(gconst121*x5794);
evalcond[0]=((((-1.0)*r22*x5800))+((r21*x5803))+(((-1.0)*x5799*x5802)));
evalcond[1]=(((x5793*x5795))+cj0+(((-1.0)*x5798*x5802))+(((-1.0)*r12*x5800)));
evalcond[2]=((((-1.0)*x5797*x5802))+(((-1.0)*sj0))+((r01*x5803))+(((-1.0)*r02*x5800)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5804))+((r22*x5793))+(((-1.0)*x5799*x5800)));
evalcond[4]=((((-1.0)*x5797*x5800))+((r01*x5804))+(((-1.0)*cj0*x5801))+((cj0*x5796))+((r02*x5793)));
evalcond[5]=((((-1.0)*x5798*x5800))+((r12*x5793))+((x5794*x5795))+((sj0*x5796))+(((-1.0)*sj0*x5801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5805=((1.0)*gconst122);
CheckValue<IkReal> x5806=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5805)))),-1);
if(!x5806.valid){
continue;
}
CheckValue<IkReal> x5807 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5805))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5806.value)))+(x5807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5808=IKsin(j4);
IkReal x5809=IKcos(j4);
IkReal x5810=(gconst121*r11);
IkReal x5811=(sj1*sj2);
IkReal x5812=(gconst122*r00);
IkReal x5813=(gconst122*r10);
IkReal x5814=(gconst122*r20);
IkReal x5815=((1.0)*x5809);
IkReal x5816=((1.0)*cj1*cj2);
IkReal x5817=((1.0)*x5808);
IkReal x5818=(gconst121*x5808);
IkReal x5819=(gconst121*x5809);
evalcond[0]=(((r21*x5818))+(((-1.0)*x5814*x5817))+(((-1.0)*r22*x5815)));
evalcond[1]=((((-1.0)*r12*x5815))+cj0+(((-1.0)*x5813*x5817))+((x5808*x5810)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5815))+(((-1.0)*x5812*x5817))+((r01*x5818)));
evalcond[3]=(((r21*x5819))+((cj2*sj1))+(((-1.0)*x5814*x5815))+((cj1*sj2))+((r22*x5808)));
evalcond[4]=((((-1.0)*cj0*x5816))+((r02*x5808))+((cj0*x5811))+(((-1.0)*x5812*x5815))+((r01*x5819)));
evalcond[5]=((((-1.0)*sj0*x5816))+(((-1.0)*x5813*x5815))+((sj0*x5811))+((x5809*x5810))+((r12*x5808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5820=((-1.0)*r11);
IkReal x5822 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5822)==0){
continue;
}
IkReal x5821=pow(x5822,-0.5);
CheckValue<IkReal> x5823 = IKatan2WithCheck(IkReal(x5820),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5823.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5823.value))));
IkReal gconst124=(x5820*x5821);
IkReal gconst125=((1.0)*r10*x5821);
CheckValue<IkReal> x5824 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5825=((-1.0)*r11);
CheckValue<IkReal> x5828 = IKatan2WithCheck(IkReal(x5825),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5828.valid){
continue;
}
IkReal x5826=((1.0)*(x5828.value));
IkReal x5827=x5821;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5826)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5826)));
IkReal gconst124=(x5825*x5827);
IkReal gconst125=((1.0)*r10*x5827);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5829=((-1.0)*r11);
CheckValue<IkReal> x5832 = IKatan2WithCheck(IkReal(x5829),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5832.valid){
continue;
}
IkReal x5830=((1.0)*(x5832.value));
IkReal x5831=x5821;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5830)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5830)));
IkReal gconst124=(x5829*x5831);
IkReal gconst125=((1.0)*r10*x5831);
IkReal x5833=r12*r12;
IkReal x5834=((1.0)*sj0);
IkReal x5835=(cj0*r02);
IkReal x5836=x5821;
j4eval[0]=((IKabs(((((-1.0)*r12*x5834))+(((-1.0)*x5835)))))+(IKabs((((sj0*x5833*x5836))+((r12*x5835*x5836))+(((-1.0)*x5834*x5836))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5837=((-1.0)*r11);
CheckValue<IkReal> x5840 = IKatan2WithCheck(IkReal(x5837),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5840.valid){
continue;
}
IkReal x5838=((1.0)*(x5840.value));
IkReal x5839=x5821;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5838)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5838)));
IkReal gconst124=(x5837*x5839);
IkReal gconst125=((1.0)*r10*x5839);
IkReal x5841=r12*r12;
IkReal x5842=((1.0)+(((-1.0)*x5841)));
IkReal x5843=(cj2*r22*sj1);
IkReal x5844=(cj1*r22*sj2);
CheckValue<IkReal> x5851=IKPowWithIntegerCheck(x5842,-1);
if(!x5851.valid){
continue;
}
IkReal x5845=x5851.value;
CheckValue<IkReal> x5852=IKPowWithIntegerCheck(((-1.0)+x5841),-1);
if(!x5852.valid){
continue;
}
IkReal x5846=x5852.value;
IkReal x5847=((1.0)*x5845);
if((x5842) < -0.00001)
continue;
IkReal x5848=IKsqrt(x5842);
IkReal x5849=((1.0)*r12*x5846*x5848);
IkReal x5850=((((-1.0)*x5847*(r10*r10)*(r20*r20)))+(((-1.0)*x5847*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5845)));
j4eval[0]=x5850;
j4eval[1]=IKsign(x5850);
j4eval[2]=((IKabs((x5844+x5843)))+(IKabs(((((-1.0)*x5844*x5849))+(((-1.0)*x5843*x5849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5853=(gconst124*r21);
IkReal x5854=(cj1*sj2);
IkReal x5855=(cj2*sj1);
IkReal x5856=(gconst125*r20);
CheckValue<IkReal> x5857=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5856*x5856)))+(((2.0)*x5853*x5856))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5853*x5853))))),-1);
if(!x5857.valid){
continue;
}
CheckValue<IkReal> x5858 = IKatan2WithCheck(IkReal((((r22*x5854))+((r22*x5855)))),IkReal(((((-1.0)*x5855*x5856))+(((-1.0)*x5854*x5856))+((x5853*x5854))+((x5853*x5855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5857.value)))+(x5858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5859=IKsin(j4);
IkReal x5860=IKcos(j4);
IkReal x5861=(sj1*sj2);
IkReal x5862=(gconst125*r20);
IkReal x5863=(gconst124*r01);
IkReal x5864=(gconst125*r00);
IkReal x5865=(gconst125*r10);
IkReal x5866=((1.0)*x5860);
IkReal x5867=((1.0)*cj1*cj2);
IkReal x5868=((1.0)*x5859);
IkReal x5869=(gconst124*x5859);
IkReal x5870=(gconst124*x5860);
evalcond[0]=((((-1.0)*r22*x5866))+((r21*x5869))+(((-1.0)*x5862*x5868)));
evalcond[1]=(cj0+((r11*x5869))+(((-1.0)*x5865*x5868))+(((-1.0)*r12*x5866)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5866))+(((-1.0)*x5864*x5868))+((x5859*x5863)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5862*x5866))+((r22*x5859))+((r21*x5870)));
evalcond[4]=(((x5860*x5863))+(((-1.0)*cj0*x5867))+((r02*x5859))+((cj0*x5861))+(((-1.0)*x5864*x5866)));
evalcond[5]=((((-1.0)*sj0*x5867))+((r12*x5859))+((sj0*x5861))+((r11*x5870))+(((-1.0)*x5865*x5866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5871=((1.0)*sj0);
IkReal x5872=((1.0)*cj0);
CheckValue<IkReal> x5873 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5871))+(((-1.0)*r02*x5872)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5872))+(((-1.0)*gconst124*r11*x5871))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5873.valid){
continue;
}
CheckValue<IkReal> x5874=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5873.value)+(((1.5707963267949)*(x5874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5875=IKsin(j4);
IkReal x5876=IKcos(j4);
IkReal x5877=(sj1*sj2);
IkReal x5878=(gconst125*r20);
IkReal x5879=(gconst124*r01);
IkReal x5880=(gconst125*r00);
IkReal x5881=(gconst125*r10);
IkReal x5882=((1.0)*x5876);
IkReal x5883=((1.0)*cj1*cj2);
IkReal x5884=((1.0)*x5875);
IkReal x5885=(gconst124*x5875);
IkReal x5886=(gconst124*x5876);
evalcond[0]=(((r21*x5885))+(((-1.0)*r22*x5882))+(((-1.0)*x5878*x5884)));
evalcond[1]=(cj0+((r11*x5885))+(((-1.0)*r12*x5882))+(((-1.0)*x5881*x5884)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5880*x5884))+(((-1.0)*r02*x5882))+((x5875*x5879)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5875))+((r21*x5886))+(((-1.0)*x5878*x5882)));
evalcond[4]=((((-1.0)*x5880*x5882))+((r02*x5875))+(((-1.0)*cj0*x5883))+((cj0*x5877))+((x5876*x5879)));
evalcond[5]=(((sj0*x5877))+((r11*x5886))+((r12*x5875))+(((-1.0)*sj0*x5883))+(((-1.0)*x5881*x5882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5887=((1.0)*gconst125);
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5887))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5887)))),-1);
if(!x5889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5888.value)+(((1.5707963267949)*(x5889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5890=IKsin(j4);
IkReal x5891=IKcos(j4);
IkReal x5892=(sj1*sj2);
IkReal x5893=(gconst125*r20);
IkReal x5894=(gconst124*r01);
IkReal x5895=(gconst125*r00);
IkReal x5896=(gconst125*r10);
IkReal x5897=((1.0)*x5891);
IkReal x5898=((1.0)*cj1*cj2);
IkReal x5899=((1.0)*x5890);
IkReal x5900=(gconst124*x5890);
IkReal x5901=(gconst124*x5891);
evalcond[0]=((((-1.0)*x5893*x5899))+(((-1.0)*r22*x5897))+((r21*x5900)));
evalcond[1]=((((-1.0)*r12*x5897))+(((-1.0)*x5896*x5899))+cj0+((r11*x5900)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5897))+(((-1.0)*x5895*x5899))+((x5890*x5894)));
evalcond[3]=(((r22*x5890))+((cj2*sj1))+(((-1.0)*x5893*x5897))+((cj1*sj2))+((r21*x5901)));
evalcond[4]=(((cj0*x5892))+((r02*x5890))+(((-1.0)*cj0*x5898))+(((-1.0)*x5895*x5897))+((x5891*x5894)));
evalcond[5]=((((-1.0)*x5896*x5897))+((sj0*x5892))+(((-1.0)*sj0*x5898))+((r12*x5890))+((r11*x5901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5902=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5902;
j4eval[1]=IKsign(x5902);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5903=((1.0)*cj5);
IkReal x5904=((((-1.0)*r01*x5903))+(((-1.0)*r00*sj5)));
j4eval[0]=x5904;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5903)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5905=cj5*cj5;
IkReal x5906=r11*r11;
IkReal x5907=(cj5*r10);
IkReal x5908=(r11*sj5);
IkReal x5909=((((2.0)*x5907*x5908))+(((-1.0)*(r12*r12)))+((x5905*x5906))+(((-1.0)*x5905*(r10*r10)))+(((-1.0)*x5906)));
j4eval[0]=x5909;
j4eval[1]=IKsign(x5909);
j4eval[2]=((IKabs(r12))+(IKabs((x5908+(((-1.0)*x5907))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5910=cj5*cj5;
IkReal x5911=r11*r11;
IkReal x5912=(cj5*r10);
IkReal x5913=(r11*sj5);
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal((x5913+(((-1.0)*x5912)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
CheckValue<IkReal> x5915=IKPowWithIntegerCheck(IKsign((((x5910*x5911))+(((2.0)*x5912*x5913))+(((-1.0)*(r12*r12)))+(((-1.0)*x5910*(r10*r10)))+(((-1.0)*x5911)))),-1);
if(!x5915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5914.value)+(((1.5707963267949)*(x5915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5916=IKcos(j4);
IkReal x5917=IKsin(j4);
IkReal x5918=(cj5*r00);
IkReal x5919=(cj5*r10);
IkReal x5920=(r21*sj5);
IkReal x5921=(cj5*r20);
IkReal x5922=((1.0)*x5916);
IkReal x5923=((1.0)*x5917);
IkReal x5924=(sj5*x5917);
IkReal x5925=(sj5*x5916);
evalcond[0]=(((r12*x5917))+((r11*x5925))+(((-1.0)*x5919*x5922)));
evalcond[1]=((((-1.0)*r22*x5922))+((x5917*x5920))+(((-1.0)*x5921*x5923)));
evalcond[2]=((((-1.0)*x5918*x5923))+(((-1.0)*r02*x5922))+((r01*x5924)));
evalcond[3]=((1.0)+((r11*x5924))+(((-1.0)*r12*x5922))+(((-1.0)*x5919*x5923)));
evalcond[4]=(((cj2*sj1))+((r22*x5917))+((cj1*sj2))+((x5916*x5920))+(((-1.0)*x5921*x5922)));
evalcond[5]=((((-1.0)*x5918*x5922))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5917))+((r01*x5925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5926=((1.0)*cj5);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
CheckValue<IkReal> x5928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5926))+(((-1.0)*r00*sj5)))),-1);
if(!x5928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5927.value)+(((1.5707963267949)*(x5928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5929=IKcos(j4);
IkReal x5930=IKsin(j4);
IkReal x5931=(cj5*r00);
IkReal x5932=(cj5*r10);
IkReal x5933=(r21*sj5);
IkReal x5934=(cj5*r20);
IkReal x5935=((1.0)*x5929);
IkReal x5936=((1.0)*x5930);
IkReal x5937=(sj5*x5930);
IkReal x5938=(sj5*x5929);
evalcond[0]=(((r11*x5938))+((r12*x5930))+(((-1.0)*x5932*x5935)));
evalcond[1]=((((-1.0)*x5934*x5936))+((x5930*x5933))+(((-1.0)*r22*x5935)));
evalcond[2]=((((-1.0)*r02*x5935))+(((-1.0)*x5931*x5936))+((r01*x5937)));
evalcond[3]=((1.0)+((r11*x5937))+(((-1.0)*x5932*x5936))+(((-1.0)*r12*x5935)));
evalcond[4]=((((-1.0)*x5934*x5935))+((cj2*sj1))+((x5929*x5933))+((cj1*sj2))+((r22*x5930)));
evalcond[5]=((((-1.0)*x5931*x5935))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5938))+((r02*x5930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5939=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5939.valid){
continue;
}
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5939.value)))+(x5940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5941=IKcos(j4);
IkReal x5942=IKsin(j4);
IkReal x5943=(cj5*r00);
IkReal x5944=(cj5*r10);
IkReal x5945=(r21*sj5);
IkReal x5946=(cj5*r20);
IkReal x5947=((1.0)*x5941);
IkReal x5948=((1.0)*x5942);
IkReal x5949=(sj5*x5942);
IkReal x5950=(sj5*x5941);
evalcond[0]=((((-1.0)*x5944*x5947))+((r11*x5950))+((r12*x5942)));
evalcond[1]=((((-1.0)*r22*x5947))+((x5942*x5945))+(((-1.0)*x5946*x5948)));
evalcond[2]=(((r01*x5949))+(((-1.0)*x5943*x5948))+(((-1.0)*r02*x5947)));
evalcond[3]=((1.0)+(((-1.0)*x5944*x5948))+(((-1.0)*r12*x5947))+((r11*x5949)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5942))+((x5941*x5945))+(((-1.0)*x5946*x5947)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5943*x5947))+((r02*x5942))+((r01*x5950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5951=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5951;
j4eval[1]=IKsign(x5951);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5952=((1.0)*cj5);
IkReal x5953=((((-1.0)*r21*x5952))+(((-1.0)*r20*sj5)));
j4eval[0]=x5953;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5952))))));
j4eval[2]=IKsign(x5953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5954=cj5*cj5;
IkReal x5955=r11*r11;
IkReal x5956=(r11*sj5);
IkReal x5957=(cj5*r10);
IkReal x5958=((r12*r12)+(((-1.0)*x5954*x5955))+(((-2.0)*x5956*x5957))+x5955+((x5954*(r10*r10))));
j4eval[0]=x5958;
j4eval[1]=IKsign(x5958);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5957))+x5956))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5959=cj5*cj5;
IkReal x5960=r11*r11;
IkReal x5961=(cj5*r10);
IkReal x5962=(r11*sj5);
CheckValue<IkReal> x5963 = IKatan2WithCheck(IkReal(((((-1.0)*x5961))+x5962)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5963.valid){
continue;
}
CheckValue<IkReal> x5964=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5959*(r10*r10)))+(((-1.0)*x5959*x5960))+x5960+(((-2.0)*x5961*x5962)))),-1);
if(!x5964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5963.value)+(((1.5707963267949)*(x5964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5965=IKcos(j4);
IkReal x5966=IKsin(j4);
IkReal x5967=(cj5*r00);
IkReal x5968=(cj5*r10);
IkReal x5969=(r21*sj5);
IkReal x5970=(cj5*r20);
IkReal x5971=((1.0)*x5965);
IkReal x5972=((1.0)*x5966);
IkReal x5973=(sj5*x5966);
IkReal x5974=(sj5*x5965);
evalcond[0]=(((r11*x5974))+((r12*x5966))+(((-1.0)*x5968*x5971)));
evalcond[1]=((((-1.0)*r22*x5971))+((x5966*x5969))+(((-1.0)*x5970*x5972)));
evalcond[2]=((((-1.0)*r02*x5971))+((r01*x5973))+(((-1.0)*x5967*x5972)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5971))+((r11*x5973))+(((-1.0)*x5968*x5972)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5966))+((x5965*x5969))+(((-1.0)*x5970*x5971)));
evalcond[5]=(((r02*x5966))+(((-1.0)*sj1*sj2))+((r01*x5974))+((cj1*cj2))+(((-1.0)*x5967*x5971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5975=((1.0)*cj5);
CheckValue<IkReal> x5976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5975))+(((-1.0)*r20*sj5)))),-1);
if(!x5976.valid){
continue;
}
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5976.value)))+(x5977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5978=IKcos(j4);
IkReal x5979=IKsin(j4);
IkReal x5980=(cj5*r00);
IkReal x5981=(cj5*r10);
IkReal x5982=(r21*sj5);
IkReal x5983=(cj5*r20);
IkReal x5984=((1.0)*x5978);
IkReal x5985=((1.0)*x5979);
IkReal x5986=(sj5*x5979);
IkReal x5987=(sj5*x5978);
evalcond[0]=(((r11*x5987))+(((-1.0)*x5981*x5984))+((r12*x5979)));
evalcond[1]=(((x5979*x5982))+(((-1.0)*r22*x5984))+(((-1.0)*x5983*x5985)));
evalcond[2]=((((-1.0)*x5980*x5985))+(((-1.0)*r02*x5984))+((r01*x5986)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5984))+((r11*x5986))+(((-1.0)*x5981*x5985)));
evalcond[4]=(((cj2*sj1))+((x5978*x5982))+((cj1*sj2))+((r22*x5979))+(((-1.0)*x5983*x5984)));
evalcond[5]=((((-1.0)*x5980*x5984))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x5979))+((r01*x5987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5988 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5988.valid){
continue;
}
CheckValue<IkReal> x5989=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5988.value)+(((1.5707963267949)*(x5989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5990=IKcos(j4);
IkReal x5991=IKsin(j4);
IkReal x5992=(cj5*r00);
IkReal x5993=(cj5*r10);
IkReal x5994=(r21*sj5);
IkReal x5995=(cj5*r20);
IkReal x5996=((1.0)*x5990);
IkReal x5997=((1.0)*x5991);
IkReal x5998=(sj5*x5991);
IkReal x5999=(sj5*x5990);
evalcond[0]=(((r12*x5991))+((r11*x5999))+(((-1.0)*x5993*x5996)));
evalcond[1]=((((-1.0)*x5995*x5997))+(((-1.0)*r22*x5996))+((x5991*x5994)));
evalcond[2]=((((-1.0)*x5992*x5997))+(((-1.0)*r02*x5996))+((r01*x5998)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5996))+((r11*x5998))+(((-1.0)*x5993*x5997)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5990*x5994))+(((-1.0)*x5995*x5996))+((r22*x5991)));
evalcond[5]=((((-1.0)*x5992*x5996))+(((-1.0)*sj1*sj2))+((r02*x5991))+((cj1*cj2))+((r01*x5999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6000=((-1.0)*r00);
IkReal x6002 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6002)==0){
continue;
}
IkReal x6001=pow(x6002,-0.5);
CheckValue<IkReal> x6003 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6000),IKFAST_ATAN2_MAGTHRESH);
if(!x6003.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6003.value));
IkReal gconst127=(r01*x6001);
IkReal gconst128=(x6000*x6001);
CheckValue<IkReal> x6004 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6004.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6004.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6005=((-1.0)*r00);
IkReal x6006=x6001;
CheckValue<IkReal> x6008 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6005),IKFAST_ATAN2_MAGTHRESH);
if(!x6008.valid){
continue;
}
IkReal x6007=((-1.0)*(x6008.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6007;
IkReal gconst126=x6007;
IkReal gconst127=(r01*x6006);
IkReal gconst128=(x6005*x6006);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6009=((1.0)*sj0);
IkReal x6010=((1.0)*gconst127);
CheckValue<IkReal> x6011=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6010)))),-1);
if(!x6011.valid){
continue;
}
CheckValue<IkReal> x6012 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6009))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6010))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6011.value)))+(x6012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6013=IKsin(j4);
IkReal x6014=IKcos(j4);
IkReal x6015=(gconst127*r01);
IkReal x6016=(sj1*sj2);
IkReal x6017=(gconst128*r10);
IkReal x6018=(gconst128*r00);
IkReal x6019=(gconst128*r20);
IkReal x6020=((1.0)*x6014);
IkReal x6021=((1.0)*cj1*cj2);
IkReal x6022=((1.0)*x6013);
IkReal x6023=(gconst127*x6014);
IkReal x6024=(gconst127*x6013);
evalcond[0]=((((-1.0)*r22*x6020))+((r21*x6024))+(((-1.0)*x6019*x6022)));
evalcond[1]=(cj0+(((-1.0)*x6017*x6022))+((r11*x6024))+(((-1.0)*r12*x6020)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6020))+(((-1.0)*x6018*x6022))+((x6013*x6015)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6023))+(((-1.0)*x6019*x6020))+((r22*x6013)));
evalcond[4]=((((-1.0)*cj0*x6021))+((cj0*x6016))+((r02*x6013))+(((-1.0)*x6018*x6020))+((x6014*x6015)));
evalcond[5]=(((r12*x6013))+(((-1.0)*x6017*x6020))+(((-1.0)*sj0*x6021))+((sj0*x6016))+((r11*x6023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6025=((1.0)*gconst128);
CheckValue<IkReal> x6026 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6026.valid){
continue;
}
CheckValue<IkReal> x6027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6025))+(((-1.0)*gconst127*r10)))),-1);
if(!x6027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6026.value)+(((1.5707963267949)*(x6027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6028=IKsin(j4);
IkReal x6029=IKcos(j4);
IkReal x6030=(gconst127*r01);
IkReal x6031=(sj1*sj2);
IkReal x6032=(gconst128*r10);
IkReal x6033=(gconst128*r00);
IkReal x6034=(gconst128*r20);
IkReal x6035=((1.0)*x6029);
IkReal x6036=((1.0)*cj1*cj2);
IkReal x6037=((1.0)*x6028);
IkReal x6038=(gconst127*x6029);
IkReal x6039=(gconst127*x6028);
evalcond[0]=(((r21*x6039))+(((-1.0)*x6034*x6037))+(((-1.0)*r22*x6035)));
evalcond[1]=((((-1.0)*x6032*x6037))+cj0+((r11*x6039))+(((-1.0)*r12*x6035)));
evalcond[2]=((((-1.0)*sj0))+((x6028*x6030))+(((-1.0)*x6033*x6037))+(((-1.0)*r02*x6035)));
evalcond[3]=(((cj2*sj1))+((r21*x6038))+((cj1*sj2))+((r22*x6028))+(((-1.0)*x6034*x6035)));
evalcond[4]=(((cj0*x6031))+((r02*x6028))+((x6029*x6030))+(((-1.0)*cj0*x6036))+(((-1.0)*x6033*x6035)));
evalcond[5]=((((-1.0)*x6032*x6035))+(((-1.0)*sj0*x6036))+((r11*x6038))+((sj0*x6031))+((r12*x6028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6040=((-1.0)*r01);
IkReal x6042 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6042)==0){
continue;
}
IkReal x6041=pow(x6042,-0.5);
CheckValue<IkReal> x6043 = IKatan2WithCheck(IkReal(x6040),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6043.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6043.value))));
IkReal gconst130=(x6040*x6041);
IkReal gconst131=((1.0)*r00*x6041);
CheckValue<IkReal> x6044 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6044.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6044.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6045=((-1.0)*r01);
CheckValue<IkReal> x6048 = IKatan2WithCheck(IkReal(x6045),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6048.valid){
continue;
}
IkReal x6046=((1.0)*(x6048.value));
IkReal x6047=x6041;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6046)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6046)));
IkReal gconst130=(x6045*x6047);
IkReal gconst131=((1.0)*r00*x6047);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6049=((-1.0)*r01);
CheckValue<IkReal> x6052 = IKatan2WithCheck(IkReal(x6049),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6052.valid){
continue;
}
IkReal x6050=((1.0)*(x6052.value));
IkReal x6051=x6041;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6050)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6050)));
IkReal gconst130=(x6049*x6051);
IkReal gconst131=((1.0)*r00*x6051);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6053=((-1.0)*r01);
CheckValue<IkReal> x6056 = IKatan2WithCheck(IkReal(x6053),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6056.valid){
continue;
}
IkReal x6054=((1.0)*(x6056.value));
IkReal x6055=x6041;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6054)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6054)));
IkReal gconst130=(x6053*x6055);
IkReal gconst131=((1.0)*r00*x6055);
IkReal x6057=r02*r02;
IkReal x6058=(r12*sj0);
IkReal x6059=((1.0)*cj0);
IkReal x6060=x6041;
j4eval[0]=((IKabs((((r02*x6058*x6060))+(((-1.0)*x6059*x6060))+((cj0*x6057*x6060)))))+(IKabs(((((-1.0)*x6058))+(((-1.0)*r02*x6059))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6061=((1.0)*sj0);
IkReal x6062=((1.0)*gconst130);
CheckValue<IkReal> x6063=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6062)))),-1);
if(!x6063.valid){
continue;
}
CheckValue<IkReal> x6064 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6061)))),IkReal(((((-1.0)*cj0*r01*x6062))+((gconst131*r10*sj0))+(((-1.0)*gconst130*r11*x6061))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6063.value)))+(x6064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6065=IKsin(j4);
IkReal x6066=IKcos(j4);
IkReal x6067=(gconst131*r10);
IkReal x6068=(sj1*sj2);
IkReal x6069=(gconst131*r20);
IkReal x6070=(gconst131*r00);
IkReal x6071=((1.0)*x6066);
IkReal x6072=((1.0)*cj1*cj2);
IkReal x6073=(gconst130*x6065);
IkReal x6074=((1.0)*x6065);
IkReal x6075=(gconst130*x6066);
evalcond[0]=((((-1.0)*r22*x6071))+((r21*x6073))+(((-1.0)*x6069*x6074)));
evalcond[1]=(((r11*x6073))+(((-1.0)*x6067*x6074))+cj0+(((-1.0)*r12*x6071)));
evalcond[2]=(((r01*x6073))+(((-1.0)*sj0))+(((-1.0)*r02*x6071))+(((-1.0)*x6070*x6074)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6065))+((r21*x6075))+(((-1.0)*x6069*x6071)));
evalcond[4]=(((r01*x6075))+((cj0*x6068))+((r02*x6065))+(((-1.0)*cj0*x6072))+(((-1.0)*x6070*x6071)));
evalcond[5]=(((r11*x6075))+(((-1.0)*x6067*x6071))+((sj0*x6068))+((r12*x6065))+(((-1.0)*sj0*x6072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6076=((1.0)*gconst131);
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6076)))),-1);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6077.value)+(((1.5707963267949)*(x6078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=IKsin(j4);
IkReal x6080=IKcos(j4);
IkReal x6081=(gconst131*r10);
IkReal x6082=(sj1*sj2);
IkReal x6083=(gconst131*r20);
IkReal x6084=(gconst131*r00);
IkReal x6085=((1.0)*x6080);
IkReal x6086=((1.0)*cj1*cj2);
IkReal x6087=(gconst130*x6079);
IkReal x6088=((1.0)*x6079);
IkReal x6089=(gconst130*x6080);
evalcond[0]=((((-1.0)*r22*x6085))+(((-1.0)*x6083*x6088))+((r21*x6087)));
evalcond[1]=((((-1.0)*r12*x6085))+cj0+((r11*x6087))+(((-1.0)*x6081*x6088)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6087))+(((-1.0)*r02*x6085))+(((-1.0)*x6084*x6088)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6079))+(((-1.0)*x6083*x6085))+((r21*x6089)));
evalcond[4]=((((-1.0)*cj0*x6086))+((r01*x6089))+((cj0*x6082))+(((-1.0)*x6084*x6085))+((r02*x6079)));
evalcond[5]=(((sj0*x6082))+(((-1.0)*sj0*x6086))+((r11*x6089))+((r12*x6079))+(((-1.0)*x6081*x6085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6090=((1.0)*gconst131);
CheckValue<IkReal> x6091 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6090))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6091.valid){
continue;
}
CheckValue<IkReal> x6092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6090))+(((-1.0)*gconst130*r00)))),-1);
if(!x6092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6091.value)+(((1.5707963267949)*(x6092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6093=IKsin(j4);
IkReal x6094=IKcos(j4);
IkReal x6095=(gconst131*r10);
IkReal x6096=(sj1*sj2);
IkReal x6097=(gconst131*r20);
IkReal x6098=(gconst131*r00);
IkReal x6099=((1.0)*x6094);
IkReal x6100=((1.0)*cj1*cj2);
IkReal x6101=(gconst130*x6093);
IkReal x6102=((1.0)*x6093);
IkReal x6103=(gconst130*x6094);
evalcond[0]=(((r21*x6101))+(((-1.0)*r22*x6099))+(((-1.0)*x6097*x6102)));
evalcond[1]=(((r11*x6101))+cj0+(((-1.0)*x6095*x6102))+(((-1.0)*r12*x6099)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6098*x6102))+(((-1.0)*r02*x6099))+((r01*x6101)));
evalcond[3]=(((cj2*sj1))+((r21*x6103))+((cj1*sj2))+((r22*x6093))+(((-1.0)*x6097*x6099)));
evalcond[4]=((((-1.0)*x6098*x6099))+(((-1.0)*cj0*x6100))+((cj0*x6096))+((r01*x6103))+((r02*x6093)));
evalcond[5]=(((r11*x6103))+((sj0*x6096))+(((-1.0)*x6095*x6099))+((r12*x6093))+(((-1.0)*sj0*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6104=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6104;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6105=((1.0)*cj5);
IkReal x6106=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6105)));
j4eval[0]=x6106;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6105)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6107=cj5*cj5;
IkReal x6108=r01*r01;
IkReal x6109=(cj5*r00);
IkReal x6110=(r01*sj5);
IkReal x6111=(x6108+(((-2.0)*x6109*x6110))+((x6107*(r00*r00)))+(((-1.0)*x6107*x6108))+(r02*r02));
j4eval[0]=x6111;
j4eval[1]=IKsign(x6111);
j4eval[2]=((IKabs(r02))+(IKabs((x6110+(((-1.0)*x6109))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6112=cj5*cj5;
IkReal x6113=r01*r01;
IkReal x6114=(r01*sj5);
IkReal x6115=(cj5*r00);
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(((((-1.0)*x6115))+x6114)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
CheckValue<IkReal> x6117=IKPowWithIntegerCheck(IKsign((x6113+(((-2.0)*x6114*x6115))+((x6112*(r00*r00)))+(r02*r02)+(((-1.0)*x6112*x6113)))),-1);
if(!x6117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6116.value)+(((1.5707963267949)*(x6117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6118=IKcos(j4);
IkReal x6119=IKsin(j4);
IkReal x6120=(cj5*r00);
IkReal x6121=(cj5*r10);
IkReal x6122=(r21*sj5);
IkReal x6123=(cj5*r20);
IkReal x6124=((1.0)*x6118);
IkReal x6125=((1.0)*x6119);
IkReal x6126=(sj5*x6119);
IkReal x6127=(sj5*x6118);
evalcond[0]=(((r01*x6127))+((r02*x6119))+(((-1.0)*x6120*x6124)));
evalcond[1]=(((x6119*x6122))+(((-1.0)*r22*x6124))+(((-1.0)*x6123*x6125)));
evalcond[2]=((((-1.0)*x6121*x6125))+(((-1.0)*r12*x6124))+((r11*x6126)));
evalcond[3]=((-1.0)+((r01*x6126))+(((-1.0)*r02*x6124))+(((-1.0)*x6120*x6125)));
evalcond[4]=(((cj2*sj1))+((x6118*x6122))+((cj1*sj2))+((r22*x6119))+(((-1.0)*x6123*x6124)));
evalcond[5]=((((-1.0)*x6121*x6124))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6119))+((r11*x6127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6128=((1.0)*cj5);
CheckValue<IkReal> x6129 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6129.valid){
continue;
}
CheckValue<IkReal> x6130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6128)))),-1);
if(!x6130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6129.value)+(((1.5707963267949)*(x6130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6131=IKcos(j4);
IkReal x6132=IKsin(j4);
IkReal x6133=(cj5*r00);
IkReal x6134=(cj5*r10);
IkReal x6135=(r21*sj5);
IkReal x6136=(cj5*r20);
IkReal x6137=((1.0)*x6131);
IkReal x6138=((1.0)*x6132);
IkReal x6139=(sj5*x6132);
IkReal x6140=(sj5*x6131);
evalcond[0]=(((r01*x6140))+((r02*x6132))+(((-1.0)*x6133*x6137)));
evalcond[1]=((((-1.0)*x6136*x6138))+(((-1.0)*r22*x6137))+((x6132*x6135)));
evalcond[2]=(((r11*x6139))+(((-1.0)*x6134*x6138))+(((-1.0)*r12*x6137)));
evalcond[3]=((-1.0)+(((-1.0)*x6133*x6138))+((r01*x6139))+(((-1.0)*r02*x6137)));
evalcond[4]=(((cj2*sj1))+((x6131*x6135))+((r22*x6132))+(((-1.0)*x6136*x6137))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x6134*x6137))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6140))+((r12*x6132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6141=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6141.valid){
continue;
}
CheckValue<IkReal> x6142 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6141.value)))+(x6142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6143=IKcos(j4);
IkReal x6144=IKsin(j4);
IkReal x6145=(cj5*r00);
IkReal x6146=(cj5*r10);
IkReal x6147=(r21*sj5);
IkReal x6148=(cj5*r20);
IkReal x6149=((1.0)*x6143);
IkReal x6150=((1.0)*x6144);
IkReal x6151=(sj5*x6144);
IkReal x6152=(sj5*x6143);
evalcond[0]=((((-1.0)*x6145*x6149))+((r02*x6144))+((r01*x6152)));
evalcond[1]=(((x6144*x6147))+(((-1.0)*r22*x6149))+(((-1.0)*x6148*x6150)));
evalcond[2]=((((-1.0)*x6146*x6150))+(((-1.0)*r12*x6149))+((r11*x6151)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6149))+(((-1.0)*x6145*x6150))+((r01*x6151)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6148*x6149))+((r22*x6144))+((x6143*x6147)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6144))+(((-1.0)*x6146*x6149))+((r11*x6152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6153=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6153;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6154=((1.0)*cj5);
IkReal x6155=((((-1.0)*r21*x6154))+(((-1.0)*r20*sj5)));
j4eval[0]=x6155;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6154))))));
j4eval[2]=IKsign(x6155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6156=(r01*sj5);
IkReal x6157=(cj1*sj2);
IkReal x6158=(cj2*sj1);
IkReal x6159=((1.0)*r02);
IkReal x6160=((1.0)*cj5*r00);
IkReal x6161=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6161;
j4eval[1]=((IKabs((((x6156*x6157))+((x6156*x6158))+(((-1.0)*x6157*x6160))+(((-1.0)*x6158*x6160)))))+(IKabs(((((-1.0)*x6158*x6159))+(((-1.0)*x6157*x6159))))));
j4eval[2]=IKsign(x6161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6162=(r01*sj5);
IkReal x6163=(cj1*sj2);
IkReal x6164=(cj2*sj1);
IkReal x6165=((1.0)*r02);
IkReal x6166=((1.0)*cj5*r00);
CheckValue<IkReal> x6167 = IKatan2WithCheck(IkReal((((x6162*x6163))+((x6162*x6164))+(((-1.0)*x6163*x6166))+(((-1.0)*x6164*x6166)))),IkReal(((((-1.0)*x6163*x6165))+(((-1.0)*x6164*x6165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6167.valid){
continue;
}
CheckValue<IkReal> x6168=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6167.value)+(((1.5707963267949)*(x6168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6169=IKcos(j4);
IkReal x6170=IKsin(j4);
IkReal x6171=(cj5*r00);
IkReal x6172=(cj5*r10);
IkReal x6173=(r21*sj5);
IkReal x6174=(cj5*r20);
IkReal x6175=((1.0)*x6169);
IkReal x6176=((1.0)*x6170);
IkReal x6177=(sj5*x6170);
IkReal x6178=(sj5*x6169);
evalcond[0]=(((r02*x6170))+((r01*x6178))+(((-1.0)*x6171*x6175)));
evalcond[1]=((((-1.0)*x6174*x6176))+((x6170*x6173))+(((-1.0)*r22*x6175)));
evalcond[2]=(((r11*x6177))+(((-1.0)*r12*x6175))+(((-1.0)*x6172*x6176)));
evalcond[3]=((1.0)+((r01*x6177))+(((-1.0)*x6171*x6176))+(((-1.0)*r02*x6175)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6174*x6175))+((x6169*x6173))+((r22*x6170)));
evalcond[5]=(((r12*x6170))+(((-1.0)*sj1*sj2))+((r11*x6178))+(((-1.0)*x6172*x6175))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6179=((1.0)*cj5);
CheckValue<IkReal> x6180 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6180.valid){
continue;
}
CheckValue<IkReal> x6181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6179))+(((-1.0)*r20*sj5)))),-1);
if(!x6181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6180.value)+(((1.5707963267949)*(x6181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6182=IKcos(j4);
IkReal x6183=IKsin(j4);
IkReal x6184=(cj5*r00);
IkReal x6185=(cj5*r10);
IkReal x6186=(r21*sj5);
IkReal x6187=(cj5*r20);
IkReal x6188=((1.0)*x6182);
IkReal x6189=((1.0)*x6183);
IkReal x6190=(sj5*x6183);
IkReal x6191=(sj5*x6182);
evalcond[0]=((((-1.0)*x6184*x6188))+((r02*x6183))+((r01*x6191)));
evalcond[1]=((((-1.0)*r22*x6188))+(((-1.0)*x6187*x6189))+((x6183*x6186)));
evalcond[2]=(((r11*x6190))+(((-1.0)*x6185*x6189))+(((-1.0)*r12*x6188)));
evalcond[3]=((1.0)+(((-1.0)*x6184*x6189))+(((-1.0)*r02*x6188))+((r01*x6190)));
evalcond[4]=(((cj2*sj1))+((r22*x6183))+((cj1*sj2))+(((-1.0)*x6187*x6188))+((x6182*x6186)));
evalcond[5]=(((r11*x6191))+(((-1.0)*x6185*x6188))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x6183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
CheckValue<IkReal> x6193=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6192.value)+(((1.5707963267949)*(x6193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6194=IKcos(j4);
IkReal x6195=IKsin(j4);
IkReal x6196=(cj5*r00);
IkReal x6197=(cj5*r10);
IkReal x6198=(r21*sj5);
IkReal x6199=(cj5*r20);
IkReal x6200=((1.0)*x6194);
IkReal x6201=((1.0)*x6195);
IkReal x6202=(sj5*x6195);
IkReal x6203=(sj5*x6194);
evalcond[0]=(((r01*x6203))+(((-1.0)*x6196*x6200))+((r02*x6195)));
evalcond[1]=(((x6195*x6198))+(((-1.0)*x6199*x6201))+(((-1.0)*r22*x6200)));
evalcond[2]=((((-1.0)*x6197*x6201))+(((-1.0)*r12*x6200))+((r11*x6202)));
evalcond[3]=((1.0)+((r01*x6202))+(((-1.0)*x6196*x6201))+(((-1.0)*r02*x6200)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6199*x6200))+((x6194*x6198))+((cj1*sj2))+((r22*x6195)));
evalcond[5]=((((-1.0)*x6197*x6200))+(((-1.0)*sj1*sj2))+((r12*x6195))+((cj1*cj2))+((r11*x6203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6204=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6204);
rxp1_1=(px*r21);
rxp1_2=(r11*x6204);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6205=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6205);
rxp1_1=(px*r21);
rxp1_2=(r11*x6205);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6206=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6206);
rxp1_1=(px*r21);
rxp1_2=(r11*x6206);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6209=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6209.valid){
continue;
}
IkReal x6207=x6209.value;
IkReal x6208=(sj0*x6207);
cj4array[0]=((((-1.0)*sj1*sj2*x6208))+((cj1*cj2*x6208)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6210=IKsin(j4);
IkReal x6211=IKcos(j4);
IkReal x6212=(r21*sj5);
IkReal x6213=((1.0)*cj5*r20);
evalcond[0]=(r02*x6210);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6211)));
evalcond[2]=(((x6210*x6212))+(((-1.0)*x6210*x6213)));
evalcond[3]=((((-1.0)*cj5*r10*x6210))+((r11*sj5*x6210)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6211*x6212))+(((-1.0)*x6211*x6213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6216=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6216.valid){
continue;
}
IkReal x6214=x6216.value;
IkReal x6215=((1.0)*x6214);
cj4array[0]=((((-1.0)*cj1*sj2*x6215))+(((-1.0)*cj2*sj1*x6215)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6217=IKsin(j4);
IkReal x6218=IKcos(j4);
IkReal x6219=((1.0)*sj0);
IkReal x6220=((1.0)*cj5);
IkReal x6221=(sj5*x6217);
evalcond[0]=(r02*x6217);
evalcond[1]=((((-1.0)*x6219))+(((-1.0)*r02*x6218)));
evalcond[2]=((((-1.0)*r20*x6217*x6220))+((r21*x6221)));
evalcond[3]=((((-1.0)*r10*x6217*x6220))+((r11*x6221)));
evalcond[4]=((((-1.0)*cj1*cj2*x6219))+(((-1.0)*r10*x6218*x6220))+((sj0*sj1*sj2))+((r11*sj5*x6218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6222=IKPowWithIntegerCheck(r02,-1);
if(!x6222.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6222.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6223=IKsin(j4);
IkReal x6224=IKcos(j4);
IkReal x6225=(r21*sj5);
IkReal x6226=((1.0)*cj5);
IkReal x6227=(r11*sj5);
evalcond[0]=(r02*x6223);
evalcond[1]=((((-1.0)*r20*x6223*x6226))+((x6223*x6225)));
evalcond[2]=((((-1.0)*r10*x6223*x6226))+((x6223*x6227)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6224*x6226))+((x6224*x6225)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6224*x6226))+((sj0*sj1*sj2))+((x6224*x6227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6228=((1.0)*sj0);
IkReal x6229=((1.0)*cj0);
CheckValue<IkReal> x6230 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6228))+(((-1.0)*r02*x6229)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6229))+(((-1.0)*r11*sj5*x6228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6230.valid){
continue;
}
CheckValue<IkReal> x6231=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6230.value)+(((1.5707963267949)*(x6231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6232=IKsin(j4);
IkReal x6233=IKcos(j4);
IkReal x6234=(cj5*r00);
IkReal x6235=(cj5*r10);
IkReal x6236=(r21*sj5);
IkReal x6237=(sj1*sj2);
IkReal x6238=(cj5*r20);
IkReal x6239=((1.0)*x6233);
IkReal x6240=((1.0)*cj1*cj2);
IkReal x6241=((1.0)*x6232);
IkReal x6242=(sj5*x6232);
IkReal x6243=(sj5*x6233);
evalcond[0]=((((-1.0)*x6238*x6241))+(((-1.0)*r22*x6239))+((x6232*x6236)));
evalcond[1]=((((-1.0)*r12*x6239))+cj0+((r11*x6242))+(((-1.0)*x6235*x6241)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6234*x6241))+(((-1.0)*r02*x6239))+((r01*x6242)));
evalcond[3]=(((x6233*x6236))+((cj2*sj1))+((cj1*sj2))+((r22*x6232))+(((-1.0)*x6238*x6239)));
evalcond[4]=(((r02*x6232))+(((-1.0)*cj0*x6240))+((cj0*x6237))+(((-1.0)*x6234*x6239))+((r01*x6243)));
evalcond[5]=(((r12*x6232))+((r11*x6243))+((sj0*x6237))+(((-1.0)*sj0*x6240))+(((-1.0)*x6235*x6239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6244=((1.0)*cj5);
CheckValue<IkReal> x6245 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6244))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6245.valid){
continue;
}
CheckValue<IkReal> x6246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6244)))),-1);
if(!x6246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6245.value)+(((1.5707963267949)*(x6246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6247=IKsin(j4);
IkReal x6248=IKcos(j4);
IkReal x6249=(cj5*r00);
IkReal x6250=(cj5*r10);
IkReal x6251=(r21*sj5);
IkReal x6252=(sj1*sj2);
IkReal x6253=(cj5*r20);
IkReal x6254=((1.0)*x6248);
IkReal x6255=((1.0)*cj1*cj2);
IkReal x6256=((1.0)*x6247);
IkReal x6257=(sj5*x6247);
IkReal x6258=(sj5*x6248);
evalcond[0]=((((-1.0)*r22*x6254))+(((-1.0)*x6253*x6256))+((x6247*x6251)));
evalcond[1]=((((-1.0)*x6250*x6256))+cj0+(((-1.0)*r12*x6254))+((r11*x6257)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6257))+(((-1.0)*r02*x6254))+(((-1.0)*x6249*x6256)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6248*x6251))+(((-1.0)*x6253*x6254))+((r22*x6247)));
evalcond[4]=(((r01*x6258))+((r02*x6247))+(((-1.0)*cj0*x6255))+(((-1.0)*x6249*x6254))+((cj0*x6252)));
evalcond[5]=((((-1.0)*x6250*x6254))+((sj0*x6252))+((r12*x6247))+(((-1.0)*sj0*x6255))+((r11*x6258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6259=((1.0)*cj5);
CheckValue<IkReal> x6260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6259)))),-1);
if(!x6260.valid){
continue;
}
CheckValue<IkReal> x6261 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6259))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6260.value)))+(x6261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6262=IKsin(j4);
IkReal x6263=IKcos(j4);
IkReal x6264=(cj5*r00);
IkReal x6265=(cj5*r10);
IkReal x6266=(r21*sj5);
IkReal x6267=(sj1*sj2);
IkReal x6268=(cj5*r20);
IkReal x6269=((1.0)*x6263);
IkReal x6270=((1.0)*cj1*cj2);
IkReal x6271=((1.0)*x6262);
IkReal x6272=(sj5*x6262);
IkReal x6273=(sj5*x6263);
evalcond[0]=(((x6262*x6266))+(((-1.0)*x6268*x6271))+(((-1.0)*r22*x6269)));
evalcond[1]=(cj0+(((-1.0)*x6265*x6271))+((r11*x6272))+(((-1.0)*r12*x6269)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6269))+((r01*x6272))+(((-1.0)*x6264*x6271)));
evalcond[3]=(((cj2*sj1))+((r22*x6262))+((cj1*sj2))+((x6263*x6266))+(((-1.0)*x6268*x6269)));
evalcond[4]=(((r01*x6273))+((r02*x6262))+(((-1.0)*cj0*x6270))+((cj0*x6267))+(((-1.0)*x6264*x6269)));
evalcond[5]=((((-1.0)*sj0*x6270))+((sj0*x6267))+(((-1.0)*x6265*x6269))+((r12*x6262))+((r11*x6273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6274=r21*r21;
IkReal x6275=cj5*cj5;
IkReal x6276=(cj2*sj1);
IkReal x6277=(cj1*sj2);
IkReal x6278=(r21*sj5);
IkReal x6279=((1.0)*cj5*r20);
CheckValue<IkReal> x6280=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6274))+(((2.0)*cj5*r20*x6278))+(((-1.0)*(r22*r22)))+(((-1.0)*x6275*(r20*r20)))+((x6274*x6275)))),-1);
if(!x6280.valid){
continue;
}
CheckValue<IkReal> x6281 = IKatan2WithCheck(IkReal((((r22*x6277))+((r22*x6276)))),IkReal(((((-1.0)*x6276*x6279))+(((-1.0)*x6277*x6279))+((x6277*x6278))+((x6276*x6278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6280.value)))+(x6281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6282=IKsin(j4);
IkReal x6283=IKcos(j4);
IkReal x6284=(r21*sj5);
IkReal x6285=(cj5*r20);
IkReal x6286=((1.0)*x6283);
evalcond[0]=((((-1.0)*x6282*x6285))+(((-1.0)*r22*x6286))+((x6282*x6284)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x6285*x6286))+((r22*x6282))+((cj1*sj2))+((x6283*x6284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6287=(cj5*sj4);
IkReal x6288=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6287))+((r01*x6288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x6288))+((r10*x6287))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6287))+((r01*x6288))))+IKsqr(((((-1.0)*r11*x6288))+((r10*x6287))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6287))+((r01*x6288))), ((((-1.0)*r11*x6288))+((r10*x6287))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6289=IKcos(j0);
IkReal x6290=IKsin(j0);
IkReal x6291=(cj5*r01);
IkReal x6292=((1.0)*cj1);
IkReal x6293=((0.39225)*sj1);
IkReal x6294=(r11*sj5);
IkReal x6295=((0.39225)*cj2);
IkReal x6296=((1.0)*sj1);
IkReal x6297=(r00*sj5);
IkReal x6298=(cj5*r11);
IkReal x6299=((1.0)*cj4);
IkReal x6300=(r01*sj5);
IkReal x6301=(r10*sj5);
IkReal x6302=(sj2*x6289);
IkReal x6303=(sj2*x6290);
IkReal x6304=(cj5*x6299);
IkReal x6305=(cj1*x6289);
IkReal x6306=(cj1*x6290);
IkReal x6307=(cj2*x6289);
IkReal x6308=((1.0)*cj5*sj4);
IkReal x6309=(cj2*x6290);
evalcond[0]=(x6289+(((-1.0)*r10*x6308))+(((-1.0)*r12*x6299))+((sj4*x6294)));
evalcond[1]=(((sj4*x6300))+(((-1.0)*x6290))+(((-1.0)*r02*x6299))+(((-1.0)*r00*x6308)));
evalcond[2]=(x6297+x6291+(((-1.0)*x6292*x6302))+(((-1.0)*x6296*x6307)));
evalcond[3]=(x6298+x6301+(((-1.0)*x6292*x6303))+(((-1.0)*x6296*x6309)));
evalcond[4]=(((cj4*x6300))+(((-1.0)*x6292*x6307))+(((-1.0)*r00*x6304))+((r02*sj4))+((sj1*x6302)));
evalcond[5]=(((cj4*x6294))+(((-1.0)*r10*x6304))+(((-1.0)*x6292*x6309))+((r12*sj4))+((sj1*x6303)));
evalcond[6]=((((-1.0)*px))+(((-0.09465)*x6297))+(((-0.09465)*x6291))+(((-0.10915)*x6290))+(((-1.0)*x6293*x6302))+((x6295*x6305))+(((0.425)*x6305)));
evalcond[7]=((((-1.0)*py))+(((0.10915)*x6289))+(((-0.09465)*x6301))+(((-0.09465)*x6298))+(((-1.0)*x6293*x6303))+((x6295*x6306))+(((0.425)*x6306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6310=((1.0)*cj5);
IkReal x6311=((1.0)*sj5);
CheckValue<IkReal> x6312 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6310))+(((-1.0)*r10*x6311)))),IkReal(((((-1.0)*r00*x6311))+(((-1.0)*r01*x6310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6312.valid){
continue;
}
CheckValue<IkReal> x6313=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6313.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6312.value)+(((1.5707963267949)*(x6313.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6314=IKcos(j0);
IkReal x6315=IKsin(j0);
IkReal x6316=(cj5*r01);
IkReal x6317=((1.0)*cj1);
IkReal x6318=((0.39225)*sj1);
IkReal x6319=(cj5*r11);
IkReal x6320=(r00*sj5);
IkReal x6321=((0.39225)*cj2);
IkReal x6322=(r10*sj5);
IkReal x6323=(sj2*x6314);
IkReal x6324=(sj2*x6315);
IkReal x6325=(cj1*x6314);
IkReal x6326=((1.0)*cj2*sj1);
IkReal x6327=(cj1*x6315);
evalcond[0]=(x6316+x6320+(((-1.0)*x6317*x6323))+(((-1.0)*x6314*x6326)));
evalcond[1]=(x6319+x6322+(((-1.0)*x6315*x6326))+(((-1.0)*x6317*x6324)));
evalcond[2]=((((-0.10915)*x6315))+(((-1.0)*x6318*x6323))+(((-0.09465)*x6320))+(((0.425)*x6325))+(((-1.0)*px))+(((-0.09465)*x6316))+((x6321*x6325)));
evalcond[3]=((((-1.0)*x6318*x6324))+(((-0.09465)*x6322))+(((0.425)*x6327))+(((-1.0)*py))+(((-0.09465)*x6319))+(((0.10915)*x6314))+((x6321*x6327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6328=((1.0)*cj5);
IkReal x6329=((((-1.0)*r01*x6328))+(((-1.0)*r00*sj5)));
j4eval[0]=x6329;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6328)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6330=((1.0)*cj5);
IkReal x6331=((((-1.0)*r11*x6330))+(((-1.0)*r10*sj5)));
j4eval[0]=x6331;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6330))))));
j4eval[2]=IKsign(x6331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6332=((1.0)*sj0);
IkReal x6333=((1.0)*cj0);
IkReal x6334=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6334;
j4eval[1]=((IKabs(((((-1.0)*r12*x6332))+(((-1.0)*r02*x6333)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x6332))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6333))))));
j4eval[2]=IKsign(x6334);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6335=((-1.0)*r20);
IkReal x6337 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6337)==0){
continue;
}
IkReal x6336=pow(x6337,-0.5);
CheckValue<IkReal> x6338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6335),IKFAST_ATAN2_MAGTHRESH);
if(!x6338.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6338.value));
IkReal gconst115=(r21*x6336);
IkReal gconst116=(x6335*x6336);
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6339.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6340=((-1.0)*r20);
IkReal x6341=x6336;
CheckValue<IkReal> x6343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6340),IKFAST_ATAN2_MAGTHRESH);
if(!x6343.valid){
continue;
}
IkReal x6342=((-1.0)*(x6343.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6342;
IkReal gconst114=x6342;
IkReal gconst115=(r21*x6341);
IkReal gconst116=(x6340*x6341);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6344=((-1.0)*r20);
IkReal x6345=x6336;
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6344),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
IkReal x6346=((-1.0)*(x6347.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6346;
IkReal gconst114=x6346;
IkReal gconst115=(r21*x6345);
IkReal gconst116=(x6344*x6345);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6348=((-1.0)*r20);
IkReal x6349=x6336;
CheckValue<IkReal> x6351 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6348),IKFAST_ATAN2_MAGTHRESH);
if(!x6351.valid){
continue;
}
IkReal x6350=((-1.0)*(x6351.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6350;
IkReal gconst114=x6350;
IkReal gconst115=(r21*x6349);
IkReal gconst116=(x6348*x6349);
IkReal x6352=((1.0)*(r22*r22));
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6352))),-1);
if(!x6356.valid){
continue;
}
IkReal x6353=x6356.value;
IkReal x6354=((1.0)*x6353);
IkReal x6355=((((-1.0)*x6354*(r21*r21*r21*r21)))+(((-2.0)*x6353*(r20*r20)*(r21*r21)))+(((-1.0)*x6352))+(((-1.0)*x6354*(r20*r20*r20*r20))));
j4eval[0]=x6355;
j4eval[1]=IKsign(x6355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6357=(cj2*sj1);
IkReal x6358=(gconst115*r21);
IkReal x6359=(cj1*sj2);
IkReal x6360=((1.0)*gconst116*r20);
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6360))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6358*x6358)))+(((2.0)*gconst116*r20*x6358)))),-1);
if(!x6361.valid){
continue;
}
CheckValue<IkReal> x6362 = IKatan2WithCheck(IkReal((((r22*x6359))+((r22*x6357)))),IkReal((((x6358*x6359))+(((-1.0)*x6357*x6360))+(((-1.0)*x6359*x6360))+((x6357*x6358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6361.value)))+(x6362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6363=IKsin(j4);
IkReal x6364=IKcos(j4);
IkReal x6365=(sj1*sj2);
IkReal x6366=((1.0)*x6364);
IkReal x6367=((1.0)*cj1*cj2);
IkReal x6368=(gconst115*x6363);
IkReal x6369=(gconst115*x6364);
IkReal x6370=((1.0)*gconst116*x6363);
evalcond[0]=((((-1.0)*r22*x6366))+(((-1.0)*r20*x6370))+((r21*x6368)));
evalcond[1]=(cj0+((r11*x6368))+(((-1.0)*r12*x6366))+(((-1.0)*r10*x6370)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6366))+((r01*x6368))+(((-1.0)*r00*x6370)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6366))+((cj1*sj2))+((r22*x6363))+((r21*x6369)));
evalcond[4]=((((-1.0)*gconst116*r00*x6366))+((r01*x6369))+((cj0*x6365))+((r02*x6363))+(((-1.0)*cj0*x6367)));
evalcond[5]=((((-1.0)*sj0*x6367))+(((-1.0)*gconst116*r10*x6366))+((r12*x6363))+((sj0*x6365))+((r11*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6371=((1.0)*gconst116);
CheckValue<IkReal> x6372=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6371)))),-1);
if(!x6372.valid){
continue;
}
CheckValue<IkReal> x6373 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6371))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6372.value)))+(x6373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6374=IKsin(j4);
IkReal x6375=IKcos(j4);
IkReal x6376=(sj1*sj2);
IkReal x6377=((1.0)*x6375);
IkReal x6378=((1.0)*cj1*cj2);
IkReal x6379=(gconst115*x6374);
IkReal x6380=(gconst115*x6375);
IkReal x6381=((1.0)*gconst116*x6374);
evalcond[0]=(((r21*x6379))+(((-1.0)*r20*x6381))+(((-1.0)*r22*x6377)));
evalcond[1]=(cj0+(((-1.0)*r10*x6381))+((r11*x6379))+(((-1.0)*r12*x6377)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6377))+((r01*x6379))+(((-1.0)*r00*x6381)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6377))+((cj1*sj2))+((r21*x6380))+((r22*x6374)));
evalcond[4]=((((-1.0)*gconst116*r00*x6377))+((cj0*x6376))+((r01*x6380))+((r02*x6374))+(((-1.0)*cj0*x6378)));
evalcond[5]=((((-1.0)*sj0*x6378))+(((-1.0)*gconst116*r10*x6377))+((r12*x6374))+((sj0*x6376))+((r11*x6380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6382=((1.0)*gconst116);
CheckValue<IkReal> x6383=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6382)))),-1);
if(!x6383.valid){
continue;
}
CheckValue<IkReal> x6384 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6383.value)))+(x6384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6385=IKsin(j4);
IkReal x6386=IKcos(j4);
IkReal x6387=(sj1*sj2);
IkReal x6388=((1.0)*x6386);
IkReal x6389=((1.0)*cj1*cj2);
IkReal x6390=(gconst115*x6385);
IkReal x6391=(gconst115*x6386);
IkReal x6392=((1.0)*gconst116*x6385);
evalcond[0]=((((-1.0)*r20*x6392))+(((-1.0)*r22*x6388))+((r21*x6390)));
evalcond[1]=(((r11*x6390))+cj0+(((-1.0)*r12*x6388))+(((-1.0)*r10*x6392)));
evalcond[2]=((((-1.0)*r00*x6392))+(((-1.0)*sj0))+((r01*x6390))+(((-1.0)*r02*x6388)));
evalcond[3]=(((cj2*sj1))+((r22*x6385))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6388))+((r21*x6391)));
evalcond[4]=(((cj0*x6387))+((r02*x6385))+(((-1.0)*cj0*x6389))+(((-1.0)*gconst116*r00*x6388))+((r01*x6391)));
evalcond[5]=(((sj0*x6387))+((r11*x6391))+(((-1.0)*sj0*x6389))+((r12*x6385))+(((-1.0)*gconst116*r10*x6388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6393=((-1.0)*r21);
IkReal x6395 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6395)==0){
continue;
}
IkReal x6394=pow(x6395,-0.5);
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal(x6393),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6396.value))));
IkReal gconst118=(x6393*x6394);
IkReal gconst119=((1.0)*r20*x6394);
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6397.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6398=((-1.0)*r21);
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal(x6398),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
IkReal x6399=((1.0)*(x6401.value));
IkReal x6400=x6394;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6399)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6399)));
IkReal gconst118=(x6398*x6400);
IkReal gconst119=((1.0)*r20*x6400);
IkReal x6402=r22*r22;
IkReal x6403=((1.0)*x6402);
CheckValue<IkReal> x6407=IKPowWithIntegerCheck(((-1.0)+x6402),-1);
if(!x6407.valid){
continue;
}
IkReal x6404=x6407.value;
if((((1.0)+(((-1.0)*x6403)))) < -0.00001)
continue;
IkReal x6405=IKsqrt(((1.0)+(((-1.0)*x6403))));
IkReal x6406=(cj0*x6404*x6405);
j4eval[0]=((IKabs(((((-1.0)*x6403*x6406))+x6406)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6408=((-1.0)*r21);
CheckValue<IkReal> x6411 = IKatan2WithCheck(IkReal(x6408),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6411.valid){
continue;
}
IkReal x6409=((1.0)*(x6411.value));
IkReal x6410=x6394;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6409)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6409)));
IkReal gconst118=(x6408*x6410);
IkReal gconst119=((1.0)*r20*x6410);
IkReal x6412=r22*r22;
IkReal x6413=((1.0)*x6412);
CheckValue<IkReal> x6417=IKPowWithIntegerCheck(((-1.0)+x6412),-1);
if(!x6417.valid){
continue;
}
IkReal x6414=x6417.value;
if((((1.0)+(((-1.0)*x6413)))) < -0.00001)
continue;
IkReal x6415=IKsqrt(((1.0)+(((-1.0)*x6413))));
IkReal x6416=(sj0*x6414*x6415);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6416+(((-1.0)*x6413*x6416))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6418=((-1.0)*r21);
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal(x6418),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
IkReal x6419=((1.0)*(x6421.value));
IkReal x6420=x6394;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6419)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6419)));
IkReal gconst118=(x6418*x6420);
IkReal gconst119=((1.0)*r20*x6420);
IkReal x6422=r22*r22;
IkReal x6423=(r12*sj0);
IkReal x6424=(cj0*r02);
CheckValue<IkReal> x6428=IKPowWithIntegerCheck(((-1.0)+x6422),-1);
if(!x6428.valid){
continue;
}
IkReal x6425=x6428.value;
if((((1.0)+(((-1.0)*x6422)))) < -0.00001)
continue;
IkReal x6426=IKsqrt(((1.0)+(((-1.0)*x6422))));
IkReal x6427=(r22*x6425*x6426);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6423))+(((-1.0)*x6424)))))+(IKabs((((x6424*x6427))+((x6423*x6427))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6429=((1.0)*sj0);
IkReal x6430=((1.0)*gconst118);
CheckValue<IkReal> x6431 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6429)))),IkReal(((((-1.0)*cj0*r01*x6430))+((gconst119*r10*sj0))+((cj0*gconst119*r00))+(((-1.0)*gconst118*r11*x6429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6431.valid){
continue;
}
CheckValue<IkReal> x6432=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6430)))),-1);
if(!x6432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6431.value)+(((1.5707963267949)*(x6432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6433=IKsin(j4);
IkReal x6434=IKcos(j4);
IkReal x6435=(gconst118*r01);
IkReal x6436=(sj1*sj2);
IkReal x6437=(gconst119*r20);
IkReal x6438=(gconst119*r10);
IkReal x6439=(gconst119*r00);
IkReal x6440=(gconst118*r21);
IkReal x6441=(gconst118*r11);
IkReal x6442=((1.0)*x6434);
IkReal x6443=((1.0)*cj1*cj2);
IkReal x6444=((1.0)*x6433);
evalcond[0]=((((-1.0)*x6437*x6444))+(((-1.0)*r22*x6442))+((x6433*x6440)));
evalcond[1]=(cj0+(((-1.0)*x6438*x6444))+(((-1.0)*r12*x6442))+((x6433*x6441)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6439*x6444))+(((-1.0)*r02*x6442))+((x6433*x6435)));
evalcond[3]=(((r22*x6433))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6437*x6442))+((x6434*x6440)));
evalcond[4]=(((cj0*x6436))+(((-1.0)*x6439*x6442))+((x6434*x6435))+((r02*x6433))+(((-1.0)*cj0*x6443)));
evalcond[5]=((((-1.0)*sj0*x6443))+((r12*x6433))+(((-1.0)*x6438*x6442))+((sj0*x6436))+((x6434*x6441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6445=((1.0)*gconst119);
CheckValue<IkReal> x6446=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6445)))),-1);
if(!x6446.valid){
continue;
}
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6446.value)))+(x6447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6448=IKsin(j4);
IkReal x6449=IKcos(j4);
IkReal x6450=(gconst118*r01);
IkReal x6451=(sj1*sj2);
IkReal x6452=(gconst119*r20);
IkReal x6453=(gconst119*r10);
IkReal x6454=(gconst119*r00);
IkReal x6455=(gconst118*r21);
IkReal x6456=(gconst118*r11);
IkReal x6457=((1.0)*x6449);
IkReal x6458=((1.0)*cj1*cj2);
IkReal x6459=((1.0)*x6448);
evalcond[0]=((((-1.0)*x6452*x6459))+((x6448*x6455))+(((-1.0)*r22*x6457)));
evalcond[1]=(cj0+(((-1.0)*x6453*x6459))+(((-1.0)*r12*x6457))+((x6448*x6456)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6457))+(((-1.0)*x6454*x6459))+((x6448*x6450)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6452*x6457))+((cj1*sj2))+((x6449*x6455))+((r22*x6448)));
evalcond[4]=(((cj0*x6451))+((x6449*x6450))+(((-1.0)*cj0*x6458))+(((-1.0)*x6454*x6457))+((r02*x6448)));
evalcond[5]=(((r12*x6448))+(((-1.0)*sj0*x6458))+((sj0*x6451))+((x6449*x6456))+(((-1.0)*x6453*x6457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6460=((1.0)*gconst119);
CheckValue<IkReal> x6461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6460))+(((-1.0)*gconst118*r00)))),-1);
if(!x6461.valid){
continue;
}
CheckValue<IkReal> x6462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6461.value)))+(x6462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6463=IKsin(j4);
IkReal x6464=IKcos(j4);
IkReal x6465=(gconst118*r01);
IkReal x6466=(sj1*sj2);
IkReal x6467=(gconst119*r20);
IkReal x6468=(gconst119*r10);
IkReal x6469=(gconst119*r00);
IkReal x6470=(gconst118*r21);
IkReal x6471=(gconst118*r11);
IkReal x6472=((1.0)*x6464);
IkReal x6473=((1.0)*cj1*cj2);
IkReal x6474=((1.0)*x6463);
evalcond[0]=((((-1.0)*x6467*x6474))+(((-1.0)*r22*x6472))+((x6463*x6470)));
evalcond[1]=((((-1.0)*r12*x6472))+cj0+(((-1.0)*x6468*x6474))+((x6463*x6471)));
evalcond[2]=((((-1.0)*sj0))+((x6463*x6465))+(((-1.0)*x6469*x6474))+(((-1.0)*r02*x6472)));
evalcond[3]=((((-1.0)*x6467*x6472))+((cj2*sj1))+((cj1*sj2))+((r22*x6463))+((x6464*x6470)));
evalcond[4]=(((x6464*x6465))+(((-1.0)*cj0*x6473))+((cj0*x6466))+(((-1.0)*x6469*x6472))+((r02*x6463)));
evalcond[5]=(((sj0*x6466))+(((-1.0)*sj0*x6473))+(((-1.0)*x6468*x6472))+((x6464*x6471))+((r12*x6463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6475=((-1.0)*r10);
IkReal x6477 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6477)==0){
continue;
}
IkReal x6476=pow(x6477,-0.5);
CheckValue<IkReal> x6478 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6475),IKFAST_ATAN2_MAGTHRESH);
if(!x6478.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6478.value));
IkReal gconst121=(r11*x6476);
IkReal gconst122=(x6475*x6476);
CheckValue<IkReal> x6479 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6480=((-1.0)*r10);
IkReal x6481=x6476;
CheckValue<IkReal> x6483 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6480),IKFAST_ATAN2_MAGTHRESH);
if(!x6483.valid){
continue;
}
IkReal x6482=((-1.0)*(x6483.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6482;
IkReal gconst120=x6482;
IkReal gconst121=(r11*x6481);
IkReal gconst122=(x6480*x6481);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6484=((1.0)*sj0);
IkReal x6485=((1.0)*gconst121);
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x6485)))),-1);
if(!x6486.valid){
continue;
}
CheckValue<IkReal> x6487 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6484))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x6484))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x6485))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6486.value)))+(x6487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6488=IKsin(j4);
IkReal x6489=IKcos(j4);
IkReal x6490=(gconst121*r11);
IkReal x6491=(sj1*sj2);
IkReal x6492=(gconst122*r00);
IkReal x6493=(gconst122*r10);
IkReal x6494=(gconst122*r20);
IkReal x6495=((1.0)*x6489);
IkReal x6496=((1.0)*cj1*cj2);
IkReal x6497=((1.0)*x6488);
IkReal x6498=(gconst121*x6488);
IkReal x6499=(gconst121*x6489);
evalcond[0]=((((-1.0)*r22*x6495))+(((-1.0)*x6494*x6497))+((r21*x6498)));
evalcond[1]=(cj0+(((-1.0)*r12*x6495))+(((-1.0)*x6493*x6497))+((x6488*x6490)));
evalcond[2]=(((r01*x6498))+(((-1.0)*sj0))+(((-1.0)*r02*x6495))+(((-1.0)*x6492*x6497)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6494*x6495))+((r22*x6488))+((r21*x6499)));
evalcond[4]=(((r01*x6499))+((cj0*x6491))+((r02*x6488))+(((-1.0)*cj0*x6496))+(((-1.0)*x6492*x6495)));
evalcond[5]=((((-1.0)*sj0*x6496))+((r12*x6488))+((x6489*x6490))+(((-1.0)*x6493*x6495))+((sj0*x6491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6500=((1.0)*gconst122);
CheckValue<IkReal> x6501=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6500)))),-1);
if(!x6501.valid){
continue;
}
CheckValue<IkReal> x6502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6500))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6501.value)))+(x6502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6503=IKsin(j4);
IkReal x6504=IKcos(j4);
IkReal x6505=(gconst121*r11);
IkReal x6506=(sj1*sj2);
IkReal x6507=(gconst122*r00);
IkReal x6508=(gconst122*r10);
IkReal x6509=(gconst122*r20);
IkReal x6510=((1.0)*x6504);
IkReal x6511=((1.0)*cj1*cj2);
IkReal x6512=((1.0)*x6503);
IkReal x6513=(gconst121*x6503);
IkReal x6514=(gconst121*x6504);
evalcond[0]=((((-1.0)*r22*x6510))+((r21*x6513))+(((-1.0)*x6509*x6512)));
evalcond[1]=(cj0+((x6503*x6505))+(((-1.0)*r12*x6510))+(((-1.0)*x6508*x6512)));
evalcond[2]=((((-1.0)*r02*x6510))+(((-1.0)*sj0))+((r01*x6513))+(((-1.0)*x6507*x6512)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6503))+((r21*x6514))+(((-1.0)*x6509*x6510)));
evalcond[4]=((((-1.0)*cj0*x6511))+((r02*x6503))+((r01*x6514))+(((-1.0)*x6507*x6510))+((cj0*x6506)));
evalcond[5]=(((r12*x6503))+((sj0*x6506))+((x6504*x6505))+(((-1.0)*x6508*x6510))+(((-1.0)*sj0*x6511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6515=((-1.0)*r11);
IkReal x6517 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6517)==0){
continue;
}
IkReal x6516=pow(x6517,-0.5);
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal(x6515),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6518.value))));
IkReal gconst124=(x6515*x6516);
IkReal gconst125=((1.0)*r10*x6516);
CheckValue<IkReal> x6519 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6519.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6519.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6520=((-1.0)*r11);
CheckValue<IkReal> x6523 = IKatan2WithCheck(IkReal(x6520),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6523.valid){
continue;
}
IkReal x6521=((1.0)*(x6523.value));
IkReal x6522=x6516;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6521)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6521)));
IkReal gconst124=(x6520*x6522);
IkReal gconst125=((1.0)*r10*x6522);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6524=((-1.0)*r11);
CheckValue<IkReal> x6527 = IKatan2WithCheck(IkReal(x6524),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6527.valid){
continue;
}
IkReal x6525=((1.0)*(x6527.value));
IkReal x6526=x6516;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6525)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6525)));
IkReal gconst124=(x6524*x6526);
IkReal gconst125=((1.0)*r10*x6526);
IkReal x6528=r12*r12;
IkReal x6529=((1.0)*sj0);
IkReal x6530=(cj0*r02);
IkReal x6531=x6516;
j4eval[0]=((IKabs((((r12*x6530*x6531))+((sj0*x6528*x6531))+(((-1.0)*x6529*x6531)))))+(IKabs(((((-1.0)*x6530))+(((-1.0)*r12*x6529))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6532=((-1.0)*r11);
CheckValue<IkReal> x6535 = IKatan2WithCheck(IkReal(x6532),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6535.valid){
continue;
}
IkReal x6533=((1.0)*(x6535.value));
IkReal x6534=x6516;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6533)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6533)));
IkReal gconst124=(x6532*x6534);
IkReal gconst125=((1.0)*r10*x6534);
IkReal x6536=r12*r12;
IkReal x6537=((1.0)+(((-1.0)*x6536)));
IkReal x6538=(cj2*r22*sj1);
IkReal x6539=(cj1*r22*sj2);
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(x6537,-1);
if(!x6546.valid){
continue;
}
IkReal x6540=x6546.value;
CheckValue<IkReal> x6547=IKPowWithIntegerCheck(((-1.0)+x6536),-1);
if(!x6547.valid){
continue;
}
IkReal x6541=x6547.value;
IkReal x6542=((1.0)*x6540);
if((x6537) < -0.00001)
continue;
IkReal x6543=IKsqrt(x6537);
IkReal x6544=((1.0)*r12*x6541*x6543);
IkReal x6545=((((-1.0)*x6542*(r10*r10)*(r20*r20)))+(((-1.0)*x6542*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6540)));
j4eval[0]=x6545;
j4eval[1]=IKsign(x6545);
j4eval[2]=((IKabs((x6538+x6539)))+(IKabs(((((-1.0)*x6539*x6544))+(((-1.0)*x6538*x6544))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6548=(gconst124*r21);
IkReal x6549=(cj1*sj2);
IkReal x6550=(cj2*sj1);
IkReal x6551=(gconst125*r20);
CheckValue<IkReal> x6552 = IKatan2WithCheck(IkReal((((r22*x6549))+((r22*x6550)))),IkReal(((((-1.0)*x6549*x6551))+(((-1.0)*x6550*x6551))+((x6548*x6550))+((x6548*x6549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6552.valid){
continue;
}
CheckValue<IkReal> x6553=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6551*x6551)))+(((-1.0)*(x6548*x6548)))+(((2.0)*x6548*x6551))+(((-1.0)*(r22*r22))))),-1);
if(!x6553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6552.value)+(((1.5707963267949)*(x6553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6554=IKsin(j4);
IkReal x6555=IKcos(j4);
IkReal x6556=(sj1*sj2);
IkReal x6557=(gconst125*r20);
IkReal x6558=(gconst124*r01);
IkReal x6559=(gconst125*r00);
IkReal x6560=(gconst125*r10);
IkReal x6561=((1.0)*x6555);
IkReal x6562=((1.0)*cj1*cj2);
IkReal x6563=((1.0)*x6554);
IkReal x6564=(gconst124*x6554);
IkReal x6565=(gconst124*x6555);
evalcond[0]=((((-1.0)*r22*x6561))+((r21*x6564))+(((-1.0)*x6557*x6563)));
evalcond[1]=(cj0+((r11*x6564))+(((-1.0)*x6560*x6563))+(((-1.0)*r12*x6561)));
evalcond[2]=((((-1.0)*sj0))+((x6554*x6558))+(((-1.0)*x6559*x6563))+(((-1.0)*r02*x6561)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6565))+(((-1.0)*x6557*x6561))+((r22*x6554)));
evalcond[4]=(((r02*x6554))+(((-1.0)*x6559*x6561))+(((-1.0)*cj0*x6562))+((cj0*x6556))+((x6555*x6558)));
evalcond[5]=(((r11*x6565))+(((-1.0)*sj0*x6562))+((r12*x6554))+((sj0*x6556))+(((-1.0)*x6560*x6561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6566=((1.0)*sj0);
IkReal x6567=((1.0)*cj0);
CheckValue<IkReal> x6568=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6568.valid){
continue;
}
CheckValue<IkReal> x6569 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6567))+(((-1.0)*r12*x6566)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x6567))+(((-1.0)*gconst124*r11*x6566))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6568.value)))+(x6569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6570=IKsin(j4);
IkReal x6571=IKcos(j4);
IkReal x6572=(sj1*sj2);
IkReal x6573=(gconst125*r20);
IkReal x6574=(gconst124*r01);
IkReal x6575=(gconst125*r00);
IkReal x6576=(gconst125*r10);
IkReal x6577=((1.0)*x6571);
IkReal x6578=((1.0)*cj1*cj2);
IkReal x6579=((1.0)*x6570);
IkReal x6580=(gconst124*x6570);
IkReal x6581=(gconst124*x6571);
evalcond[0]=((((-1.0)*x6573*x6579))+((r21*x6580))+(((-1.0)*r22*x6577)));
evalcond[1]=((((-1.0)*x6576*x6579))+((r11*x6580))+cj0+(((-1.0)*r12*x6577)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6575*x6579))+((x6570*x6574))+(((-1.0)*r02*x6577)));
evalcond[3]=(((r22*x6570))+((cj2*sj1))+(((-1.0)*x6573*x6577))+((r21*x6581))+((cj1*sj2)));
evalcond[4]=(((cj0*x6572))+(((-1.0)*x6575*x6577))+((x6571*x6574))+((r02*x6570))+(((-1.0)*cj0*x6578)));
evalcond[5]=((((-1.0)*x6576*x6577))+((r11*x6581))+((r12*x6570))+((sj0*x6572))+(((-1.0)*sj0*x6578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6582=((1.0)*gconst125);
CheckValue<IkReal> x6583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6582))+(((-1.0)*gconst124*r00)))),-1);
if(!x6583.valid){
continue;
}
CheckValue<IkReal> x6584 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6582))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6583.value)))+(x6584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6585=IKsin(j4);
IkReal x6586=IKcos(j4);
IkReal x6587=(sj1*sj2);
IkReal x6588=(gconst125*r20);
IkReal x6589=(gconst124*r01);
IkReal x6590=(gconst125*r00);
IkReal x6591=(gconst125*r10);
IkReal x6592=((1.0)*x6586);
IkReal x6593=((1.0)*cj1*cj2);
IkReal x6594=((1.0)*x6585);
IkReal x6595=(gconst124*x6585);
IkReal x6596=(gconst124*x6586);
evalcond[0]=(((r21*x6595))+(((-1.0)*x6588*x6594))+(((-1.0)*r22*x6592)));
evalcond[1]=(((r11*x6595))+cj0+(((-1.0)*r12*x6592))+(((-1.0)*x6591*x6594)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6590*x6594))+(((-1.0)*r02*x6592))+((x6585*x6589)));
evalcond[3]=(((cj2*sj1))+((r22*x6585))+((r21*x6596))+((cj1*sj2))+(((-1.0)*x6588*x6592)));
evalcond[4]=(((r02*x6585))+((cj0*x6587))+(((-1.0)*x6590*x6592))+(((-1.0)*cj0*x6593))+((x6586*x6589)));
evalcond[5]=(((sj0*x6587))+((r11*x6596))+(((-1.0)*x6591*x6592))+(((-1.0)*sj0*x6593))+((r12*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6597=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6597;
j4eval[1]=IKsign(x6597);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6598=((1.0)*cj5);
IkReal x6599=((((-1.0)*r01*x6598))+(((-1.0)*r00*sj5)));
j4eval[0]=x6599;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6598)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6600=cj5*cj5;
IkReal x6601=r11*r11;
IkReal x6602=(cj5*r10);
IkReal x6603=(r11*sj5);
IkReal x6604=((((2.0)*x6602*x6603))+((x6600*x6601))+(((-1.0)*(r12*r12)))+(((-1.0)*x6601))+(((-1.0)*x6600*(r10*r10))));
j4eval[0]=x6604;
j4eval[1]=IKsign(x6604);
j4eval[2]=((IKabs((x6603+(((-1.0)*x6602)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6605=cj5*cj5;
IkReal x6606=r11*r11;
IkReal x6607=(cj5*r10);
IkReal x6608=(r11*sj5);
CheckValue<IkReal> x6609=IKPowWithIntegerCheck(IKsign((((x6605*x6606))+(((-1.0)*x6605*(r10*r10)))+(((2.0)*x6607*x6608))+(((-1.0)*(r12*r12)))+(((-1.0)*x6606)))),-1);
if(!x6609.valid){
continue;
}
CheckValue<IkReal> x6610 = IKatan2WithCheck(IkReal((x6608+(((-1.0)*x6607)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6609.value)))+(x6610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6611=IKcos(j4);
IkReal x6612=IKsin(j4);
IkReal x6613=(cj5*r00);
IkReal x6614=(cj5*r10);
IkReal x6615=(r21*sj5);
IkReal x6616=(cj5*r20);
IkReal x6617=((1.0)*x6611);
IkReal x6618=((1.0)*x6612);
IkReal x6619=(sj5*x6612);
IkReal x6620=(sj5*x6611);
evalcond[0]=((((-1.0)*x6614*x6617))+((r12*x6612))+((r11*x6620)));
evalcond[1]=(((x6612*x6615))+(((-1.0)*r22*x6617))+(((-1.0)*x6616*x6618)));
evalcond[2]=((((-1.0)*x6613*x6618))+((r01*x6619))+(((-1.0)*r02*x6617)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6617))+(((-1.0)*x6614*x6618))+((r11*x6619)));
evalcond[4]=(((cj2*sj1))+((x6611*x6615))+((cj1*sj2))+(((-1.0)*x6616*x6617))+((r22*x6612)));
evalcond[5]=((((-1.0)*x6613*x6617))+((r02*x6612))+((r01*x6620))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6621=((1.0)*cj5);
CheckValue<IkReal> x6622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6621)))),-1);
if(!x6622.valid){
continue;
}
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6622.value)))+(x6623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6624=IKcos(j4);
IkReal x6625=IKsin(j4);
IkReal x6626=(cj5*r00);
IkReal x6627=(cj5*r10);
IkReal x6628=(r21*sj5);
IkReal x6629=(cj5*r20);
IkReal x6630=((1.0)*x6624);
IkReal x6631=((1.0)*x6625);
IkReal x6632=(sj5*x6625);
IkReal x6633=(sj5*x6624);
evalcond[0]=(((r12*x6625))+((r11*x6633))+(((-1.0)*x6627*x6630)));
evalcond[1]=((((-1.0)*r22*x6630))+(((-1.0)*x6629*x6631))+((x6625*x6628)));
evalcond[2]=(((r01*x6632))+(((-1.0)*r02*x6630))+(((-1.0)*x6626*x6631)));
evalcond[3]=((1.0)+((r11*x6632))+(((-1.0)*x6627*x6631))+(((-1.0)*r12*x6630)));
evalcond[4]=(((cj2*sj1))+((x6624*x6628))+((cj1*sj2))+(((-1.0)*x6629*x6630))+((r22*x6625)));
evalcond[5]=(((r02*x6625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6633))+(((-1.0)*x6626*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6634=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6634.valid){
continue;
}
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6634.value)))+(x6635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6636=IKcos(j4);
IkReal x6637=IKsin(j4);
IkReal x6638=(cj5*r00);
IkReal x6639=(cj5*r10);
IkReal x6640=(r21*sj5);
IkReal x6641=(cj5*r20);
IkReal x6642=((1.0)*x6636);
IkReal x6643=((1.0)*x6637);
IkReal x6644=(sj5*x6637);
IkReal x6645=(sj5*x6636);
evalcond[0]=((((-1.0)*x6639*x6642))+((r11*x6645))+((r12*x6637)));
evalcond[1]=((((-1.0)*r22*x6642))+((x6637*x6640))+(((-1.0)*x6641*x6643)));
evalcond[2]=((((-1.0)*x6638*x6643))+((r01*x6644))+(((-1.0)*r02*x6642)));
evalcond[3]=((1.0)+(((-1.0)*x6639*x6643))+((r11*x6644))+(((-1.0)*r12*x6642)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6636*x6640))+(((-1.0)*x6641*x6642))+((r22*x6637)));
evalcond[5]=((((-1.0)*x6638*x6642))+((r01*x6645))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6646=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6646;
j4eval[1]=IKsign(x6646);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6647=((1.0)*cj5);
IkReal x6648=((((-1.0)*r21*x6647))+(((-1.0)*r20*sj5)));
j4eval[0]=x6648;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6647))))));
j4eval[2]=IKsign(x6648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6649=cj5*cj5;
IkReal x6650=r11*r11;
IkReal x6651=(r11*sj5);
IkReal x6652=(cj5*r10);
IkReal x6653=(((x6649*(r10*r10)))+(r12*r12)+x6650+(((-2.0)*x6651*x6652))+(((-1.0)*x6649*x6650)));
j4eval[0]=x6653;
j4eval[1]=IKsign(x6653);
j4eval[2]=((IKabs((x6651+(((-1.0)*x6652)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6654=cj5*cj5;
IkReal x6655=r11*r11;
IkReal x6656=(cj5*r10);
IkReal x6657=(r11*sj5);
CheckValue<IkReal> x6658 = IKatan2WithCheck(IkReal((x6657+(((-1.0)*x6656)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6658.valid){
continue;
}
CheckValue<IkReal> x6659=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6654*x6655))+(((-2.0)*x6656*x6657))+x6655+((x6654*(r10*r10))))),-1);
if(!x6659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6658.value)+(((1.5707963267949)*(x6659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6660=IKcos(j4);
IkReal x6661=IKsin(j4);
IkReal x6662=(cj5*r00);
IkReal x6663=(cj5*r10);
IkReal x6664=(r21*sj5);
IkReal x6665=(cj5*r20);
IkReal x6666=((1.0)*x6660);
IkReal x6667=((1.0)*x6661);
IkReal x6668=(sj5*x6661);
IkReal x6669=(sj5*x6660);
evalcond[0]=(((r12*x6661))+((r11*x6669))+(((-1.0)*x6663*x6666)));
evalcond[1]=((((-1.0)*x6665*x6667))+(((-1.0)*r22*x6666))+((x6661*x6664)));
evalcond[2]=(((r01*x6668))+(((-1.0)*r02*x6666))+(((-1.0)*x6662*x6667)));
evalcond[3]=((-1.0)+((r11*x6668))+(((-1.0)*r12*x6666))+(((-1.0)*x6663*x6667)));
evalcond[4]=(((cj2*sj1))+((x6660*x6664))+((cj1*sj2))+(((-1.0)*x6665*x6666))+((r22*x6661)));
evalcond[5]=(((r02*x6661))+(((-1.0)*sj1*sj2))+((r01*x6669))+((cj1*cj2))+(((-1.0)*x6662*x6666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6670=((1.0)*cj5);
CheckValue<IkReal> x6671 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6671.valid){
continue;
}
CheckValue<IkReal> x6672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6670))+(((-1.0)*r20*sj5)))),-1);
if(!x6672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6671.value)+(((1.5707963267949)*(x6672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6673=IKcos(j4);
IkReal x6674=IKsin(j4);
IkReal x6675=(cj5*r00);
IkReal x6676=(cj5*r10);
IkReal x6677=(r21*sj5);
IkReal x6678=(cj5*r20);
IkReal x6679=((1.0)*x6673);
IkReal x6680=((1.0)*x6674);
IkReal x6681=(sj5*x6674);
IkReal x6682=(sj5*x6673);
evalcond[0]=(((r11*x6682))+((r12*x6674))+(((-1.0)*x6676*x6679)));
evalcond[1]=((((-1.0)*x6678*x6680))+((x6674*x6677))+(((-1.0)*r22*x6679)));
evalcond[2]=((((-1.0)*r02*x6679))+(((-1.0)*x6675*x6680))+((r01*x6681)));
evalcond[3]=((-1.0)+(((-1.0)*x6676*x6680))+(((-1.0)*r12*x6679))+((r11*x6681)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6678*x6679))+((r22*x6674))+((x6673*x6677)));
evalcond[5]=(((r02*x6674))+(((-1.0)*sj1*sj2))+((r01*x6682))+((cj1*cj2))+(((-1.0)*x6675*x6679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6683 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6683.valid){
continue;
}
CheckValue<IkReal> x6684=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6683.value)+(((1.5707963267949)*(x6684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6685=IKcos(j4);
IkReal x6686=IKsin(j4);
IkReal x6687=(cj5*r00);
IkReal x6688=(cj5*r10);
IkReal x6689=(r21*sj5);
IkReal x6690=(cj5*r20);
IkReal x6691=((1.0)*x6685);
IkReal x6692=((1.0)*x6686);
IkReal x6693=(sj5*x6686);
IkReal x6694=(sj5*x6685);
evalcond[0]=(((r12*x6686))+((r11*x6694))+(((-1.0)*x6688*x6691)));
evalcond[1]=((((-1.0)*x6690*x6692))+((x6686*x6689))+(((-1.0)*r22*x6691)));
evalcond[2]=((((-1.0)*r02*x6691))+(((-1.0)*x6687*x6692))+((r01*x6693)));
evalcond[3]=((-1.0)+((r11*x6693))+(((-1.0)*x6688*x6692))+(((-1.0)*r12*x6691)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6686))+(((-1.0)*x6690*x6691))+((x6685*x6689)));
evalcond[5]=(((r02*x6686))+(((-1.0)*sj1*sj2))+(((-1.0)*x6687*x6691))+((r01*x6694))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6695=((-1.0)*r00);
IkReal x6697 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6697)==0){
continue;
}
IkReal x6696=pow(x6697,-0.5);
CheckValue<IkReal> x6698 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6695),IKFAST_ATAN2_MAGTHRESH);
if(!x6698.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6698.value));
IkReal gconst127=(r01*x6696);
IkReal gconst128=(x6695*x6696);
CheckValue<IkReal> x6699 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6699.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6699.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6700=((-1.0)*r00);
IkReal x6701=x6696;
CheckValue<IkReal> x6703 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6700),IKFAST_ATAN2_MAGTHRESH);
if(!x6703.valid){
continue;
}
IkReal x6702=((-1.0)*(x6703.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6702;
IkReal gconst126=x6702;
IkReal gconst127=(r01*x6701);
IkReal gconst128=(x6700*x6701);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6704=((1.0)*sj0);
IkReal x6705=((1.0)*gconst127);
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6704)))),IkReal(((((-1.0)*gconst127*r11*x6704))+((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6705))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
CheckValue<IkReal> x6707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6705)))),-1);
if(!x6707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6706.value)+(((1.5707963267949)*(x6707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6708=IKsin(j4);
IkReal x6709=IKcos(j4);
IkReal x6710=(gconst127*r01);
IkReal x6711=(sj1*sj2);
IkReal x6712=(gconst128*r10);
IkReal x6713=(gconst128*r00);
IkReal x6714=(gconst128*r20);
IkReal x6715=((1.0)*x6709);
IkReal x6716=((1.0)*cj1*cj2);
IkReal x6717=((1.0)*x6708);
IkReal x6718=(gconst127*x6709);
IkReal x6719=(gconst127*x6708);
evalcond[0]=((((-1.0)*x6714*x6717))+((r21*x6719))+(((-1.0)*r22*x6715)));
evalcond[1]=(cj0+((r11*x6719))+(((-1.0)*x6712*x6717))+(((-1.0)*r12*x6715)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6713*x6717))+(((-1.0)*r02*x6715))+((x6708*x6710)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6714*x6715))+((r21*x6718))+((r22*x6708)));
evalcond[4]=(((x6709*x6710))+((cj0*x6711))+(((-1.0)*x6713*x6715))+(((-1.0)*cj0*x6716))+((r02*x6708)));
evalcond[5]=((((-1.0)*sj0*x6716))+((r11*x6718))+(((-1.0)*x6712*x6715))+((r12*x6708))+((sj0*x6711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6720=((1.0)*gconst128);
CheckValue<IkReal> x6721 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6720))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6721.valid){
continue;
}
CheckValue<IkReal> x6722=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6720))+(((-1.0)*gconst127*r10)))),-1);
if(!x6722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6721.value)+(((1.5707963267949)*(x6722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6723=IKsin(j4);
IkReal x6724=IKcos(j4);
IkReal x6725=(gconst127*r01);
IkReal x6726=(sj1*sj2);
IkReal x6727=(gconst128*r10);
IkReal x6728=(gconst128*r00);
IkReal x6729=(gconst128*r20);
IkReal x6730=((1.0)*x6724);
IkReal x6731=((1.0)*cj1*cj2);
IkReal x6732=((1.0)*x6723);
IkReal x6733=(gconst127*x6724);
IkReal x6734=(gconst127*x6723);
evalcond[0]=(((r21*x6734))+(((-1.0)*r22*x6730))+(((-1.0)*x6729*x6732)));
evalcond[1]=(cj0+(((-1.0)*r12*x6730))+(((-1.0)*x6727*x6732))+((r11*x6734)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6728*x6732))+(((-1.0)*r02*x6730))+((x6723*x6725)));
evalcond[3]=(((cj2*sj1))+((r21*x6733))+((cj1*sj2))+((r22*x6723))+(((-1.0)*x6729*x6730)));
evalcond[4]=(((x6724*x6725))+((cj0*x6726))+(((-1.0)*cj0*x6731))+(((-1.0)*x6728*x6730))+((r02*x6723)));
evalcond[5]=(((r12*x6723))+(((-1.0)*x6727*x6730))+((r11*x6733))+(((-1.0)*sj0*x6731))+((sj0*x6726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6735=((-1.0)*r01);
IkReal x6737 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6737)==0){
continue;
}
IkReal x6736=pow(x6737,-0.5);
CheckValue<IkReal> x6738 = IKatan2WithCheck(IkReal(x6735),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6738.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6738.value))));
IkReal gconst130=(x6735*x6736);
IkReal gconst131=((1.0)*r00*x6736);
CheckValue<IkReal> x6739 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6739.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6739.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6740=((-1.0)*r01);
CheckValue<IkReal> x6743 = IKatan2WithCheck(IkReal(x6740),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6743.valid){
continue;
}
IkReal x6741=((1.0)*(x6743.value));
IkReal x6742=x6736;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6741)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6741)));
IkReal gconst130=(x6740*x6742);
IkReal gconst131=((1.0)*r00*x6742);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6744=((-1.0)*r01);
CheckValue<IkReal> x6747 = IKatan2WithCheck(IkReal(x6744),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6747.valid){
continue;
}
IkReal x6745=((1.0)*(x6747.value));
IkReal x6746=x6736;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6745)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6745)));
IkReal gconst130=(x6744*x6746);
IkReal gconst131=((1.0)*r00*x6746);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6748=((-1.0)*r01);
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(x6748),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
IkReal x6749=((1.0)*(x6751.value));
IkReal x6750=x6736;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6749)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6749)));
IkReal gconst130=(x6748*x6750);
IkReal gconst131=((1.0)*r00*x6750);
IkReal x6752=r02*r02;
IkReal x6753=(r12*sj0);
IkReal x6754=((1.0)*cj0);
IkReal x6755=x6736;
j4eval[0]=((IKabs(((((-1.0)*x6753))+(((-1.0)*r02*x6754)))))+(IKabs((((r02*x6753*x6755))+((cj0*x6752*x6755))+(((-1.0)*x6754*x6755))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6756=((1.0)*sj0);
IkReal x6757=((1.0)*gconst130);
CheckValue<IkReal> x6758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6757))+(((-1.0)*gconst131*r21)))),-1);
if(!x6758.valid){
continue;
}
CheckValue<IkReal> x6759 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6756)))),IkReal(((((-1.0)*gconst130*r11*x6756))+(((-1.0)*cj0*r01*x6757))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6758.value)))+(x6759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6760=IKsin(j4);
IkReal x6761=IKcos(j4);
IkReal x6762=(gconst131*r10);
IkReal x6763=(sj1*sj2);
IkReal x6764=(gconst131*r20);
IkReal x6765=(gconst131*r00);
IkReal x6766=((1.0)*x6761);
IkReal x6767=((1.0)*cj1*cj2);
IkReal x6768=(gconst130*x6760);
IkReal x6769=((1.0)*x6760);
IkReal x6770=(gconst130*x6761);
evalcond[0]=((((-1.0)*r22*x6766))+((r21*x6768))+(((-1.0)*x6764*x6769)));
evalcond[1]=((((-1.0)*x6762*x6769))+cj0+((r11*x6768))+(((-1.0)*r12*x6766)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6768))+(((-1.0)*x6765*x6769))+(((-1.0)*r02*x6766)));
evalcond[3]=(((cj2*sj1))+((r22*x6760))+((cj1*sj2))+(((-1.0)*x6764*x6766))+((r21*x6770)));
evalcond[4]=(((cj0*x6763))+(((-1.0)*x6765*x6766))+(((-1.0)*cj0*x6767))+((r02*x6760))+((r01*x6770)));
evalcond[5]=(((r11*x6770))+(((-1.0)*sj0*x6767))+(((-1.0)*x6762*x6766))+((r12*x6760))+((sj0*x6763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6771=((1.0)*gconst131);
CheckValue<IkReal> x6772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6771))+(((-1.0)*gconst130*r10)))),-1);
if(!x6772.valid){
continue;
}
CheckValue<IkReal> x6773 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6772.value)))+(x6773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6774=IKsin(j4);
IkReal x6775=IKcos(j4);
IkReal x6776=(gconst131*r10);
IkReal x6777=(sj1*sj2);
IkReal x6778=(gconst131*r20);
IkReal x6779=(gconst131*r00);
IkReal x6780=((1.0)*x6775);
IkReal x6781=((1.0)*cj1*cj2);
IkReal x6782=(gconst130*x6774);
IkReal x6783=((1.0)*x6774);
IkReal x6784=(gconst130*x6775);
evalcond[0]=((((-1.0)*x6778*x6783))+((r21*x6782))+(((-1.0)*r22*x6780)));
evalcond[1]=(cj0+((r11*x6782))+(((-1.0)*r12*x6780))+(((-1.0)*x6776*x6783)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6779*x6783))+(((-1.0)*r02*x6780))+((r01*x6782)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6778*x6780))+((cj1*sj2))+((r22*x6774))+((r21*x6784)));
evalcond[4]=(((r02*x6774))+((cj0*x6777))+(((-1.0)*cj0*x6781))+(((-1.0)*x6779*x6780))+((r01*x6784)));
evalcond[5]=(((r12*x6774))+((sj0*x6777))+((r11*x6784))+(((-1.0)*sj0*x6781))+(((-1.0)*x6776*x6780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6785=((1.0)*gconst131);
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x6785)))),-1);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6786.value)))+(x6787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKsin(j4);
IkReal x6789=IKcos(j4);
IkReal x6790=(gconst131*r10);
IkReal x6791=(sj1*sj2);
IkReal x6792=(gconst131*r20);
IkReal x6793=(gconst131*r00);
IkReal x6794=((1.0)*x6789);
IkReal x6795=((1.0)*cj1*cj2);
IkReal x6796=(gconst130*x6788);
IkReal x6797=((1.0)*x6788);
IkReal x6798=(gconst130*x6789);
evalcond[0]=(((r21*x6796))+(((-1.0)*x6792*x6797))+(((-1.0)*r22*x6794)));
evalcond[1]=(cj0+((r11*x6796))+(((-1.0)*x6790*x6797))+(((-1.0)*r12*x6794)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6793*x6797))+((r01*x6796))+(((-1.0)*r02*x6794)));
evalcond[3]=(((r21*x6798))+((cj2*sj1))+(((-1.0)*x6792*x6794))+((cj1*sj2))+((r22*x6788)));
evalcond[4]=((((-1.0)*x6793*x6794))+((r01*x6798))+((r02*x6788))+((cj0*x6791))+(((-1.0)*cj0*x6795)));
evalcond[5]=(((r12*x6788))+((sj0*x6791))+(((-1.0)*sj0*x6795))+((r11*x6798))+(((-1.0)*x6790*x6794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6799=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6799;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6800=((1.0)*cj5);
IkReal x6801=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6800)));
j4eval[0]=x6801;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6800))))));
j4eval[2]=IKsign(x6801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6802=cj5*cj5;
IkReal x6803=r01*r01;
IkReal x6804=(cj5*r00);
IkReal x6805=(r01*sj5);
IkReal x6806=((((-2.0)*x6804*x6805))+((x6802*(r00*r00)))+(((-1.0)*x6802*x6803))+x6803+(r02*r02));
j4eval[0]=x6806;
j4eval[1]=IKsign(x6806);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6804))+x6805))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6807=cj5*cj5;
IkReal x6808=r01*r01;
IkReal x6809=(r01*sj5);
IkReal x6810=(cj5*r00);
CheckValue<IkReal> x6811 = IKatan2WithCheck(IkReal(((((-1.0)*x6810))+x6809)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6811.valid){
continue;
}
CheckValue<IkReal> x6812=IKPowWithIntegerCheck(IKsign((((x6807*(r00*r00)))+x6808+(r02*r02)+(((-2.0)*x6809*x6810))+(((-1.0)*x6807*x6808)))),-1);
if(!x6812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6811.value)+(((1.5707963267949)*(x6812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6813=IKcos(j4);
IkReal x6814=IKsin(j4);
IkReal x6815=(cj5*r00);
IkReal x6816=(cj5*r10);
IkReal x6817=(r21*sj5);
IkReal x6818=(cj5*r20);
IkReal x6819=((1.0)*x6813);
IkReal x6820=((1.0)*x6814);
IkReal x6821=(sj5*x6814);
IkReal x6822=(sj5*x6813);
evalcond[0]=(((r01*x6822))+((r02*x6814))+(((-1.0)*x6815*x6819)));
evalcond[1]=((((-1.0)*x6818*x6820))+((x6814*x6817))+(((-1.0)*r22*x6819)));
evalcond[2]=((((-1.0)*x6816*x6820))+((r11*x6821))+(((-1.0)*r12*x6819)));
evalcond[3]=((-1.0)+(((-1.0)*x6815*x6820))+((r01*x6821))+(((-1.0)*r02*x6819)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6814))+((x6813*x6817))+(((-1.0)*x6818*x6819)));
evalcond[5]=(((r12*x6814))+(((-1.0)*x6816*x6819))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6823=((1.0)*cj5);
CheckValue<IkReal> x6824 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6824.valid){
continue;
}
CheckValue<IkReal> x6825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6823)))),-1);
if(!x6825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6824.value)+(((1.5707963267949)*(x6825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6826=IKcos(j4);
IkReal x6827=IKsin(j4);
IkReal x6828=(cj5*r00);
IkReal x6829=(cj5*r10);
IkReal x6830=(r21*sj5);
IkReal x6831=(cj5*r20);
IkReal x6832=((1.0)*x6826);
IkReal x6833=((1.0)*x6827);
IkReal x6834=(sj5*x6827);
IkReal x6835=(sj5*x6826);
evalcond[0]=(((r02*x6827))+((r01*x6835))+(((-1.0)*x6828*x6832)));
evalcond[1]=((((-1.0)*r22*x6832))+((x6827*x6830))+(((-1.0)*x6831*x6833)));
evalcond[2]=((((-1.0)*r12*x6832))+((r11*x6834))+(((-1.0)*x6829*x6833)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6832))+((r01*x6834))+(((-1.0)*x6828*x6833)));
evalcond[4]=(((cj2*sj1))+((r22*x6827))+((cj1*sj2))+((x6826*x6830))+(((-1.0)*x6831*x6832)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6835))+((r12*x6827))+(((-1.0)*x6829*x6832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6836=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6836.valid){
continue;
}
CheckValue<IkReal> x6837 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6836.value)))+(x6837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6838=IKcos(j4);
IkReal x6839=IKsin(j4);
IkReal x6840=(cj5*r00);
IkReal x6841=(cj5*r10);
IkReal x6842=(r21*sj5);
IkReal x6843=(cj5*r20);
IkReal x6844=((1.0)*x6838);
IkReal x6845=((1.0)*x6839);
IkReal x6846=(sj5*x6839);
IkReal x6847=(sj5*x6838);
evalcond[0]=(((r02*x6839))+((r01*x6847))+(((-1.0)*x6840*x6844)));
evalcond[1]=((((-1.0)*x6843*x6845))+(((-1.0)*r22*x6844))+((x6839*x6842)));
evalcond[2]=(((r11*x6846))+(((-1.0)*x6841*x6845))+(((-1.0)*r12*x6844)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6844))+((r01*x6846))+(((-1.0)*x6840*x6845)));
evalcond[4]=(((cj2*sj1))+((r22*x6839))+((x6838*x6842))+(((-1.0)*x6843*x6844))+((cj1*sj2)));
evalcond[5]=(((r11*x6847))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6841*x6844))+((r12*x6839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6848=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6848;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6849=((1.0)*cj5);
IkReal x6850=((((-1.0)*r21*x6849))+(((-1.0)*r20*sj5)));
j4eval[0]=x6850;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6849))))));
j4eval[2]=IKsign(x6850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6851=(r01*sj5);
IkReal x6852=(cj1*sj2);
IkReal x6853=(cj2*sj1);
IkReal x6854=((1.0)*r02);
IkReal x6855=((1.0)*cj5*r00);
IkReal x6856=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6856;
j4eval[1]=((IKabs(((((-1.0)*x6852*x6854))+(((-1.0)*x6853*x6854)))))+(IKabs(((((-1.0)*x6852*x6855))+((x6851*x6853))+((x6851*x6852))+(((-1.0)*x6853*x6855))))));
j4eval[2]=IKsign(x6856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6857=(r01*sj5);
IkReal x6858=(cj1*sj2);
IkReal x6859=(cj2*sj1);
IkReal x6860=((1.0)*r02);
IkReal x6861=((1.0)*cj5*r00);
CheckValue<IkReal> x6862 = IKatan2WithCheck(IkReal((((x6857*x6858))+((x6857*x6859))+(((-1.0)*x6858*x6861))+(((-1.0)*x6859*x6861)))),IkReal(((((-1.0)*x6858*x6860))+(((-1.0)*x6859*x6860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6862.valid){
continue;
}
CheckValue<IkReal> x6863=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6862.value)+(((1.5707963267949)*(x6863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6864=IKcos(j4);
IkReal x6865=IKsin(j4);
IkReal x6866=(cj5*r00);
IkReal x6867=(cj5*r10);
IkReal x6868=(r21*sj5);
IkReal x6869=(cj5*r20);
IkReal x6870=((1.0)*x6864);
IkReal x6871=((1.0)*x6865);
IkReal x6872=(sj5*x6865);
IkReal x6873=(sj5*x6864);
evalcond[0]=(((r02*x6865))+((r01*x6873))+(((-1.0)*x6866*x6870)));
evalcond[1]=((((-1.0)*x6869*x6871))+((x6865*x6868))+(((-1.0)*r22*x6870)));
evalcond[2]=(((r11*x6872))+(((-1.0)*r12*x6870))+(((-1.0)*x6867*x6871)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6870))+((r01*x6872))+(((-1.0)*x6866*x6871)));
evalcond[4]=(((cj2*sj1))+((r22*x6865))+(((-1.0)*x6869*x6870))+((cj1*sj2))+((x6864*x6868)));
evalcond[5]=(((r11*x6873))+(((-1.0)*sj1*sj2))+((r12*x6865))+(((-1.0)*x6867*x6870))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6874=((1.0)*cj5);
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
CheckValue<IkReal> x6876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6874))+(((-1.0)*r20*sj5)))),-1);
if(!x6876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6875.value)+(((1.5707963267949)*(x6876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6877=IKcos(j4);
IkReal x6878=IKsin(j4);
IkReal x6879=(cj5*r00);
IkReal x6880=(cj5*r10);
IkReal x6881=(r21*sj5);
IkReal x6882=(cj5*r20);
IkReal x6883=((1.0)*x6877);
IkReal x6884=((1.0)*x6878);
IkReal x6885=(sj5*x6878);
IkReal x6886=(sj5*x6877);
evalcond[0]=(((r02*x6878))+(((-1.0)*x6879*x6883))+((r01*x6886)));
evalcond[1]=(((x6878*x6881))+(((-1.0)*x6882*x6884))+(((-1.0)*r22*x6883)));
evalcond[2]=(((r11*x6885))+(((-1.0)*x6880*x6884))+(((-1.0)*r12*x6883)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6883))+(((-1.0)*x6879*x6884))+((r01*x6885)));
evalcond[4]=(((cj2*sj1))+((r22*x6878))+((x6877*x6881))+((cj1*sj2))+(((-1.0)*x6882*x6883)));
evalcond[5]=(((r11*x6886))+(((-1.0)*sj1*sj2))+((r12*x6878))+((cj1*cj2))+(((-1.0)*x6880*x6883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6887 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6887.valid){
continue;
}
CheckValue<IkReal> x6888=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6887.value)+(((1.5707963267949)*(x6888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6889=IKcos(j4);
IkReal x6890=IKsin(j4);
IkReal x6891=(cj5*r00);
IkReal x6892=(cj5*r10);
IkReal x6893=(r21*sj5);
IkReal x6894=(cj5*r20);
IkReal x6895=((1.0)*x6889);
IkReal x6896=((1.0)*x6890);
IkReal x6897=(sj5*x6890);
IkReal x6898=(sj5*x6889);
evalcond[0]=(((r02*x6890))+(((-1.0)*x6891*x6895))+((r01*x6898)));
evalcond[1]=((((-1.0)*x6894*x6896))+((x6890*x6893))+(((-1.0)*r22*x6895)));
evalcond[2]=((((-1.0)*x6892*x6896))+(((-1.0)*r12*x6895))+((r11*x6897)));
evalcond[3]=((1.0)+(((-1.0)*x6891*x6896))+(((-1.0)*r02*x6895))+((r01*x6897)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6894*x6895))+((cj1*sj2))+((x6889*x6893))+((r22*x6890)));
evalcond[5]=(((r12*x6890))+(((-1.0)*sj1*sj2))+(((-1.0)*x6892*x6895))+((cj1*cj2))+((r11*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6899=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6899);
rxp1_1=(px*r21);
rxp1_2=(r11*x6899);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6900=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6900);
rxp1_1=(px*r21);
rxp1_2=(r11*x6900);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6901=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6901);
rxp1_1=(px*r21);
rxp1_2=(r11*x6901);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6904=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6904.valid){
continue;
}
IkReal x6902=x6904.value;
IkReal x6903=(sj0*x6902);
cj4array[0]=((((-1.0)*sj1*sj2*x6903))+((cj1*cj2*x6903)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6905=IKsin(j4);
IkReal x6906=IKcos(j4);
IkReal x6907=(r21*sj5);
IkReal x6908=((1.0)*cj5*r20);
evalcond[0]=(r02*x6905);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6906)));
evalcond[2]=((((-1.0)*x6905*x6908))+((x6905*x6907)));
evalcond[3]=((((-1.0)*cj5*r10*x6905))+((r11*sj5*x6905)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6906*x6908))+((x6906*x6907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6911=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6911.valid){
continue;
}
IkReal x6909=x6911.value;
IkReal x6910=((1.0)*x6909);
cj4array[0]=((((-1.0)*cj2*sj1*x6910))+(((-1.0)*cj1*sj2*x6910)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6912=IKsin(j4);
IkReal x6913=IKcos(j4);
IkReal x6914=((1.0)*sj0);
IkReal x6915=((1.0)*cj5);
IkReal x6916=(sj5*x6912);
evalcond[0]=(r02*x6912);
evalcond[1]=((((-1.0)*r02*x6913))+(((-1.0)*x6914)));
evalcond[2]=((((-1.0)*r20*x6912*x6915))+((r21*x6916)));
evalcond[3]=(((r11*x6916))+(((-1.0)*r10*x6912*x6915)));
evalcond[4]=((((-1.0)*cj1*cj2*x6914))+((r11*sj5*x6913))+((sj0*sj1*sj2))+(((-1.0)*r10*x6913*x6915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6917=IKPowWithIntegerCheck(r02,-1);
if(!x6917.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6917.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6918=IKsin(j4);
IkReal x6919=IKcos(j4);
IkReal x6920=(r21*sj5);
IkReal x6921=((1.0)*cj5);
IkReal x6922=(r11*sj5);
evalcond[0]=(r02*x6918);
evalcond[1]=((((-1.0)*r20*x6918*x6921))+((x6918*x6920)));
evalcond[2]=((((-1.0)*r10*x6918*x6921))+((x6918*x6922)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6919*x6920))+(((-1.0)*r20*x6919*x6921)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6919*x6922))+(((-1.0)*r10*x6919*x6921))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6923=((1.0)*sj0);
IkReal x6924=((1.0)*cj0);
CheckValue<IkReal> x6925 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6924))+(((-1.0)*r12*x6923)))),IkReal(((((-1.0)*r01*sj5*x6924))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x6923))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6925.valid){
continue;
}
CheckValue<IkReal> x6926=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6925.value)+(((1.5707963267949)*(x6926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6927=IKsin(j4);
IkReal x6928=IKcos(j4);
IkReal x6929=(cj5*r00);
IkReal x6930=(cj5*r10);
IkReal x6931=(r21*sj5);
IkReal x6932=(sj1*sj2);
IkReal x6933=(cj5*r20);
IkReal x6934=((1.0)*x6928);
IkReal x6935=((1.0)*cj1*cj2);
IkReal x6936=((1.0)*x6927);
IkReal x6937=(sj5*x6927);
IkReal x6938=(sj5*x6928);
evalcond[0]=(((x6927*x6931))+(((-1.0)*r22*x6934))+(((-1.0)*x6933*x6936)));
evalcond[1]=(cj0+(((-1.0)*x6930*x6936))+((r11*x6937))+(((-1.0)*r12*x6934)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6934))+((r01*x6937))+(((-1.0)*x6929*x6936)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6927))+((x6928*x6931))+(((-1.0)*x6933*x6934)));
evalcond[4]=(((r01*x6938))+(((-1.0)*cj0*x6935))+((r02*x6927))+((cj0*x6932))+(((-1.0)*x6929*x6934)));
evalcond[5]=(((sj0*x6932))+(((-1.0)*x6930*x6934))+((r11*x6938))+(((-1.0)*sj0*x6935))+((r12*x6927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6939=((1.0)*cj5);
CheckValue<IkReal> x6940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6940.valid){
continue;
}
CheckValue<IkReal> x6941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6939)))),-1);
if(!x6941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6940.value)+(((1.5707963267949)*(x6941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6942=IKsin(j4);
IkReal x6943=IKcos(j4);
IkReal x6944=(cj5*r00);
IkReal x6945=(cj5*r10);
IkReal x6946=(r21*sj5);
IkReal x6947=(sj1*sj2);
IkReal x6948=(cj5*r20);
IkReal x6949=((1.0)*x6943);
IkReal x6950=((1.0)*cj1*cj2);
IkReal x6951=((1.0)*x6942);
IkReal x6952=(sj5*x6942);
IkReal x6953=(sj5*x6943);
evalcond[0]=((((-1.0)*x6948*x6951))+((x6942*x6946))+(((-1.0)*r22*x6949)));
evalcond[1]=(cj0+(((-1.0)*r12*x6949))+(((-1.0)*x6945*x6951))+((r11*x6952)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6949))+(((-1.0)*x6944*x6951))+((r01*x6952)));
evalcond[3]=(((cj2*sj1))+((r22*x6942))+(((-1.0)*x6948*x6949))+((cj1*sj2))+((x6943*x6946)));
evalcond[4]=(((r02*x6942))+((cj0*x6947))+(((-1.0)*x6944*x6949))+((r01*x6953))+(((-1.0)*cj0*x6950)));
evalcond[5]=((((-1.0)*x6945*x6949))+((r12*x6942))+(((-1.0)*sj0*x6950))+((sj0*x6947))+((r11*x6953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6954=((1.0)*cj5);
CheckValue<IkReal> x6955 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6955.valid){
continue;
}
CheckValue<IkReal> x6956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6954)))),-1);
if(!x6956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6955.value)+(((1.5707963267949)*(x6956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6957=IKsin(j4);
IkReal x6958=IKcos(j4);
IkReal x6959=(cj5*r00);
IkReal x6960=(cj5*r10);
IkReal x6961=(r21*sj5);
IkReal x6962=(sj1*sj2);
IkReal x6963=(cj5*r20);
IkReal x6964=((1.0)*x6958);
IkReal x6965=((1.0)*cj1*cj2);
IkReal x6966=((1.0)*x6957);
IkReal x6967=(sj5*x6957);
IkReal x6968=(sj5*x6958);
evalcond[0]=((((-1.0)*r22*x6964))+(((-1.0)*x6963*x6966))+((x6957*x6961)));
evalcond[1]=(cj0+(((-1.0)*r12*x6964))+(((-1.0)*x6960*x6966))+((r11*x6967)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6964))+(((-1.0)*x6959*x6966))+((r01*x6967)));
evalcond[3]=(((cj2*sj1))+((r22*x6957))+((cj1*sj2))+((x6958*x6961))+(((-1.0)*x6963*x6964)));
evalcond[4]=((((-1.0)*x6959*x6964))+((r01*x6968))+(((-1.0)*cj0*x6965))+((r02*x6957))+((cj0*x6962)));
evalcond[5]=(((sj0*x6962))+((r12*x6957))+(((-1.0)*sj0*x6965))+(((-1.0)*x6960*x6964))+((r11*x6968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6969=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6969;
j0eval[1]=IKsign(x6969);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6970=cj5*cj5;
IkReal x6971=r21*r21;
IkReal x6972=(cj2*sj1);
IkReal x6973=(cj1*sj2);
IkReal x6974=(r21*sj5);
IkReal x6975=((1.0)*cj5*r20);
IkReal x6976=(((x6970*(r20*r20)))+(((-1.0)*x6970*x6971))+(r22*r22)+(((-2.0)*cj5*r20*x6974))+x6971);
j4eval[0]=x6976;
j4eval[1]=IKsign(x6976);
j4eval[2]=((IKabs((((x6972*x6974))+(((-1.0)*x6973*x6975))+(((-1.0)*x6972*x6975))+((x6973*x6974)))))+(IKabs((((r22*x6972))+((r22*x6973))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6977=cj1*cj1;
IkReal x6978=(cj2*sj2);
IkReal x6979=(cj2*sj1);
IkReal x6980=(cj1*sj1);
j0eval[0]=((((-2.0)*cj1*cj2*x6979))+(((-1.08349267049076)*sj2*x6977))+(((-1.08349267049076)*cj1*x6979))+x6980+x6978+(((-2.0)*x6977*x6978)));
j0eval[1]=((((-1.0)*x6979))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6981=IKsin(j0);
IkReal x6982=IKcos(j0);
evalcond[0]=((((0.81725)*x6982))+(((-1.0)*px))+(((-0.10915)*x6981)));
evalcond[1]=((((0.81725)*x6981))+(((-1.0)*py))+(((0.10915)*x6982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6983=((1.0)*cj5);
IkReal x6984=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6983)));
j4eval[0]=x6984;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6983))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6985=((1.0)*cj5);
IkReal x6986=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6985)));
j4eval[0]=x6986;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x6985))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6987=cj5*cj5;
IkReal x6988=((1.0)*sj5);
IkReal x6989=(cj5*r20);
IkReal x6990=(r11*r21);
IkReal x6991=((((-1.0)*x6987*x6990))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6988))+x6990+((r10*r20*x6987))+(((-1.0)*r11*x6988*x6989)));
j4eval[0]=x6991;
j4eval[1]=IKsign(x6991);
j4eval[2]=((IKabs((((cj0*x6989))+(((-1.0)*cj0*r21*x6988)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6992=cj5*cj5;
IkReal x6993=((1.0)*sj5);
IkReal x6994=(cj5*r20);
IkReal x6995=(r11*r21);
CheckValue<IkReal> x6996 = IKatan2WithCheck(IkReal((((cj0*x6994))+(((-1.0)*cj0*r21*x6993)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6996.valid){
continue;
}
CheckValue<IkReal> x6997=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6992*x6995))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6993))+(((-1.0)*r11*x6993*x6994))+x6995+((r10*r20*x6992)))),-1);
if(!x6997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6996.value)+(((1.5707963267949)*(x6997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6998=IKsin(j4);
IkReal x6999=IKcos(j4);
IkReal x7000=((1.0)*sj0);
IkReal x7001=(cj5*r00);
IkReal x7002=(r11*sj5);
IkReal x7003=(cj5*r10);
IkReal x7004=(r21*sj5);
IkReal x7005=(cj5*r20);
IkReal x7006=(r01*sj5);
IkReal x7007=((1.0)*x6999);
IkReal x7008=((1.0)*x6998);
evalcond[0]=((((-1.0)*r22*x7007))+(((-1.0)*x7005*x7008))+((x6998*x7004)));
evalcond[1]=((((-1.0)*r22*x7008))+(((-1.0)*x7004*x7007))+((x6999*x7005)));
evalcond[2]=((((-1.0)*r12*x7007))+cj0+(((-1.0)*x7003*x7008))+((x6998*x7002)));
evalcond[3]=((((-1.0)*r02*x7007))+((x6998*x7006))+(((-1.0)*x7000))+(((-1.0)*x7001*x7008)));
evalcond[4]=((((-1.0)*r02*x7008))+(((-1.0)*x7006*x7007))+(((-1.0)*cj0))+((x6999*x7001)));
evalcond[5]=((((-1.0)*r12*x7008))+(((-1.0)*x7002*x7007))+(((-1.0)*x7000))+((x6999*x7003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7009=((1.0)*cj5);
CheckValue<IkReal> x7010 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7009))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7010.valid){
continue;
}
CheckValue<IkReal> x7011=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7009))+(((-1.0)*r10*sj5)))),-1);
if(!x7011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7010.value)+(((1.5707963267949)*(x7011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7012=IKsin(j4);
IkReal x7013=IKcos(j4);
IkReal x7014=((1.0)*sj0);
IkReal x7015=(cj5*r00);
IkReal x7016=(r11*sj5);
IkReal x7017=(cj5*r10);
IkReal x7018=(r21*sj5);
IkReal x7019=(cj5*r20);
IkReal x7020=(r01*sj5);
IkReal x7021=((1.0)*x7013);
IkReal x7022=((1.0)*x7012);
evalcond[0]=((((-1.0)*r22*x7021))+(((-1.0)*x7019*x7022))+((x7012*x7018)));
evalcond[1]=((((-1.0)*r22*x7022))+((x7013*x7019))+(((-1.0)*x7018*x7021)));
evalcond[2]=((((-1.0)*r12*x7021))+cj0+(((-1.0)*x7017*x7022))+((x7012*x7016)));
evalcond[3]=((((-1.0)*x7014))+((x7012*x7020))+(((-1.0)*x7015*x7022))+(((-1.0)*r02*x7021)));
evalcond[4]=(((x7013*x7015))+(((-1.0)*r02*x7022))+(((-1.0)*x7020*x7021))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7022))+((x7013*x7017))+(((-1.0)*x7014))+(((-1.0)*x7016*x7021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7023=((1.0)*cj5);
CheckValue<IkReal> x7024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7023)))),-1);
if(!x7024.valid){
continue;
}
CheckValue<IkReal> x7025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7024.value)))+(x7025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7026=IKsin(j4);
IkReal x7027=IKcos(j4);
IkReal x7028=((1.0)*sj0);
IkReal x7029=(cj5*r00);
IkReal x7030=(r11*sj5);
IkReal x7031=(cj5*r10);
IkReal x7032=(r21*sj5);
IkReal x7033=(cj5*r20);
IkReal x7034=(r01*sj5);
IkReal x7035=((1.0)*x7027);
IkReal x7036=((1.0)*x7026);
evalcond[0]=((((-1.0)*r22*x7035))+((x7026*x7032))+(((-1.0)*x7033*x7036)));
evalcond[1]=(((x7027*x7033))+(((-1.0)*r22*x7036))+(((-1.0)*x7032*x7035)));
evalcond[2]=((((-1.0)*x7031*x7036))+cj0+((x7026*x7030))+(((-1.0)*r12*x7035)));
evalcond[3]=((((-1.0)*r02*x7035))+((x7026*x7034))+(((-1.0)*x7029*x7036))+(((-1.0)*x7028)));
evalcond[4]=((((-1.0)*x7034*x7035))+(((-1.0)*r02*x7036))+((x7027*x7029))+(((-1.0)*cj0)));
evalcond[5]=(((x7027*x7031))+(((-1.0)*r12*x7036))+(((-1.0)*x7030*x7035))+(((-1.0)*x7028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7037=IKsin(j0);
IkReal x7038=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.03275)*x7038))+(((-0.10915)*x7037)));
evalcond[1]=((((-1.0)*py))+(((0.03275)*x7037))+(((0.10915)*x7038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7039=((1.0)*cj5);
IkReal x7040=((((-1.0)*r01*x7039))+(((-1.0)*r00*sj5)));
j4eval[0]=x7040;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7039)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7041=cj5*cj5;
IkReal x7042=((1.0)*r21);
IkReal x7043=(cj5*sj5);
IkReal x7044=((1.0)*r20);
IkReal x7045=((((-1.0)*r01*x7043*x7044))+(((-1.0)*r01*x7041*x7042))+((r01*r21))+(((-1.0)*r00*x7042*x7043))+((r00*r20*x7041))+((r02*r22)));
j4eval[0]=x7045;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7044)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7046=cj5*cj5;
IkReal x7047=(r21*sj5);
IkReal x7048=(r11*r21);
IkReal x7049=((1.0)*cj5*r20);
IkReal x7050=((((-1.0)*r11*sj5*x7049))+x7048+(((-1.0)*x7046*x7048))+((r12*r22))+((r10*r20*x7046))+(((-1.0)*cj5*r10*x7047)));
j4eval[0]=x7050;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7047))+(((-1.0)*sj0*x7049))))));
j4eval[2]=IKsign(x7050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7051=cj5*cj5;
IkReal x7052=(r21*sj5);
IkReal x7053=(r11*r21);
IkReal x7054=((1.0)*cj5*r20);
CheckValue<IkReal> x7055 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7052))+(((-1.0)*sj0*x7054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7055.valid){
continue;
}
CheckValue<IkReal> x7056=IKPowWithIntegerCheck(IKsign((x7053+((r10*r20*x7051))+((r12*r22))+(((-1.0)*cj5*r10*x7052))+(((-1.0)*r11*sj5*x7054))+(((-1.0)*x7051*x7053)))),-1);
if(!x7056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7055.value)+(((1.5707963267949)*(x7056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7057=IKsin(j4);
IkReal x7058=IKcos(j4);
IkReal x7059=(r11*sj5);
IkReal x7060=(cj5*r00);
IkReal x7061=(cj5*r10);
IkReal x7062=(r21*sj5);
IkReal x7063=(cj5*r20);
IkReal x7064=(r01*sj5);
IkReal x7065=((1.0)*x7058);
IkReal x7066=((1.0)*x7057);
evalcond[0]=((((-1.0)*x7063*x7066))+((x7057*x7062))+(((-1.0)*r22*x7065)));
evalcond[1]=((((-1.0)*x7062*x7065))+((x7058*x7063))+(((-1.0)*r22*x7066)));
evalcond[2]=(cj0+(((-1.0)*r12*x7065))+(((-1.0)*x7061*x7066))+((x7057*x7059)));
evalcond[3]=(cj0+(((-1.0)*x7064*x7065))+(((-1.0)*r02*x7066))+((x7058*x7060)));
evalcond[4]=((((-1.0)*x7059*x7065))+sj0+(((-1.0)*r12*x7066))+((x7058*x7061)));
evalcond[5]=((((-1.0)*sj0))+((x7057*x7064))+(((-1.0)*r02*x7065))+(((-1.0)*x7060*x7066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7067=cj5*cj5;
IkReal x7068=((1.0)*r21);
IkReal x7069=(cj5*sj5);
IkReal x7070=((1.0)*r20);
CheckValue<IkReal> x7071=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7069*x7070))+(((-1.0)*r01*x7067*x7068))+(((-1.0)*r00*x7068*x7069))+((r00*r20*x7067))+((r02*r22)))),-1);
if(!x7071.valid){
continue;
}
CheckValue<IkReal> x7072 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7071.value)))+(x7072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7073=IKsin(j4);
IkReal x7074=IKcos(j4);
IkReal x7075=(r11*sj5);
IkReal x7076=(cj5*r00);
IkReal x7077=(cj5*r10);
IkReal x7078=(r21*sj5);
IkReal x7079=(cj5*r20);
IkReal x7080=(r01*sj5);
IkReal x7081=((1.0)*x7074);
IkReal x7082=((1.0)*x7073);
evalcond[0]=((((-1.0)*x7079*x7082))+((x7073*x7078))+(((-1.0)*r22*x7081)));
evalcond[1]=(((x7074*x7079))+(((-1.0)*r22*x7082))+(((-1.0)*x7078*x7081)));
evalcond[2]=(cj0+((x7073*x7075))+(((-1.0)*r12*x7081))+(((-1.0)*x7077*x7082)));
evalcond[3]=(((x7074*x7076))+cj0+(((-1.0)*x7080*x7081))+(((-1.0)*r02*x7082)));
evalcond[4]=(((x7074*x7077))+sj0+(((-1.0)*x7075*x7081))+(((-1.0)*r12*x7082)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7076*x7082))+(((-1.0)*r02*x7081))+((x7073*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7083=((1.0)*cj5);
CheckValue<IkReal> x7084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7083))+(((-1.0)*r00*sj5)))),-1);
if(!x7084.valid){
continue;
}
CheckValue<IkReal> x7085 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7084.value)))+(x7085.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7086=IKsin(j4);
IkReal x7087=IKcos(j4);
IkReal x7088=(r11*sj5);
IkReal x7089=(cj5*r00);
IkReal x7090=(cj5*r10);
IkReal x7091=(r21*sj5);
IkReal x7092=(cj5*r20);
IkReal x7093=(r01*sj5);
IkReal x7094=((1.0)*x7087);
IkReal x7095=((1.0)*x7086);
evalcond[0]=((((-1.0)*x7092*x7095))+((x7086*x7091))+(((-1.0)*r22*x7094)));
evalcond[1]=((((-1.0)*r22*x7095))+(((-1.0)*x7091*x7094))+((x7087*x7092)));
evalcond[2]=(cj0+(((-1.0)*r12*x7094))+((x7086*x7088))+(((-1.0)*x7090*x7095)));
evalcond[3]=((((-1.0)*x7093*x7094))+cj0+((x7087*x7089))+(((-1.0)*r02*x7095)));
evalcond[4]=(sj0+(((-1.0)*x7088*x7094))+(((-1.0)*r12*x7095))+((x7087*x7090)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7089*x7095))+((x7086*x7093))+(((-1.0)*r02*x7094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7096=((1.0)*sj5);
IkReal x7097=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7096))+(((-1.0)*r11*x7097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7096))+(((-1.0)*r01*x7097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7096))+(((-1.0)*r11*x7097))))+IKsqr(((((-1.0)*r00*x7096))+(((-1.0)*r01*x7097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7096))+(((-1.0)*r11*x7097))), ((((-1.0)*r00*x7096))+(((-1.0)*r01*x7097))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7098=IKsin(j0);
IkReal x7099=IKcos(j0);
IkReal x7100=((1.0)*cj5);
IkReal x7101=((1.0)*sj5);
IkReal x7102=((0.09465)*cj5);
IkReal x7103=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7099))+(((-1.0)*r00*x7101))+(((-1.0)*r01*x7100)));
evalcond[1]=((((-1.0)*x7098))+(((-1.0)*r11*x7100))+(((-1.0)*r10*x7101)));
evalcond[2]=((((-0.10915)*x7098))+(((-1.0)*px))+(((-1.0)*r00*x7103))+(((-1.0)*r01*x7102)));
evalcond[3]=((((-1.0)*r11*x7102))+(((-1.0)*r10*x7103))+(((-1.0)*py))+(((0.10915)*x7099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7104=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7104;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7105=((1.0)*cj5);
IkReal x7106=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7105)));
j4eval[0]=x7106;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7105)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7107=cj5*cj5;
IkReal x7108=r21*r21;
IkReal x7109=(r21*sj5);
IkReal x7110=(cj5*r20);
IkReal x7111=(x7108+(r22*r22)+((x7107*(r20*r20)))+(((-2.0)*x7109*x7110))+(((-1.0)*x7107*x7108)));
j4eval[0]=x7111;
j4eval[1]=IKsign(x7111);
j4eval[2]=((IKabs(r22))+(IKabs((x7109+(((-1.0)*x7110))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7112=cj5*cj5;
IkReal x7113=r21*r21;
IkReal x7114=(r21*sj5);
IkReal x7115=(cj5*r20);
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign((x7113+(r22*r22)+((x7112*(r20*r20)))+(((-1.0)*x7112*x7113))+(((-2.0)*x7114*x7115)))),-1);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal(r22),IkReal((x7114+(((-1.0)*x7115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7116.value)))+(x7117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7118=IKsin(j4);
IkReal x7119=IKcos(j4);
IkReal x7120=(r11*sj5);
IkReal x7121=(r21*sj5);
IkReal x7122=(cj5*r00);
IkReal x7123=(cj5*r20);
IkReal x7124=(r01*sj5);
IkReal x7125=(cj5*r10);
IkReal x7126=((1.0)*x7119);
IkReal x7127=((1.0)*x7118);
evalcond[0]=((((-1.0)*x7123*x7127))+(((-1.0)*r22*x7126))+((x7118*x7121)));
evalcond[1]=(((x7119*x7122))+(((-1.0)*r02*x7127))+(((-1.0)*x7124*x7126)));
evalcond[2]=((((-1.0)*x7120*x7126))+((x7119*x7125))+(((-1.0)*r12*x7127)));
evalcond[3]=(cj0+((x7118*x7120))+(((-1.0)*r12*x7126))+(((-1.0)*x7125*x7127)));
evalcond[4]=((1.0)+(((-1.0)*x7121*x7126))+((x7119*x7123))+(((-1.0)*r22*x7127)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7122*x7127))+((x7118*x7124))+(((-1.0)*r02*x7126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7128=((1.0)*cj5);
CheckValue<IkReal> x7129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7128)))),-1);
if(!x7129.valid){
continue;
}
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7129.value)))+(x7130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7131=IKsin(j4);
IkReal x7132=IKcos(j4);
IkReal x7133=(r11*sj5);
IkReal x7134=(r21*sj5);
IkReal x7135=(cj5*r00);
IkReal x7136=(cj5*r20);
IkReal x7137=(r01*sj5);
IkReal x7138=(cj5*r10);
IkReal x7139=((1.0)*x7132);
IkReal x7140=((1.0)*x7131);
evalcond[0]=((((-1.0)*r22*x7139))+(((-1.0)*x7136*x7140))+((x7131*x7134)));
evalcond[1]=(((x7132*x7135))+(((-1.0)*x7137*x7139))+(((-1.0)*r02*x7140)));
evalcond[2]=(((x7132*x7138))+(((-1.0)*r12*x7140))+(((-1.0)*x7133*x7139)));
evalcond[3]=((((-1.0)*r12*x7139))+cj0+(((-1.0)*x7138*x7140))+((x7131*x7133)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7140))+((x7132*x7136))+(((-1.0)*x7134*x7139)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7135*x7140))+((x7131*x7137))+(((-1.0)*r02*x7139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7141 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7141.valid){
continue;
}
CheckValue<IkReal> x7142=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7141.value)+(((1.5707963267949)*(x7142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7143=IKsin(j4);
IkReal x7144=IKcos(j4);
IkReal x7145=(r11*sj5);
IkReal x7146=(r21*sj5);
IkReal x7147=(cj5*r00);
IkReal x7148=(cj5*r20);
IkReal x7149=(r01*sj5);
IkReal x7150=(cj5*r10);
IkReal x7151=((1.0)*x7144);
IkReal x7152=((1.0)*x7143);
evalcond[0]=((((-1.0)*r22*x7151))+(((-1.0)*x7148*x7152))+((x7143*x7146)));
evalcond[1]=(((x7144*x7147))+(((-1.0)*x7149*x7151))+(((-1.0)*r02*x7152)));
evalcond[2]=((((-1.0)*r12*x7152))+((x7144*x7150))+(((-1.0)*x7145*x7151)));
evalcond[3]=((((-1.0)*r12*x7151))+cj0+(((-1.0)*x7150*x7152))+((x7143*x7145)));
evalcond[4]=((1.0)+(((-1.0)*x7146*x7151))+(((-1.0)*r22*x7152))+((x7144*x7148)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7151))+((x7143*x7149))+(((-1.0)*x7147*x7152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7153=IKcos(j0);
IkReal x7154=IKsin(j0);
evalcond[0]=((((-0.10915)*x7154))+(((-1.0)*px))+(((-0.39225)*x7153)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7154))+(((0.10915)*x7153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7155=((1.0)*cj5);
IkReal x7156=((((-1.0)*r01*x7155))+(((-1.0)*r00*sj5)));
j4eval[0]=x7156;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7155)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7157=cj5*cj5;
IkReal x7158=((1.0)*r21);
IkReal x7159=(cj5*sj5);
IkReal x7160=((1.0)*r20);
IkReal x7161=(((r00*r20*x7157))+(((-1.0)*r00*x7158*x7159))+((r01*r21))+(((-1.0)*r01*x7157*x7158))+(((-1.0)*r01*x7159*x7160))+((r02*r22)));
j4eval[0]=x7161;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7160))))));
j4eval[2]=IKsign(x7161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7162=cj5*cj5;
IkReal x7163=(r21*sj5);
IkReal x7164=(r11*r21);
IkReal x7165=((1.0)*cj5*r20);
IkReal x7166=(x7164+(((-1.0)*r11*sj5*x7165))+(((-1.0)*x7162*x7164))+((r12*r22))+(((-1.0)*cj5*r10*x7163))+((r10*r20*x7162)));
j4eval[0]=x7166;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7165))+((sj0*x7163))))));
j4eval[2]=IKsign(x7166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7167=cj5*cj5;
IkReal x7168=(r21*sj5);
IkReal x7169=(r11*r21);
IkReal x7170=((1.0)*cj5*r20);
CheckValue<IkReal> x7171 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7170))+((sj0*x7168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7171.valid){
continue;
}
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(IKsign((x7169+(((-1.0)*r11*sj5*x7170))+((r12*r22))+(((-1.0)*cj5*r10*x7168))+(((-1.0)*x7167*x7169))+((r10*r20*x7167)))),-1);
if(!x7172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7171.value)+(((1.5707963267949)*(x7172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7173=IKsin(j4);
IkReal x7174=IKcos(j4);
IkReal x7175=(r11*sj5);
IkReal x7176=(cj5*r00);
IkReal x7177=(cj5*r10);
IkReal x7178=(r21*sj5);
IkReal x7179=(cj5*r20);
IkReal x7180=(r01*sj5);
IkReal x7181=((1.0)*x7174);
IkReal x7182=((1.0)*x7173);
evalcond[0]=((((-1.0)*x7179*x7182))+((x7173*x7178))+(((-1.0)*r22*x7181)));
evalcond[1]=((((-1.0)*x7178*x7181))+(((-1.0)*r22*x7182))+((x7174*x7179)));
evalcond[2]=(cj0+(((-1.0)*x7177*x7182))+((x7173*x7175))+(((-1.0)*r12*x7181)));
evalcond[3]=(cj0+(((-1.0)*r02*x7182))+(((-1.0)*x7180*x7181))+((x7174*x7176)));
evalcond[4]=(sj0+(((-1.0)*x7175*x7181))+(((-1.0)*r12*x7182))+((x7174*x7177)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7181))+((x7173*x7180))+(((-1.0)*x7176*x7182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7183=cj5*cj5;
IkReal x7184=((1.0)*r21);
IkReal x7185=(cj5*sj5);
IkReal x7186=((1.0)*r20);
CheckValue<IkReal> x7187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7183*x7184))+((r01*r21))+(((-1.0)*r01*x7185*x7186))+(((-1.0)*r00*x7184*x7185))+((r02*r22))+((r00*r20*x7183)))),-1);
if(!x7187.valid){
continue;
}
CheckValue<IkReal> x7188 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7187.value)))+(x7188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7189=IKsin(j4);
IkReal x7190=IKcos(j4);
IkReal x7191=(r11*sj5);
IkReal x7192=(cj5*r00);
IkReal x7193=(cj5*r10);
IkReal x7194=(r21*sj5);
IkReal x7195=(cj5*r20);
IkReal x7196=(r01*sj5);
IkReal x7197=((1.0)*x7190);
IkReal x7198=((1.0)*x7189);
evalcond[0]=(((x7189*x7194))+(((-1.0)*x7195*x7198))+(((-1.0)*r22*x7197)));
evalcond[1]=(((x7190*x7195))+(((-1.0)*x7194*x7197))+(((-1.0)*r22*x7198)));
evalcond[2]=(cj0+((x7189*x7191))+(((-1.0)*x7193*x7198))+(((-1.0)*r12*x7197)));
evalcond[3]=(((x7190*x7192))+cj0+(((-1.0)*x7196*x7197))+(((-1.0)*r02*x7198)));
evalcond[4]=(((x7190*x7193))+sj0+(((-1.0)*x7191*x7197))+(((-1.0)*r12*x7198)));
evalcond[5]=((((-1.0)*sj0))+((x7189*x7196))+(((-1.0)*r02*x7197))+(((-1.0)*x7192*x7198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7199=((1.0)*cj5);
CheckValue<IkReal> x7200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7199)))),-1);
if(!x7200.valid){
continue;
}
CheckValue<IkReal> x7201 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7200.value)))+(x7201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7202=IKsin(j4);
IkReal x7203=IKcos(j4);
IkReal x7204=(r11*sj5);
IkReal x7205=(cj5*r00);
IkReal x7206=(cj5*r10);
IkReal x7207=(r21*sj5);
IkReal x7208=(cj5*r20);
IkReal x7209=(r01*sj5);
IkReal x7210=((1.0)*x7203);
IkReal x7211=((1.0)*x7202);
evalcond[0]=(((x7202*x7207))+(((-1.0)*x7208*x7211))+(((-1.0)*r22*x7210)));
evalcond[1]=(((x7203*x7208))+(((-1.0)*x7207*x7210))+(((-1.0)*r22*x7211)));
evalcond[2]=(cj0+(((-1.0)*x7206*x7211))+((x7202*x7204))+(((-1.0)*r12*x7210)));
evalcond[3]=(cj0+((x7203*x7205))+(((-1.0)*x7209*x7210))+(((-1.0)*r02*x7211)));
evalcond[4]=(sj0+(((-1.0)*x7204*x7210))+((x7203*x7206))+(((-1.0)*r12*x7211)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7205*x7211))+((x7202*x7209))+(((-1.0)*r02*x7210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7212=IKsin(j0);
IkReal x7213=IKcos(j0);
IkReal x7214=((1.0)*cj5);
IkReal x7215=((1.0)*sj5);
IkReal x7216=((0.09465)*cj5);
IkReal x7217=((0.09465)*sj5);
evalcond[0]=(x7213+(((-1.0)*r01*x7214))+(((-1.0)*r00*x7215)));
evalcond[1]=(x7212+(((-1.0)*r11*x7214))+(((-1.0)*r10*x7215)));
evalcond[2]=((((-1.0)*r01*x7216))+(((-1.0)*r00*x7217))+(((-0.10915)*x7212))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r11*x7216))+(((-1.0)*r10*x7217))+(((-1.0)*py))+(((0.10915)*x7213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7218=((1.0)*sj5);
IkReal x7219=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7218)));
j4eval[0]=x7219;
j4eval[1]=IKsign(x7219);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7218))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7220=((1.0)*cj5);
IkReal x7221=((((-1.0)*r01*x7220))+(((-1.0)*r00*sj5)));
j4eval[0]=x7221;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7220))))));
j4eval[2]=IKsign(x7221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7222=r21*r21;
IkReal x7223=cj5*cj5;
IkReal x7224=(r21*sj5);
IkReal x7225=(cj5*r20);
IkReal x7226=((((2.0)*x7224*x7225))+((x7222*x7223))+(((-1.0)*x7223*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x7222)));
j4eval[0]=x7226;
j4eval[1]=((IKabs((x7224+(((-1.0)*x7225)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7227=r21*r21;
IkReal x7228=cj5*cj5;
IkReal x7229=(r21*sj5);
IkReal x7230=(cj5*r20);
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal(r22),IkReal((x7229+(((-1.0)*x7230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
CheckValue<IkReal> x7232=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7228*(r20*r20)))+(((2.0)*x7229*x7230))+(((-1.0)*(r22*r22)))+((x7227*x7228))+(((-1.0)*x7227)))),-1);
if(!x7232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7231.value)+(((1.5707963267949)*(x7232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7233=IKsin(j4);
IkReal x7234=IKcos(j4);
IkReal x7235=(r11*sj5);
IkReal x7236=(r21*sj5);
IkReal x7237=(cj5*r00);
IkReal x7238=(cj5*r20);
IkReal x7239=(r01*sj5);
IkReal x7240=(cj5*r10);
IkReal x7241=((1.0)*x7234);
IkReal x7242=((1.0)*x7233);
evalcond[0]=(((x7233*x7236))+(((-1.0)*r22*x7241))+(((-1.0)*x7238*x7242)));
evalcond[1]=((((-1.0)*r02*x7242))+(((-1.0)*x7239*x7241))+((x7234*x7237)));
evalcond[2]=((((-1.0)*r12*x7242))+((x7234*x7240))+(((-1.0)*x7235*x7241)));
evalcond[3]=(((x7233*x7235))+(((-1.0)*r12*x7241))+cj0+(((-1.0)*x7240*x7242)));
evalcond[4]=((-1.0)+(((-1.0)*x7236*x7241))+(((-1.0)*r22*x7242))+((x7234*x7238)));
evalcond[5]=((((-1.0)*sj0))+((x7233*x7239))+(((-1.0)*x7237*x7242))+(((-1.0)*r02*x7241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7243=((1.0)*cj5);
CheckValue<IkReal> x7244=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7243)))),-1);
if(!x7244.valid){
continue;
}
CheckValue<IkReal> x7245 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7243)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7244.value)))+(x7245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7246=IKsin(j4);
IkReal x7247=IKcos(j4);
IkReal x7248=(r11*sj5);
IkReal x7249=(r21*sj5);
IkReal x7250=(cj5*r00);
IkReal x7251=(cj5*r20);
IkReal x7252=(r01*sj5);
IkReal x7253=(cj5*r10);
IkReal x7254=((1.0)*x7247);
IkReal x7255=((1.0)*x7246);
evalcond[0]=((((-1.0)*x7251*x7255))+(((-1.0)*r22*x7254))+((x7246*x7249)));
evalcond[1]=((((-1.0)*x7252*x7254))+(((-1.0)*r02*x7255))+((x7247*x7250)));
evalcond[2]=((((-1.0)*r12*x7255))+(((-1.0)*x7248*x7254))+((x7247*x7253)));
evalcond[3]=(cj0+(((-1.0)*r12*x7254))+((x7246*x7248))+(((-1.0)*x7253*x7255)));
evalcond[4]=((-1.0)+(((-1.0)*x7249*x7254))+(((-1.0)*r22*x7255))+((x7247*x7251)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7254))+((x7246*x7252))+(((-1.0)*x7250*x7255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7256=((1.0)*sj5);
CheckValue<IkReal> x7257 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7256))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7257.valid){
continue;
}
CheckValue<IkReal> x7258=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7256)))),-1);
if(!x7258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7257.value)+(((1.5707963267949)*(x7258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7259=IKsin(j4);
IkReal x7260=IKcos(j4);
IkReal x7261=(r11*sj5);
IkReal x7262=(r21*sj5);
IkReal x7263=(cj5*r00);
IkReal x7264=(cj5*r20);
IkReal x7265=(r01*sj5);
IkReal x7266=(cj5*r10);
IkReal x7267=((1.0)*x7260);
IkReal x7268=((1.0)*x7259);
evalcond[0]=((((-1.0)*x7264*x7268))+(((-1.0)*r22*x7267))+((x7259*x7262)));
evalcond[1]=(((x7260*x7263))+(((-1.0)*r02*x7268))+(((-1.0)*x7265*x7267)));
evalcond[2]=((((-1.0)*x7261*x7267))+((x7260*x7266))+(((-1.0)*r12*x7268)));
evalcond[3]=(cj0+(((-1.0)*x7266*x7268))+((x7259*x7261))+(((-1.0)*r12*x7267)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7268))+(((-1.0)*x7262*x7267))+((x7260*x7264)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7263*x7268))+((x7259*x7265))+(((-1.0)*r02*x7267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7269=IKsin(j0);
IkReal x7270=IKcos(j0);
evalcond[0]=((((0.39225)*x7270))+(((-1.0)*px))+(((-0.10915)*x7269)));
evalcond[1]=((((0.39225)*x7269))+(((0.10915)*x7270))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7271=((1.0)*cj5);
IkReal x7272=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7271)));
j4eval[0]=x7272;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7271)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7272);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7273=((1.0)*cj5);
IkReal x7274=((((-1.0)*r11*x7273))+(((-1.0)*r10*sj5)));
j4eval[0]=x7274;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7273))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7275=cj5*cj5;
IkReal x7276=((1.0)*sj5);
IkReal x7277=(cj5*r20);
IkReal x7278=(r11*r21);
IkReal x7279=((((-1.0)*x7275*x7278))+x7278+((r12*r22))+((r10*r20*x7275))+(((-1.0)*r11*x7276*x7277))+(((-1.0)*cj5*r10*r21*x7276)));
j4eval[0]=x7279;
j4eval[1]=IKsign(x7279);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7276))+((cj0*x7277))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7280=cj5*cj5;
IkReal x7281=((1.0)*sj5);
IkReal x7282=(cj5*r20);
IkReal x7283=(r11*r21);
CheckValue<IkReal> x7284 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7281))+((cj0*x7282)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7284.valid){
continue;
}
CheckValue<IkReal> x7285=IKPowWithIntegerCheck(IKsign((x7283+(((-1.0)*cj5*r10*r21*x7281))+((r10*r20*x7280))+((r12*r22))+(((-1.0)*r11*x7281*x7282))+(((-1.0)*x7280*x7283)))),-1);
if(!x7285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7284.value)+(((1.5707963267949)*(x7285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7286=IKsin(j4);
IkReal x7287=IKcos(j4);
IkReal x7288=((1.0)*sj0);
IkReal x7289=(cj5*r00);
IkReal x7290=(r11*sj5);
IkReal x7291=(cj5*r10);
IkReal x7292=(r21*sj5);
IkReal x7293=(cj5*r20);
IkReal x7294=(r01*sj5);
IkReal x7295=((1.0)*x7287);
IkReal x7296=((1.0)*x7286);
evalcond[0]=((((-1.0)*r22*x7295))+((x7286*x7292))+(((-1.0)*x7293*x7296)));
evalcond[1]=((((-1.0)*r22*x7296))+(((-1.0)*x7292*x7295))+((x7287*x7293)));
evalcond[2]=((((-1.0)*x7291*x7296))+cj0+((x7286*x7290))+(((-1.0)*r12*x7295)));
evalcond[3]=((((-1.0)*x7288))+(((-1.0)*x7289*x7296))+((x7286*x7294))+(((-1.0)*r02*x7295)));
evalcond[4]=(((x7287*x7289))+(((-1.0)*x7294*x7295))+(((-1.0)*r02*x7296))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7290*x7295))+(((-1.0)*x7288))+(((-1.0)*r12*x7296))+((x7287*x7291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7297=((1.0)*cj5);
CheckValue<IkReal> x7298 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7297))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7298.valid){
continue;
}
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7297)))),-1);
if(!x7299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7298.value)+(((1.5707963267949)*(x7299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7300=IKsin(j4);
IkReal x7301=IKcos(j4);
IkReal x7302=((1.0)*sj0);
IkReal x7303=(cj5*r00);
IkReal x7304=(r11*sj5);
IkReal x7305=(cj5*r10);
IkReal x7306=(r21*sj5);
IkReal x7307=(cj5*r20);
IkReal x7308=(r01*sj5);
IkReal x7309=((1.0)*x7301);
IkReal x7310=((1.0)*x7300);
evalcond[0]=(((x7300*x7306))+(((-1.0)*r22*x7309))+(((-1.0)*x7307*x7310)));
evalcond[1]=(((x7301*x7307))+(((-1.0)*r22*x7310))+(((-1.0)*x7306*x7309)));
evalcond[2]=(cj0+((x7300*x7304))+(((-1.0)*r12*x7309))+(((-1.0)*x7305*x7310)));
evalcond[3]=((((-1.0)*r02*x7309))+((x7300*x7308))+(((-1.0)*x7303*x7310))+(((-1.0)*x7302)));
evalcond[4]=(((x7301*x7303))+(((-1.0)*x7308*x7309))+(((-1.0)*cj0))+(((-1.0)*r02*x7310)));
evalcond[5]=(((x7301*x7305))+(((-1.0)*r12*x7310))+(((-1.0)*x7302))+(((-1.0)*x7304*x7309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7311=((1.0)*cj5);
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
CheckValue<IkReal> x7313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7311)))),-1);
if(!x7313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7312.value)+(((1.5707963267949)*(x7313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7314=IKsin(j4);
IkReal x7315=IKcos(j4);
IkReal x7316=((1.0)*sj0);
IkReal x7317=(cj5*r00);
IkReal x7318=(r11*sj5);
IkReal x7319=(cj5*r10);
IkReal x7320=(r21*sj5);
IkReal x7321=(cj5*r20);
IkReal x7322=(r01*sj5);
IkReal x7323=((1.0)*x7315);
IkReal x7324=((1.0)*x7314);
evalcond[0]=((((-1.0)*r22*x7323))+(((-1.0)*x7321*x7324))+((x7314*x7320)));
evalcond[1]=((((-1.0)*r22*x7324))+((x7315*x7321))+(((-1.0)*x7320*x7323)));
evalcond[2]=(cj0+(((-1.0)*x7319*x7324))+((x7314*x7318))+(((-1.0)*r12*x7323)));
evalcond[3]=((((-1.0)*x7317*x7324))+(((-1.0)*x7316))+((x7314*x7322))+(((-1.0)*r02*x7323)));
evalcond[4]=((((-1.0)*x7322*x7323))+((x7315*x7317))+(((-1.0)*cj0))+(((-1.0)*r02*x7324)));
evalcond[5]=((((-1.0)*x7318*x7323))+((x7315*x7319))+(((-1.0)*x7316))+(((-1.0)*r12*x7324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7325=IKcos(j0);
IkReal x7326=IKsin(j0);
evalcond[0]=((((-0.81725)*x7325))+(((-0.10915)*x7326))+(((-1.0)*px)));
evalcond[1]=((((-0.81725)*x7326))+(((0.10915)*x7325))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7327=((1.0)*cj5);
IkReal x7328=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7327)));
j4eval[0]=x7328;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7327)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7329=cj5*cj5;
IkReal x7330=((1.0)*r21);
IkReal x7331=(cj5*sj5);
IkReal x7332=((1.0)*r20);
IkReal x7333=(((r00*r20*x7329))+(((-1.0)*r00*x7330*x7331))+(((-1.0)*r01*x7331*x7332))+(((-1.0)*r01*x7329*x7330))+((r01*r21))+((r02*r22)));
j4eval[0]=x7333;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x7332))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7334=cj5*cj5;
IkReal x7335=(r21*sj5);
IkReal x7336=(r11*r21);
IkReal x7337=((1.0)*cj5*r20);
IkReal x7338=(x7336+((r12*r22))+(((-1.0)*cj5*r10*x7335))+((r10*r20*x7334))+(((-1.0)*r11*sj5*x7337))+(((-1.0)*x7334*x7336)));
j4eval[0]=x7338;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7337))+((sj0*x7335))))));
j4eval[2]=IKsign(x7338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7339=cj5*cj5;
IkReal x7340=(r21*sj5);
IkReal x7341=(r11*r21);
IkReal x7342=((1.0)*cj5*r20);
CheckValue<IkReal> x7343 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7342))+((sj0*x7340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7343.valid){
continue;
}
CheckValue<IkReal> x7344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7342))+x7341+((r12*r22))+((r10*r20*x7339))+(((-1.0)*x7339*x7341))+(((-1.0)*cj5*r10*x7340)))),-1);
if(!x7344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7343.value)+(((1.5707963267949)*(x7344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7345=IKsin(j4);
IkReal x7346=IKcos(j4);
IkReal x7347=(r11*sj5);
IkReal x7348=(cj5*r00);
IkReal x7349=(cj5*r10);
IkReal x7350=(r21*sj5);
IkReal x7351=(cj5*r20);
IkReal x7352=(r01*sj5);
IkReal x7353=((1.0)*x7346);
IkReal x7354=((1.0)*x7345);
evalcond[0]=((((-1.0)*r22*x7353))+(((-1.0)*x7351*x7354))+((x7345*x7350)));
evalcond[1]=((((-1.0)*r22*x7354))+((x7346*x7351))+(((-1.0)*x7350*x7353)));
evalcond[2]=(cj0+(((-1.0)*r12*x7353))+((x7345*x7347))+(((-1.0)*x7349*x7354)));
evalcond[3]=(cj0+((x7346*x7348))+(((-1.0)*r02*x7354))+(((-1.0)*x7352*x7353)));
evalcond[4]=(sj0+(((-1.0)*r12*x7354))+((x7346*x7349))+(((-1.0)*x7347*x7353)));
evalcond[5]=((((-1.0)*sj0))+((x7345*x7352))+(((-1.0)*r02*x7353))+(((-1.0)*x7348*x7354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7355=cj5*cj5;
IkReal x7356=((1.0)*r21);
IkReal x7357=(cj5*sj5);
IkReal x7358=((1.0)*r20);
CheckValue<IkReal> x7359 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7359.valid){
continue;
}
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7355*x7356))+(((-1.0)*r00*x7356*x7357))+((r01*r21))+(((-1.0)*r01*x7357*x7358))+((r00*r20*x7355))+((r02*r22)))),-1);
if(!x7360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7359.value)+(((1.5707963267949)*(x7360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7361=IKsin(j4);
IkReal x7362=IKcos(j4);
IkReal x7363=(r11*sj5);
IkReal x7364=(cj5*r00);
IkReal x7365=(cj5*r10);
IkReal x7366=(r21*sj5);
IkReal x7367=(cj5*r20);
IkReal x7368=(r01*sj5);
IkReal x7369=((1.0)*x7362);
IkReal x7370=((1.0)*x7361);
evalcond[0]=((((-1.0)*r22*x7369))+(((-1.0)*x7367*x7370))+((x7361*x7366)));
evalcond[1]=((((-1.0)*r22*x7370))+(((-1.0)*x7366*x7369))+((x7362*x7367)));
evalcond[2]=(cj0+(((-1.0)*r12*x7369))+((x7361*x7363))+(((-1.0)*x7365*x7370)));
evalcond[3]=((((-1.0)*x7368*x7369))+cj0+(((-1.0)*r02*x7370))+((x7362*x7364)));
evalcond[4]=(sj0+(((-1.0)*r12*x7370))+(((-1.0)*x7363*x7369))+((x7362*x7365)));
evalcond[5]=((((-1.0)*sj0))+((x7361*x7368))+(((-1.0)*r02*x7369))+(((-1.0)*x7364*x7370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7371=((1.0)*cj5);
CheckValue<IkReal> x7372 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7372.valid){
continue;
}
CheckValue<IkReal> x7373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7371))+(((-1.0)*r00*sj5)))),-1);
if(!x7373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7372.value)+(((1.5707963267949)*(x7373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7374=IKsin(j4);
IkReal x7375=IKcos(j4);
IkReal x7376=(r11*sj5);
IkReal x7377=(cj5*r00);
IkReal x7378=(cj5*r10);
IkReal x7379=(r21*sj5);
IkReal x7380=(cj5*r20);
IkReal x7381=(r01*sj5);
IkReal x7382=((1.0)*x7375);
IkReal x7383=((1.0)*x7374);
evalcond[0]=((((-1.0)*r22*x7382))+(((-1.0)*x7380*x7383))+((x7374*x7379)));
evalcond[1]=((((-1.0)*r22*x7383))+(((-1.0)*x7379*x7382))+((x7375*x7380)));
evalcond[2]=((((-1.0)*x7378*x7383))+cj0+(((-1.0)*r12*x7382))+((x7374*x7376)));
evalcond[3]=((((-1.0)*r02*x7383))+cj0+(((-1.0)*x7381*x7382))+((x7375*x7377)));
evalcond[4]=(sj0+(((-1.0)*x7376*x7382))+((x7375*x7378))+(((-1.0)*r12*x7383)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7382))+((x7374*x7381))+(((-1.0)*x7377*x7383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7384=IKcos(j0);
IkReal x7385=IKsin(j0);
evalcond[0]=((((-0.10915)*x7385))+(((-0.03275)*x7384))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7384))+(((-0.03275)*x7385))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7386=((1.0)*cj5);
IkReal x7387=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7386)));
j4eval[0]=x7387;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7386))))));
j4eval[2]=IKsign(x7387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7388=((1.0)*cj5);
IkReal x7389=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7388)));
j4eval[0]=x7389;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7388))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7390=cj5*cj5;
IkReal x7391=((1.0)*sj5);
IkReal x7392=(cj5*r20);
IkReal x7393=(r11*r21);
IkReal x7394=(x7393+((r10*r20*x7390))+(((-1.0)*r11*x7391*x7392))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7391))+(((-1.0)*x7390*x7393)));
j4eval[0]=x7394;
j4eval[1]=IKsign(x7394);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7391))+((cj0*x7392)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7395=cj5*cj5;
IkReal x7396=((1.0)*sj5);
IkReal x7397=(cj5*r20);
IkReal x7398=(r11*r21);
CheckValue<IkReal> x7399=IKPowWithIntegerCheck(IKsign((x7398+((r10*r20*x7395))+(((-1.0)*x7395*x7398))+((r12*r22))+(((-1.0)*r11*x7396*x7397))+(((-1.0)*cj5*r10*r21*x7396)))),-1);
if(!x7399.valid){
continue;
}
CheckValue<IkReal> x7400 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7396))+((cj0*x7397)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7399.value)))+(x7400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7401=IKsin(j4);
IkReal x7402=IKcos(j4);
IkReal x7403=((1.0)*sj0);
IkReal x7404=(cj5*r00);
IkReal x7405=(r11*sj5);
IkReal x7406=(cj5*r10);
IkReal x7407=(r21*sj5);
IkReal x7408=(cj5*r20);
IkReal x7409=(r01*sj5);
IkReal x7410=((1.0)*x7402);
IkReal x7411=((1.0)*x7401);
evalcond[0]=(((x7401*x7407))+(((-1.0)*x7408*x7411))+(((-1.0)*r22*x7410)));
evalcond[1]=(((x7402*x7408))+(((-1.0)*x7407*x7410))+(((-1.0)*r22*x7411)));
evalcond[2]=((((-1.0)*r12*x7410))+cj0+((x7401*x7405))+(((-1.0)*x7406*x7411)));
evalcond[3]=(((x7401*x7409))+(((-1.0)*x7403))+(((-1.0)*x7404*x7411))+(((-1.0)*r02*x7410)));
evalcond[4]=(((x7402*x7404))+(((-1.0)*x7409*x7410))+(((-1.0)*cj0))+(((-1.0)*r02*x7411)));
evalcond[5]=((((-1.0)*r12*x7411))+((x7402*x7406))+(((-1.0)*x7403))+(((-1.0)*x7405*x7410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7412=((1.0)*cj5);
CheckValue<IkReal> x7413 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7413.valid){
continue;
}
CheckValue<IkReal> x7414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7412)))),-1);
if(!x7414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7413.value)+(((1.5707963267949)*(x7414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7415=IKsin(j4);
IkReal x7416=IKcos(j4);
IkReal x7417=((1.0)*sj0);
IkReal x7418=(cj5*r00);
IkReal x7419=(r11*sj5);
IkReal x7420=(cj5*r10);
IkReal x7421=(r21*sj5);
IkReal x7422=(cj5*r20);
IkReal x7423=(r01*sj5);
IkReal x7424=((1.0)*x7416);
IkReal x7425=((1.0)*x7415);
evalcond[0]=((((-1.0)*x7422*x7425))+(((-1.0)*r22*x7424))+((x7415*x7421)));
evalcond[1]=((((-1.0)*x7421*x7424))+(((-1.0)*r22*x7425))+((x7416*x7422)));
evalcond[2]=(((x7415*x7419))+cj0+(((-1.0)*r12*x7424))+(((-1.0)*x7420*x7425)));
evalcond[3]=((((-1.0)*r02*x7424))+(((-1.0)*x7417))+(((-1.0)*x7418*x7425))+((x7415*x7423)));
evalcond[4]=((((-1.0)*r02*x7425))+((x7416*x7418))+(((-1.0)*x7423*x7424))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7425))+(((-1.0)*x7417))+(((-1.0)*x7419*x7424))+((x7416*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7426=((1.0)*cj5);
CheckValue<IkReal> x7427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7427.valid){
continue;
}
CheckValue<IkReal> x7428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7426)))),-1);
if(!x7428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7427.value)+(((1.5707963267949)*(x7428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7429=IKsin(j4);
IkReal x7430=IKcos(j4);
IkReal x7431=((1.0)*sj0);
IkReal x7432=(cj5*r00);
IkReal x7433=(r11*sj5);
IkReal x7434=(cj5*r10);
IkReal x7435=(r21*sj5);
IkReal x7436=(cj5*r20);
IkReal x7437=(r01*sj5);
IkReal x7438=((1.0)*x7430);
IkReal x7439=((1.0)*x7429);
evalcond[0]=(((x7429*x7435))+(((-1.0)*r22*x7438))+(((-1.0)*x7436*x7439)));
evalcond[1]=((((-1.0)*r22*x7439))+((x7430*x7436))+(((-1.0)*x7435*x7438)));
evalcond[2]=(((x7429*x7433))+cj0+(((-1.0)*r12*x7438))+(((-1.0)*x7434*x7439)));
evalcond[3]=(((x7429*x7437))+(((-1.0)*r02*x7438))+(((-1.0)*x7431))+(((-1.0)*x7432*x7439)));
evalcond[4]=((((-1.0)*r02*x7439))+(((-1.0)*x7437*x7438))+((x7430*x7432))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7439))+(((-1.0)*x7431))+((x7430*x7434))+(((-1.0)*x7433*x7438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7440=IKsin(j0);
IkReal x7441=IKcos(j0);
IkReal x7442=((1.0)*cj5);
IkReal x7443=((1.0)*sj5);
IkReal x7444=((0.09465)*cj5);
IkReal x7445=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r01*x7442))+(((-1.0)*r00*x7443))+x7441);
evalcond[1]=((((-1.0)*r10*x7443))+x7440+(((-1.0)*r11*x7442)));
evalcond[2]=((((-1.0)*r01*x7444))+(((-1.0)*r00*x7445))+(((-1.0)*px))+(((-0.10915)*x7440)));
evalcond[3]=((((-1.0)*r10*x7445))+(((0.10915)*x7441))+(((-1.0)*py))+(((-1.0)*r11*x7444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7446=((1.0)*sj5);
IkReal x7447=((((-1.0)*r10*x7446))+(((-1.0)*cj5*r11)));
j4eval[0]=x7447;
j4eval[1]=IKsign(x7447);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7446))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7448=((1.0)*cj5);
IkReal x7449=((((-1.0)*r01*x7448))+(((-1.0)*r00*sj5)));
j4eval[0]=x7449;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7448)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7450=r21*r21;
IkReal x7451=cj5*cj5;
IkReal x7452=(r21*sj5);
IkReal x7453=(cj5*r20);
IkReal x7454=((((2.0)*x7452*x7453))+(((-1.0)*x7450))+((x7450*x7451))+(((-1.0)*x7451*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x7454;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x7453))+x7452))));
j4eval[2]=IKsign(x7454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7455=r21*r21;
IkReal x7456=cj5*cj5;
IkReal x7457=(r21*sj5);
IkReal x7458=(cj5*r20);
CheckValue<IkReal> x7459 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7458))+x7457)),IKFAST_ATAN2_MAGTHRESH);
if(!x7459.valid){
continue;
}
CheckValue<IkReal> x7460=IKPowWithIntegerCheck(IKsign((((x7455*x7456))+(((-1.0)*x7456*(r20*r20)))+(((-1.0)*x7455))+(((2.0)*x7457*x7458))+(((-1.0)*(r22*r22))))),-1);
if(!x7460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7459.value)+(((1.5707963267949)*(x7460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7461=IKsin(j4);
IkReal x7462=IKcos(j4);
IkReal x7463=(r11*sj5);
IkReal x7464=(r21*sj5);
IkReal x7465=(cj5*r00);
IkReal x7466=(cj5*r20);
IkReal x7467=(r01*sj5);
IkReal x7468=(cj5*r10);
IkReal x7469=((1.0)*x7462);
IkReal x7470=((1.0)*x7461);
evalcond[0]=((((-1.0)*x7466*x7470))+(((-1.0)*r22*x7469))+((x7461*x7464)));
evalcond[1]=((((-1.0)*r02*x7470))+(((-1.0)*x7467*x7469))+((x7462*x7465)));
evalcond[2]=(((x7462*x7468))+(((-1.0)*x7463*x7469))+(((-1.0)*r12*x7470)));
evalcond[3]=(cj0+(((-1.0)*r12*x7469))+((x7461*x7463))+(((-1.0)*x7468*x7470)));
evalcond[4]=((-1.0)+(((-1.0)*x7464*x7469))+(((-1.0)*r22*x7470))+((x7462*x7466)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7469))+((x7461*x7467))+(((-1.0)*x7465*x7470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7471=((1.0)*cj5);
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
CheckValue<IkReal> x7473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7471))+(((-1.0)*r00*sj5)))),-1);
if(!x7473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7472.value)+(((1.5707963267949)*(x7473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7474=IKsin(j4);
IkReal x7475=IKcos(j4);
IkReal x7476=(r11*sj5);
IkReal x7477=(r21*sj5);
IkReal x7478=(cj5*r00);
IkReal x7479=(cj5*r20);
IkReal x7480=(r01*sj5);
IkReal x7481=(cj5*r10);
IkReal x7482=((1.0)*x7475);
IkReal x7483=((1.0)*x7474);
evalcond[0]=(((x7474*x7477))+(((-1.0)*x7479*x7483))+(((-1.0)*r22*x7482)));
evalcond[1]=((((-1.0)*x7480*x7482))+(((-1.0)*r02*x7483))+((x7475*x7478)));
evalcond[2]=((((-1.0)*x7476*x7482))+((x7475*x7481))+(((-1.0)*r12*x7483)));
evalcond[3]=(((x7474*x7476))+cj0+(((-1.0)*x7481*x7483))+(((-1.0)*r12*x7482)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7483))+((x7475*x7479))+(((-1.0)*x7477*x7482)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7478*x7483))+((x7474*x7480))+(((-1.0)*r02*x7482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7484=((1.0)*sj5);
CheckValue<IkReal> x7485=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7484)))),-1);
if(!x7485.valid){
continue;
}
CheckValue<IkReal> x7486 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7484))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7485.value)))+(x7486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7487=IKsin(j4);
IkReal x7488=IKcos(j4);
IkReal x7489=(r11*sj5);
IkReal x7490=(r21*sj5);
IkReal x7491=(cj5*r00);
IkReal x7492=(cj5*r20);
IkReal x7493=(r01*sj5);
IkReal x7494=(cj5*r10);
IkReal x7495=((1.0)*x7488);
IkReal x7496=((1.0)*x7487);
evalcond[0]=(((x7487*x7490))+(((-1.0)*r22*x7495))+(((-1.0)*x7492*x7496)));
evalcond[1]=(((x7488*x7491))+(((-1.0)*x7493*x7495))+(((-1.0)*r02*x7496)));
evalcond[2]=((((-1.0)*x7489*x7495))+((x7488*x7494))+(((-1.0)*r12*x7496)));
evalcond[3]=(((x7487*x7489))+cj0+(((-1.0)*x7494*x7496))+(((-1.0)*r12*x7495)));
evalcond[4]=((-1.0)+((x7488*x7492))+(((-1.0)*r22*x7496))+(((-1.0)*x7490*x7495)));
evalcond[5]=(((x7487*x7493))+(((-1.0)*sj0))+(((-1.0)*x7491*x7496))+(((-1.0)*r02*x7495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7497=IKsin(j0);
IkReal x7498=IKcos(j0);
evalcond[0]=((((0.39225)*x7498))+(((-1.0)*px))+(((-0.10915)*x7497)));
evalcond[1]=((((0.10915)*x7498))+(((0.39225)*x7497))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7499=((1.0)*cj5);
IkReal x7500=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7499)));
j4eval[0]=x7500;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7499)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7501=((1.0)*cj5);
IkReal x7502=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7501)));
j4eval[0]=x7502;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7501))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7503=cj5*cj5;
IkReal x7504=((1.0)*sj5);
IkReal x7505=(cj5*r20);
IkReal x7506=(r11*r21);
IkReal x7507=(((r12*r22))+(((-1.0)*r11*x7504*x7505))+(((-1.0)*cj5*r10*r21*x7504))+x7506+((r10*r20*x7503))+(((-1.0)*x7503*x7506)));
j4eval[0]=x7507;
j4eval[1]=IKsign(x7507);
j4eval[2]=((IKabs((((cj0*x7505))+(((-1.0)*cj0*r21*x7504)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7508=cj5*cj5;
IkReal x7509=((1.0)*sj5);
IkReal x7510=(cj5*r20);
IkReal x7511=(r11*r21);
CheckValue<IkReal> x7512 = IKatan2WithCheck(IkReal((((cj0*x7510))+(((-1.0)*cj0*r21*x7509)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7512.valid){
continue;
}
CheckValue<IkReal> x7513=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*x7509*x7510))+(((-1.0)*cj5*r10*r21*x7509))+x7511+(((-1.0)*x7508*x7511))+((r10*r20*x7508)))),-1);
if(!x7513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7512.value)+(((1.5707963267949)*(x7513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7514=IKsin(j4);
IkReal x7515=IKcos(j4);
IkReal x7516=((1.0)*sj0);
IkReal x7517=(cj5*r00);
IkReal x7518=(r11*sj5);
IkReal x7519=(cj5*r10);
IkReal x7520=(r21*sj5);
IkReal x7521=(cj5*r20);
IkReal x7522=(r01*sj5);
IkReal x7523=((1.0)*x7515);
IkReal x7524=((1.0)*x7514);
evalcond[0]=((((-1.0)*x7521*x7524))+((x7514*x7520))+(((-1.0)*r22*x7523)));
evalcond[1]=((((-1.0)*x7520*x7523))+(((-1.0)*r22*x7524))+((x7515*x7521)));
evalcond[2]=(cj0+(((-1.0)*x7519*x7524))+((x7514*x7518))+(((-1.0)*r12*x7523)));
evalcond[3]=((((-1.0)*r02*x7523))+(((-1.0)*x7517*x7524))+(((-1.0)*x7516))+((x7514*x7522)));
evalcond[4]=(((x7515*x7517))+(((-1.0)*x7522*x7523))+(((-1.0)*r02*x7524))+(((-1.0)*cj0)));
evalcond[5]=(((x7515*x7519))+(((-1.0)*x7518*x7523))+(((-1.0)*x7516))+(((-1.0)*r12*x7524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7525=((1.0)*cj5);
CheckValue<IkReal> x7526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7525)))),-1);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7525))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7526.value)))+(x7527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKsin(j4);
IkReal x7529=IKcos(j4);
IkReal x7530=((1.0)*sj0);
IkReal x7531=(cj5*r00);
IkReal x7532=(r11*sj5);
IkReal x7533=(cj5*r10);
IkReal x7534=(r21*sj5);
IkReal x7535=(cj5*r20);
IkReal x7536=(r01*sj5);
IkReal x7537=((1.0)*x7529);
IkReal x7538=((1.0)*x7528);
evalcond[0]=(((x7528*x7534))+(((-1.0)*r22*x7537))+(((-1.0)*x7535*x7538)));
evalcond[1]=((((-1.0)*r22*x7538))+(((-1.0)*x7534*x7537))+((x7529*x7535)));
evalcond[2]=(cj0+(((-1.0)*r12*x7537))+((x7528*x7532))+(((-1.0)*x7533*x7538)));
evalcond[3]=(((x7528*x7536))+(((-1.0)*x7530))+(((-1.0)*x7531*x7538))+(((-1.0)*r02*x7537)));
evalcond[4]=((((-1.0)*x7536*x7537))+((x7529*x7531))+(((-1.0)*r02*x7538))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7532*x7537))+(((-1.0)*r12*x7538))+(((-1.0)*x7530))+((x7529*x7533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7539=((1.0)*cj5);
CheckValue<IkReal> x7540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7539)))),-1);
if(!x7540.valid){
continue;
}
CheckValue<IkReal> x7541 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7540.value)))+(x7541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7542=IKsin(j4);
IkReal x7543=IKcos(j4);
IkReal x7544=((1.0)*sj0);
IkReal x7545=(cj5*r00);
IkReal x7546=(r11*sj5);
IkReal x7547=(cj5*r10);
IkReal x7548=(r21*sj5);
IkReal x7549=(cj5*r20);
IkReal x7550=(r01*sj5);
IkReal x7551=((1.0)*x7543);
IkReal x7552=((1.0)*x7542);
evalcond[0]=((((-1.0)*r22*x7551))+((x7542*x7548))+(((-1.0)*x7549*x7552)));
evalcond[1]=((((-1.0)*r22*x7552))+((x7543*x7549))+(((-1.0)*x7548*x7551)));
evalcond[2]=(cj0+((x7542*x7546))+(((-1.0)*r12*x7551))+(((-1.0)*x7547*x7552)));
evalcond[3]=(((x7542*x7550))+(((-1.0)*x7544))+(((-1.0)*x7545*x7552))+(((-1.0)*r02*x7551)));
evalcond[4]=((((-1.0)*x7550*x7551))+((x7543*x7545))+(((-1.0)*r02*x7552))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7544))+((x7543*x7547))+(((-1.0)*r12*x7552))+(((-1.0)*x7546*x7551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7553=((1.0)*sj5);
IkReal x7554=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7553))+(((-1.0)*r11*x7554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7554))+(((-1.0)*r00*x7553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7553))+(((-1.0)*r11*x7554))))+IKsqr(((((-1.0)*r01*x7554))+(((-1.0)*r00*x7553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7553))+(((-1.0)*r11*x7554))), ((((-1.0)*r01*x7554))+(((-1.0)*r00*x7553))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7555=IKsin(j0);
IkReal x7556=IKcos(j0);
IkReal x7557=((1.0)*cj5);
IkReal x7558=((1.0)*sj5);
IkReal x7559=((0.09465)*cj5);
IkReal x7560=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7556))+(((-1.0)*r01*x7557))+(((-1.0)*r00*x7558)));
evalcond[1]=((((-1.0)*r10*x7558))+(((-1.0)*x7555))+(((-1.0)*r11*x7557)));
evalcond[2]=((((-1.0)*r01*x7559))+(((-1.0)*px))+(((-1.0)*r00*x7560))+(((-0.10915)*x7555)));
evalcond[3]=((((-1.0)*r10*x7560))+(((-1.0)*py))+(((-1.0)*r11*x7559))+(((0.10915)*x7556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7561=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7561;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7562=((1.0)*cj5);
IkReal x7563=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7562)));
j4eval[0]=x7563;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7562))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7564=cj5*cj5;
IkReal x7565=r21*r21;
IkReal x7566=(r21*sj5);
IkReal x7567=(cj5*r20);
IkReal x7568=(((x7564*(r20*r20)))+(r22*r22)+(((-1.0)*x7564*x7565))+x7565+(((-2.0)*x7566*x7567)));
j4eval[0]=x7568;
j4eval[1]=IKsign(x7568);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7567))+x7566))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7569=cj5*cj5;
IkReal x7570=r21*r21;
IkReal x7571=(r21*sj5);
IkReal x7572=(cj5*r20);
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign((((x7569*(r20*r20)))+(((-1.0)*x7569*x7570))+(((-2.0)*x7571*x7572))+(r22*r22)+x7570)),-1);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574 = IKatan2WithCheck(IkReal(r22),IkReal((x7571+(((-1.0)*x7572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7573.value)))+(x7574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7575=IKsin(j4);
IkReal x7576=IKcos(j4);
IkReal x7577=(r11*sj5);
IkReal x7578=(r21*sj5);
IkReal x7579=(cj5*r00);
IkReal x7580=(cj5*r20);
IkReal x7581=(r01*sj5);
IkReal x7582=(cj5*r10);
IkReal x7583=((1.0)*x7576);
IkReal x7584=((1.0)*x7575);
evalcond[0]=((((-1.0)*r22*x7583))+(((-1.0)*x7580*x7584))+((x7575*x7578)));
evalcond[1]=((((-1.0)*x7581*x7583))+((x7576*x7579))+(((-1.0)*r02*x7584)));
evalcond[2]=(((x7576*x7582))+(((-1.0)*x7577*x7583))+(((-1.0)*r12*x7584)));
evalcond[3]=(cj0+(((-1.0)*x7582*x7584))+((x7575*x7577))+(((-1.0)*r12*x7583)));
evalcond[4]=((1.0)+((x7576*x7580))+(((-1.0)*r22*x7584))+(((-1.0)*x7578*x7583)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7583))+(((-1.0)*x7579*x7584))+((x7575*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7585=((1.0)*cj5);
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7585))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
CheckValue<IkReal> x7587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7585))+(((-1.0)*r00*sj5)))),-1);
if(!x7587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7586.value)+(((1.5707963267949)*(x7587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7588=IKsin(j4);
IkReal x7589=IKcos(j4);
IkReal x7590=(r11*sj5);
IkReal x7591=(r21*sj5);
IkReal x7592=(cj5*r00);
IkReal x7593=(cj5*r20);
IkReal x7594=(r01*sj5);
IkReal x7595=(cj5*r10);
IkReal x7596=((1.0)*x7589);
IkReal x7597=((1.0)*x7588);
evalcond[0]=(((x7588*x7591))+(((-1.0)*r22*x7596))+(((-1.0)*x7593*x7597)));
evalcond[1]=(((x7589*x7592))+(((-1.0)*x7594*x7596))+(((-1.0)*r02*x7597)));
evalcond[2]=((((-1.0)*x7590*x7596))+(((-1.0)*r12*x7597))+((x7589*x7595)));
evalcond[3]=(((x7588*x7590))+cj0+(((-1.0)*r12*x7596))+(((-1.0)*x7595*x7597)));
evalcond[4]=((1.0)+(((-1.0)*x7591*x7596))+((x7589*x7593))+(((-1.0)*r22*x7597)));
evalcond[5]=(((x7588*x7594))+(((-1.0)*x7592*x7597))+(((-1.0)*sj0))+(((-1.0)*r02*x7596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7598 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7598.valid){
continue;
}
CheckValue<IkReal> x7599=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7598.value)+(((1.5707963267949)*(x7599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7600=IKsin(j4);
IkReal x7601=IKcos(j4);
IkReal x7602=(r11*sj5);
IkReal x7603=(r21*sj5);
IkReal x7604=(cj5*r00);
IkReal x7605=(cj5*r20);
IkReal x7606=(r01*sj5);
IkReal x7607=(cj5*r10);
IkReal x7608=((1.0)*x7601);
IkReal x7609=((1.0)*x7600);
evalcond[0]=((((-1.0)*r22*x7608))+((x7600*x7603))+(((-1.0)*x7605*x7609)));
evalcond[1]=((((-1.0)*x7606*x7608))+((x7601*x7604))+(((-1.0)*r02*x7609)));
evalcond[2]=(((x7601*x7607))+(((-1.0)*x7602*x7608))+(((-1.0)*r12*x7609)));
evalcond[3]=((((-1.0)*x7607*x7609))+((x7600*x7602))+cj0+(((-1.0)*r12*x7608)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7609))+((x7601*x7605))+(((-1.0)*x7603*x7608)));
evalcond[5]=((((-1.0)*sj0))+((x7600*x7606))+(((-1.0)*x7604*x7609))+(((-1.0)*r02*x7608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7610=IKcos(j0);
IkReal x7611=IKsin(j0);
evalcond[0]=((((-0.10915)*x7611))+(((-1.0)*px))+(((-0.39225)*x7610)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7611))+(((0.10915)*x7610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7612=((1.0)*cj5);
IkReal x7613=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7612)));
j4eval[0]=x7613;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7612)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7614=cj5*cj5;
IkReal x7615=((1.0)*r21);
IkReal x7616=(cj5*sj5);
IkReal x7617=((1.0)*r20);
IkReal x7618=(((r00*r20*x7614))+(((-1.0)*r00*x7615*x7616))+((r01*r21))+(((-1.0)*r01*x7614*x7615))+((r02*r22))+(((-1.0)*r01*x7616*x7617)));
j4eval[0]=x7618;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7617)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7619=cj5*cj5;
IkReal x7620=(r21*sj5);
IkReal x7621=(r11*r21);
IkReal x7622=((1.0)*cj5*r20);
IkReal x7623=((((-1.0)*r11*sj5*x7622))+(((-1.0)*cj5*r10*x7620))+((r12*r22))+(((-1.0)*x7619*x7621))+((r10*r20*x7619))+x7621);
j4eval[0]=x7623;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7620))+(((-1.0)*sj0*x7622))))));
j4eval[2]=IKsign(x7623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7624=cj5*cj5;
IkReal x7625=(r21*sj5);
IkReal x7626=(r11*r21);
IkReal x7627=((1.0)*cj5*r20);
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7625))+(((-1.0)*sj0*x7627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
CheckValue<IkReal> x7629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7627))+(((-1.0)*cj5*r10*x7625))+((r12*r22))+((r10*r20*x7624))+(((-1.0)*x7624*x7626))+x7626)),-1);
if(!x7629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7628.value)+(((1.5707963267949)*(x7629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7630=IKsin(j4);
IkReal x7631=IKcos(j4);
IkReal x7632=(r11*sj5);
IkReal x7633=(cj5*r00);
IkReal x7634=(cj5*r10);
IkReal x7635=(r21*sj5);
IkReal x7636=(cj5*r20);
IkReal x7637=(r01*sj5);
IkReal x7638=((1.0)*x7631);
IkReal x7639=((1.0)*x7630);
evalcond[0]=(((x7630*x7635))+(((-1.0)*r22*x7638))+(((-1.0)*x7636*x7639)));
evalcond[1]=(((x7631*x7636))+(((-1.0)*r22*x7639))+(((-1.0)*x7635*x7638)));
evalcond[2]=(((x7630*x7632))+cj0+(((-1.0)*x7634*x7639))+(((-1.0)*r12*x7638)));
evalcond[3]=(((x7631*x7633))+cj0+(((-1.0)*x7637*x7638))+(((-1.0)*r02*x7639)));
evalcond[4]=(((x7631*x7634))+sj0+(((-1.0)*x7632*x7638))+(((-1.0)*r12*x7639)));
evalcond[5]=(((x7630*x7637))+(((-1.0)*sj0))+(((-1.0)*x7633*x7639))+(((-1.0)*r02*x7638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7640=cj5*cj5;
IkReal x7641=((1.0)*r21);
IkReal x7642=(cj5*sj5);
IkReal x7643=((1.0)*r20);
CheckValue<IkReal> x7644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7641*x7642))+(((-1.0)*r01*x7640*x7641))+((r01*r21))+(((-1.0)*r01*x7642*x7643))+((r00*r20*x7640))+((r02*r22)))),-1);
if(!x7644.valid){
continue;
}
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7644.value)))+(x7645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7646=IKsin(j4);
IkReal x7647=IKcos(j4);
IkReal x7648=(r11*sj5);
IkReal x7649=(cj5*r00);
IkReal x7650=(cj5*r10);
IkReal x7651=(r21*sj5);
IkReal x7652=(cj5*r20);
IkReal x7653=(r01*sj5);
IkReal x7654=((1.0)*x7647);
IkReal x7655=((1.0)*x7646);
evalcond[0]=((((-1.0)*r22*x7654))+((x7646*x7651))+(((-1.0)*x7652*x7655)));
evalcond[1]=((((-1.0)*r22*x7655))+(((-1.0)*x7651*x7654))+((x7647*x7652)));
evalcond[2]=((((-1.0)*x7650*x7655))+cj0+(((-1.0)*r12*x7654))+((x7646*x7648)));
evalcond[3]=(cj0+(((-1.0)*r02*x7655))+(((-1.0)*x7653*x7654))+((x7647*x7649)));
evalcond[4]=(sj0+(((-1.0)*x7648*x7654))+((x7647*x7650))+(((-1.0)*r12*x7655)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7649*x7655))+(((-1.0)*r02*x7654))+((x7646*x7653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7656=((1.0)*cj5);
CheckValue<IkReal> x7657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7656)))),-1);
if(!x7657.valid){
continue;
}
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7657.value)))+(x7658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7659=IKsin(j4);
IkReal x7660=IKcos(j4);
IkReal x7661=(r11*sj5);
IkReal x7662=(cj5*r00);
IkReal x7663=(cj5*r10);
IkReal x7664=(r21*sj5);
IkReal x7665=(cj5*r20);
IkReal x7666=(r01*sj5);
IkReal x7667=((1.0)*x7660);
IkReal x7668=((1.0)*x7659);
evalcond[0]=((((-1.0)*r22*x7667))+((x7659*x7664))+(((-1.0)*x7665*x7668)));
evalcond[1]=((((-1.0)*r22*x7668))+((x7660*x7665))+(((-1.0)*x7664*x7667)));
evalcond[2]=((((-1.0)*r12*x7667))+cj0+((x7659*x7661))+(((-1.0)*x7663*x7668)));
evalcond[3]=(cj0+(((-1.0)*x7666*x7667))+((x7660*x7662))+(((-1.0)*r02*x7668)));
evalcond[4]=((((-1.0)*r12*x7668))+sj0+(((-1.0)*x7661*x7667))+((x7660*x7663)));
evalcond[5]=((((-1.0)*sj0))+((x7659*x7666))+(((-1.0)*r02*x7667))+(((-1.0)*x7662*x7668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7669=cj1*cj1;
IkReal x7670=(cj1*sj1);
IkReal x7671=(cj1*sj2);
IkReal x7672=(r00*sj5);
IkReal x7673=(cj2*sj1);
IkReal x7674=(cj5*r01);
IkReal x7675=((20000.0)*py);
IkReal x7676=((1893.0)*r10*sj5);
IkReal x7677=((1893.0)*cj5*r11);
IkReal x7678=(sj2*x7669);
CheckValue<IkReal> x7679=IKPowWithIntegerCheck(((((-15690.0)*cj2*x7678))+(((-8500.0)*cj2*x7670))+(((-15690.0)*x7670*(cj2*cj2)))+(((-8500.0)*x7678))+(((7845.0)*cj2*sj2))+(((7845.0)*x7670))),-1);
if(!x7679.valid){
continue;
}
CheckValue<IkReal> x7680=IKPowWithIntegerCheck(((((-1.0)*x7671))+(((-1.0)*x7673))),-1);
if(!x7680.valid){
continue;
}
if( IKabs(((x7679.value)*(((((-2183.0)*x7672))+(((-2183.0)*x7674))+(((-1.0)*x7673*x7677))+(((-1.0)*x7673*x7676))+(((-1.0)*x7673*x7675))+(((-1.0)*x7671*x7677))+(((-1.0)*x7671*x7676))+(((-1.0)*x7671*x7675)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7680.value)*((x7674+x7672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7679.value)*(((((-2183.0)*x7672))+(((-2183.0)*x7674))+(((-1.0)*x7673*x7677))+(((-1.0)*x7673*x7676))+(((-1.0)*x7673*x7675))+(((-1.0)*x7671*x7677))+(((-1.0)*x7671*x7676))+(((-1.0)*x7671*x7675))))))+IKsqr(((x7680.value)*((x7674+x7672))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7679.value)*(((((-2183.0)*x7672))+(((-2183.0)*x7674))+(((-1.0)*x7673*x7677))+(((-1.0)*x7673*x7676))+(((-1.0)*x7673*x7675))+(((-1.0)*x7671*x7677))+(((-1.0)*x7671*x7676))+(((-1.0)*x7671*x7675))))), ((x7680.value)*((x7674+x7672))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7681=IKcos(j0);
IkReal x7682=IKsin(j0);
IkReal x7683=((1.0)*cj1);
IkReal x7684=((0.39225)*sj1);
IkReal x7685=(cj5*r11);
IkReal x7686=((1.0)*sj5);
IkReal x7687=(cj5*r01);
IkReal x7688=((1.0)*sj1);
IkReal x7689=((0.09465)*sj5);
IkReal x7690=((0.39225)*cj1);
IkReal x7691=((0.425)*cj1);
IkReal x7692=(sj2*x7681);
IkReal x7693=(sj2*x7682);
IkReal x7694=(cj2*x7681);
IkReal x7695=(cj2*x7682);
evalcond[0]=((((-1.0)*r00*x7686))+(((-1.0)*x7687))+(((-1.0)*x7688*x7694))+(((-1.0)*x7683*x7692)));
evalcond[1]=((((-1.0)*r10*x7686))+(((-1.0)*x7685))+(((-1.0)*x7688*x7695))+(((-1.0)*x7683*x7693)));
evalcond[2]=(((x7681*x7691))+((x7690*x7694))+(((-0.10915)*x7682))+(((-1.0)*r00*x7689))+(((-0.09465)*x7687))+(((-1.0)*px))+(((-1.0)*x7684*x7692)));
evalcond[3]=(((x7682*x7691))+(((-1.0)*r10*x7689))+((x7690*x7695))+(((-0.09465)*x7685))+(((0.10915)*x7681))+(((-1.0)*py))+(((-1.0)*x7684*x7693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7696=((1.0)*cj5);
IkReal x7697=((((-1.0)*r01*x7696))+(((-1.0)*r00*sj5)));
j4eval[0]=x7697;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7696)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7698=((1.0)*cj5);
IkReal x7699=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7698)));
j4eval[0]=x7699;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7698))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7700=((1.0)*sj0);
IkReal x7701=((1.0)*cj0);
IkReal x7702=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7702;
j4eval[1]=((IKabs(((((-1.0)*r12*x7700))+(((-1.0)*r02*x7701)))))+(IKabs(((((-1.0)*r11*sj5*x7700))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7701))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x7702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7703=((-1.0)*r20);
IkReal x7705 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7705)==0){
continue;
}
IkReal x7704=pow(x7705,-0.5);
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7703),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7706.value));
IkReal gconst133=(r21*x7704);
IkReal gconst134=(x7703*x7704);
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7707.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7708=((-1.0)*r20);
IkReal x7709=x7704;
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7708),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7710=((-1.0)*(x7711.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7710;
IkReal gconst132=x7710;
IkReal gconst133=(r21*x7709);
IkReal gconst134=(x7708*x7709);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7712=((-1.0)*r20);
IkReal x7713=x7704;
CheckValue<IkReal> x7715 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7712),IKFAST_ATAN2_MAGTHRESH);
if(!x7715.valid){
continue;
}
IkReal x7714=((-1.0)*(x7715.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7714;
IkReal gconst132=x7714;
IkReal gconst133=(r21*x7713);
IkReal gconst134=(x7712*x7713);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7716=((-1.0)*r20);
IkReal x7717=x7704;
CheckValue<IkReal> x7719 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7716),IKFAST_ATAN2_MAGTHRESH);
if(!x7719.valid){
continue;
}
IkReal x7718=((-1.0)*(x7719.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7718;
IkReal gconst132=x7718;
IkReal gconst133=(r21*x7717);
IkReal gconst134=(x7716*x7717);
IkReal x7720=r22*r22;
CheckValue<IkReal> x7723=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7720))),-1);
if(!x7723.valid){
continue;
}
IkReal x7721=x7723.value;
IkReal x7722=(((x7721*(r20*r20*r20*r20)))+((x7721*(r21*r21*r21*r21)))+(((2.0)*x7721*(r20*r20)*(r21*r21)))+x7720);
j4eval[0]=x7722;
j4eval[1]=IKsign(x7722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7724=(gconst133*r21);
IkReal x7725=(cj1*sj2);
IkReal x7726=(gconst134*r20);
IkReal x7727=(cj2*sj1);
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal((((r22*x7725))+((r22*x7727)))),IkReal((((x7724*x7725))+((x7724*x7727))+(((-1.0)*x7726*x7727))+(((-1.0)*x7725*x7726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
CheckValue<IkReal> x7729=IKPowWithIntegerCheck(IKsign(((x7724*x7724)+(((-2.0)*x7724*x7726))+(r22*r22)+(x7726*x7726))),-1);
if(!x7729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7728.value)+(((1.5707963267949)*(x7729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7730=IKsin(j4);
IkReal x7731=IKcos(j4);
IkReal x7732=(sj1*sj2);
IkReal x7733=(gconst133*r11);
IkReal x7734=(gconst133*r21);
IkReal x7735=(gconst133*r01);
IkReal x7736=((1.0)*x7731);
IkReal x7737=(gconst134*x7731);
IkReal x7738=((1.0)*x7730);
IkReal x7739=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7736))+((x7730*x7734))+(((-1.0)*gconst134*r20*x7738)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7738))+((x7730*x7733))+(((-1.0)*r12*x7736)));
evalcond[2]=((((-1.0)*gconst134*r00*x7738))+(((-1.0)*sj0))+((x7730*x7735))+(((-1.0)*r02*x7736)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7738))+((r20*x7737))+(((-1.0)*x7734*x7736)));
evalcond[4]=((((-1.0)*cj0*x7739))+((cj0*x7732))+(((-1.0)*x7735*x7736))+((r00*x7737))+(((-1.0)*r02*x7738)));
evalcond[5]=((((-1.0)*r12*x7738))+((sj0*x7732))+((r10*x7737))+(((-1.0)*sj0*x7739))+(((-1.0)*x7733*x7736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7740=((1.0)*gconst134);
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7740)))),-1);
if(!x7741.valid){
continue;
}
CheckValue<IkReal> x7742 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7740))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7741.value)))+(x7742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7743=IKsin(j4);
IkReal x7744=IKcos(j4);
IkReal x7745=(sj1*sj2);
IkReal x7746=(gconst133*r11);
IkReal x7747=(gconst133*r21);
IkReal x7748=(gconst133*r01);
IkReal x7749=((1.0)*x7744);
IkReal x7750=(gconst134*x7744);
IkReal x7751=((1.0)*x7743);
IkReal x7752=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7749))+(((-1.0)*gconst134*r20*x7751))+((x7743*x7747)));
evalcond[1]=(cj0+((x7743*x7746))+(((-1.0)*gconst134*r10*x7751))+(((-1.0)*r12*x7749)));
evalcond[2]=((((-1.0)*sj0))+((x7743*x7748))+(((-1.0)*r02*x7749))+(((-1.0)*gconst134*r00*x7751)));
evalcond[3]=((((-1.0)*r22*x7751))+((cj2*sj1))+((cj1*sj2))+((r20*x7750))+(((-1.0)*x7747*x7749)));
evalcond[4]=(((r00*x7750))+(((-1.0)*r02*x7751))+(((-1.0)*cj0*x7752))+((cj0*x7745))+(((-1.0)*x7748*x7749)));
evalcond[5]=(((r10*x7750))+((sj0*x7745))+(((-1.0)*r12*x7751))+(((-1.0)*x7746*x7749))+(((-1.0)*sj0*x7752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7753=((1.0)*gconst134);
CheckValue<IkReal> x7754=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7753)))),-1);
if(!x7754.valid){
continue;
}
CheckValue<IkReal> x7755 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7753))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7754.value)))+(x7755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7756=IKsin(j4);
IkReal x7757=IKcos(j4);
IkReal x7758=(sj1*sj2);
IkReal x7759=(gconst133*r11);
IkReal x7760=(gconst133*r21);
IkReal x7761=(gconst133*r01);
IkReal x7762=((1.0)*x7757);
IkReal x7763=(gconst134*x7757);
IkReal x7764=((1.0)*x7756);
IkReal x7765=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7762))+((x7756*x7760))+(((-1.0)*gconst134*r20*x7764)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7764))+((x7756*x7759))+(((-1.0)*r12*x7762)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7762))+(((-1.0)*gconst134*r00*x7764))+((x7756*x7761)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7760*x7762))+(((-1.0)*r22*x7764))+((cj1*sj2))+((r20*x7763)));
evalcond[4]=((((-1.0)*r02*x7764))+(((-1.0)*cj0*x7765))+((cj0*x7758))+(((-1.0)*x7761*x7762))+((r00*x7763)));
evalcond[5]=(((sj0*x7758))+(((-1.0)*x7759*x7762))+(((-1.0)*sj0*x7765))+(((-1.0)*r12*x7764))+((r10*x7763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7766=((-1.0)*r21);
IkReal x7768 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7768)==0){
continue;
}
IkReal x7767=pow(x7768,-0.5);
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(x7766),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7769.value))));
IkReal gconst136=(x7766*x7767);
IkReal gconst137=((1.0)*r20*x7767);
CheckValue<IkReal> x7770 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7770.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7770.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7771=((-1.0)*r21);
CheckValue<IkReal> x7774 = IKatan2WithCheck(IkReal(x7771),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7774.valid){
continue;
}
IkReal x7772=((1.0)*(x7774.value));
IkReal x7773=x7767;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7772)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7772)));
IkReal gconst136=(x7771*x7773);
IkReal gconst137=((1.0)*r20*x7773);
IkReal x7775=r22*r22;
IkReal x7776=((1.0)*x7775);
CheckValue<IkReal> x7780=IKPowWithIntegerCheck(((-1.0)+x7775),-1);
if(!x7780.valid){
continue;
}
IkReal x7777=x7780.value;
if((((1.0)+(((-1.0)*x7776)))) < -0.00001)
continue;
IkReal x7778=IKsqrt(((1.0)+(((-1.0)*x7776))));
IkReal x7779=(cj0*x7777*x7778);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7776*x7779))+x7779))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7781=((-1.0)*r21);
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal(x7781),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
IkReal x7782=((1.0)*(x7784.value));
IkReal x7783=x7767;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7782)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7782)));
IkReal gconst136=(x7781*x7783);
IkReal gconst137=((1.0)*r20*x7783);
IkReal x7785=r22*r22;
IkReal x7786=((1.0)*x7785);
CheckValue<IkReal> x7790=IKPowWithIntegerCheck(((-1.0)+x7785),-1);
if(!x7790.valid){
continue;
}
IkReal x7787=x7790.value;
if((((1.0)+(((-1.0)*x7786)))) < -0.00001)
continue;
IkReal x7788=IKsqrt(((1.0)+(((-1.0)*x7786))));
IkReal x7789=(sj0*x7787*x7788);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7786*x7789))+x7789))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7791=((-1.0)*r21);
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal(x7791),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
IkReal x7792=((1.0)*(x7794.value));
IkReal x7793=x7767;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7792)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7792)));
IkReal gconst136=(x7791*x7793);
IkReal gconst137=((1.0)*r20*x7793);
IkReal x7795=r22*r22;
IkReal x7796=(r12*sj0);
IkReal x7797=(cj0*r02);
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(((-1.0)+x7795),-1);
if(!x7801.valid){
continue;
}
IkReal x7798=x7801.value;
if((((1.0)+(((-1.0)*x7795)))) < -0.00001)
continue;
IkReal x7799=IKsqrt(((1.0)+(((-1.0)*x7795))));
IkReal x7800=(r22*x7798*x7799);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7796*x7800))+((x7797*x7800)))))+(IKabs(((((-1.0)*x7797))+(((-1.0)*x7796))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7802=((1.0)*sj0);
IkReal x7803=((1.0)*cj0);
CheckValue<IkReal> x7804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7804.valid){
continue;
}
CheckValue<IkReal> x7805 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7802))+(((-1.0)*r02*x7803)))),IkReal(((((-1.0)*gconst136*r11*x7802))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7803))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7804.value)))+(x7805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7806=IKsin(j4);
IkReal x7807=IKcos(j4);
IkReal x7808=(gconst136*r01);
IkReal x7809=(gconst137*r10);
IkReal x7810=(sj1*sj2);
IkReal x7811=(gconst137*r20);
IkReal x7812=(gconst136*r11);
IkReal x7813=(gconst136*r21);
IkReal x7814=(gconst137*r00);
IkReal x7815=((1.0)*x7807);
IkReal x7816=((1.0)*cj1*cj2);
IkReal x7817=((1.0)*x7806);
evalcond[0]=((((-1.0)*x7811*x7817))+(((-1.0)*r22*x7815))+((x7806*x7813)));
evalcond[1]=(cj0+((x7806*x7812))+(((-1.0)*r12*x7815))+(((-1.0)*x7809*x7817)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7815))+(((-1.0)*x7814*x7817))+((x7806*x7808)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7817))+((x7807*x7811))+(((-1.0)*x7813*x7815)));
evalcond[4]=((((-1.0)*r02*x7817))+((x7807*x7814))+(((-1.0)*cj0*x7816))+(((-1.0)*x7808*x7815))+((cj0*x7810)));
evalcond[5]=((((-1.0)*x7812*x7815))+((sj0*x7810))+(((-1.0)*r12*x7817))+((x7807*x7809))+(((-1.0)*sj0*x7816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7818=((1.0)*gconst137);
CheckValue<IkReal> x7819=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7818)))),-1);
if(!x7819.valid){
continue;
}
CheckValue<IkReal> x7820 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x7818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7819.value)))+(x7820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7821=IKsin(j4);
IkReal x7822=IKcos(j4);
IkReal x7823=(gconst136*r01);
IkReal x7824=(gconst137*r10);
IkReal x7825=(sj1*sj2);
IkReal x7826=(gconst137*r20);
IkReal x7827=(gconst136*r11);
IkReal x7828=(gconst136*r21);
IkReal x7829=(gconst137*r00);
IkReal x7830=((1.0)*x7822);
IkReal x7831=((1.0)*cj1*cj2);
IkReal x7832=((1.0)*x7821);
evalcond[0]=((((-1.0)*r22*x7830))+((x7821*x7828))+(((-1.0)*x7826*x7832)));
evalcond[1]=((((-1.0)*x7824*x7832))+cj0+(((-1.0)*r12*x7830))+((x7821*x7827)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7829*x7832))+(((-1.0)*r02*x7830))+((x7821*x7823)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7828*x7830))+(((-1.0)*r22*x7832))+((cj1*sj2))+((x7822*x7826)));
evalcond[4]=((((-1.0)*cj0*x7831))+(((-1.0)*r02*x7832))+((x7822*x7829))+(((-1.0)*x7823*x7830))+((cj0*x7825)));
evalcond[5]=(((sj0*x7825))+(((-1.0)*r12*x7832))+((x7822*x7824))+(((-1.0)*sj0*x7831))+(((-1.0)*x7827*x7830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7833=((1.0)*gconst137);
CheckValue<IkReal> x7834=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7833)))),-1);
if(!x7834.valid){
continue;
}
CheckValue<IkReal> x7835 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7833))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7834.value)))+(x7835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7836=IKsin(j4);
IkReal x7837=IKcos(j4);
IkReal x7838=(gconst136*r01);
IkReal x7839=(gconst137*r10);
IkReal x7840=(sj1*sj2);
IkReal x7841=(gconst137*r20);
IkReal x7842=(gconst136*r11);
IkReal x7843=(gconst136*r21);
IkReal x7844=(gconst137*r00);
IkReal x7845=((1.0)*x7837);
IkReal x7846=((1.0)*cj1*cj2);
IkReal x7847=((1.0)*x7836);
evalcond[0]=(((x7836*x7843))+(((-1.0)*r22*x7845))+(((-1.0)*x7841*x7847)));
evalcond[1]=(((x7836*x7842))+(((-1.0)*x7839*x7847))+cj0+(((-1.0)*r12*x7845)));
evalcond[2]=((((-1.0)*x7844*x7847))+(((-1.0)*sj0))+((x7836*x7838))+(((-1.0)*r02*x7845)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7847))+((cj1*sj2))+(((-1.0)*x7843*x7845))+((x7837*x7841)));
evalcond[4]=((((-1.0)*x7838*x7845))+(((-1.0)*cj0*x7846))+((cj0*x7840))+(((-1.0)*r02*x7847))+((x7837*x7844)));
evalcond[5]=((((-1.0)*x7842*x7845))+(((-1.0)*r12*x7847))+((x7837*x7839))+(((-1.0)*sj0*x7846))+((sj0*x7840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7848=((-1.0)*r10);
IkReal x7850 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7850)==0){
continue;
}
IkReal x7849=pow(x7850,-0.5);
CheckValue<IkReal> x7851 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7848),IKFAST_ATAN2_MAGTHRESH);
if(!x7851.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7851.value));
IkReal gconst139=(r11*x7849);
IkReal gconst140=(x7848*x7849);
CheckValue<IkReal> x7852 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7852.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7852.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7853=((-1.0)*r10);
IkReal x7854=x7849;
CheckValue<IkReal> x7856 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7853),IKFAST_ATAN2_MAGTHRESH);
if(!x7856.valid){
continue;
}
IkReal x7855=((-1.0)*(x7856.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7855;
IkReal gconst138=x7855;
IkReal gconst139=(r11*x7854);
IkReal gconst140=(x7853*x7854);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7857=((1.0)*sj0);
IkReal x7858=((1.0)*gconst139);
CheckValue<IkReal> x7859=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7858)))),-1);
if(!x7859.valid){
continue;
}
CheckValue<IkReal> x7860 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7857)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7857))+(((-1.0)*cj0*r01*x7858))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7859.value)))+(x7860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7861=IKsin(j4);
IkReal x7862=IKcos(j4);
IkReal x7863=(gconst140*r00);
IkReal x7864=(sj1*sj2);
IkReal x7865=(gconst139*r11);
IkReal x7866=(gconst139*r01);
IkReal x7867=(gconst139*r21);
IkReal x7868=((1.0)*x7862);
IkReal x7869=((1.0)*x7861);
IkReal x7870=((1.0)*cj1*cj2);
IkReal x7871=(gconst140*x7862);
evalcond[0]=(((x7861*x7867))+(((-1.0)*gconst140*r20*x7869))+(((-1.0)*r22*x7868)));
evalcond[1]=(((x7861*x7865))+cj0+(((-1.0)*r12*x7868))+(((-1.0)*gconst140*r10*x7869)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7863*x7869))+((x7861*x7866))+(((-1.0)*r02*x7868)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7871))+(((-1.0)*x7867*x7868))+(((-1.0)*r22*x7869)));
evalcond[4]=(((cj0*x7864))+(((-1.0)*r02*x7869))+((x7862*x7863))+(((-1.0)*cj0*x7870))+(((-1.0)*x7866*x7868)));
evalcond[5]=(((r10*x7871))+((sj0*x7864))+(((-1.0)*r12*x7869))+(((-1.0)*sj0*x7870))+(((-1.0)*x7865*x7868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7872=((1.0)*gconst140);
CheckValue<IkReal> x7873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7872))+(((-1.0)*gconst139*r00)))),-1);
if(!x7873.valid){
continue;
}
CheckValue<IkReal> x7874 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7872))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7873.value)))+(x7874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7875=IKsin(j4);
IkReal x7876=IKcos(j4);
IkReal x7877=(gconst140*r00);
IkReal x7878=(sj1*sj2);
IkReal x7879=(gconst139*r11);
IkReal x7880=(gconst139*r01);
IkReal x7881=(gconst139*r21);
IkReal x7882=((1.0)*x7876);
IkReal x7883=((1.0)*x7875);
IkReal x7884=((1.0)*cj1*cj2);
IkReal x7885=(gconst140*x7876);
evalcond[0]=((((-1.0)*r22*x7882))+(((-1.0)*gconst140*r20*x7883))+((x7875*x7881)));
evalcond[1]=(((x7875*x7879))+cj0+(((-1.0)*r12*x7882))+(((-1.0)*gconst140*r10*x7883)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7882))+(((-1.0)*x7877*x7883))+((x7875*x7880)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7883))+((cj1*sj2))+((r20*x7885))+(((-1.0)*x7881*x7882)));
evalcond[4]=((((-1.0)*x7880*x7882))+((cj0*x7878))+(((-1.0)*r02*x7883))+((x7876*x7877))+(((-1.0)*cj0*x7884)));
evalcond[5]=((((-1.0)*sj0*x7884))+((r10*x7885))+((sj0*x7878))+(((-1.0)*r12*x7883))+(((-1.0)*x7879*x7882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7886=((-1.0)*r11);
IkReal x7888 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7888)==0){
continue;
}
IkReal x7887=pow(x7888,-0.5);
CheckValue<IkReal> x7889 = IKatan2WithCheck(IkReal(x7886),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7889.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7889.value))));
IkReal gconst142=(x7886*x7887);
IkReal gconst143=((1.0)*r10*x7887);
CheckValue<IkReal> x7890 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7890.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7890.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7891=((-1.0)*r11);
CheckValue<IkReal> x7894 = IKatan2WithCheck(IkReal(x7891),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7894.valid){
continue;
}
IkReal x7892=((1.0)*(x7894.value));
IkReal x7893=x7887;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7892)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7892)));
IkReal gconst142=(x7891*x7893);
IkReal gconst143=((1.0)*r10*x7893);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7895=((-1.0)*r11);
CheckValue<IkReal> x7898 = IKatan2WithCheck(IkReal(x7895),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7898.valid){
continue;
}
IkReal x7896=((1.0)*(x7898.value));
IkReal x7897=x7887;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7896)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7896)));
IkReal gconst142=(x7895*x7897);
IkReal gconst143=((1.0)*r10*x7897);
IkReal x7899=r12*r12;
IkReal x7900=((1.0)*sj0);
IkReal x7901=(cj0*r02);
IkReal x7902=x7887;
j4eval[0]=((IKabs((((r12*x7901*x7902))+((sj0*x7899*x7902))+(((-1.0)*x7900*x7902)))))+(IKabs(((((-1.0)*r12*x7900))+(((-1.0)*x7901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7903=((-1.0)*r11);
CheckValue<IkReal> x7906 = IKatan2WithCheck(IkReal(x7903),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7906.valid){
continue;
}
IkReal x7904=((1.0)*(x7906.value));
IkReal x7905=x7887;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7904)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7904)));
IkReal gconst142=(x7903*x7905);
IkReal gconst143=((1.0)*r10*x7905);
IkReal x7907=r12*r12;
IkReal x7908=(cj1*r22*sj2);
IkReal x7909=(cj2*r22*sj1);
CheckValue<IkReal> x7913=IKPowWithIntegerCheck(((-1.0)+x7907),-1);
if(!x7913.valid){
continue;
}
IkReal x7910=x7913.value;
if((((1.0)+(((-1.0)*x7907)))) < -0.00001)
continue;
IkReal x7911=IKsqrt(((1.0)+(((-1.0)*x7907))));
IkReal x7912=((1.0)*r12*x7910*x7911);
j4eval[0]=((IKabs(((((-1.0)*x7908*x7912))+(((-1.0)*x7909*x7912)))))+(IKabs((x7908+x7909))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7914=(gconst142*r21);
IkReal x7915=(cj1*sj2);
IkReal x7916=(cj2*sj1);
IkReal x7917=(gconst143*r20);
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7914*x7917))+(r22*r22)+(x7914*x7914)+(x7917*x7917))),-1);
if(!x7918.valid){
continue;
}
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal((((r22*x7916))+((r22*x7915)))),IkReal(((((-1.0)*x7916*x7917))+(((-1.0)*x7915*x7917))+((x7914*x7915))+((x7914*x7916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7918.value)))+(x7919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7920=IKsin(j4);
IkReal x7921=IKcos(j4);
IkReal x7922=(sj1*sj2);
IkReal x7923=(gconst143*r20);
IkReal x7924=((1.0)*x7921);
IkReal x7925=((1.0)*cj1*cj2);
IkReal x7926=((1.0)*x7920);
IkReal x7927=(gconst142*x7920);
IkReal x7928=(gconst143*x7921);
evalcond[0]=((((-1.0)*r22*x7924))+(((-1.0)*x7923*x7926))+((r21*x7927)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7926))+(((-1.0)*r12*x7924))+((r11*x7927)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7924))+((r01*x7927))+(((-1.0)*gconst143*r00*x7926)));
evalcond[3]=(((x7921*x7923))+(((-1.0)*gconst142*r21*x7924))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7926)));
evalcond[4]=((((-1.0)*cj0*x7925))+(((-1.0)*r02*x7926))+(((-1.0)*gconst142*r01*x7924))+((r00*x7928))+((cj0*x7922)));
evalcond[5]=((((-1.0)*gconst142*r11*x7924))+(((-1.0)*sj0*x7925))+((r10*x7928))+(((-1.0)*r12*x7926))+((sj0*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7929=((1.0)*sj0);
IkReal x7930=((1.0)*gconst142);
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7929)))),IkReal(((((-1.0)*gconst142*r11*x7929))+(((-1.0)*cj0*r01*x7930))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
CheckValue<IkReal> x7932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7930))+(((-1.0)*gconst143*r21)))),-1);
if(!x7932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7931.value)+(((1.5707963267949)*(x7932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7933=IKsin(j4);
IkReal x7934=IKcos(j4);
IkReal x7935=(sj1*sj2);
IkReal x7936=(gconst143*r20);
IkReal x7937=((1.0)*x7934);
IkReal x7938=((1.0)*cj1*cj2);
IkReal x7939=((1.0)*x7933);
IkReal x7940=(gconst142*x7933);
IkReal x7941=(gconst143*x7934);
evalcond[0]=(((r21*x7940))+(((-1.0)*r22*x7937))+(((-1.0)*x7936*x7939)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7939))+(((-1.0)*r12*x7937))+((r11*x7940)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7937))+(((-1.0)*gconst143*r00*x7939))+((r01*x7940)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x7937))+(((-1.0)*r22*x7939))+((cj1*sj2))+((x7934*x7936)));
evalcond[4]=(((cj0*x7935))+(((-1.0)*cj0*x7938))+(((-1.0)*r02*x7939))+(((-1.0)*gconst142*r01*x7937))+((r00*x7941)));
evalcond[5]=(((sj0*x7935))+(((-1.0)*r12*x7939))+(((-1.0)*gconst142*r11*x7937))+(((-1.0)*sj0*x7938))+((r10*x7941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7942=((1.0)*gconst143);
CheckValue<IkReal> x7943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7942))+(((-1.0)*gconst142*r00)))),-1);
if(!x7943.valid){
continue;
}
CheckValue<IkReal> x7944 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7942))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7943.value)))+(x7944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7945=IKsin(j4);
IkReal x7946=IKcos(j4);
IkReal x7947=(sj1*sj2);
IkReal x7948=(gconst143*r20);
IkReal x7949=((1.0)*x7946);
IkReal x7950=((1.0)*cj1*cj2);
IkReal x7951=((1.0)*x7945);
IkReal x7952=(gconst142*x7945);
IkReal x7953=(gconst143*x7946);
evalcond[0]=((((-1.0)*r22*x7949))+(((-1.0)*x7948*x7951))+((r21*x7952)));
evalcond[1]=((((-1.0)*gconst143*r10*x7951))+cj0+((r11*x7952))+(((-1.0)*r12*x7949)));
evalcond[2]=(((r01*x7952))+(((-1.0)*sj0))+(((-1.0)*r02*x7949))+(((-1.0)*gconst143*r00*x7951)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7951))+(((-1.0)*gconst142*r21*x7949))+((cj1*sj2))+((x7946*x7948)));
evalcond[4]=(((cj0*x7947))+((r00*x7953))+(((-1.0)*gconst142*r01*x7949))+(((-1.0)*cj0*x7950))+(((-1.0)*r02*x7951)));
evalcond[5]=(((sj0*x7947))+(((-1.0)*gconst142*r11*x7949))+((r10*x7953))+(((-1.0)*r12*x7951))+(((-1.0)*sj0*x7950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7954=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7954;
j4eval[1]=IKsign(x7954);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7955=((1.0)*cj5);
IkReal x7956=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7955)));
j4eval[0]=x7956;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7955))))));
j4eval[2]=IKsign(x7956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7957=cj5*cj5;
IkReal x7958=r11*r11;
IkReal x7959=(r11*sj5);
IkReal x7960=(cj5*r10);
IkReal x7961=((r12*r12)+((x7957*(r10*r10)))+x7958+(((-2.0)*x7959*x7960))+(((-1.0)*x7957*x7958)));
j4eval[0]=x7961;
j4eval[1]=IKsign(x7961);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7959))+x7960))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7962=cj5*cj5;
IkReal x7963=r11*r11;
IkReal x7964=(cj5*r10);
IkReal x7965=(r11*sj5);
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(((((-1.0)*x7965))+x7964)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
CheckValue<IkReal> x7967=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7962*x7963))+(r12*r12)+((x7962*(r10*r10)))+x7963+(((-2.0)*x7964*x7965)))),-1);
if(!x7967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7966.value)+(((1.5707963267949)*(x7967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7968=IKsin(j4);
IkReal x7969=IKcos(j4);
IkReal x7970=(cj5*r10);
IkReal x7971=(r01*sj5);
IkReal x7972=(cj5*r00);
IkReal x7973=(cj5*r20);
IkReal x7974=((1.0)*x7969);
IkReal x7975=((1.0)*x7968);
IkReal x7976=(sj5*x7968);
evalcond[0]=((((-1.0)*r22*x7974))+(((-1.0)*x7973*x7975))+((r21*x7976)));
evalcond[1]=((((-1.0)*r02*x7974))+((x7968*x7971))+(((-1.0)*x7972*x7975)));
evalcond[2]=((((-1.0)*r11*sj5*x7974))+((x7969*x7970))+(((-1.0)*r12*x7975)));
evalcond[3]=((1.0)+((r11*x7976))+(((-1.0)*x7970*x7975))+(((-1.0)*r12*x7974)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7975))+((cj1*sj2))+((x7969*x7973))+(((-1.0)*r21*sj5*x7974)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7969*x7972))+(((-1.0)*r02*x7975))+(((-1.0)*x7971*x7974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7977=((1.0)*cj5);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
CheckValue<IkReal> x7979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7977)))),-1);
if(!x7979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7978.value)+(((1.5707963267949)*(x7979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7980=IKsin(j4);
IkReal x7981=IKcos(j4);
IkReal x7982=(cj5*r10);
IkReal x7983=(r01*sj5);
IkReal x7984=(cj5*r00);
IkReal x7985=(cj5*r20);
IkReal x7986=((1.0)*x7981);
IkReal x7987=((1.0)*x7980);
IkReal x7988=(sj5*x7980);
evalcond[0]=((((-1.0)*r22*x7986))+(((-1.0)*x7985*x7987))+((r21*x7988)));
evalcond[1]=((((-1.0)*x7984*x7987))+((x7980*x7983))+(((-1.0)*r02*x7986)));
evalcond[2]=((((-1.0)*r12*x7987))+(((-1.0)*r11*sj5*x7986))+((x7981*x7982)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7986))+(((-1.0)*x7982*x7987))+((r11*x7988)));
evalcond[4]=((((-1.0)*r22*x7987))+((cj2*sj1))+(((-1.0)*r21*sj5*x7986))+((cj1*sj2))+((x7981*x7985)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7983*x7986))+((x7981*x7984))+(((-1.0)*r02*x7987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7989=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7989.valid){
continue;
}
CheckValue<IkReal> x7990 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7989.value)))+(x7990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7991=IKsin(j4);
IkReal x7992=IKcos(j4);
IkReal x7993=(cj5*r10);
IkReal x7994=(r01*sj5);
IkReal x7995=(cj5*r00);
IkReal x7996=(cj5*r20);
IkReal x7997=((1.0)*x7992);
IkReal x7998=((1.0)*x7991);
IkReal x7999=(sj5*x7991);
evalcond[0]=((((-1.0)*x7996*x7998))+((r21*x7999))+(((-1.0)*r22*x7997)));
evalcond[1]=((((-1.0)*x7995*x7998))+(((-1.0)*r02*x7997))+((x7991*x7994)));
evalcond[2]=((((-1.0)*r12*x7998))+(((-1.0)*r11*sj5*x7997))+((x7992*x7993)));
evalcond[3]=((1.0)+((r11*x7999))+(((-1.0)*r12*x7997))+(((-1.0)*x7993*x7998)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7992*x7996))+(((-1.0)*r22*x7998))+(((-1.0)*r21*sj5*x7997)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7998))+((x7992*x7995))+(((-1.0)*x7994*x7997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8000=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8000;
j4eval[1]=IKsign(x8000);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8001=((1.0)*cj5);
IkReal x8002=((((-1.0)*r21*x8001))+(((-1.0)*r20*sj5)));
j4eval[0]=x8002;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8001))))));
j4eval[2]=IKsign(x8002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8003=cj5*cj5;
IkReal x8004=r11*r11;
IkReal x8005=(cj5*r10);
IkReal x8006=(r11*sj5);
IkReal x8007=((((-1.0)*x8003*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8004))+(((2.0)*x8005*x8006))+((x8003*x8004)));
j4eval[0]=x8007;
j4eval[1]=((IKabs(((((-1.0)*x8006))+x8005)))+(IKabs(r12)));
j4eval[2]=IKsign(x8007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8008=cj5*cj5;
IkReal x8009=r11*r11;
IkReal x8010=(cj5*r10);
IkReal x8011=(r11*sj5);
CheckValue<IkReal> x8012 = IKatan2WithCheck(IkReal(((((-1.0)*x8011))+x8010)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8012.valid){
continue;
}
CheckValue<IkReal> x8013=IKPowWithIntegerCheck(IKsign((((x8008*x8009))+(((2.0)*x8010*x8011))+(((-1.0)*x8008*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8009)))),-1);
if(!x8013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8012.value)+(((1.5707963267949)*(x8013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8014=IKsin(j4);
IkReal x8015=IKcos(j4);
IkReal x8016=(cj5*r10);
IkReal x8017=(r01*sj5);
IkReal x8018=(cj5*r00);
IkReal x8019=(cj5*r20);
IkReal x8020=((1.0)*x8015);
IkReal x8021=((1.0)*x8014);
IkReal x8022=(sj5*x8014);
evalcond[0]=((((-1.0)*x8019*x8021))+((r21*x8022))+(((-1.0)*r22*x8020)));
evalcond[1]=(((x8014*x8017))+(((-1.0)*r02*x8020))+(((-1.0)*x8018*x8021)));
evalcond[2]=((((-1.0)*r12*x8021))+(((-1.0)*r11*sj5*x8020))+((x8015*x8016)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8020))+(((-1.0)*x8016*x8021))+((r11*x8022)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8020))+(((-1.0)*r22*x8021))+((x8015*x8019)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x8021))+(((-1.0)*x8017*x8020))+((cj1*cj2))+((x8015*x8018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8023=((1.0)*cj5);
CheckValue<IkReal> x8024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8023))+(((-1.0)*r20*sj5)))),-1);
if(!x8024.valid){
continue;
}
CheckValue<IkReal> x8025 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8024.value)))+(x8025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8026=IKsin(j4);
IkReal x8027=IKcos(j4);
IkReal x8028=(cj5*r10);
IkReal x8029=(r01*sj5);
IkReal x8030=(cj5*r00);
IkReal x8031=(cj5*r20);
IkReal x8032=((1.0)*x8027);
IkReal x8033=((1.0)*x8026);
IkReal x8034=(sj5*x8026);
evalcond[0]=(((r21*x8034))+(((-1.0)*r22*x8032))+(((-1.0)*x8031*x8033)));
evalcond[1]=(((x8026*x8029))+(((-1.0)*r02*x8032))+(((-1.0)*x8030*x8033)));
evalcond[2]=(((x8027*x8028))+(((-1.0)*r12*x8033))+(((-1.0)*r11*sj5*x8032)));
evalcond[3]=((-1.0)+(((-1.0)*x8028*x8033))+(((-1.0)*r12*x8032))+((r11*x8034)));
evalcond[4]=(((cj2*sj1))+((x8027*x8031))+((cj1*sj2))+(((-1.0)*r21*sj5*x8032))+(((-1.0)*r22*x8033)));
evalcond[5]=(((x8027*x8030))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8033))+((cj1*cj2))+(((-1.0)*x8029*x8032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
CheckValue<IkReal> x8036=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8035.value)+(((1.5707963267949)*(x8036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8037=IKsin(j4);
IkReal x8038=IKcos(j4);
IkReal x8039=(cj5*r10);
IkReal x8040=(r01*sj5);
IkReal x8041=(cj5*r00);
IkReal x8042=(cj5*r20);
IkReal x8043=((1.0)*x8038);
IkReal x8044=((1.0)*x8037);
IkReal x8045=(sj5*x8037);
evalcond[0]=((((-1.0)*x8042*x8044))+((r21*x8045))+(((-1.0)*r22*x8043)));
evalcond[1]=(((x8037*x8040))+(((-1.0)*x8041*x8044))+(((-1.0)*r02*x8043)));
evalcond[2]=((((-1.0)*r11*sj5*x8043))+((x8038*x8039))+(((-1.0)*r12*x8044)));
evalcond[3]=((-1.0)+((r11*x8045))+(((-1.0)*x8039*x8044))+(((-1.0)*r12*x8043)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8043))+((x8038*x8042))+(((-1.0)*r22*x8044)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8040*x8043))+(((-1.0)*r02*x8044))+((x8038*x8041))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8046=((-1.0)*r00);
IkReal x8048 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8048)==0){
continue;
}
IkReal x8047=pow(x8048,-0.5);
CheckValue<IkReal> x8049 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8046),IKFAST_ATAN2_MAGTHRESH);
if(!x8049.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8049.value));
IkReal gconst145=(r01*x8047);
IkReal gconst146=(x8046*x8047);
CheckValue<IkReal> x8050 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8050.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8050.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8051=((-1.0)*r00);
IkReal x8052=x8047;
CheckValue<IkReal> x8054 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8051),IKFAST_ATAN2_MAGTHRESH);
if(!x8054.valid){
continue;
}
IkReal x8053=((-1.0)*(x8054.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8053;
IkReal gconst144=x8053;
IkReal gconst145=(r01*x8052);
IkReal gconst146=(x8051*x8052);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8055=((1.0)*sj0);
IkReal x8056=((1.0)*gconst145);
CheckValue<IkReal> x8057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8056))+(((-1.0)*gconst146*r21)))),-1);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8055))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8056))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8057.value)))+(x8058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKsin(j4);
IkReal x8060=IKcos(j4);
IkReal x8061=(gconst146*r10);
IkReal x8062=(sj1*sj2);
IkReal x8063=(gconst146*r20);
IkReal x8064=(gconst146*r00);
IkReal x8065=((1.0)*x8060);
IkReal x8066=((1.0)*x8059);
IkReal x8067=(gconst145*x8059);
IkReal x8068=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8067))+(((-1.0)*x8063*x8066))+(((-1.0)*r22*x8065)));
evalcond[1]=(cj0+(((-1.0)*r12*x8065))+(((-1.0)*x8061*x8066))+((r11*x8067)));
evalcond[2]=((((-1.0)*x8064*x8066))+(((-1.0)*sj0))+((r01*x8067))+(((-1.0)*r02*x8065)));
evalcond[3]=(((cj2*sj1))+((x8060*x8063))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8065))+(((-1.0)*r22*x8066)));
evalcond[4]=((((-1.0)*cj0*x8068))+((x8060*x8064))+((cj0*x8062))+(((-1.0)*gconst145*r01*x8065))+(((-1.0)*r02*x8066)));
evalcond[5]=((((-1.0)*sj0*x8068))+((x8060*x8061))+(((-1.0)*r12*x8066))+((sj0*x8062))+(((-1.0)*gconst145*r11*x8065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8069=((1.0)*gconst146);
CheckValue<IkReal> x8070 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8069))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8070.valid){
continue;
}
CheckValue<IkReal> x8071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8069))+(((-1.0)*gconst145*r10)))),-1);
if(!x8071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8070.value)+(((1.5707963267949)*(x8071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8072=IKsin(j4);
IkReal x8073=IKcos(j4);
IkReal x8074=(gconst146*r10);
IkReal x8075=(sj1*sj2);
IkReal x8076=(gconst146*r20);
IkReal x8077=(gconst146*r00);
IkReal x8078=((1.0)*x8073);
IkReal x8079=((1.0)*x8072);
IkReal x8080=(gconst145*x8072);
IkReal x8081=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8080))+(((-1.0)*r22*x8078))+(((-1.0)*x8076*x8079)));
evalcond[1]=(cj0+(((-1.0)*x8074*x8079))+((r11*x8080))+(((-1.0)*r12*x8078)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8078))+((r01*x8080))+(((-1.0)*x8077*x8079)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8078))+(((-1.0)*r22*x8079))+((x8073*x8076)));
evalcond[4]=((((-1.0)*r02*x8079))+(((-1.0)*cj0*x8081))+((cj0*x8075))+(((-1.0)*gconst145*r01*x8078))+((x8073*x8077)));
evalcond[5]=((((-1.0)*gconst145*r11*x8078))+((sj0*x8075))+(((-1.0)*sj0*x8081))+(((-1.0)*r12*x8079))+((x8073*x8074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8082=((-1.0)*r01);
IkReal x8084 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8084)==0){
continue;
}
IkReal x8083=pow(x8084,-0.5);
CheckValue<IkReal> x8085 = IKatan2WithCheck(IkReal(x8082),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8085.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8085.value))));
IkReal gconst148=(x8082*x8083);
IkReal gconst149=((1.0)*r00*x8083);
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8086.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8087=((-1.0)*r01);
CheckValue<IkReal> x8090 = IKatan2WithCheck(IkReal(x8087),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8090.valid){
continue;
}
IkReal x8088=((1.0)*(x8090.value));
IkReal x8089=x8083;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8088)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8088)));
IkReal gconst148=(x8087*x8089);
IkReal gconst149=((1.0)*r00*x8089);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8091=((-1.0)*r01);
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal(x8091),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
IkReal x8092=((1.0)*(x8094.value));
IkReal x8093=x8083;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8092)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8092)));
IkReal gconst148=(x8091*x8093);
IkReal gconst149=((1.0)*r00*x8093);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8095=((-1.0)*r01);
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal(x8095),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
IkReal x8096=((1.0)*(x8098.value));
IkReal x8097=x8083;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8096)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8096)));
IkReal gconst148=(x8095*x8097);
IkReal gconst149=((1.0)*r00*x8097);
IkReal x8099=r02*r02;
IkReal x8100=(r12*sj0);
IkReal x8101=((1.0)*cj0);
IkReal x8102=x8083;
j4eval[0]=((IKabs((((r02*x8100*x8102))+(((-1.0)*x8101*x8102))+((cj0*x8099*x8102)))))+(IKabs(((((-1.0)*x8100))+(((-1.0)*r02*x8101))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8103=((1.0)*sj0);
IkReal x8104=((1.0)*gconst148);
CheckValue<IkReal> x8105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8104))+(((-1.0)*gconst149*r21)))),-1);
if(!x8105.valid){
continue;
}
CheckValue<IkReal> x8106 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8103)))),IkReal(((((-1.0)*gconst148*r11*x8103))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8105.value)))+(x8106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8107=IKsin(j4);
IkReal x8108=IKcos(j4);
IkReal x8109=(gconst148*r11);
IkReal x8110=(sj1*sj2);
IkReal x8111=((1.0)*x8108);
IkReal x8112=(gconst149*x8108);
IkReal x8113=(gconst148*x8107);
IkReal x8114=((1.0)*cj1*cj2);
IkReal x8115=((1.0)*x8107);
evalcond[0]=(((r21*x8113))+(((-1.0)*gconst149*r20*x8115))+(((-1.0)*r22*x8111)));
evalcond[1]=(cj0+(((-1.0)*r12*x8111))+(((-1.0)*gconst149*r10*x8115))+((x8107*x8109)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8111))+((r01*x8113))+(((-1.0)*gconst149*r00*x8115)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8112))+(((-1.0)*r22*x8115))+(((-1.0)*gconst148*r21*x8111)));
evalcond[4]=((((-1.0)*gconst148*r01*x8111))+(((-1.0)*cj0*x8114))+((cj0*x8110))+(((-1.0)*r02*x8115))+((r00*x8112)));
evalcond[5]=((((-1.0)*x8109*x8111))+(((-1.0)*r12*x8115))+((r10*x8112))+((sj0*x8110))+(((-1.0)*sj0*x8114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8116=((1.0)*gconst149);
CheckValue<IkReal> x8117 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8116))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8117.valid){
continue;
}
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8116))+(((-1.0)*gconst148*r10)))),-1);
if(!x8118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8117.value)+(((1.5707963267949)*(x8118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(gconst148*r11);
IkReal x8122=(sj1*sj2);
IkReal x8123=((1.0)*x8120);
IkReal x8124=(gconst149*x8120);
IkReal x8125=(gconst148*x8119);
IkReal x8126=((1.0)*cj1*cj2);
IkReal x8127=((1.0)*x8119);
evalcond[0]=(((r21*x8125))+(((-1.0)*gconst149*r20*x8127))+(((-1.0)*r22*x8123)));
evalcond[1]=((((-1.0)*r12*x8123))+cj0+(((-1.0)*gconst149*r10*x8127))+((x8119*x8121)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8125))+(((-1.0)*r02*x8123))+(((-1.0)*gconst149*r00*x8127)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8124))+(((-1.0)*r22*x8127))+(((-1.0)*gconst148*r21*x8123)));
evalcond[4]=((((-1.0)*gconst148*r01*x8123))+(((-1.0)*cj0*x8126))+((cj0*x8122))+((r00*x8124))+(((-1.0)*r02*x8127)));
evalcond[5]=((((-1.0)*sj0*x8126))+(((-1.0)*r12*x8127))+(((-1.0)*x8121*x8123))+((r10*x8124))+((sj0*x8122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8128=((1.0)*gconst149);
CheckValue<IkReal> x8129 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8129.valid){
continue;
}
CheckValue<IkReal> x8130=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8128)))),-1);
if(!x8130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8129.value)+(((1.5707963267949)*(x8130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8131=IKsin(j4);
IkReal x8132=IKcos(j4);
IkReal x8133=(gconst148*r11);
IkReal x8134=(sj1*sj2);
IkReal x8135=((1.0)*x8132);
IkReal x8136=(gconst149*x8132);
IkReal x8137=(gconst148*x8131);
IkReal x8138=((1.0)*cj1*cj2);
IkReal x8139=((1.0)*x8131);
evalcond[0]=((((-1.0)*r22*x8135))+((r21*x8137))+(((-1.0)*gconst149*r20*x8139)));
evalcond[1]=((((-1.0)*gconst149*r10*x8139))+cj0+((x8131*x8133))+(((-1.0)*r12*x8135)));
evalcond[2]=((((-1.0)*r02*x8135))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8139))+((r01*x8137)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8139))+((cj1*sj2))+((r20*x8136))+(((-1.0)*gconst148*r21*x8135)));
evalcond[4]=((((-1.0)*r02*x8139))+((r00*x8136))+(((-1.0)*gconst148*r01*x8135))+((cj0*x8134))+(((-1.0)*cj0*x8138)));
evalcond[5]=((((-1.0)*r12*x8139))+(((-1.0)*x8133*x8135))+((sj0*x8134))+(((-1.0)*sj0*x8138))+((r10*x8136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8140=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8140;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8141=((1.0)*cj5);
IkReal x8142=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8141)));
j4eval[0]=x8142;
j4eval[1]=((IKabs(((((-1.0)*r20*x8141))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8143=cj5*cj5;
IkReal x8144=r01*r01;
IkReal x8145=(r01*sj5);
IkReal x8146=(cj5*r00);
IkReal x8147=((((2.0)*x8145*x8146))+((x8143*x8144))+(((-1.0)*(r02*r02)))+(((-1.0)*x8143*(r00*r00)))+(((-1.0)*x8144)));
j4eval[0]=x8147;
j4eval[1]=IKsign(x8147);
j4eval[2]=((IKabs(((((-1.0)*x8145))+x8146)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8148=cj5*cj5;
IkReal x8149=r01*r01;
IkReal x8150=(r01*sj5);
IkReal x8151=(cj5*r00);
CheckValue<IkReal> x8152=IKPowWithIntegerCheck(IKsign(((((2.0)*x8150*x8151))+(((-1.0)*(r02*r02)))+((x8148*x8149))+(((-1.0)*x8148*(r00*r00)))+(((-1.0)*x8149)))),-1);
if(!x8152.valid){
continue;
}
CheckValue<IkReal> x8153 = IKatan2WithCheck(IkReal(((((-1.0)*x8150))+x8151)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8152.value)))+(x8153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8154=IKsin(j4);
IkReal x8155=IKcos(j4);
IkReal x8156=(cj5*r10);
IkReal x8157=(r01*sj5);
IkReal x8158=(cj5*r00);
IkReal x8159=(cj5*r20);
IkReal x8160=((1.0)*x8155);
IkReal x8161=((1.0)*x8154);
IkReal x8162=(sj5*x8154);
evalcond[0]=((((-1.0)*x8159*x8161))+((r21*x8162))+(((-1.0)*r22*x8160)));
evalcond[1]=(((r11*x8162))+(((-1.0)*r12*x8160))+(((-1.0)*x8156*x8161)));
evalcond[2]=((((-1.0)*r02*x8161))+(((-1.0)*x8157*x8160))+((x8155*x8158)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8160))+(((-1.0)*x8158*x8161))+((x8154*x8157)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8160))+((cj1*sj2))+((x8155*x8159))+(((-1.0)*r22*x8161)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8161))+(((-1.0)*r11*sj5*x8160))+((x8155*x8156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8163=((1.0)*cj5);
CheckValue<IkReal> x8164 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8164.valid){
continue;
}
CheckValue<IkReal> x8165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8163)))),-1);
if(!x8165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8164.value)+(((1.5707963267949)*(x8165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8166=IKsin(j4);
IkReal x8167=IKcos(j4);
IkReal x8168=(cj5*r10);
IkReal x8169=(r01*sj5);
IkReal x8170=(cj5*r00);
IkReal x8171=(cj5*r20);
IkReal x8172=((1.0)*x8167);
IkReal x8173=((1.0)*x8166);
IkReal x8174=(sj5*x8166);
evalcond[0]=((((-1.0)*x8171*x8173))+(((-1.0)*r22*x8172))+((r21*x8174)));
evalcond[1]=((((-1.0)*r12*x8172))+(((-1.0)*x8168*x8173))+((r11*x8174)));
evalcond[2]=((((-1.0)*x8169*x8172))+((x8167*x8170))+(((-1.0)*r02*x8173)));
evalcond[3]=((-1.0)+(((-1.0)*x8170*x8173))+(((-1.0)*r02*x8172))+((x8166*x8169)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8167*x8171))+(((-1.0)*r22*x8173))+(((-1.0)*r21*sj5*x8172)));
evalcond[5]=(((x8167*x8168))+(((-1.0)*r12*x8173))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8175=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8175.valid){
continue;
}
CheckValue<IkReal> x8176 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8175.value)))+(x8176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8177=IKsin(j4);
IkReal x8178=IKcos(j4);
IkReal x8179=(cj5*r10);
IkReal x8180=(r01*sj5);
IkReal x8181=(cj5*r00);
IkReal x8182=(cj5*r20);
IkReal x8183=((1.0)*x8178);
IkReal x8184=((1.0)*x8177);
IkReal x8185=(sj5*x8177);
evalcond[0]=((((-1.0)*r22*x8183))+((r21*x8185))+(((-1.0)*x8182*x8184)));
evalcond[1]=(((r11*x8185))+(((-1.0)*x8179*x8184))+(((-1.0)*r12*x8183)));
evalcond[2]=((((-1.0)*r02*x8184))+((x8178*x8181))+(((-1.0)*x8180*x8183)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8183))+((x8177*x8180))+(((-1.0)*x8181*x8184)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8184))+((cj1*sj2))+((x8178*x8182))+(((-1.0)*r21*sj5*x8183)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8184))+(((-1.0)*r11*sj5*x8183))+((x8178*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8186=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8186;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8187=((1.0)*cj5);
IkReal x8188=((((-1.0)*r21*x8187))+(((-1.0)*r20*sj5)));
j4eval[0]=x8188;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8187))+((r11*sj5))))));
j4eval[2]=IKsign(x8188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8189=cj5*cj5;
IkReal x8190=r01*r01;
IkReal x8191=(cj5*r00);
IkReal x8192=(r01*sj5);
IkReal x8193=(((x8189*(r00*r00)))+(((-1.0)*x8189*x8190))+(((-2.0)*x8191*x8192))+(r02*r02)+x8190);
j4eval[0]=x8193;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8192))+x8191))));
j4eval[2]=IKsign(x8193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8194=cj5*cj5;
IkReal x8195=r01*r01;
IkReal x8196=(r01*sj5);
IkReal x8197=(cj5*r00);
CheckValue<IkReal> x8198=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8196*x8197))+(((-1.0)*x8194*x8195))+(r02*r02)+x8195+((x8194*(r00*r00))))),-1);
if(!x8198.valid){
continue;
}
CheckValue<IkReal> x8199 = IKatan2WithCheck(IkReal(((((-1.0)*x8196))+x8197)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8198.value)))+(x8199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8200=IKsin(j4);
IkReal x8201=IKcos(j4);
IkReal x8202=(cj5*r10);
IkReal x8203=(r01*sj5);
IkReal x8204=(cj5*r00);
IkReal x8205=(cj5*r20);
IkReal x8206=((1.0)*x8201);
IkReal x8207=((1.0)*x8200);
IkReal x8208=(sj5*x8200);
evalcond[0]=((((-1.0)*x8205*x8207))+(((-1.0)*r22*x8206))+((r21*x8208)));
evalcond[1]=(((r11*x8208))+(((-1.0)*x8202*x8207))+(((-1.0)*r12*x8206)));
evalcond[2]=(((x8201*x8204))+(((-1.0)*r02*x8207))+(((-1.0)*x8203*x8206)));
evalcond[3]=((1.0)+(((-1.0)*x8204*x8207))+(((-1.0)*r02*x8206))+((x8200*x8203)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8201*x8205))+(((-1.0)*r21*sj5*x8206))+(((-1.0)*r22*x8207)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8201*x8202))+(((-1.0)*r12*x8207))+((cj1*cj2))+(((-1.0)*r11*sj5*x8206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8209=((1.0)*cj5);
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8209))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
CheckValue<IkReal> x8211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8209))+(((-1.0)*r20*sj5)))),-1);
if(!x8211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8210.value)+(((1.5707963267949)*(x8211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8212=IKsin(j4);
IkReal x8213=IKcos(j4);
IkReal x8214=(cj5*r10);
IkReal x8215=(r01*sj5);
IkReal x8216=(cj5*r00);
IkReal x8217=(cj5*r20);
IkReal x8218=((1.0)*x8213);
IkReal x8219=((1.0)*x8212);
IkReal x8220=(sj5*x8212);
evalcond[0]=((((-1.0)*r22*x8218))+((r21*x8220))+(((-1.0)*x8217*x8219)));
evalcond[1]=(((r11*x8220))+(((-1.0)*r12*x8218))+(((-1.0)*x8214*x8219)));
evalcond[2]=((((-1.0)*r02*x8219))+(((-1.0)*x8215*x8218))+((x8213*x8216)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8218))+(((-1.0)*x8216*x8219))+((x8212*x8215)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8218))+(((-1.0)*r22*x8219))+((x8213*x8217)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8219))+((cj1*cj2))+(((-1.0)*r11*sj5*x8218))+((x8213*x8214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8221 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8221.valid){
continue;
}
CheckValue<IkReal> x8222=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8221.value)+(((1.5707963267949)*(x8222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8223=IKsin(j4);
IkReal x8224=IKcos(j4);
IkReal x8225=(cj5*r10);
IkReal x8226=(r01*sj5);
IkReal x8227=(cj5*r00);
IkReal x8228=(cj5*r20);
IkReal x8229=((1.0)*x8224);
IkReal x8230=((1.0)*x8223);
IkReal x8231=(sj5*x8223);
evalcond[0]=((((-1.0)*x8228*x8230))+((r21*x8231))+(((-1.0)*r22*x8229)));
evalcond[1]=(((r11*x8231))+(((-1.0)*r12*x8229))+(((-1.0)*x8225*x8230)));
evalcond[2]=((((-1.0)*r02*x8230))+((x8224*x8227))+(((-1.0)*x8226*x8229)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8229))+((x8223*x8226))+(((-1.0)*x8227*x8230)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8224*x8228))+(((-1.0)*r22*x8230))+(((-1.0)*r21*sj5*x8229)));
evalcond[5]=((((-1.0)*r11*sj5*x8229))+(((-1.0)*sj1*sj2))+((x8224*x8225))+(((-1.0)*r12*x8230))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8232=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8232);
rxp1_1=(px*r21);
rxp1_2=(r11*x8232);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8233=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8233);
rxp1_1=(px*r21);
rxp1_2=(r11*x8233);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8234=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8234);
rxp1_1=(px*r21);
rxp1_2=(r11*x8234);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8237=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8237.valid){
continue;
}
IkReal x8235=x8237.value;
IkReal x8236=(sj0*x8235);
cj4array[0]=(((cj1*cj2*x8236))+(((-1.0)*sj1*sj2*x8236)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8238=IKsin(j4);
IkReal x8239=IKcos(j4);
IkReal x8240=(r21*sj5);
IkReal x8241=(cj5*r20);
IkReal x8242=((1.0)*x8238);
IkReal x8243=((1.0)*x8239);
evalcond[0]=((-1.0)*r02*x8238);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8243)));
evalcond[2]=((((-1.0)*x8241*x8242))+((x8238*x8240)));
evalcond[3]=((((-1.0)*cj5*r10*x8242))+((r11*sj5*x8238)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8240*x8243))+((cj1*sj2))+((x8239*x8241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8246=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8246.valid){
continue;
}
IkReal x8244=x8246.value;
IkReal x8245=((1.0)*x8244);
cj4array[0]=((((-1.0)*cj1*sj2*x8245))+(((-1.0)*cj2*sj1*x8245)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8247=IKsin(j4);
IkReal x8248=IKcos(j4);
IkReal x8249=(r11*sj5);
IkReal x8250=((1.0)*sj0);
IkReal x8251=((1.0)*x8248);
IkReal x8252=((1.0)*cj5*x8247);
evalcond[0]=((-1.0)*r02*x8247);
evalcond[1]=((((-1.0)*x8250))+(((-1.0)*r02*x8251)));
evalcond[2]=(((r21*sj5*x8247))+(((-1.0)*r20*x8252)));
evalcond[3]=((((-1.0)*r10*x8252))+((x8247*x8249)));
evalcond[4]=((((-1.0)*cj1*cj2*x8250))+(((-1.0)*x8249*x8251))+((cj5*r10*x8248))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8253=IKPowWithIntegerCheck(r02,-1);
if(!x8253.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8253.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8254=IKsin(j4);
IkReal x8255=IKcos(j4);
IkReal x8256=(cj5*x8255);
IkReal x8257=(sj5*x8254);
IkReal x8258=((1.0)*sj5*x8255);
IkReal x8259=((1.0)*cj5*x8254);
evalcond[0]=((-1.0)*r02*x8254);
evalcond[1]=(((r21*x8257))+(((-1.0)*r20*x8259)));
evalcond[2]=((((-1.0)*r10*x8259))+((r11*x8257)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8258))+((r20*x8256)));
evalcond[4]=(((r10*x8256))+(((-1.0)*r11*x8258))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8260=((1.0)*sj0);
IkReal x8261=((1.0)*cj0);
CheckValue<IkReal> x8262 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8260))+(((-1.0)*r02*x8261)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8261))+(((-1.0)*r11*sj5*x8260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8262.valid){
continue;
}
CheckValue<IkReal> x8263=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8262.value)+(((1.5707963267949)*(x8263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8264=IKsin(j4);
IkReal x8265=IKcos(j4);
IkReal x8266=(cj5*r10);
IkReal x8267=(sj1*sj2);
IkReal x8268=(r01*sj5);
IkReal x8269=(cj5*r00);
IkReal x8270=(cj5*r20);
IkReal x8271=((1.0)*x8265);
IkReal x8272=((1.0)*cj1*cj2);
IkReal x8273=((1.0)*x8264);
IkReal x8274=(sj5*x8264);
evalcond[0]=((((-1.0)*r22*x8271))+((r21*x8274))+(((-1.0)*x8270*x8273)));
evalcond[1]=(cj0+(((-1.0)*x8266*x8273))+((r11*x8274))+(((-1.0)*r12*x8271)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8269*x8273))+(((-1.0)*r02*x8271))+((x8264*x8268)));
evalcond[3]=(((cj2*sj1))+((x8265*x8270))+((cj1*sj2))+(((-1.0)*r22*x8273))+(((-1.0)*r21*sj5*x8271)));
evalcond[4]=(((x8265*x8269))+((cj0*x8267))+(((-1.0)*cj0*x8272))+(((-1.0)*x8268*x8271))+(((-1.0)*r02*x8273)));
evalcond[5]=(((x8265*x8266))+(((-1.0)*r11*sj5*x8271))+(((-1.0)*sj0*x8272))+((sj0*x8267))+(((-1.0)*r12*x8273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8275=((1.0)*cj5);
CheckValue<IkReal> x8276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8275)))),-1);
if(!x8276.valid){
continue;
}
CheckValue<IkReal> x8277 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8276.value)))+(x8277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8278=IKsin(j4);
IkReal x8279=IKcos(j4);
IkReal x8280=(cj5*r10);
IkReal x8281=(sj1*sj2);
IkReal x8282=(r01*sj5);
IkReal x8283=(cj5*r00);
IkReal x8284=(cj5*r20);
IkReal x8285=((1.0)*x8279);
IkReal x8286=((1.0)*cj1*cj2);
IkReal x8287=((1.0)*x8278);
IkReal x8288=(sj5*x8278);
evalcond[0]=(((r21*x8288))+(((-1.0)*r22*x8285))+(((-1.0)*x8284*x8287)));
evalcond[1]=((((-1.0)*r12*x8285))+cj0+(((-1.0)*x8280*x8287))+((r11*x8288)));
evalcond[2]=((((-1.0)*r02*x8285))+(((-1.0)*sj0))+(((-1.0)*x8283*x8287))+((x8278*x8282)));
evalcond[3]=(((cj2*sj1))+((x8279*x8284))+(((-1.0)*r21*sj5*x8285))+((cj1*sj2))+(((-1.0)*r22*x8287)));
evalcond[4]=((((-1.0)*r02*x8287))+((x8279*x8283))+(((-1.0)*cj0*x8286))+((cj0*x8281))+(((-1.0)*x8282*x8285)));
evalcond[5]=((((-1.0)*r12*x8287))+((x8279*x8280))+((sj0*x8281))+(((-1.0)*r11*sj5*x8285))+(((-1.0)*sj0*x8286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8289=((1.0)*cj5);
CheckValue<IkReal> x8290 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8289))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8290.valid){
continue;
}
CheckValue<IkReal> x8291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8289)))),-1);
if(!x8291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8290.value)+(((1.5707963267949)*(x8291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8292=IKsin(j4);
IkReal x8293=IKcos(j4);
IkReal x8294=(cj5*r10);
IkReal x8295=(sj1*sj2);
IkReal x8296=(r01*sj5);
IkReal x8297=(cj5*r00);
IkReal x8298=(cj5*r20);
IkReal x8299=((1.0)*x8293);
IkReal x8300=((1.0)*cj1*cj2);
IkReal x8301=((1.0)*x8292);
IkReal x8302=(sj5*x8292);
evalcond[0]=((((-1.0)*x8298*x8301))+((r21*x8302))+(((-1.0)*r22*x8299)));
evalcond[1]=((((-1.0)*r12*x8299))+cj0+((r11*x8302))+(((-1.0)*x8294*x8301)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8297*x8301))+((x8292*x8296))+(((-1.0)*r02*x8299)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8299))+(((-1.0)*r22*x8301))+((cj1*sj2))+((x8293*x8298)));
evalcond[4]=(((x8293*x8297))+((cj0*x8295))+(((-1.0)*r02*x8301))+(((-1.0)*cj0*x8300))+(((-1.0)*x8296*x8299)));
evalcond[5]=((((-1.0)*r12*x8301))+((sj0*x8295))+((x8293*x8294))+(((-1.0)*sj0*x8300))+(((-1.0)*r11*sj5*x8299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8303=cj5*cj5;
IkReal x8304=r21*r21;
IkReal x8305=(cj2*sj1);
IkReal x8306=(cj1*sj2);
IkReal x8307=(r21*sj5);
IkReal x8308=((1.0)*cj5*r20);
CheckValue<IkReal> x8309=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8303*x8304))+x8304+(r22*r22)+(((-2.0)*cj5*r20*x8307))+((x8303*(r20*r20))))),-1);
if(!x8309.valid){
continue;
}
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal((((r22*x8306))+((r22*x8305)))),IkReal((((x8306*x8307))+((x8305*x8307))+(((-1.0)*x8305*x8308))+(((-1.0)*x8306*x8308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8309.value)))+(x8310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8311=IKsin(j4);
IkReal x8312=IKcos(j4);
IkReal x8313=(r21*sj5);
IkReal x8314=(cj5*r20);
IkReal x8315=((1.0)*x8312);
IkReal x8316=((1.0)*x8311);
evalcond[0]=(((x8311*x8313))+(((-1.0)*r22*x8315))+(((-1.0)*x8314*x8316)));
evalcond[1]=((((-1.0)*x8313*x8315))+((cj2*sj1))+((x8312*x8314))+((cj1*sj2))+(((-1.0)*r22*x8316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8317=(cj5*sj4);
IkReal x8318=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8318))+(((-1.0)*r00*x8317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8317))+(((-1.0)*r11*x8318))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8318))+(((-1.0)*r00*x8317))))+IKsqr((((r10*x8317))+(((-1.0)*r11*x8318))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8318))+(((-1.0)*r00*x8317))), (((r10*x8317))+(((-1.0)*r11*x8318))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8319=IKcos(j0);
IkReal x8320=IKsin(j0);
IkReal x8321=(cj4*cj5);
IkReal x8322=((1.0)*cj1);
IkReal x8323=((0.39225)*sj1);
IkReal x8324=(r11*sj5);
IkReal x8325=(cj5*r11);
IkReal x8326=((1.0)*sj5);
IkReal x8327=((1.0)*sj4);
IkReal x8328=((1.0)*sj1);
IkReal x8329=((0.09465)*sj5);
IkReal x8330=(cj5*r01);
IkReal x8331=((0.425)*cj1);
IkReal x8332=((1.0)*cj4);
IkReal x8333=(sj2*x8319);
IkReal x8334=(sj2*x8320);
IkReal x8335=((0.39225)*cj1*cj2);
IkReal x8336=(cj2*x8319);
IkReal x8337=(cj2*x8320);
evalcond[0]=(x8319+(((-1.0)*r12*x8332))+((sj4*x8324))+(((-1.0)*cj5*r10*x8327)));
evalcond[1]=((((-1.0)*cj5*r00*x8327))+((r01*sj4*sj5))+(((-1.0)*r02*x8332))+(((-1.0)*x8320)));
evalcond[2]=((((-1.0)*r00*x8326))+(((-1.0)*x8322*x8333))+(((-1.0)*x8328*x8336))+(((-1.0)*x8330)));
evalcond[3]=((((-1.0)*x8322*x8334))+(((-1.0)*r10*x8326))+(((-1.0)*x8325))+(((-1.0)*x8328*x8337)));
evalcond[4]=(((sj1*x8333))+(((-1.0)*x8322*x8336))+(((-1.0)*cj4*r01*x8326))+((r00*x8321))+(((-1.0)*r02*x8327)));
evalcond[5]=(((sj1*x8334))+((r10*x8321))+(((-1.0)*x8322*x8337))+(((-1.0)*x8324*x8332))+(((-1.0)*r12*x8327)));
evalcond[6]=((((-1.0)*r00*x8329))+(((-0.10915)*x8320))+(((-0.09465)*x8330))+(((-1.0)*px))+(((-1.0)*x8323*x8333))+((x8319*x8331))+((x8319*x8335)));
evalcond[7]=(((x8320*x8331))+((x8320*x8335))+(((0.10915)*x8319))+(((-0.09465)*x8325))+(((-1.0)*py))+(((-1.0)*r10*x8329))+(((-1.0)*x8323*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8338 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8338.valid){
continue;
}
CheckValue<IkReal> x8339=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8339.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8338.value)+(((1.5707963267949)*(x8339.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8340=IKcos(j0);
IkReal x8341=IKsin(j0);
IkReal x8342=((1.0)*cj1);
IkReal x8343=((0.39225)*sj1);
IkReal x8344=(cj5*r11);
IkReal x8345=((1.0)*sj5);
IkReal x8346=(cj5*r01);
IkReal x8347=((1.0)*sj1);
IkReal x8348=((0.09465)*sj5);
IkReal x8349=((0.39225)*cj1);
IkReal x8350=((0.425)*cj1);
IkReal x8351=(sj2*x8340);
IkReal x8352=(sj2*x8341);
IkReal x8353=(cj2*x8340);
IkReal x8354=(cj2*x8341);
evalcond[0]=((((-1.0)*x8342*x8351))+(((-1.0)*x8347*x8353))+(((-1.0)*x8346))+(((-1.0)*r00*x8345)));
evalcond[1]=((((-1.0)*x8342*x8352))+(((-1.0)*x8347*x8354))+(((-1.0)*x8344))+(((-1.0)*r10*x8345)));
evalcond[2]=((((-0.09465)*x8346))+(((-1.0)*x8343*x8351))+((x8340*x8350))+(((-0.10915)*x8341))+(((-1.0)*px))+(((-1.0)*r00*x8348))+((x8349*x8353)));
evalcond[3]=((((0.10915)*x8340))+(((-0.09465)*x8344))+(((-1.0)*x8343*x8352))+((x8341*x8350))+(((-1.0)*py))+(((-1.0)*r10*x8348))+((x8349*x8354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8355=((1.0)*cj5);
IkReal x8356=((((-1.0)*r01*x8355))+(((-1.0)*r00*sj5)));
j4eval[0]=x8356;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8355))))));
j4eval[2]=IKsign(x8356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8357=((1.0)*cj5);
IkReal x8358=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8357)));
j4eval[0]=x8358;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8357))))));
j4eval[2]=IKsign(x8358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8359=((1.0)*sj0);
IkReal x8360=((1.0)*cj0);
IkReal x8361=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8361;
j4eval[1]=((IKabs(((((-1.0)*r12*x8359))+(((-1.0)*r02*x8360)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8360))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8359))))));
j4eval[2]=IKsign(x8361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8362=((-1.0)*r20);
IkReal x8364 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8364)==0){
continue;
}
IkReal x8363=pow(x8364,-0.5);
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8362),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8365.value));
IkReal gconst133=(r21*x8363);
IkReal gconst134=(x8362*x8363);
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8366.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8367=((-1.0)*r20);
IkReal x8368=x8363;
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8367),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
IkReal x8369=((-1.0)*(x8370.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8369;
IkReal gconst132=x8369;
IkReal gconst133=(r21*x8368);
IkReal gconst134=(x8367*x8368);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8371=((-1.0)*r20);
IkReal x8372=x8363;
CheckValue<IkReal> x8374 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8371),IKFAST_ATAN2_MAGTHRESH);
if(!x8374.valid){
continue;
}
IkReal x8373=((-1.0)*(x8374.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8373;
IkReal gconst132=x8373;
IkReal gconst133=(r21*x8372);
IkReal gconst134=(x8371*x8372);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8375=((-1.0)*r20);
IkReal x8376=x8363;
CheckValue<IkReal> x8378 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8375),IKFAST_ATAN2_MAGTHRESH);
if(!x8378.valid){
continue;
}
IkReal x8377=((-1.0)*(x8378.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8377;
IkReal gconst132=x8377;
IkReal gconst133=(r21*x8376);
IkReal gconst134=(x8375*x8376);
IkReal x8379=r22*r22;
CheckValue<IkReal> x8382=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8379))),-1);
if(!x8382.valid){
continue;
}
IkReal x8380=x8382.value;
IkReal x8381=(x8379+((x8380*(r21*r21*r21*r21)))+((x8380*(r20*r20*r20*r20)))+(((2.0)*x8380*(r20*r20)*(r21*r21))));
j4eval[0]=x8381;
j4eval[1]=IKsign(x8381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8383=(gconst133*r21);
IkReal x8384=(cj1*sj2);
IkReal x8385=(gconst134*r20);
IkReal x8386=(cj2*sj1);
CheckValue<IkReal> x8387 = IKatan2WithCheck(IkReal((((r22*x8386))+((r22*x8384)))),IkReal(((((-1.0)*x8385*x8386))+(((-1.0)*x8384*x8385))+((x8383*x8384))+((x8383*x8386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8383*x8385))+(x8383*x8383)+(x8385*x8385))),-1);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8387.value)+(((1.5707963267949)*(x8388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKsin(j4);
IkReal x8390=IKcos(j4);
IkReal x8391=(sj1*sj2);
IkReal x8392=(gconst133*r11);
IkReal x8393=(gconst133*r21);
IkReal x8394=(gconst133*r01);
IkReal x8395=((1.0)*x8390);
IkReal x8396=(gconst134*x8390);
IkReal x8397=((1.0)*x8389);
IkReal x8398=((1.0)*cj1*cj2);
evalcond[0]=(((x8389*x8393))+(((-1.0)*r22*x8395))+(((-1.0)*gconst134*r20*x8397)));
evalcond[1]=(cj0+((x8389*x8392))+(((-1.0)*gconst134*r10*x8397))+(((-1.0)*r12*x8395)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8395))+((x8389*x8394))+(((-1.0)*gconst134*r00*x8397)));
evalcond[3]=(((r20*x8396))+((cj2*sj1))+(((-1.0)*x8393*x8395))+((cj1*sj2))+(((-1.0)*r22*x8397)));
evalcond[4]=((((-1.0)*r02*x8397))+(((-1.0)*cj0*x8398))+(((-1.0)*x8394*x8395))+((r00*x8396))+((cj0*x8391)));
evalcond[5]=((((-1.0)*sj0*x8398))+((sj0*x8391))+(((-1.0)*x8392*x8395))+((r10*x8396))+(((-1.0)*r12*x8397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8399=((1.0)*gconst134);
CheckValue<IkReal> x8400 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8399))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8400.valid){
continue;
}
CheckValue<IkReal> x8401=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8399)))),-1);
if(!x8401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8400.value)+(((1.5707963267949)*(x8401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8402=IKsin(j4);
IkReal x8403=IKcos(j4);
IkReal x8404=(sj1*sj2);
IkReal x8405=(gconst133*r11);
IkReal x8406=(gconst133*r21);
IkReal x8407=(gconst133*r01);
IkReal x8408=((1.0)*x8403);
IkReal x8409=(gconst134*x8403);
IkReal x8410=((1.0)*x8402);
IkReal x8411=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8410))+(((-1.0)*r22*x8408))+((x8402*x8406)));
evalcond[1]=((((-1.0)*gconst134*r10*x8410))+cj0+(((-1.0)*r12*x8408))+((x8402*x8405)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8408))+(((-1.0)*gconst134*r00*x8410))+((x8402*x8407)));
evalcond[3]=((((-1.0)*x8406*x8408))+((cj2*sj1))+((cj1*sj2))+((r20*x8409))+(((-1.0)*r22*x8410)));
evalcond[4]=((((-1.0)*x8407*x8408))+((r00*x8409))+(((-1.0)*cj0*x8411))+(((-1.0)*r02*x8410))+((cj0*x8404)));
evalcond[5]=((((-1.0)*r12*x8410))+((sj0*x8404))+(((-1.0)*x8405*x8408))+(((-1.0)*sj0*x8411))+((r10*x8409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8412=((1.0)*gconst134);
CheckValue<IkReal> x8413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8412)))),-1);
if(!x8413.valid){
continue;
}
CheckValue<IkReal> x8414 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8412))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8413.value)))+(x8414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8415=IKsin(j4);
IkReal x8416=IKcos(j4);
IkReal x8417=(sj1*sj2);
IkReal x8418=(gconst133*r11);
IkReal x8419=(gconst133*r21);
IkReal x8420=(gconst133*r01);
IkReal x8421=((1.0)*x8416);
IkReal x8422=(gconst134*x8416);
IkReal x8423=((1.0)*x8415);
IkReal x8424=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8421))+(((-1.0)*gconst134*r20*x8423))+((x8415*x8419)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x8423))+(((-1.0)*r12*x8421))+((x8415*x8418)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8423))+((x8415*x8420))+(((-1.0)*r02*x8421)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8422))+(((-1.0)*r22*x8423))+(((-1.0)*x8419*x8421)));
evalcond[4]=((((-1.0)*cj0*x8424))+(((-1.0)*x8420*x8421))+(((-1.0)*r02*x8423))+((cj0*x8417))+((r00*x8422)));
evalcond[5]=(((r10*x8422))+(((-1.0)*x8418*x8421))+(((-1.0)*sj0*x8424))+((sj0*x8417))+(((-1.0)*r12*x8423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8425=((-1.0)*r21);
IkReal x8427 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8427)==0){
continue;
}
IkReal x8426=pow(x8427,-0.5);
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal(x8425),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8428.value))));
IkReal gconst136=(x8425*x8426);
IkReal gconst137=((1.0)*r20*x8426);
CheckValue<IkReal> x8429 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8429.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8429.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8430=((-1.0)*r21);
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal(x8430),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
IkReal x8431=((1.0)*(x8433.value));
IkReal x8432=x8426;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8431)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8431)));
IkReal gconst136=(x8430*x8432);
IkReal gconst137=((1.0)*r20*x8432);
IkReal x8434=r22*r22;
IkReal x8435=((1.0)*x8434);
CheckValue<IkReal> x8439=IKPowWithIntegerCheck(((-1.0)+x8434),-1);
if(!x8439.valid){
continue;
}
IkReal x8436=x8439.value;
if((((1.0)+(((-1.0)*x8435)))) < -0.00001)
continue;
IkReal x8437=IKsqrt(((1.0)+(((-1.0)*x8435))));
IkReal x8438=(cj0*x8436*x8437);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x8438+(((-1.0)*x8435*x8438))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8440=((-1.0)*r21);
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(x8440),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
IkReal x8441=((1.0)*(x8443.value));
IkReal x8442=x8426;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8441)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8441)));
IkReal gconst136=(x8440*x8442);
IkReal gconst137=((1.0)*r20*x8442);
IkReal x8444=r22*r22;
IkReal x8445=((1.0)*x8444);
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(((-1.0)+x8444),-1);
if(!x8449.valid){
continue;
}
IkReal x8446=x8449.value;
if((((1.0)+(((-1.0)*x8445)))) < -0.00001)
continue;
IkReal x8447=IKsqrt(((1.0)+(((-1.0)*x8445))));
IkReal x8448=(sj0*x8446*x8447);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8448+(((-1.0)*x8445*x8448))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8450=((-1.0)*r21);
CheckValue<IkReal> x8453 = IKatan2WithCheck(IkReal(x8450),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8453.valid){
continue;
}
IkReal x8451=((1.0)*(x8453.value));
IkReal x8452=x8426;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8451)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8451)));
IkReal gconst136=(x8450*x8452);
IkReal gconst137=((1.0)*r20*x8452);
IkReal x8454=r22*r22;
IkReal x8455=(r12*sj0);
IkReal x8456=(cj0*r02);
CheckValue<IkReal> x8460=IKPowWithIntegerCheck(((-1.0)+x8454),-1);
if(!x8460.valid){
continue;
}
IkReal x8457=x8460.value;
if((((1.0)+(((-1.0)*x8454)))) < -0.00001)
continue;
IkReal x8458=IKsqrt(((1.0)+(((-1.0)*x8454))));
IkReal x8459=(r22*x8457*x8458);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8455*x8459))+((x8456*x8459)))))+(IKabs(((((-1.0)*x8456))+(((-1.0)*x8455))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8461=((1.0)*sj0);
IkReal x8462=((1.0)*cj0);
CheckValue<IkReal> x8463=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8463.valid){
continue;
}
CheckValue<IkReal> x8464 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8462))+(((-1.0)*r12*x8461)))),IkReal(((((-1.0)*gconst136*r11*x8461))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x8462))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8463.value)))+(x8464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8465=IKsin(j4);
IkReal x8466=IKcos(j4);
IkReal x8467=(gconst136*r01);
IkReal x8468=(gconst137*r10);
IkReal x8469=(sj1*sj2);
IkReal x8470=(gconst137*r20);
IkReal x8471=(gconst136*r11);
IkReal x8472=(gconst136*r21);
IkReal x8473=(gconst137*r00);
IkReal x8474=((1.0)*x8466);
IkReal x8475=((1.0)*cj1*cj2);
IkReal x8476=((1.0)*x8465);
evalcond[0]=((((-1.0)*x8470*x8476))+(((-1.0)*r22*x8474))+((x8465*x8472)));
evalcond[1]=(cj0+(((-1.0)*x8468*x8476))+(((-1.0)*r12*x8474))+((x8465*x8471)));
evalcond[2]=(((x8465*x8467))+(((-1.0)*sj0))+(((-1.0)*x8473*x8476))+(((-1.0)*r02*x8474)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8472*x8474))+(((-1.0)*r22*x8476))+((x8466*x8470)));
evalcond[4]=((((-1.0)*x8467*x8474))+(((-1.0)*r02*x8476))+((cj0*x8469))+(((-1.0)*cj0*x8475))+((x8466*x8473)));
evalcond[5]=((((-1.0)*x8471*x8474))+(((-1.0)*sj0*x8475))+(((-1.0)*r12*x8476))+((sj0*x8469))+((x8466*x8468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8477=((1.0)*gconst137);
CheckValue<IkReal> x8478=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8477)))),-1);
if(!x8478.valid){
continue;
}
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8477))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8478.value)))+(x8479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8480=IKsin(j4);
IkReal x8481=IKcos(j4);
IkReal x8482=(gconst136*r01);
IkReal x8483=(gconst137*r10);
IkReal x8484=(sj1*sj2);
IkReal x8485=(gconst137*r20);
IkReal x8486=(gconst136*r11);
IkReal x8487=(gconst136*r21);
IkReal x8488=(gconst137*r00);
IkReal x8489=((1.0)*x8481);
IkReal x8490=((1.0)*cj1*cj2);
IkReal x8491=((1.0)*x8480);
evalcond[0]=(((x8480*x8487))+(((-1.0)*r22*x8489))+(((-1.0)*x8485*x8491)));
evalcond[1]=(cj0+((x8480*x8486))+(((-1.0)*x8483*x8491))+(((-1.0)*r12*x8489)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8489))+((x8480*x8482))+(((-1.0)*x8488*x8491)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8487*x8489))+((cj1*sj2))+(((-1.0)*r22*x8491))+((x8481*x8485)));
evalcond[4]=(((cj0*x8484))+(((-1.0)*cj0*x8490))+(((-1.0)*r02*x8491))+(((-1.0)*x8482*x8489))+((x8481*x8488)));
evalcond[5]=((((-1.0)*sj0*x8490))+((sj0*x8484))+((x8481*x8483))+(((-1.0)*x8486*x8489))+(((-1.0)*r12*x8491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8492=((1.0)*gconst137);
CheckValue<IkReal> x8493=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8492)))),-1);
if(!x8493.valid){
continue;
}
CheckValue<IkReal> x8494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8492))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8493.value)))+(x8494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8495=IKsin(j4);
IkReal x8496=IKcos(j4);
IkReal x8497=(gconst136*r01);
IkReal x8498=(gconst137*r10);
IkReal x8499=(sj1*sj2);
IkReal x8500=(gconst137*r20);
IkReal x8501=(gconst136*r11);
IkReal x8502=(gconst136*r21);
IkReal x8503=(gconst137*r00);
IkReal x8504=((1.0)*x8496);
IkReal x8505=((1.0)*cj1*cj2);
IkReal x8506=((1.0)*x8495);
evalcond[0]=((((-1.0)*r22*x8504))+(((-1.0)*x8500*x8506))+((x8495*x8502)));
evalcond[1]=((((-1.0)*x8498*x8506))+cj0+(((-1.0)*r12*x8504))+((x8495*x8501)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8503*x8506))+((x8495*x8497))+(((-1.0)*r02*x8504)));
evalcond[3]=(((cj2*sj1))+((x8496*x8500))+((cj1*sj2))+(((-1.0)*r22*x8506))+(((-1.0)*x8502*x8504)));
evalcond[4]=(((x8496*x8503))+(((-1.0)*x8497*x8504))+(((-1.0)*r02*x8506))+(((-1.0)*cj0*x8505))+((cj0*x8499)));
evalcond[5]=(((sj0*x8499))+(((-1.0)*x8501*x8504))+(((-1.0)*r12*x8506))+((x8496*x8498))+(((-1.0)*sj0*x8505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8507=((-1.0)*r10);
IkReal x8509 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8509)==0){
continue;
}
IkReal x8508=pow(x8509,-0.5);
CheckValue<IkReal> x8510 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8507),IKFAST_ATAN2_MAGTHRESH);
if(!x8510.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8510.value));
IkReal gconst139=(r11*x8508);
IkReal gconst140=(x8507*x8508);
CheckValue<IkReal> x8511 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8511.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8511.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8512=((-1.0)*r10);
IkReal x8513=x8508;
CheckValue<IkReal> x8515 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8512),IKFAST_ATAN2_MAGTHRESH);
if(!x8515.valid){
continue;
}
IkReal x8514=((-1.0)*(x8515.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8514;
IkReal gconst138=x8514;
IkReal gconst139=(r11*x8513);
IkReal gconst140=(x8512*x8513);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8516=((1.0)*sj0);
IkReal x8517=((1.0)*gconst139);
CheckValue<IkReal> x8518=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8517)))),-1);
if(!x8518.valid){
continue;
}
CheckValue<IkReal> x8519 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8516)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8517))+(((-1.0)*gconst139*r11*x8516))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8518.value)))+(x8519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8520=IKsin(j4);
IkReal x8521=IKcos(j4);
IkReal x8522=(gconst140*r00);
IkReal x8523=(sj1*sj2);
IkReal x8524=(gconst139*r11);
IkReal x8525=(gconst139*r01);
IkReal x8526=(gconst139*r21);
IkReal x8527=((1.0)*x8521);
IkReal x8528=((1.0)*x8520);
IkReal x8529=((1.0)*cj1*cj2);
IkReal x8530=(gconst140*x8521);
evalcond[0]=(((x8520*x8526))+(((-1.0)*r22*x8527))+(((-1.0)*gconst140*r20*x8528)));
evalcond[1]=(cj0+((x8520*x8524))+(((-1.0)*gconst140*r10*x8528))+(((-1.0)*r12*x8527)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8527))+((x8520*x8525))+(((-1.0)*x8522*x8528)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8526*x8527))+((r20*x8530))+(((-1.0)*r22*x8528)));
evalcond[4]=(((x8521*x8522))+(((-1.0)*r02*x8528))+(((-1.0)*cj0*x8529))+(((-1.0)*x8525*x8527))+((cj0*x8523)));
evalcond[5]=(((sj0*x8523))+((r10*x8530))+(((-1.0)*sj0*x8529))+(((-1.0)*x8524*x8527))+(((-1.0)*r12*x8528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8531=((1.0)*gconst140);
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8531))+(((-1.0)*gconst139*r00)))),-1);
if(!x8532.valid){
continue;
}
CheckValue<IkReal> x8533 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8531))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8532.value)))+(x8533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8534=IKsin(j4);
IkReal x8535=IKcos(j4);
IkReal x8536=(gconst140*r00);
IkReal x8537=(sj1*sj2);
IkReal x8538=(gconst139*r11);
IkReal x8539=(gconst139*r01);
IkReal x8540=(gconst139*r21);
IkReal x8541=((1.0)*x8535);
IkReal x8542=((1.0)*x8534);
IkReal x8543=((1.0)*cj1*cj2);
IkReal x8544=(gconst140*x8535);
evalcond[0]=(((x8534*x8540))+(((-1.0)*r22*x8541))+(((-1.0)*gconst140*r20*x8542)));
evalcond[1]=(cj0+((x8534*x8538))+(((-1.0)*r12*x8541))+(((-1.0)*gconst140*r10*x8542)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8536*x8542))+(((-1.0)*r02*x8541))+((x8534*x8539)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8540*x8541))+((cj1*sj2))+(((-1.0)*r22*x8542))+((r20*x8544)));
evalcond[4]=((((-1.0)*x8539*x8541))+(((-1.0)*r02*x8542))+((x8535*x8536))+(((-1.0)*cj0*x8543))+((cj0*x8537)));
evalcond[5]=((((-1.0)*sj0*x8543))+((r10*x8544))+(((-1.0)*r12*x8542))+((sj0*x8537))+(((-1.0)*x8538*x8541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8545=((-1.0)*r11);
IkReal x8547 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8547)==0){
continue;
}
IkReal x8546=pow(x8547,-0.5);
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal(x8545),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8548.value))));
IkReal gconst142=(x8545*x8546);
IkReal gconst143=((1.0)*r10*x8546);
CheckValue<IkReal> x8549 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8549.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8549.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8550=((-1.0)*r11);
CheckValue<IkReal> x8553 = IKatan2WithCheck(IkReal(x8550),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8553.valid){
continue;
}
IkReal x8551=((1.0)*(x8553.value));
IkReal x8552=x8546;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8551)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8551)));
IkReal gconst142=(x8550*x8552);
IkReal gconst143=((1.0)*r10*x8552);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8554=((-1.0)*r11);
CheckValue<IkReal> x8557 = IKatan2WithCheck(IkReal(x8554),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8557.valid){
continue;
}
IkReal x8555=((1.0)*(x8557.value));
IkReal x8556=x8546;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8555)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8555)));
IkReal gconst142=(x8554*x8556);
IkReal gconst143=((1.0)*r10*x8556);
IkReal x8558=r12*r12;
IkReal x8559=((1.0)*sj0);
IkReal x8560=(cj0*r02);
IkReal x8561=x8546;
j4eval[0]=((IKabs(((((-1.0)*r12*x8559))+(((-1.0)*x8560)))))+(IKabs(((((-1.0)*x8559*x8561))+((r12*x8560*x8561))+((sj0*x8558*x8561))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8562=((-1.0)*r11);
CheckValue<IkReal> x8565 = IKatan2WithCheck(IkReal(x8562),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8565.valid){
continue;
}
IkReal x8563=((1.0)*(x8565.value));
IkReal x8564=x8546;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8563)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8563)));
IkReal gconst142=(x8562*x8564);
IkReal gconst143=((1.0)*r10*x8564);
IkReal x8566=r12*r12;
IkReal x8567=(cj1*r22*sj2);
IkReal x8568=(cj2*r22*sj1);
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(((-1.0)+x8566),-1);
if(!x8572.valid){
continue;
}
IkReal x8569=x8572.value;
if((((1.0)+(((-1.0)*x8566)))) < -0.00001)
continue;
IkReal x8570=IKsqrt(((1.0)+(((-1.0)*x8566))));
IkReal x8571=((1.0)*r12*x8569*x8570);
j4eval[0]=((IKabs(((((-1.0)*x8568*x8571))+(((-1.0)*x8567*x8571)))))+(IKabs((x8567+x8568))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8573=(gconst142*r21);
IkReal x8574=(cj1*sj2);
IkReal x8575=(cj2*sj1);
IkReal x8576=(gconst143*r20);
CheckValue<IkReal> x8577 = IKatan2WithCheck(IkReal((((r22*x8574))+((r22*x8575)))),IkReal(((((-1.0)*x8574*x8576))+((x8573*x8574))+((x8573*x8575))+(((-1.0)*x8575*x8576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8577.valid){
continue;
}
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8573*x8576))+(r22*r22)+(x8576*x8576)+(x8573*x8573))),-1);
if(!x8578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8577.value)+(((1.5707963267949)*(x8578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8579=IKsin(j4);
IkReal x8580=IKcos(j4);
IkReal x8581=(sj1*sj2);
IkReal x8582=(gconst143*r20);
IkReal x8583=((1.0)*x8580);
IkReal x8584=((1.0)*cj1*cj2);
IkReal x8585=((1.0)*x8579);
IkReal x8586=(gconst142*x8579);
IkReal x8587=(gconst143*x8580);
evalcond[0]=((((-1.0)*r22*x8583))+(((-1.0)*x8582*x8585))+((r21*x8586)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8585))+((r11*x8586))+(((-1.0)*r12*x8583)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8583))+((r01*x8586))+(((-1.0)*gconst143*r00*x8585)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8585))+((cj1*sj2))+((x8580*x8582))+(((-1.0)*gconst142*r21*x8583)));
evalcond[4]=((((-1.0)*r02*x8585))+((r00*x8587))+(((-1.0)*cj0*x8584))+((cj0*x8581))+(((-1.0)*gconst142*r01*x8583)));
evalcond[5]=(((r10*x8587))+((sj0*x8581))+(((-1.0)*gconst142*r11*x8583))+(((-1.0)*r12*x8585))+(((-1.0)*sj0*x8584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8588=((1.0)*sj0);
IkReal x8589=((1.0)*gconst142);
CheckValue<IkReal> x8590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8589))+(((-1.0)*gconst143*r21)))),-1);
if(!x8590.valid){
continue;
}
CheckValue<IkReal> x8591 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8588)))),IkReal(((((-1.0)*cj0*r01*x8589))+((cj0*gconst143*r00))+(((-1.0)*gconst142*r11*x8588))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8590.value)))+(x8591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8592=IKsin(j4);
IkReal x8593=IKcos(j4);
IkReal x8594=(sj1*sj2);
IkReal x8595=(gconst143*r20);
IkReal x8596=((1.0)*x8593);
IkReal x8597=((1.0)*cj1*cj2);
IkReal x8598=((1.0)*x8592);
IkReal x8599=(gconst142*x8592);
IkReal x8600=(gconst143*x8593);
evalcond[0]=((((-1.0)*r22*x8596))+(((-1.0)*x8595*x8598))+((r21*x8599)));
evalcond[1]=(cj0+(((-1.0)*r12*x8596))+(((-1.0)*gconst143*r10*x8598))+((r11*x8599)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8598))+(((-1.0)*r02*x8596))+((r01*x8599)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8598))+((cj1*sj2))+((x8593*x8595))+(((-1.0)*gconst142*r21*x8596)));
evalcond[4]=((((-1.0)*gconst142*r01*x8596))+(((-1.0)*r02*x8598))+((r00*x8600))+(((-1.0)*cj0*x8597))+((cj0*x8594)));
evalcond[5]=(((sj0*x8594))+(((-1.0)*sj0*x8597))+(((-1.0)*r12*x8598))+(((-1.0)*gconst142*r11*x8596))+((r10*x8600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8601=((1.0)*gconst143);
CheckValue<IkReal> x8602 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8601))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8602.valid){
continue;
}
CheckValue<IkReal> x8603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8601))+(((-1.0)*gconst142*r00)))),-1);
if(!x8603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8602.value)+(((1.5707963267949)*(x8603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8604=IKsin(j4);
IkReal x8605=IKcos(j4);
IkReal x8606=(sj1*sj2);
IkReal x8607=(gconst143*r20);
IkReal x8608=((1.0)*x8605);
IkReal x8609=((1.0)*cj1*cj2);
IkReal x8610=((1.0)*x8604);
IkReal x8611=(gconst142*x8604);
IkReal x8612=(gconst143*x8605);
evalcond[0]=((((-1.0)*x8607*x8610))+(((-1.0)*r22*x8608))+((r21*x8611)));
evalcond[1]=(cj0+(((-1.0)*r12*x8608))+((r11*x8611))+(((-1.0)*gconst143*r10*x8610)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8608))+((r01*x8611))+(((-1.0)*gconst143*r00*x8610)));
evalcond[3]=((((-1.0)*gconst142*r21*x8608))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8610))+((x8605*x8607)));
evalcond[4]=((((-1.0)*cj0*x8609))+(((-1.0)*r02*x8610))+((r00*x8612))+(((-1.0)*gconst142*r01*x8608))+((cj0*x8606)));
evalcond[5]=((((-1.0)*gconst142*r11*x8608))+((r10*x8612))+(((-1.0)*r12*x8610))+(((-1.0)*sj0*x8609))+((sj0*x8606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8613=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8613;
j4eval[1]=IKsign(x8613);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8614=((1.0)*cj5);
IkReal x8615=((((-1.0)*r01*x8614))+(((-1.0)*r00*sj5)));
j4eval[0]=x8615;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8614))))));
j4eval[2]=IKsign(x8615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8616=cj5*cj5;
IkReal x8617=r11*r11;
IkReal x8618=(r11*sj5);
IkReal x8619=(cj5*r10);
IkReal x8620=((r12*r12)+x8617+((x8616*(r10*r10)))+(((-1.0)*x8616*x8617))+(((-2.0)*x8618*x8619)));
j4eval[0]=x8620;
j4eval[1]=IKsign(x8620);
j4eval[2]=((IKabs(r12))+(IKabs((x8619+(((-1.0)*x8618))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8621=cj5*cj5;
IkReal x8622=r11*r11;
IkReal x8623=(cj5*r10);
IkReal x8624=(r11*sj5);
CheckValue<IkReal> x8625=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8622+(((-1.0)*x8621*x8622))+((x8621*(r10*r10)))+(((-2.0)*x8623*x8624)))),-1);
if(!x8625.valid){
continue;
}
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(((((-1.0)*x8624))+x8623)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8625.value)))+(x8626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8627=IKsin(j4);
IkReal x8628=IKcos(j4);
IkReal x8629=(cj5*r10);
IkReal x8630=(r01*sj5);
IkReal x8631=(cj5*r00);
IkReal x8632=(cj5*r20);
IkReal x8633=((1.0)*x8628);
IkReal x8634=((1.0)*x8627);
IkReal x8635=(sj5*x8627);
evalcond[0]=(((r21*x8635))+(((-1.0)*x8632*x8634))+(((-1.0)*r22*x8633)));
evalcond[1]=(((x8627*x8630))+(((-1.0)*r02*x8633))+(((-1.0)*x8631*x8634)));
evalcond[2]=((((-1.0)*r12*x8634))+((x8628*x8629))+(((-1.0)*r11*sj5*x8633)));
evalcond[3]=((1.0)+(((-1.0)*x8629*x8634))+(((-1.0)*r12*x8633))+((r11*x8635)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8628*x8632))+(((-1.0)*r21*sj5*x8633))+(((-1.0)*r22*x8634)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8628*x8631))+(((-1.0)*x8630*x8633))+(((-1.0)*r02*x8634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8636=((1.0)*cj5);
CheckValue<IkReal> x8637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8636))+(((-1.0)*r00*sj5)))),-1);
if(!x8637.valid){
continue;
}
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8637.value)))+(x8638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8639=IKsin(j4);
IkReal x8640=IKcos(j4);
IkReal x8641=(cj5*r10);
IkReal x8642=(r01*sj5);
IkReal x8643=(cj5*r00);
IkReal x8644=(cj5*r20);
IkReal x8645=((1.0)*x8640);
IkReal x8646=((1.0)*x8639);
IkReal x8647=(sj5*x8639);
evalcond[0]=((((-1.0)*x8644*x8646))+(((-1.0)*r22*x8645))+((r21*x8647)));
evalcond[1]=((((-1.0)*x8643*x8646))+(((-1.0)*r02*x8645))+((x8639*x8642)));
evalcond[2]=(((x8640*x8641))+(((-1.0)*r11*sj5*x8645))+(((-1.0)*r12*x8646)));
evalcond[3]=((1.0)+((r11*x8647))+(((-1.0)*r12*x8645))+(((-1.0)*x8641*x8646)));
evalcond[4]=(((cj2*sj1))+((x8640*x8644))+((cj1*sj2))+(((-1.0)*r22*x8646))+(((-1.0)*r21*sj5*x8645)));
evalcond[5]=((((-1.0)*x8642*x8645))+((x8640*x8643))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8648=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8648.valid){
continue;
}
CheckValue<IkReal> x8649 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8648.value)))+(x8649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8650=IKsin(j4);
IkReal x8651=IKcos(j4);
IkReal x8652=(cj5*r10);
IkReal x8653=(r01*sj5);
IkReal x8654=(cj5*r00);
IkReal x8655=(cj5*r20);
IkReal x8656=((1.0)*x8651);
IkReal x8657=((1.0)*x8650);
IkReal x8658=(sj5*x8650);
evalcond[0]=(((r21*x8658))+(((-1.0)*x8655*x8657))+(((-1.0)*r22*x8656)));
evalcond[1]=((((-1.0)*x8654*x8657))+((x8650*x8653))+(((-1.0)*r02*x8656)));
evalcond[2]=((((-1.0)*r11*sj5*x8656))+(((-1.0)*r12*x8657))+((x8651*x8652)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8656))+(((-1.0)*x8652*x8657))+((r11*x8658)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8656))+((x8651*x8655))+(((-1.0)*r22*x8657)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8651*x8654))+(((-1.0)*x8653*x8656))+(((-1.0)*r02*x8657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8659=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8659;
j4eval[1]=IKsign(x8659);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8660=((1.0)*cj5);
IkReal x8661=((((-1.0)*r21*x8660))+(((-1.0)*r20*sj5)));
j4eval[0]=x8661;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8660))))));
j4eval[2]=IKsign(x8661);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8662=cj5*cj5;
IkReal x8663=r11*r11;
IkReal x8664=(cj5*r10);
IkReal x8665=(r11*sj5);
IkReal x8666=((((2.0)*x8664*x8665))+(((-1.0)*(r12*r12)))+((x8662*x8663))+(((-1.0)*x8663))+(((-1.0)*x8662*(r10*r10))));
j4eval[0]=x8666;
j4eval[1]=((IKabs(r12))+(IKabs((x8664+(((-1.0)*x8665))))));
j4eval[2]=IKsign(x8666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8667=cj5*cj5;
IkReal x8668=r11*r11;
IkReal x8669=(cj5*r10);
IkReal x8670=(r11*sj5);
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal((x8669+(((-1.0)*x8670)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
CheckValue<IkReal> x8672=IKPowWithIntegerCheck(IKsign(((((2.0)*x8669*x8670))+(((-1.0)*(r12*r12)))+(((-1.0)*x8668))+(((-1.0)*x8667*(r10*r10)))+((x8667*x8668)))),-1);
if(!x8672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8671.value)+(((1.5707963267949)*(x8672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8673=IKsin(j4);
IkReal x8674=IKcos(j4);
IkReal x8675=(cj5*r10);
IkReal x8676=(r01*sj5);
IkReal x8677=(cj5*r00);
IkReal x8678=(cj5*r20);
IkReal x8679=((1.0)*x8674);
IkReal x8680=((1.0)*x8673);
IkReal x8681=(sj5*x8673);
evalcond[0]=((((-1.0)*x8678*x8680))+(((-1.0)*r22*x8679))+((r21*x8681)));
evalcond[1]=((((-1.0)*r02*x8679))+((x8673*x8676))+(((-1.0)*x8677*x8680)));
evalcond[2]=((((-1.0)*r12*x8680))+(((-1.0)*r11*sj5*x8679))+((x8674*x8675)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8679))+(((-1.0)*x8675*x8680))+((r11*x8681)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8679))+(((-1.0)*r22*x8680))+((x8674*x8678)));
evalcond[5]=((((-1.0)*r02*x8680))+(((-1.0)*sj1*sj2))+(((-1.0)*x8676*x8679))+((x8674*x8677))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8682=((1.0)*cj5);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8682))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
CheckValue<IkReal> x8684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8682))+(((-1.0)*r20*sj5)))),-1);
if(!x8684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8683.value)+(((1.5707963267949)*(x8684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8685=IKsin(j4);
IkReal x8686=IKcos(j4);
IkReal x8687=(cj5*r10);
IkReal x8688=(r01*sj5);
IkReal x8689=(cj5*r00);
IkReal x8690=(cj5*r20);
IkReal x8691=((1.0)*x8686);
IkReal x8692=((1.0)*x8685);
IkReal x8693=(sj5*x8685);
evalcond[0]=(((r21*x8693))+(((-1.0)*x8690*x8692))+(((-1.0)*r22*x8691)));
evalcond[1]=((((-1.0)*x8689*x8692))+(((-1.0)*r02*x8691))+((x8685*x8688)));
evalcond[2]=(((x8686*x8687))+(((-1.0)*r12*x8692))+(((-1.0)*r11*sj5*x8691)));
evalcond[3]=((-1.0)+(((-1.0)*x8687*x8692))+(((-1.0)*r12*x8691))+((r11*x8693)));
evalcond[4]=((((-1.0)*r21*sj5*x8691))+((cj2*sj1))+((x8686*x8690))+((cj1*sj2))+(((-1.0)*r22*x8692)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8688*x8691))+((x8686*x8689))+(((-1.0)*r02*x8692))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8694 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8694.valid){
continue;
}
CheckValue<IkReal> x8695=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8694.value)+(((1.5707963267949)*(x8695.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8696=IKsin(j4);
IkReal x8697=IKcos(j4);
IkReal x8698=(cj5*r10);
IkReal x8699=(r01*sj5);
IkReal x8700=(cj5*r00);
IkReal x8701=(cj5*r20);
IkReal x8702=((1.0)*x8697);
IkReal x8703=((1.0)*x8696);
IkReal x8704=(sj5*x8696);
evalcond[0]=((((-1.0)*x8701*x8703))+((r21*x8704))+(((-1.0)*r22*x8702)));
evalcond[1]=((((-1.0)*x8700*x8703))+((x8696*x8699))+(((-1.0)*r02*x8702)));
evalcond[2]=((((-1.0)*r11*sj5*x8702))+((x8697*x8698))+(((-1.0)*r12*x8703)));
evalcond[3]=((-1.0)+((r11*x8704))+(((-1.0)*x8698*x8703))+(((-1.0)*r12*x8702)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8697*x8701))+(((-1.0)*r22*x8703))+(((-1.0)*r21*sj5*x8702)));
evalcond[5]=((((-1.0)*x8699*x8702))+(((-1.0)*sj1*sj2))+((x8697*x8700))+(((-1.0)*r02*x8703))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8705=((-1.0)*r00);
IkReal x8707 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8707)==0){
continue;
}
IkReal x8706=pow(x8707,-0.5);
CheckValue<IkReal> x8708 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8705),IKFAST_ATAN2_MAGTHRESH);
if(!x8708.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8708.value));
IkReal gconst145=(r01*x8706);
IkReal gconst146=(x8705*x8706);
CheckValue<IkReal> x8709 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8709.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8709.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8710=((-1.0)*r00);
IkReal x8711=x8706;
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8710),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
IkReal x8712=((-1.0)*(x8713.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8712;
IkReal gconst144=x8712;
IkReal gconst145=(r01*x8711);
IkReal gconst146=(x8710*x8711);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8714=((1.0)*sj0);
IkReal x8715=((1.0)*gconst145);
CheckValue<IkReal> x8716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8715))+(((-1.0)*gconst146*r21)))),-1);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8714))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8714))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8716.value)))+(x8717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8718=IKsin(j4);
IkReal x8719=IKcos(j4);
IkReal x8720=(gconst146*r10);
IkReal x8721=(sj1*sj2);
IkReal x8722=(gconst146*r20);
IkReal x8723=(gconst146*r00);
IkReal x8724=((1.0)*x8719);
IkReal x8725=((1.0)*x8718);
IkReal x8726=(gconst145*x8718);
IkReal x8727=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8726))+(((-1.0)*r22*x8724))+(((-1.0)*x8722*x8725)));
evalcond[1]=((((-1.0)*x8720*x8725))+cj0+((r11*x8726))+(((-1.0)*r12*x8724)));
evalcond[2]=((((-1.0)*x8723*x8725))+(((-1.0)*sj0))+(((-1.0)*r02*x8724))+((r01*x8726)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8724))+((cj1*sj2))+(((-1.0)*r22*x8725))+((x8719*x8722)));
evalcond[4]=((((-1.0)*cj0*x8727))+(((-1.0)*gconst145*r01*x8724))+((cj0*x8721))+(((-1.0)*r02*x8725))+((x8719*x8723)));
evalcond[5]=((((-1.0)*sj0*x8727))+(((-1.0)*gconst145*r11*x8724))+((x8719*x8720))+((sj0*x8721))+(((-1.0)*r12*x8725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8728=((1.0)*gconst146);
CheckValue<IkReal> x8729 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8728))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8728)))),-1);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8729.value)+(((1.5707963267949)*(x8730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKsin(j4);
IkReal x8732=IKcos(j4);
IkReal x8733=(gconst146*r10);
IkReal x8734=(sj1*sj2);
IkReal x8735=(gconst146*r20);
IkReal x8736=(gconst146*r00);
IkReal x8737=((1.0)*x8732);
IkReal x8738=((1.0)*x8731);
IkReal x8739=(gconst145*x8731);
IkReal x8740=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8739))+(((-1.0)*x8735*x8738))+(((-1.0)*r22*x8737)));
evalcond[1]=(((r11*x8739))+cj0+(((-1.0)*x8733*x8738))+(((-1.0)*r12*x8737)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8736*x8738))+(((-1.0)*r02*x8737))+((r01*x8739)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8737))+((x8732*x8735))+((cj1*sj2))+(((-1.0)*r22*x8738)));
evalcond[4]=((((-1.0)*gconst145*r01*x8737))+((x8732*x8736))+(((-1.0)*cj0*x8740))+((cj0*x8734))+(((-1.0)*r02*x8738)));
evalcond[5]=(((x8732*x8733))+(((-1.0)*sj0*x8740))+(((-1.0)*gconst145*r11*x8737))+(((-1.0)*r12*x8738))+((sj0*x8734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8741=((-1.0)*r01);
IkReal x8743 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8743)==0){
continue;
}
IkReal x8742=pow(x8743,-0.5);
CheckValue<IkReal> x8744 = IKatan2WithCheck(IkReal(x8741),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8744.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8744.value))));
IkReal gconst148=(x8741*x8742);
IkReal gconst149=((1.0)*r00*x8742);
CheckValue<IkReal> x8745 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8746=((-1.0)*r01);
CheckValue<IkReal> x8749 = IKatan2WithCheck(IkReal(x8746),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8749.valid){
continue;
}
IkReal x8747=((1.0)*(x8749.value));
IkReal x8748=x8742;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8747)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8747)));
IkReal gconst148=(x8746*x8748);
IkReal gconst149=((1.0)*r00*x8748);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8750=((-1.0)*r01);
CheckValue<IkReal> x8753 = IKatan2WithCheck(IkReal(x8750),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8753.valid){
continue;
}
IkReal x8751=((1.0)*(x8753.value));
IkReal x8752=x8742;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8751)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8751)));
IkReal gconst148=(x8750*x8752);
IkReal gconst149=((1.0)*r00*x8752);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8754=((-1.0)*r01);
CheckValue<IkReal> x8757 = IKatan2WithCheck(IkReal(x8754),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8757.valid){
continue;
}
IkReal x8755=((1.0)*(x8757.value));
IkReal x8756=x8742;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8755)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8755)));
IkReal gconst148=(x8754*x8756);
IkReal gconst149=((1.0)*r00*x8756);
IkReal x8758=r02*r02;
IkReal x8759=(r12*sj0);
IkReal x8760=((1.0)*cj0);
IkReal x8761=x8742;
j4eval[0]=((IKabs(((((-1.0)*r02*x8760))+(((-1.0)*x8759)))))+(IKabs((((r02*x8759*x8761))+(((-1.0)*x8760*x8761))+((cj0*x8758*x8761))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8762=((1.0)*sj0);
IkReal x8763=((1.0)*gconst148);
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8762)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8762))+(((-1.0)*cj0*r01*x8763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
CheckValue<IkReal> x8765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8763))+(((-1.0)*gconst149*r21)))),-1);
if(!x8765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8764.value)+(((1.5707963267949)*(x8765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(gconst148*r11);
IkReal x8769=(sj1*sj2);
IkReal x8770=((1.0)*x8767);
IkReal x8771=(gconst149*x8767);
IkReal x8772=(gconst148*x8766);
IkReal x8773=((1.0)*cj1*cj2);
IkReal x8774=((1.0)*x8766);
evalcond[0]=((((-1.0)*gconst149*r20*x8774))+(((-1.0)*r22*x8770))+((r21*x8772)));
evalcond[1]=(cj0+((x8766*x8768))+(((-1.0)*r12*x8770))+(((-1.0)*gconst149*r10*x8774)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8770))+(((-1.0)*gconst149*r00*x8774))+((r01*x8772)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8774))+((r20*x8771))+(((-1.0)*gconst148*r21*x8770)));
evalcond[4]=((((-1.0)*gconst148*r01*x8770))+(((-1.0)*r02*x8774))+((r00*x8771))+(((-1.0)*cj0*x8773))+((cj0*x8769)));
evalcond[5]=((((-1.0)*sj0*x8773))+((sj0*x8769))+(((-1.0)*x8768*x8770))+(((-1.0)*r12*x8774))+((r10*x8771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8775=((1.0)*gconst149);
CheckValue<IkReal> x8776 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8775))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8776.valid){
continue;
}
CheckValue<IkReal> x8777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8775))+(((-1.0)*gconst148*r10)))),-1);
if(!x8777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8776.value)+(((1.5707963267949)*(x8777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8778=IKsin(j4);
IkReal x8779=IKcos(j4);
IkReal x8780=(gconst148*r11);
IkReal x8781=(sj1*sj2);
IkReal x8782=((1.0)*x8779);
IkReal x8783=(gconst149*x8779);
IkReal x8784=(gconst148*x8778);
IkReal x8785=((1.0)*cj1*cj2);
IkReal x8786=((1.0)*x8778);
evalcond[0]=(((r21*x8784))+(((-1.0)*gconst149*r20*x8786))+(((-1.0)*r22*x8782)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8786))+((x8778*x8780))+(((-1.0)*r12*x8782)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8786))+(((-1.0)*r02*x8782))+((r01*x8784)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8782))+((cj1*sj2))+(((-1.0)*r22*x8786))+((r20*x8783)));
evalcond[4]=((((-1.0)*cj0*x8785))+(((-1.0)*gconst148*r01*x8782))+((cj0*x8781))+(((-1.0)*r02*x8786))+((r00*x8783)));
evalcond[5]=(((r10*x8783))+(((-1.0)*x8780*x8782))+(((-1.0)*sj0*x8785))+(((-1.0)*r12*x8786))+((sj0*x8781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8787=((1.0)*gconst149);
CheckValue<IkReal> x8788=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8787)))),-1);
if(!x8788.valid){
continue;
}
CheckValue<IkReal> x8789 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8788.value)))+(x8789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8790=IKsin(j4);
IkReal x8791=IKcos(j4);
IkReal x8792=(gconst148*r11);
IkReal x8793=(sj1*sj2);
IkReal x8794=((1.0)*x8791);
IkReal x8795=(gconst149*x8791);
IkReal x8796=(gconst148*x8790);
IkReal x8797=((1.0)*cj1*cj2);
IkReal x8798=((1.0)*x8790);
evalcond[0]=(((r21*x8796))+(((-1.0)*gconst149*r20*x8798))+(((-1.0)*r22*x8794)));
evalcond[1]=((((-1.0)*r12*x8794))+cj0+((x8790*x8792))+(((-1.0)*gconst149*r10*x8798)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8798))+(((-1.0)*r02*x8794))+((r01*x8796)));
evalcond[3]=((((-1.0)*gconst148*r21*x8794))+((cj2*sj1))+((cj1*sj2))+((r20*x8795))+(((-1.0)*r22*x8798)));
evalcond[4]=((((-1.0)*gconst148*r01*x8794))+((cj0*x8793))+(((-1.0)*r02*x8798))+((r00*x8795))+(((-1.0)*cj0*x8797)));
evalcond[5]=(((r10*x8795))+(((-1.0)*r12*x8798))+(((-1.0)*x8792*x8794))+(((-1.0)*sj0*x8797))+((sj0*x8793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8799=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8799;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8800=((1.0)*cj5);
IkReal x8801=((((-1.0)*r11*x8800))+(((-1.0)*r10*sj5)));
j4eval[0]=x8801;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x8800))+((r21*sj5))))));
j4eval[2]=IKsign(x8801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8802=cj5*cj5;
IkReal x8803=r01*r01;
IkReal x8804=(r01*sj5);
IkReal x8805=(cj5*r00);
IkReal x8806=((((-1.0)*x8802*(r00*r00)))+(((2.0)*x8804*x8805))+(((-1.0)*x8803))+((x8802*x8803))+(((-1.0)*(r02*r02))));
j4eval[0]=x8806;
j4eval[1]=IKsign(x8806);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8804))+x8805))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8807=cj5*cj5;
IkReal x8808=r01*r01;
IkReal x8809=(r01*sj5);
IkReal x8810=(cj5*r00);
CheckValue<IkReal> x8811 = IKatan2WithCheck(IkReal(((((-1.0)*x8809))+x8810)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8811.valid){
continue;
}
CheckValue<IkReal> x8812=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8808))+(((-1.0)*(r02*r02)))+(((2.0)*x8809*x8810))+(((-1.0)*x8807*(r00*r00)))+((x8807*x8808)))),-1);
if(!x8812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8811.value)+(((1.5707963267949)*(x8812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8813=IKsin(j4);
IkReal x8814=IKcos(j4);
IkReal x8815=(cj5*r10);
IkReal x8816=(r01*sj5);
IkReal x8817=(cj5*r00);
IkReal x8818=(cj5*r20);
IkReal x8819=((1.0)*x8814);
IkReal x8820=((1.0)*x8813);
IkReal x8821=(sj5*x8813);
evalcond[0]=((((-1.0)*r22*x8819))+((r21*x8821))+(((-1.0)*x8818*x8820)));
evalcond[1]=((((-1.0)*r12*x8819))+((r11*x8821))+(((-1.0)*x8815*x8820)));
evalcond[2]=((((-1.0)*x8816*x8819))+(((-1.0)*r02*x8820))+((x8814*x8817)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8819))+((x8813*x8816))+(((-1.0)*x8817*x8820)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8814*x8818))+(((-1.0)*r21*sj5*x8819))+(((-1.0)*r22*x8820)));
evalcond[5]=((((-1.0)*r12*x8820))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8814*x8815))+(((-1.0)*r11*sj5*x8819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8822=((1.0)*cj5);
CheckValue<IkReal> x8823 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8822))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8823.valid){
continue;
}
CheckValue<IkReal> x8824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8822))+(((-1.0)*r10*sj5)))),-1);
if(!x8824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8823.value)+(((1.5707963267949)*(x8824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8825=IKsin(j4);
IkReal x8826=IKcos(j4);
IkReal x8827=(cj5*r10);
IkReal x8828=(r01*sj5);
IkReal x8829=(cj5*r00);
IkReal x8830=(cj5*r20);
IkReal x8831=((1.0)*x8826);
IkReal x8832=((1.0)*x8825);
IkReal x8833=(sj5*x8825);
evalcond[0]=(((r21*x8833))+(((-1.0)*x8830*x8832))+(((-1.0)*r22*x8831)));
evalcond[1]=(((r11*x8833))+(((-1.0)*x8827*x8832))+(((-1.0)*r12*x8831)));
evalcond[2]=(((x8826*x8829))+(((-1.0)*r02*x8832))+(((-1.0)*x8828*x8831)));
evalcond[3]=((-1.0)+((x8825*x8828))+(((-1.0)*r02*x8831))+(((-1.0)*x8829*x8832)));
evalcond[4]=(((cj2*sj1))+((x8826*x8830))+((cj1*sj2))+(((-1.0)*r21*sj5*x8831))+(((-1.0)*r22*x8832)));
evalcond[5]=(((x8826*x8827))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8831))+(((-1.0)*r12*x8832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8834=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8834.valid){
continue;
}
CheckValue<IkReal> x8835 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8834.value)))+(x8835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(cj5*r10);
IkReal x8839=(r01*sj5);
IkReal x8840=(cj5*r00);
IkReal x8841=(cj5*r20);
IkReal x8842=((1.0)*x8837);
IkReal x8843=((1.0)*x8836);
IkReal x8844=(sj5*x8836);
evalcond[0]=((((-1.0)*x8841*x8843))+((r21*x8844))+(((-1.0)*r22*x8842)));
evalcond[1]=(((r11*x8844))+(((-1.0)*x8838*x8843))+(((-1.0)*r12*x8842)));
evalcond[2]=(((x8837*x8840))+(((-1.0)*r02*x8843))+(((-1.0)*x8839*x8842)));
evalcond[3]=((-1.0)+((x8836*x8839))+(((-1.0)*x8840*x8843))+(((-1.0)*r02*x8842)));
evalcond[4]=(((x8837*x8841))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8842))+(((-1.0)*r22*x8843)));
evalcond[5]=(((x8837*x8838))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8842))+(((-1.0)*r12*x8843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8845=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8845;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8846=((1.0)*cj5);
IkReal x8847=((((-1.0)*r21*x8846))+(((-1.0)*r20*sj5)));
j4eval[0]=x8847;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8846))+((r11*sj5))))));
j4eval[2]=IKsign(x8847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8848=cj5*cj5;
IkReal x8849=r01*r01;
IkReal x8850=(cj5*r00);
IkReal x8851=(r01*sj5);
IkReal x8852=((((-2.0)*x8850*x8851))+(((-1.0)*x8848*x8849))+x8849+(r02*r02)+((x8848*(r00*r00))));
j4eval[0]=x8852;
j4eval[1]=((IKabs((x8850+(((-1.0)*x8851)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8853=cj5*cj5;
IkReal x8854=r01*r01;
IkReal x8855=(r01*sj5);
IkReal x8856=(cj5*r00);
CheckValue<IkReal> x8857=IKPowWithIntegerCheck(IKsign((((x8853*(r00*r00)))+(((-1.0)*x8853*x8854))+x8854+(((-2.0)*x8855*x8856))+(r02*r02))),-1);
if(!x8857.valid){
continue;
}
CheckValue<IkReal> x8858 = IKatan2WithCheck(IkReal((x8856+(((-1.0)*x8855)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8857.value)))+(x8858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8859=IKsin(j4);
IkReal x8860=IKcos(j4);
IkReal x8861=(cj5*r10);
IkReal x8862=(r01*sj5);
IkReal x8863=(cj5*r00);
IkReal x8864=(cj5*r20);
IkReal x8865=((1.0)*x8860);
IkReal x8866=((1.0)*x8859);
IkReal x8867=(sj5*x8859);
evalcond[0]=(((r21*x8867))+(((-1.0)*r22*x8865))+(((-1.0)*x8864*x8866)));
evalcond[1]=(((r11*x8867))+(((-1.0)*x8861*x8866))+(((-1.0)*r12*x8865)));
evalcond[2]=(((x8860*x8863))+(((-1.0)*x8862*x8865))+(((-1.0)*r02*x8866)));
evalcond[3]=((1.0)+(((-1.0)*x8863*x8866))+((x8859*x8862))+(((-1.0)*r02*x8865)));
evalcond[4]=(((cj2*sj1))+((x8860*x8864))+((cj1*sj2))+(((-1.0)*r22*x8866))+(((-1.0)*r21*sj5*x8865)));
evalcond[5]=(((x8860*x8861))+(((-1.0)*r11*sj5*x8865))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8868=((1.0)*cj5);
CheckValue<IkReal> x8869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8868))+(((-1.0)*r20*sj5)))),-1);
if(!x8869.valid){
continue;
}
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8868))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8869.value)))+(x8870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8871=IKsin(j4);
IkReal x8872=IKcos(j4);
IkReal x8873=(cj5*r10);
IkReal x8874=(r01*sj5);
IkReal x8875=(cj5*r00);
IkReal x8876=(cj5*r20);
IkReal x8877=((1.0)*x8872);
IkReal x8878=((1.0)*x8871);
IkReal x8879=(sj5*x8871);
evalcond[0]=((((-1.0)*r22*x8877))+(((-1.0)*x8876*x8878))+((r21*x8879)));
evalcond[1]=((((-1.0)*x8873*x8878))+((r11*x8879))+(((-1.0)*r12*x8877)));
evalcond[2]=((((-1.0)*r02*x8878))+((x8872*x8875))+(((-1.0)*x8874*x8877)));
evalcond[3]=((1.0)+(((-1.0)*x8875*x8878))+(((-1.0)*r02*x8877))+((x8871*x8874)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8877))+(((-1.0)*r22*x8878))+((cj1*sj2))+((x8872*x8876)));
evalcond[5]=((((-1.0)*r11*sj5*x8877))+(((-1.0)*sj1*sj2))+((x8872*x8873))+(((-1.0)*r12*x8878))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8880 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8880.valid){
continue;
}
CheckValue<IkReal> x8881=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8880.value)+(((1.5707963267949)*(x8881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8882=IKsin(j4);
IkReal x8883=IKcos(j4);
IkReal x8884=(cj5*r10);
IkReal x8885=(r01*sj5);
IkReal x8886=(cj5*r00);
IkReal x8887=(cj5*r20);
IkReal x8888=((1.0)*x8883);
IkReal x8889=((1.0)*x8882);
IkReal x8890=(sj5*x8882);
evalcond[0]=((((-1.0)*r22*x8888))+((r21*x8890))+(((-1.0)*x8887*x8889)));
evalcond[1]=((((-1.0)*r12*x8888))+((r11*x8890))+(((-1.0)*x8884*x8889)));
evalcond[2]=((((-1.0)*r02*x8889))+(((-1.0)*x8885*x8888))+((x8883*x8886)));
evalcond[3]=((1.0)+(((-1.0)*x8886*x8889))+((x8882*x8885))+(((-1.0)*r02*x8888)));
evalcond[4]=((((-1.0)*r22*x8889))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8888))+((x8883*x8887)));
evalcond[5]=((((-1.0)*r12*x8889))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8888))+((cj1*cj2))+((x8883*x8884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8891=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8891);
rxp1_1=(px*r21);
rxp1_2=(r11*x8891);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8892=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8892);
rxp1_1=(px*r21);
rxp1_2=(r11*x8892);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8893=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8893);
rxp1_1=(px*r21);
rxp1_2=(r11*x8893);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8896=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8896.valid){
continue;
}
IkReal x8894=x8896.value;
IkReal x8895=(sj0*x8894);
cj4array[0]=((((-1.0)*sj1*sj2*x8895))+((cj1*cj2*x8895)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8897=IKsin(j4);
IkReal x8898=IKcos(j4);
IkReal x8899=(r21*sj5);
IkReal x8900=(cj5*r20);
IkReal x8901=((1.0)*x8897);
IkReal x8902=((1.0)*x8898);
evalcond[0]=((-1.0)*r02*x8897);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8902)));
evalcond[2]=((((-1.0)*x8900*x8901))+((x8897*x8899)));
evalcond[3]=((((-1.0)*cj5*r10*x8901))+((r11*sj5*x8897)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8899*x8902))+((cj1*sj2))+((x8898*x8900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8905=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8905.valid){
continue;
}
IkReal x8903=x8905.value;
IkReal x8904=((1.0)*x8903);
cj4array[0]=((((-1.0)*cj1*sj2*x8904))+(((-1.0)*cj2*sj1*x8904)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8906=IKsin(j4);
IkReal x8907=IKcos(j4);
IkReal x8908=(r11*sj5);
IkReal x8909=((1.0)*sj0);
IkReal x8910=((1.0)*x8907);
IkReal x8911=((1.0)*cj5*x8906);
evalcond[0]=((-1.0)*r02*x8906);
evalcond[1]=((((-1.0)*r02*x8910))+(((-1.0)*x8909)));
evalcond[2]=((((-1.0)*r20*x8911))+((r21*sj5*x8906)));
evalcond[3]=(((x8906*x8908))+(((-1.0)*r10*x8911)));
evalcond[4]=((((-1.0)*x8908*x8910))+(((-1.0)*cj1*cj2*x8909))+((cj5*r10*x8907))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8912=IKPowWithIntegerCheck(r02,-1);
if(!x8912.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8912.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8913=IKsin(j4);
IkReal x8914=IKcos(j4);
IkReal x8915=(cj5*x8914);
IkReal x8916=(sj5*x8913);
IkReal x8917=((1.0)*sj5*x8914);
IkReal x8918=((1.0)*cj5*x8913);
evalcond[0]=((-1.0)*r02*x8913);
evalcond[1]=((((-1.0)*r20*x8918))+((r21*x8916)));
evalcond[2]=(((r11*x8916))+(((-1.0)*r10*x8918)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8917))+((r20*x8915)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8917))+((sj0*sj1*sj2))+((r10*x8915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8919=((1.0)*sj0);
IkReal x8920=((1.0)*cj0);
CheckValue<IkReal> x8921 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8920))+(((-1.0)*r12*x8919)))),IkReal(((((-1.0)*r11*sj5*x8919))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8921.valid){
continue;
}
CheckValue<IkReal> x8922=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8921.value)+(((1.5707963267949)*(x8922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8923=IKsin(j4);
IkReal x8924=IKcos(j4);
IkReal x8925=(cj5*r10);
IkReal x8926=(sj1*sj2);
IkReal x8927=(r01*sj5);
IkReal x8928=(cj5*r00);
IkReal x8929=(cj5*r20);
IkReal x8930=((1.0)*x8924);
IkReal x8931=((1.0)*cj1*cj2);
IkReal x8932=((1.0)*x8923);
IkReal x8933=(sj5*x8923);
evalcond[0]=((((-1.0)*r22*x8930))+(((-1.0)*x8929*x8932))+((r21*x8933)));
evalcond[1]=((((-1.0)*r12*x8930))+cj0+(((-1.0)*x8925*x8932))+((r11*x8933)));
evalcond[2]=(((x8923*x8927))+(((-1.0)*sj0))+(((-1.0)*x8928*x8932))+(((-1.0)*r02*x8930)));
evalcond[3]=(((x8924*x8929))+((cj2*sj1))+(((-1.0)*r22*x8932))+(((-1.0)*r21*sj5*x8930))+((cj1*sj2)));
evalcond[4]=(((x8924*x8928))+((cj0*x8926))+(((-1.0)*x8927*x8930))+(((-1.0)*r02*x8932))+(((-1.0)*cj0*x8931)));
evalcond[5]=(((x8924*x8925))+(((-1.0)*r12*x8932))+(((-1.0)*sj0*x8931))+(((-1.0)*r11*sj5*x8930))+((sj0*x8926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8934=((1.0)*cj5);
CheckValue<IkReal> x8935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8934))+(((-1.0)*r10*sj5)))),-1);
if(!x8935.valid){
continue;
}
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8935.value)))+(x8936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8937=IKsin(j4);
IkReal x8938=IKcos(j4);
IkReal x8939=(cj5*r10);
IkReal x8940=(sj1*sj2);
IkReal x8941=(r01*sj5);
IkReal x8942=(cj5*r00);
IkReal x8943=(cj5*r20);
IkReal x8944=((1.0)*x8938);
IkReal x8945=((1.0)*cj1*cj2);
IkReal x8946=((1.0)*x8937);
IkReal x8947=(sj5*x8937);
evalcond[0]=((((-1.0)*r22*x8944))+(((-1.0)*x8943*x8946))+((r21*x8947)));
evalcond[1]=(((r11*x8947))+cj0+(((-1.0)*x8939*x8946))+(((-1.0)*r12*x8944)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8942*x8946))+((x8937*x8941))+(((-1.0)*r02*x8944)));
evalcond[3]=(((x8938*x8943))+((cj2*sj1))+(((-1.0)*r22*x8946))+((cj1*sj2))+(((-1.0)*r21*sj5*x8944)));
evalcond[4]=(((x8938*x8942))+(((-1.0)*x8941*x8944))+(((-1.0)*r02*x8946))+((cj0*x8940))+(((-1.0)*cj0*x8945)));
evalcond[5]=((((-1.0)*sj0*x8945))+(((-1.0)*r12*x8946))+(((-1.0)*r11*sj5*x8944))+((x8938*x8939))+((sj0*x8940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8948=((1.0)*cj5);
CheckValue<IkReal> x8949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8948))+(((-1.0)*r00*sj5)))),-1);
if(!x8949.valid){
continue;
}
CheckValue<IkReal> x8950 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8949.value)))+(x8950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8951=IKsin(j4);
IkReal x8952=IKcos(j4);
IkReal x8953=(cj5*r10);
IkReal x8954=(sj1*sj2);
IkReal x8955=(r01*sj5);
IkReal x8956=(cj5*r00);
IkReal x8957=(cj5*r20);
IkReal x8958=((1.0)*x8952);
IkReal x8959=((1.0)*cj1*cj2);
IkReal x8960=((1.0)*x8951);
IkReal x8961=(sj5*x8951);
evalcond[0]=((((-1.0)*r22*x8958))+(((-1.0)*x8957*x8960))+((r21*x8961)));
evalcond[1]=(((r11*x8961))+cj0+(((-1.0)*r12*x8958))+(((-1.0)*x8953*x8960)));
evalcond[2]=((((-1.0)*sj0))+((x8951*x8955))+(((-1.0)*r02*x8958))+(((-1.0)*x8956*x8960)));
evalcond[3]=(((cj2*sj1))+((x8952*x8957))+((cj1*sj2))+(((-1.0)*r22*x8960))+(((-1.0)*r21*sj5*x8958)));
evalcond[4]=(((x8952*x8956))+(((-1.0)*x8955*x8958))+(((-1.0)*r02*x8960))+((cj0*x8954))+(((-1.0)*cj0*x8959)));
evalcond[5]=(((x8952*x8953))+(((-1.0)*r12*x8960))+(((-1.0)*sj0*x8959))+(((-1.0)*r11*sj5*x8958))+((sj0*x8954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8962=cj1*cj1;
IkReal x8963=cj2*cj2;
IkReal x8964=(sj1*sj2);
IkReal x8965=((156900000.0)*py);
IkReal x8966=(cj1*cj5);
IkReal x8967=((14850585.0)*cj2);
IkReal x8968=(r00*sj5);
IkReal x8969=((16090500.0)*cj1);
IkReal x8970=((4132419.0)*cj5);
IkReal x8971=(r10*sj5);
IkReal x8972=((170000000.0)*cj1);
IkReal x8973=((156900000.0)*px);
IkReal x8974=(cj1*cj2);
IkReal x8975=((14850585.0)*cj5);
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-4132419.0)*x8968))+(((-1.0)*r11*x8964*x8975))+(((-1.0)*x8964*x8965))+((r11*x8966*x8967))+(((16090500.0)*r11*x8966))+((x8969*x8971))+((py*x8972))+(((-14850585.0)*x8964*x8971))+((cj1*x8967*x8971))+((x8965*x8974))+(((-1.0)*r01*x8970)))),IkReal((((r11*x8970))+((x8968*x8969))+(((43660000.0)*py))+((x8973*x8974))+((r01*x8966*x8967))+(((-1.0)*x8964*x8973))+(((4132419.0)*x8971))+((px*x8972))+((cj1*x8967*x8968))+(((-14850585.0)*x8964*x8968))+(((-1.0)*r01*x8964*x8975))+(((16090500.0)*r01*x8966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
CheckValue<IkReal> x8977=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-123088050.0)*x8964*x8974))+(((-133365000.0)*cj1*x8964))+(((10705975.0)*x8962))+(((133365000.0)*cj2*x8962))+(((-61544025.0)*x8963))+(((123088050.0)*x8962*x8963)))),-1);
if(!x8977.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8976.value)+(((1.5707963267949)*(x8977.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8978=IKcos(j0);
IkReal x8979=IKsin(j0);
IkReal x8980=((0.425)*cj1);
IkReal x8981=(cj1*cj2);
IkReal x8982=(sj1*sj2);
IkReal x8983=((0.09465)*cj5);
IkReal x8984=((0.09465)*sj5);
IkReal x8985=((0.39225)*x8979);
IkReal x8986=((0.39225)*x8978);
evalcond[0]=((((-1.0)*r01*x8983))+(((-1.0)*x8982*x8986))+(((-1.0)*px))+((x8981*x8986))+((x8978*x8980))+(((-0.10915)*x8979))+(((-1.0)*r00*x8984)));
evalcond[1]=((((-1.0)*x8982*x8985))+((x8979*x8980))+(((-1.0)*r11*x8983))+(((0.10915)*x8978))+(((-1.0)*py))+((x8981*x8985))+(((-1.0)*r10*x8984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8987=((1.0)*cj5);
IkReal x8988=((((-1.0)*r01*x8987))+(((-1.0)*r00*sj5)));
j4eval[0]=x8988;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8987)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8989=((1.0)*cj5);
IkReal x8990=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8989)));
j4eval[0]=x8990;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8989))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8991=((1.0)*sj0);
IkReal x8992=((1.0)*cj0);
IkReal x8993=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8993;
j4eval[1]=((IKabs(((((-1.0)*r12*x8991))+(((-1.0)*r02*x8992)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8992))+(((-1.0)*r11*sj5*x8991))))));
j4eval[2]=IKsign(x8993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8994=((-1.0)*r20);
IkReal x8996 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8996)==0){
continue;
}
IkReal x8995=pow(x8996,-0.5);
CheckValue<IkReal> x8997 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8994),IKFAST_ATAN2_MAGTHRESH);
if(!x8997.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8997.value));
IkReal gconst1=(r21*x8995);
IkReal gconst2=(x8994*x8995);
CheckValue<IkReal> x8998 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8998.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8999=((-1.0)*r20);
IkReal x9000=x8995;
CheckValue<IkReal> x9002 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8999),IKFAST_ATAN2_MAGTHRESH);
if(!x9002.valid){
continue;
}
IkReal x9001=((-1.0)*(x9002.value));
sj5=gconst1;
cj5=gconst2;
j5=x9001;
IkReal gconst0=x9001;
IkReal gconst1=(r21*x9000);
IkReal gconst2=(x8999*x9000);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9003=((-1.0)*r20);
IkReal x9004=x8995;
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9003),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
IkReal x9005=((-1.0)*(x9006.value));
sj5=gconst1;
cj5=gconst2;
j5=x9005;
IkReal gconst0=x9005;
IkReal gconst1=(r21*x9004);
IkReal gconst2=(x9003*x9004);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9007=((-1.0)*r20);
IkReal x9008=x8995;
CheckValue<IkReal> x9010 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9007),IKFAST_ATAN2_MAGTHRESH);
if(!x9010.valid){
continue;
}
IkReal x9009=((-1.0)*(x9010.value));
sj5=gconst1;
cj5=gconst2;
j5=x9009;
IkReal gconst0=x9009;
IkReal gconst1=(r21*x9008);
IkReal gconst2=(x9007*x9008);
IkReal x9011=r22*r22;
CheckValue<IkReal> x9015=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9011))),-1);
if(!x9015.valid){
continue;
}
IkReal x9012=x9015.value;
IkReal x9013=(sj3*x9012);
IkReal x9014=(((x9013*(r21*r21*r21*r21)))+(((2.0)*x9013*(r20*r20)*(r21*r21)))+((x9013*(r20*r20*r20*r20)))+((sj3*x9011)));
j4eval[0]=x9014;
j4eval[1]=IKsign(x9014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9016=((-1.0)*r20);
IkReal x9017=x8995;
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9016),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
IkReal x9018=((-1.0)*(x9019.value));
sj5=gconst1;
cj5=gconst2;
j5=x9018;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9018;
IkReal gconst1=(r21*x9017);
IkReal gconst2=(x9016*x9017);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9020=((-1.0)*r20);
IkReal x9021=x8995;
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9020),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
IkReal x9022=((-1.0)*(x9023.value));
sj5=gconst1;
cj5=gconst2;
j5=x9022;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9022;
IkReal gconst1=(r21*x9021);
IkReal gconst2=(x9020*x9021);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9024=((-1.0)*r20);
IkReal x9025=x8995;
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9024),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
IkReal x9026=((-1.0)*(x9027.value));
sj5=gconst1;
cj5=gconst2;
j5=x9026;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9026;
IkReal gconst1=(r21*x9025);
IkReal gconst2=(x9024*x9025);
IkReal x9028=((1.0)*(r22*r22));
CheckValue<IkReal> x9032=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9028))),-1);
if(!x9032.valid){
continue;
}
IkReal x9029=x9032.value;
IkReal x9030=((1.0)*x9029);
IkReal x9031=((((-1.0)*x9028))+(((-2.0)*x9029*(r20*r20)*(r21*r21)))+(((-1.0)*x9030*(r20*r20*r20*r20)))+(((-1.0)*x9030*(r21*r21*r21*r21))));
j4eval[0]=x9031;
j4eval[1]=IKsign(x9031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9033=((-1.0)*r20);
IkReal x9034=x8995;
CheckValue<IkReal> x9036 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9033),IKFAST_ATAN2_MAGTHRESH);
if(!x9036.valid){
continue;
}
IkReal x9035=((-1.0)*(x9036.value));
sj5=gconst1;
cj5=gconst2;
j5=x9035;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9035;
IkReal gconst1=(r21*x9034);
IkReal gconst2=(x9033*x9034);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9037=((-1.0)*r20);
IkReal x9038=x8995;
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9037),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
IkReal x9039=((-1.0)*(x9040.value));
sj5=gconst1;
cj5=gconst2;
j5=x9039;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9039;
IkReal gconst1=(r21*x9038);
IkReal gconst2=(x9037*x9038);
IkReal x9041=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9045=IKPowWithIntegerCheck(x9041,-1);
if(!x9045.valid){
continue;
}
IkReal x9042=x9045.value;
IkReal x9043=((1.0)*x9042);
IkReal x9044=((((-1.0)*x9043*(r11*r11)*(r21*r21)))+(((-1.0)*x9043*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9042))+(((-1.0)*(r12*r12))));
j4eval[0]=x9044;
j4eval[1]=r12;
j4eval[2]=x9041;
j4eval[3]=IKsign(x9044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9046=((-1.0)*r20);
IkReal x9047=x8995;
CheckValue<IkReal> x9049 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9046),IKFAST_ATAN2_MAGTHRESH);
if(!x9049.valid){
continue;
}
IkReal x9048=((-1.0)*(x9049.value));
sj5=gconst1;
cj5=gconst2;
j5=x9048;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9048;
IkReal gconst1=(r21*x9047);
IkReal gconst2=(x9046*x9047);
IkReal x9050=r22*r22;
IkReal x9051=(cj1*r12*sj2);
IkReal x9052=(cj2*r12*sj1);
CheckValue<IkReal> x9056=IKPowWithIntegerCheck(((-1.0)+x9050),-1);
if(!x9056.valid){
continue;
}
IkReal x9053=x9056.value;
if((((1.0)+(((-1.0)*x9050)))) < -0.00001)
continue;
IkReal x9054=IKsqrt(((1.0)+(((-1.0)*x9050))));
IkReal x9055=(r22*x9053*x9054);
j4eval[0]=((IKabs((((x9051*x9055))+((x9052*x9055)))))+(IKabs(((((-1.0)*x9051))+(((-1.0)*x9052))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9057=(cj1*sj2);
IkReal x9058=(cj2*sj1);
IkReal x9059=((1.0)*r12);
IkReal x9060=(gconst1*r11);
IkReal x9061=((1.0)*gconst2*r10);
CheckValue<IkReal> x9062 = IKatan2WithCheck(IkReal((((x9058*x9060))+(((-1.0)*x9058*x9061))+(((-1.0)*x9057*x9061))+((x9057*x9060)))),IkReal(((((-1.0)*x9057*x9059))+(((-1.0)*x9058*x9059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9062.valid){
continue;
}
CheckValue<IkReal> x9063=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9062.value)+(((1.5707963267949)*(x9063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9064=IKcos(j4);
IkReal x9065=IKsin(j4);
IkReal x9066=((1.0)*x9064);
IkReal x9067=(gconst1*x9064);
IkReal x9068=(gconst1*x9065);
IkReal x9069=((1.0)*gconst2*x9065);
evalcond[0]=(((r11*x9067))+((r12*x9065))+(((-1.0)*gconst2*r10*x9066)));
evalcond[1]=((((-1.0)*r20*x9069))+((r21*x9068))+(((-1.0)*r22*x9066)));
evalcond[2]=(((r01*x9068))+(((-1.0)*r02*x9066))+(((-1.0)*r00*x9069)));
evalcond[3]=((1.0)+((r11*x9068))+(((-1.0)*r10*x9069))+(((-1.0)*r12*x9066)));
evalcond[4]=(((cj2*sj1))+((r22*x9065))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9066))+((r21*x9067)));
evalcond[5]=(((r01*x9067))+(((-1.0)*gconst2*r00*x9066))+((r02*x9065))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9070=(gconst2*r10);
IkReal x9071=(gconst1*r11);
CheckValue<IkReal> x9072=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9071*x9071)))+(((2.0)*x9070*x9071))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9070*x9070))))),-1);
if(!x9072.valid){
continue;
}
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(((((-1.0)*x9070))+x9071)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9072.value)))+(x9073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9074=IKcos(j4);
IkReal x9075=IKsin(j4);
IkReal x9076=((1.0)*x9074);
IkReal x9077=(gconst1*x9074);
IkReal x9078=(gconst1*x9075);
IkReal x9079=((1.0)*gconst2*x9075);
evalcond[0]=((((-1.0)*gconst2*r10*x9076))+((r11*x9077))+((r12*x9075)));
evalcond[1]=(((r21*x9078))+(((-1.0)*r22*x9076))+(((-1.0)*r20*x9079)));
evalcond[2]=((((-1.0)*r02*x9076))+(((-1.0)*r00*x9079))+((r01*x9078)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9076))+((r11*x9078))+(((-1.0)*r10*x9079)));
evalcond[4]=(((cj2*sj1))+((r21*x9077))+((cj1*sj2))+((r22*x9075))+(((-1.0)*gconst2*r20*x9076)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9076))+((r01*x9077))+((r02*x9075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9080=((1.0)*gconst2);
CheckValue<IkReal> x9081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9080))+(((-1.0)*gconst1*r00)))),-1);
if(!x9081.valid){
continue;
}
CheckValue<IkReal> x9082 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9080))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9081.value)))+(x9082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9083=IKcos(j4);
IkReal x9084=IKsin(j4);
IkReal x9085=((1.0)*x9083);
IkReal x9086=(gconst1*x9083);
IkReal x9087=(gconst1*x9084);
IkReal x9088=((1.0)*gconst2*x9084);
evalcond[0]=(((r11*x9086))+((r12*x9084))+(((-1.0)*gconst2*r10*x9085)));
evalcond[1]=(((r21*x9087))+(((-1.0)*r20*x9088))+(((-1.0)*r22*x9085)));
evalcond[2]=((((-1.0)*r00*x9088))+((r01*x9087))+(((-1.0)*r02*x9085)));
evalcond[3]=((1.0)+((r11*x9087))+(((-1.0)*r10*x9088))+(((-1.0)*r12*x9085)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9085))+((cj1*sj2))+((r21*x9086))+((r22*x9084)));
evalcond[5]=((((-1.0)*gconst2*r00*x9085))+((r01*x9086))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9089=((-1.0)*r20);
IkReal x9090=x8995;
CheckValue<IkReal> x9092 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9089),IKFAST_ATAN2_MAGTHRESH);
if(!x9092.valid){
continue;
}
IkReal x9091=((-1.0)*(x9092.value));
sj5=gconst1;
cj5=gconst2;
j5=x9091;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9091;
IkReal gconst1=(r21*x9090);
IkReal gconst2=(x9089*x9090);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9093=((-1.0)*r20);
IkReal x9094=x8995;
CheckValue<IkReal> x9096 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9093),IKFAST_ATAN2_MAGTHRESH);
if(!x9096.valid){
continue;
}
IkReal x9095=((-1.0)*(x9096.value));
sj5=gconst1;
cj5=gconst2;
j5=x9095;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9095;
IkReal gconst1=(r21*x9094);
IkReal gconst2=(x9093*x9094);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9097=((-1.0)*r20);
IkReal x9098=x8995;
CheckValue<IkReal> x9100 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9097),IKFAST_ATAN2_MAGTHRESH);
if(!x9100.valid){
continue;
}
IkReal x9099=((-1.0)*(x9100.value));
sj5=gconst1;
cj5=gconst2;
j5=x9099;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9099;
IkReal gconst1=(r21*x9098);
IkReal gconst2=(x9097*x9098);
IkReal x9101=r22*r22;
IkReal x9102=(cj1*r12*sj2);
IkReal x9103=(cj2*r12*sj1);
CheckValue<IkReal> x9107=IKPowWithIntegerCheck(((-1.0)+x9101),-1);
if(!x9107.valid){
continue;
}
IkReal x9104=x9107.value;
if((((1.0)+(((-1.0)*x9101)))) < -0.00001)
continue;
IkReal x9105=IKsqrt(((1.0)+(((-1.0)*x9101))));
IkReal x9106=(r22*x9104*x9105);
j4eval[0]=((IKabs(((((-1.0)*x9102))+(((-1.0)*x9103)))))+(IKabs((((x9103*x9106))+((x9102*x9106))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9108=(cj1*sj2);
IkReal x9109=(cj2*sj1);
IkReal x9110=((1.0)*r12);
IkReal x9111=(gconst1*r11);
IkReal x9112=((1.0)*gconst2*r10);
CheckValue<IkReal> x9113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9113.valid){
continue;
}
CheckValue<IkReal> x9114 = IKatan2WithCheck(IkReal(((((-1.0)*x9109*x9112))+(((-1.0)*x9108*x9112))+((x9108*x9111))+((x9109*x9111)))),IkReal(((((-1.0)*x9109*x9110))+(((-1.0)*x9108*x9110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9113.value)))+(x9114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9115=IKcos(j4);
IkReal x9116=IKsin(j4);
IkReal x9117=((1.0)*x9115);
IkReal x9118=(gconst1*x9115);
IkReal x9119=(gconst1*x9116);
IkReal x9120=((1.0)*gconst2*x9116);
evalcond[0]=(((r12*x9116))+((r11*x9118))+(((-1.0)*gconst2*r10*x9117)));
evalcond[1]=(((r21*x9119))+(((-1.0)*r20*x9120))+(((-1.0)*r22*x9117)));
evalcond[2]=(((r01*x9119))+(((-1.0)*r02*x9117))+(((-1.0)*r00*x9120)));
evalcond[3]=((-1.0)+((r11*x9119))+(((-1.0)*r10*x9120))+(((-1.0)*r12*x9117)));
evalcond[4]=(((r21*x9118))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9117))+((r22*x9116)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x9117))+((r01*x9118))+((cj1*cj2))+((r02*x9116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9121=(gconst1*r11);
IkReal x9122=(gconst2*r10);
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal((x9121+(((-1.0)*x9122)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
CheckValue<IkReal> x9124=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9122*x9122)+(((-2.0)*x9121*x9122))+(x9121*x9121))),-1);
if(!x9124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9123.value)+(((1.5707963267949)*(x9124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9125=IKcos(j4);
IkReal x9126=IKsin(j4);
IkReal x9127=((1.0)*x9125);
IkReal x9128=(gconst1*x9125);
IkReal x9129=(gconst1*x9126);
IkReal x9130=((1.0)*gconst2*x9126);
evalcond[0]=((((-1.0)*gconst2*r10*x9127))+((r11*x9128))+((r12*x9126)));
evalcond[1]=((((-1.0)*r20*x9130))+(((-1.0)*r22*x9127))+((r21*x9129)));
evalcond[2]=((((-1.0)*r02*x9127))+(((-1.0)*r00*x9130))+((r01*x9129)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9127))+(((-1.0)*r10*x9130))+((r11*x9129)));
evalcond[4]=(((r22*x9126))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9127))+((cj1*sj2))+((r21*x9128)));
evalcond[5]=((((-1.0)*gconst2*r00*x9127))+((r02*x9126))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x9128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9131 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9131.valid){
continue;
}
CheckValue<IkReal> x9132=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9131.value)+(((1.5707963267949)*(x9132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9133=IKcos(j4);
IkReal x9134=IKsin(j4);
IkReal x9135=((1.0)*x9133);
IkReal x9136=(gconst1*x9133);
IkReal x9137=(gconst1*x9134);
IkReal x9138=((1.0)*gconst2*x9134);
evalcond[0]=((((-1.0)*gconst2*r10*x9135))+((r12*x9134))+((r11*x9136)));
evalcond[1]=((((-1.0)*r22*x9135))+(((-1.0)*r20*x9138))+((r21*x9137)));
evalcond[2]=((((-1.0)*r02*x9135))+(((-1.0)*r00*x9138))+((r01*x9137)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9135))+(((-1.0)*r10*x9138))+((r11*x9137)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9134))+((r21*x9136))+(((-1.0)*gconst2*r20*x9135)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9134))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9135))+((r01*x9136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9139=((-1.0)*r20);
IkReal x9140=x8995;
CheckValue<IkReal> x9142 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9139),IKFAST_ATAN2_MAGTHRESH);
if(!x9142.valid){
continue;
}
IkReal x9141=((-1.0)*(x9142.value));
sj5=gconst1;
cj5=gconst2;
j5=x9141;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9141;
IkReal gconst1=(r21*x9140);
IkReal gconst2=(x9139*x9140);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9143=((-1.0)*r20);
IkReal x9144=x8995;
CheckValue<IkReal> x9146 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9143),IKFAST_ATAN2_MAGTHRESH);
if(!x9146.valid){
continue;
}
IkReal x9145=((-1.0)*(x9146.value));
sj5=gconst1;
cj5=gconst2;
j5=x9145;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9145;
IkReal gconst1=(r21*x9144);
IkReal gconst2=(x9143*x9144);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9147=((-1.0)*r20);
IkReal x9148=x8995;
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9147),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
IkReal x9149=((-1.0)*(x9150.value));
sj5=gconst1;
cj5=gconst2;
j5=x9149;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9149;
IkReal gconst1=(r21*x9148);
IkReal gconst2=(x9147*x9148);
IkReal x9151=r22*r22;
IkReal x9152=((1.0)*r02);
IkReal x9153=(cj1*sj2);
IkReal x9154=(cj2*sj1);
CheckValue<IkReal> x9158=IKPowWithIntegerCheck(((-1.0)+x9151),-1);
if(!x9158.valid){
continue;
}
IkReal x9155=x9158.value;
if((((1.0)+(((-1.0)*x9151)))) < -0.00001)
continue;
IkReal x9156=IKsqrt(((1.0)+(((-1.0)*x9151))));
IkReal x9157=(r02*r22*x9155*x9156);
j4eval[0]=((IKabs((((x9154*x9157))+((x9153*x9157)))))+(IKabs(((((-1.0)*x9152*x9154))+(((-1.0)*x9152*x9153))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9159=(cj1*sj2);
IkReal x9160=(gconst1*r01);
IkReal x9161=((1.0)*r02);
IkReal x9162=(cj2*sj1);
IkReal x9163=((1.0)*gconst2*r00);
CheckValue<IkReal> x9164 = IKatan2WithCheck(IkReal(((((-1.0)*x9159*x9163))+((x9159*x9160))+(((-1.0)*x9162*x9163))+((x9160*x9162)))),IkReal(((((-1.0)*x9159*x9161))+(((-1.0)*x9161*x9162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9164.valid){
continue;
}
CheckValue<IkReal> x9165=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9164.value)+(((1.5707963267949)*(x9165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9166=IKcos(j4);
IkReal x9167=IKsin(j4);
IkReal x9168=((1.0)*x9166);
IkReal x9169=(gconst1*x9166);
IkReal x9170=(gconst1*x9167);
IkReal x9171=((1.0)*gconst2*x9167);
evalcond[0]=(((r01*x9169))+((r02*x9167))+(((-1.0)*gconst2*r00*x9168)));
evalcond[1]=((((-1.0)*r22*x9168))+((r21*x9170))+(((-1.0)*r20*x9171)));
evalcond[2]=((((-1.0)*r12*x9168))+(((-1.0)*r10*x9171))+((r11*x9170)));
evalcond[3]=((-1.0)+((r01*x9170))+(((-1.0)*r02*x9168))+(((-1.0)*r00*x9171)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9167))+((r21*x9169))+(((-1.0)*gconst2*r20*x9168)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9168))+((r11*x9169))+((r12*x9167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9172=(gconst1*r01);
IkReal x9173=(gconst2*r00);
CheckValue<IkReal> x9174 = IKatan2WithCheck(IkReal(((((-1.0)*x9173))+x9172)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9174.valid){
continue;
}
CheckValue<IkReal> x9175=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9172*x9173))+(x9173*x9173)+(x9172*x9172)+(r02*r02))),-1);
if(!x9175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9174.value)+(((1.5707963267949)*(x9175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9176=IKcos(j4);
IkReal x9177=IKsin(j4);
IkReal x9178=((1.0)*x9176);
IkReal x9179=(gconst1*x9176);
IkReal x9180=(gconst1*x9177);
IkReal x9181=((1.0)*gconst2*x9177);
evalcond[0]=((((-1.0)*gconst2*r00*x9178))+((r02*x9177))+((r01*x9179)));
evalcond[1]=((((-1.0)*r20*x9181))+(((-1.0)*r22*x9178))+((r21*x9180)));
evalcond[2]=(((r11*x9180))+(((-1.0)*r12*x9178))+(((-1.0)*r10*x9181)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9178))+(((-1.0)*r00*x9181))+((r01*x9180)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9178))+((cj1*sj2))+((r21*x9179))+((r22*x9177)));
evalcond[5]=((((-1.0)*gconst2*r10*x9178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9177))+((r11*x9179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9182=((1.0)*gconst2);
CheckValue<IkReal> x9183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9182)))),-1);
if(!x9183.valid){
continue;
}
CheckValue<IkReal> x9184 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9182))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9183.value)))+(x9184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9185=IKcos(j4);
IkReal x9186=IKsin(j4);
IkReal x9187=((1.0)*x9185);
IkReal x9188=(gconst1*x9185);
IkReal x9189=(gconst1*x9186);
IkReal x9190=((1.0)*gconst2*x9186);
evalcond[0]=((((-1.0)*gconst2*r00*x9187))+((r02*x9186))+((r01*x9188)));
evalcond[1]=((((-1.0)*r22*x9187))+(((-1.0)*r20*x9190))+((r21*x9189)));
evalcond[2]=((((-1.0)*r12*x9187))+((r11*x9189))+(((-1.0)*r10*x9190)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9187))+(((-1.0)*r00*x9190))+((r01*x9189)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9187))+((cj1*sj2))+((r22*x9186))+((r21*x9188)));
evalcond[5]=(((r11*x9188))+((r12*x9186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9191=((-1.0)*r20);
IkReal x9192=x8995;
CheckValue<IkReal> x9194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9191),IKFAST_ATAN2_MAGTHRESH);
if(!x9194.valid){
continue;
}
IkReal x9193=((-1.0)*(x9194.value));
sj5=gconst1;
cj5=gconst2;
j5=x9193;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9193;
IkReal gconst1=(r21*x9192);
IkReal gconst2=(x9191*x9192);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9195=((-1.0)*r20);
IkReal x9196=x8995;
CheckValue<IkReal> x9198 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9195),IKFAST_ATAN2_MAGTHRESH);
if(!x9198.valid){
continue;
}
IkReal x9197=((-1.0)*(x9198.value));
sj5=gconst1;
cj5=gconst2;
j5=x9197;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9197;
IkReal gconst1=(r21*x9196);
IkReal gconst2=(x9195*x9196);
IkReal x9199=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9203=IKPowWithIntegerCheck(x9199,-1);
if(!x9203.valid){
continue;
}
IkReal x9200=x9203.value;
IkReal x9201=((1.0)*x9200);
IkReal x9202=((((-1.0)*x9201*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9200))+(((-1.0)*(r02*r02)))+(((-1.0)*x9201*(r01*r01)*(r21*r21))));
j4eval[0]=x9202;
j4eval[1]=IKsign(x9202);
j4eval[2]=r02;
j4eval[3]=x9199;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9204=((-1.0)*r20);
IkReal x9205=x8995;
CheckValue<IkReal> x9207 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9204),IKFAST_ATAN2_MAGTHRESH);
if(!x9207.valid){
continue;
}
IkReal x9206=((-1.0)*(x9207.value));
sj5=gconst1;
cj5=gconst2;
j5=x9206;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9206;
IkReal gconst1=(r21*x9205);
IkReal gconst2=(x9204*x9205);
IkReal x9208=r22*r22;
IkReal x9209=((1.0)*r02);
IkReal x9210=(cj1*sj2);
IkReal x9211=(cj2*sj1);
CheckValue<IkReal> x9215=IKPowWithIntegerCheck(((-1.0)+x9208),-1);
if(!x9215.valid){
continue;
}
IkReal x9212=x9215.value;
if((((1.0)+(((-1.0)*x9208)))) < -0.00001)
continue;
IkReal x9213=IKsqrt(((1.0)+(((-1.0)*x9208))));
IkReal x9214=(r02*r22*x9212*x9213);
j4eval[0]=((IKabs(((((-1.0)*x9209*x9210))+(((-1.0)*x9209*x9211)))))+(IKabs((((x9210*x9214))+((x9211*x9214))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9216=(cj1*sj2);
IkReal x9217=(gconst1*r01);
IkReal x9218=((1.0)*r02);
IkReal x9219=(cj2*sj1);
IkReal x9220=((1.0)*gconst2*r00);
CheckValue<IkReal> x9221 = IKatan2WithCheck(IkReal(((((-1.0)*x9216*x9220))+(((-1.0)*x9219*x9220))+((x9217*x9219))+((x9216*x9217)))),IkReal(((((-1.0)*x9216*x9218))+(((-1.0)*x9218*x9219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9221.valid){
continue;
}
CheckValue<IkReal> x9222=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9221.value)+(((1.5707963267949)*(x9222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9223=IKcos(j4);
IkReal x9224=IKsin(j4);
IkReal x9225=((1.0)*x9223);
IkReal x9226=(gconst1*x9223);
IkReal x9227=(gconst1*x9224);
IkReal x9228=((1.0)*gconst2*x9224);
evalcond[0]=(((r01*x9226))+(((-1.0)*gconst2*r00*x9225))+((r02*x9224)));
evalcond[1]=(((r21*x9227))+(((-1.0)*r20*x9228))+(((-1.0)*r22*x9225)));
evalcond[2]=((((-1.0)*r10*x9228))+((r11*x9227))+(((-1.0)*r12*x9225)));
evalcond[3]=((1.0)+((r01*x9227))+(((-1.0)*r02*x9225))+(((-1.0)*r00*x9228)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9225))+((cj1*sj2))+((r21*x9226))+((r22*x9224)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9225))+((r12*x9224))+((r11*x9226))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9229=(gconst1*r01);
IkReal x9230=(gconst2*r00);
CheckValue<IkReal> x9231=IKPowWithIntegerCheck(IKsign(((((2.0)*x9229*x9230))+(((-1.0)*(x9230*x9230)))+(((-1.0)*(x9229*x9229)))+(((-1.0)*(r02*r02))))),-1);
if(!x9231.valid){
continue;
}
CheckValue<IkReal> x9232 = IKatan2WithCheck(IkReal((x9229+(((-1.0)*x9230)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9231.value)))+(x9232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9233=IKcos(j4);
IkReal x9234=IKsin(j4);
IkReal x9235=((1.0)*x9233);
IkReal x9236=(gconst1*x9233);
IkReal x9237=(gconst1*x9234);
IkReal x9238=((1.0)*gconst2*x9234);
evalcond[0]=(((r02*x9234))+(((-1.0)*gconst2*r00*x9235))+((r01*x9236)));
evalcond[1]=((((-1.0)*r20*x9238))+((r21*x9237))+(((-1.0)*r22*x9235)));
evalcond[2]=((((-1.0)*r12*x9235))+(((-1.0)*r10*x9238))+((r11*x9237)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9238))+((r01*x9237))+(((-1.0)*r02*x9235)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9234))+((r21*x9236))+(((-1.0)*gconst2*r20*x9235)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9235))+((r11*x9236))+((cj1*cj2))+((r12*x9234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9239 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9239.valid){
continue;
}
CheckValue<IkReal> x9240=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9239.value)+(((1.5707963267949)*(x9240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9241=IKcos(j4);
IkReal x9242=IKsin(j4);
IkReal x9243=((1.0)*x9241);
IkReal x9244=(gconst1*x9241);
IkReal x9245=(gconst1*x9242);
IkReal x9246=((1.0)*gconst2*x9242);
evalcond[0]=(((r02*x9242))+((r01*x9244))+(((-1.0)*gconst2*r00*x9243)));
evalcond[1]=((((-1.0)*r22*x9243))+(((-1.0)*r20*x9246))+((r21*x9245)));
evalcond[2]=((((-1.0)*r10*x9246))+(((-1.0)*r12*x9243))+((r11*x9245)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9246))+((r01*x9245))+(((-1.0)*r02*x9243)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9244))+((r22*x9242))+(((-1.0)*gconst2*r20*x9243)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9243))+((r12*x9242))+((cj1*cj2))+((r11*x9244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9247=((-1.0)*r20);
IkReal x9248=((-1.0)*px);
CheckValue<IkReal> x9250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9247),IKFAST_ATAN2_MAGTHRESH);
if(!x9250.valid){
continue;
}
IkReal x9249=((-1.0)*(x9250.value));
sj5=gconst1;
cj5=gconst2;
j5=x9249;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9248);
rxp1_1=(px*r21);
rxp1_2=(r11*x9248);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9249;
IkReal gconst1=r21;
IkReal gconst2=x9247;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9251=((-1.0)*r20);
IkReal x9252=((-1.0)*px);
CheckValue<IkReal> x9254 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9251),IKFAST_ATAN2_MAGTHRESH);
if(!x9254.valid){
continue;
}
IkReal x9253=((-1.0)*(x9254.value));
sj5=gconst1;
cj5=gconst2;
j5=x9253;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9252);
rxp1_1=(px*r21);
rxp1_2=(r11*x9252);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9253;
IkReal gconst1=r21;
IkReal gconst2=x9251;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9255=((-1.0)*r20);
IkReal x9256=((-1.0)*px);
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9255),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
IkReal x9257=((-1.0)*(x9258.value));
sj5=gconst1;
cj5=gconst2;
j5=x9257;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9256);
rxp1_1=(px*r21);
rxp1_2=(r11*x9256);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9257;
IkReal gconst1=r21;
IkReal gconst2=x9255;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9261=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9261.valid){
continue;
}
IkReal x9259=x9261.value;
IkReal x9260=(sj0*x9259);
cj4array[0]=(((cj1*cj2*x9260))+(((-1.0)*sj1*sj2*x9260)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9262=IKsin(j4);
IkReal x9263=IKcos(j4);
IkReal x9264=((1.0)*gconst2);
IkReal x9265=(gconst1*r21);
evalcond[0]=(r02*x9262);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9263)));
evalcond[2]=(((x9262*x9265))+(((-1.0)*r20*x9262*x9264)));
evalcond[3]=((((-1.0)*r10*x9262*x9264))+((gconst1*r11*x9262)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9263*x9265))+(((-1.0)*r20*x9263*x9264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9268=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9268.valid){
continue;
}
IkReal x9266=x9268.value;
IkReal x9267=((1.0)*x9266);
cj4array[0]=((((-1.0)*cj1*sj2*x9267))+(((-1.0)*cj2*sj1*x9267)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9269=IKsin(j4);
IkReal x9270=IKcos(j4);
IkReal x9271=((1.0)*sj0);
IkReal x9272=(gconst1*x9269);
IkReal x9273=((1.0)*x9270);
IkReal x9274=((1.0)*gconst2*x9269);
evalcond[0]=(r02*x9269);
evalcond[1]=((((-1.0)*x9271))+(((-1.0)*r02*x9273)));
evalcond[2]=((((-1.0)*r20*x9274))+((r21*x9272)));
evalcond[3]=((((-1.0)*r10*x9274))+((r11*x9272)));
evalcond[4]=(((gconst1*r11*x9270))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9271))+(((-1.0)*gconst2*r10*x9273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9275=IKPowWithIntegerCheck(r02,-1);
if(!x9275.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9275.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9276=IKsin(j4);
IkReal x9277=IKcos(j4);
IkReal x9278=(gconst1*r21);
IkReal x9279=(gconst1*r11);
IkReal x9280=((1.0)*gconst2*r10);
IkReal x9281=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9276);
evalcond[1]=((((-1.0)*x9276*x9281))+((x9276*x9278)));
evalcond[2]=((((-1.0)*x9276*x9280))+((x9276*x9279)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9277*x9281))+((x9277*x9278)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9277*x9280))+((x9277*x9279))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9282=(cj2*sj1);
IkReal x9283=(cj1*sj2);
IkReal x9284=(gconst1*r21);
IkReal x9285=((1.0)*gconst2*r20);
CheckValue<IkReal> x9286=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9285))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9284*x9284)))+(((2.0)*gconst2*r20*x9284)))),-1);
if(!x9286.valid){
continue;
}
CheckValue<IkReal> x9287 = IKatan2WithCheck(IkReal((((r22*x9283))+((r22*x9282)))),IkReal(((((-1.0)*x9282*x9285))+((x9282*x9284))+(((-1.0)*x9283*x9285))+((x9283*x9284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9286.value)))+(x9287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9288=IKsin(j4);
IkReal x9289=IKcos(j4);
IkReal x9290=(sj1*sj2);
IkReal x9291=(gconst2*r10);
IkReal x9292=(gconst2*r00);
IkReal x9293=(gconst2*r20);
IkReal x9294=((1.0)*x9289);
IkReal x9295=(gconst1*x9289);
IkReal x9296=((1.0)*cj1*cj2);
IkReal x9297=(gconst1*x9288);
IkReal x9298=((1.0)*x9288);
evalcond[0]=((((-1.0)*r22*x9294))+(((-1.0)*x9293*x9298))+((r21*x9297)));
evalcond[1]=(((r11*x9297))+(((-1.0)*x9291*x9298))+cj0+(((-1.0)*r12*x9294)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9292*x9298))+((r01*x9297))+(((-1.0)*r02*x9294)));
evalcond[3]=(((cj2*sj1))+((r22*x9288))+((cj1*sj2))+(((-1.0)*x9293*x9294))+((r21*x9295)));
evalcond[4]=(((r02*x9288))+(((-1.0)*x9292*x9294))+((r01*x9295))+(((-1.0)*cj0*x9296))+((cj0*x9290)));
evalcond[5]=(((r11*x9295))+(((-1.0)*x9291*x9294))+(((-1.0)*sj0*x9296))+((r12*x9288))+((sj0*x9290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9299=((1.0)*gconst2);
CheckValue<IkReal> x9300 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9299))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9300.valid){
continue;
}
CheckValue<IkReal> x9301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9299))+(((-1.0)*gconst1*r10)))),-1);
if(!x9301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9300.value)+(((1.5707963267949)*(x9301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9302=IKsin(j4);
IkReal x9303=IKcos(j4);
IkReal x9304=(sj1*sj2);
IkReal x9305=(gconst2*r10);
IkReal x9306=(gconst2*r00);
IkReal x9307=(gconst2*r20);
IkReal x9308=((1.0)*x9303);
IkReal x9309=(gconst1*x9303);
IkReal x9310=((1.0)*cj1*cj2);
IkReal x9311=(gconst1*x9302);
IkReal x9312=((1.0)*x9302);
evalcond[0]=((((-1.0)*x9307*x9312))+((r21*x9311))+(((-1.0)*r22*x9308)));
evalcond[1]=(cj0+(((-1.0)*x9305*x9312))+((r11*x9311))+(((-1.0)*r12*x9308)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9306*x9312))+((r01*x9311))+(((-1.0)*r02*x9308)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9307*x9308))+((r22*x9302))+((r21*x9309))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x9306*x9308))+((r02*x9302))+((cj0*x9304))+((r01*x9309))+(((-1.0)*cj0*x9310)));
evalcond[5]=((((-1.0)*sj0*x9310))+((sj0*x9304))+(((-1.0)*x9305*x9308))+((r12*x9302))+((r11*x9309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9313=((1.0)*gconst2);
CheckValue<IkReal> x9314 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9314.valid){
continue;
}
CheckValue<IkReal> x9315=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9313)))),-1);
if(!x9315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9314.value)+(((1.5707963267949)*(x9315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9316=IKsin(j4);
IkReal x9317=IKcos(j4);
IkReal x9318=(sj1*sj2);
IkReal x9319=(gconst2*r10);
IkReal x9320=(gconst2*r00);
IkReal x9321=(gconst2*r20);
IkReal x9322=((1.0)*x9317);
IkReal x9323=(gconst1*x9317);
IkReal x9324=((1.0)*cj1*cj2);
IkReal x9325=(gconst1*x9316);
IkReal x9326=((1.0)*x9316);
evalcond[0]=((((-1.0)*r22*x9322))+(((-1.0)*x9321*x9326))+((r21*x9325)));
evalcond[1]=((((-1.0)*r12*x9322))+cj0+((r11*x9325))+(((-1.0)*x9319*x9326)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9322))+((r01*x9325))+(((-1.0)*x9320*x9326)));
evalcond[3]=(((cj2*sj1))+((r22*x9316))+((cj1*sj2))+(((-1.0)*x9321*x9322))+((r21*x9323)));
evalcond[4]=(((r02*x9316))+(((-1.0)*cj0*x9324))+((cj0*x9318))+((r01*x9323))+(((-1.0)*x9320*x9322)));
evalcond[5]=(((r11*x9323))+(((-1.0)*x9319*x9322))+((sj0*x9318))+((r12*x9316))+(((-1.0)*sj0*x9324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9327=((-1.0)*r20);
IkReal x9328=x8995;
CheckValue<IkReal> x9330 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9327),IKFAST_ATAN2_MAGTHRESH);
if(!x9330.valid){
continue;
}
IkReal x9329=((-1.0)*(x9330.value));
sj5=gconst1;
cj5=gconst2;
j5=x9329;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9329;
IkReal gconst1=(r21*x9328);
IkReal gconst2=(x9327*x9328);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9331=((-1.0)*r20);
IkReal x9332=x8995;
CheckValue<IkReal> x9334 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9331),IKFAST_ATAN2_MAGTHRESH);
if(!x9334.valid){
continue;
}
IkReal x9333=((-1.0)*(x9334.value));
sj5=gconst1;
cj5=gconst2;
j5=x9333;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9333;
IkReal gconst1=(r21*x9332);
IkReal gconst2=(x9331*x9332);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9335=((-1.0)*r20);
IkReal x9336=x8995;
CheckValue<IkReal> x9338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9335),IKFAST_ATAN2_MAGTHRESH);
if(!x9338.valid){
continue;
}
IkReal x9337=((-1.0)*(x9338.value));
sj5=gconst1;
cj5=gconst2;
j5=x9337;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9337;
IkReal gconst1=(r21*x9336);
IkReal gconst2=(x9335*x9336);
IkReal x9339=r22*r22;
CheckValue<IkReal> x9342=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9339))),-1);
if(!x9342.valid){
continue;
}
IkReal x9340=x9342.value;
IkReal x9341=(((x9340*(r21*r21*r21*r21)))+x9339+((x9340*(r20*r20*r20*r20)))+(((2.0)*x9340*(r20*r20)*(r21*r21))));
j4eval[0]=x9341;
j4eval[1]=IKsign(x9341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9343=((-1.0)*r20);
IkReal x9344=x8995;
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9343),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
IkReal x9345=((-1.0)*(x9346.value));
sj5=gconst1;
cj5=gconst2;
j5=x9345;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9345;
IkReal gconst1=(r21*x9344);
IkReal gconst2=(x9343*x9344);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9347=((-1.0)*r20);
IkReal x9348=x8995;
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9347),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
IkReal x9349=((-1.0)*(x9350.value));
sj5=gconst1;
cj5=gconst2;
j5=x9349;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9349;
IkReal gconst1=(r21*x9348);
IkReal gconst2=(x9347*x9348);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9351=((-1.0)*r20);
IkReal x9352=x8995;
CheckValue<IkReal> x9354 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9351),IKFAST_ATAN2_MAGTHRESH);
if(!x9354.valid){
continue;
}
IkReal x9353=((-1.0)*(x9354.value));
sj5=gconst1;
cj5=gconst2;
j5=x9353;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9353;
IkReal gconst1=(r21*x9352);
IkReal gconst2=(x9351*x9352);
IkReal x9355=r22*r22;
IkReal x9356=(cj1*r12*sj2);
IkReal x9357=(cj2*r12*sj1);
CheckValue<IkReal> x9361=IKPowWithIntegerCheck(((-1.0)+x9355),-1);
if(!x9361.valid){
continue;
}
IkReal x9358=x9361.value;
if((((1.0)+(((-1.0)*x9355)))) < -0.00001)
continue;
IkReal x9359=IKsqrt(((1.0)+(((-1.0)*x9355))));
IkReal x9360=((1.0)*r22*x9358*x9359);
j4eval[0]=((IKabs(((((-1.0)*x9356*x9360))+(((-1.0)*x9357*x9360)))))+(IKabs((x9357+x9356))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9362=((1.0)*gconst1);
IkReal x9363=(cj2*sj1);
IkReal x9364=(gconst2*r10);
IkReal x9365=(cj1*sj2);
CheckValue<IkReal> x9366 = IKatan2WithCheck(IkReal((((x9364*x9365))+((x9363*x9364))+(((-1.0)*r11*x9362*x9365))+(((-1.0)*r11*x9362*x9363)))),IkReal((((r12*x9365))+((r12*x9363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9366.valid){
continue;
}
CheckValue<IkReal> x9367=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9362)))),-1);
if(!x9367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9366.value)+(((1.5707963267949)*(x9367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9368=IKsin(j4);
IkReal x9369=IKcos(j4);
IkReal x9370=((1.0)*x9369);
IkReal x9371=(gconst2*x9369);
IkReal x9372=(gconst1*x9368);
IkReal x9373=((1.0)*x9368);
evalcond[0]=(((r21*x9372))+(((-1.0)*r22*x9370))+(((-1.0)*gconst2*r20*x9373)));
evalcond[1]=((((-1.0)*r02*x9370))+(((-1.0)*gconst2*r00*x9373))+((r01*x9372)));
evalcond[2]=((((-1.0)*r12*x9373))+((r10*x9371))+(((-1.0)*gconst1*r11*x9370)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9373))+((r11*x9372))+(((-1.0)*r12*x9370)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9370))+((cj1*sj2))+(((-1.0)*r22*x9373))+((r20*x9371)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9373))+((r00*x9371))+(((-1.0)*gconst1*r01*x9370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9374=(gconst1*r11);
IkReal x9375=(gconst2*r10);
CheckValue<IkReal> x9376 = IKatan2WithCheck(IkReal((x9375+(((-1.0)*x9374)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9376.valid){
continue;
}
CheckValue<IkReal> x9377=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9375*x9375)+(x9374*x9374)+(((-2.0)*x9374*x9375)))),-1);
if(!x9377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9376.value)+(((1.5707963267949)*(x9377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9378=IKsin(j4);
IkReal x9379=IKcos(j4);
IkReal x9380=((1.0)*x9379);
IkReal x9381=(gconst2*x9379);
IkReal x9382=(gconst1*x9378);
IkReal x9383=((1.0)*x9378);
evalcond[0]=(((r21*x9382))+(((-1.0)*gconst2*r20*x9383))+(((-1.0)*r22*x9380)));
evalcond[1]=((((-1.0)*r02*x9380))+(((-1.0)*gconst2*r00*x9383))+((r01*x9382)));
evalcond[2]=(((r10*x9381))+(((-1.0)*gconst1*r11*x9380))+(((-1.0)*r12*x9383)));
evalcond[3]=((1.0)+((r11*x9382))+(((-1.0)*r12*x9380))+(((-1.0)*gconst2*r10*x9383)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9383))+((r20*x9381))+(((-1.0)*gconst1*r21*x9380)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9383))+((r00*x9381))+(((-1.0)*gconst1*r01*x9380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9384=((1.0)*gconst2);
CheckValue<IkReal> x9385 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9384))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9385.valid){
continue;
}
CheckValue<IkReal> x9386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9384)))),-1);
if(!x9386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9385.value)+(((1.5707963267949)*(x9386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9387=IKsin(j4);
IkReal x9388=IKcos(j4);
IkReal x9389=((1.0)*x9388);
IkReal x9390=(gconst2*x9388);
IkReal x9391=(gconst1*x9387);
IkReal x9392=((1.0)*x9387);
evalcond[0]=((((-1.0)*gconst2*r20*x9392))+(((-1.0)*r22*x9389))+((r21*x9391)));
evalcond[1]=(((r01*x9391))+(((-1.0)*gconst2*r00*x9392))+(((-1.0)*r02*x9389)));
evalcond[2]=((((-1.0)*gconst1*r11*x9389))+(((-1.0)*r12*x9392))+((r10*x9390)));
evalcond[3]=((1.0)+((r11*x9391))+(((-1.0)*gconst2*r10*x9392))+(((-1.0)*r12*x9389)));
evalcond[4]=(((cj2*sj1))+((r20*x9390))+((cj1*sj2))+(((-1.0)*r22*x9392))+(((-1.0)*gconst1*r21*x9389)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9392))+(((-1.0)*gconst1*r01*x9389))+((r00*x9390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9393=((-1.0)*r20);
IkReal x9394=x8995;
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9393),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
IkReal x9395=((-1.0)*(x9396.value));
sj5=gconst1;
cj5=gconst2;
j5=x9395;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9395;
IkReal gconst1=(r21*x9394);
IkReal gconst2=(x9393*x9394);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9397=((-1.0)*r20);
IkReal x9398=x8995;
CheckValue<IkReal> x9400 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9397),IKFAST_ATAN2_MAGTHRESH);
if(!x9400.valid){
continue;
}
IkReal x9399=((-1.0)*(x9400.value));
sj5=gconst1;
cj5=gconst2;
j5=x9399;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9399;
IkReal gconst1=(r21*x9398);
IkReal gconst2=(x9397*x9398);
IkReal x9401=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9405=IKPowWithIntegerCheck(x9401,-1);
if(!x9405.valid){
continue;
}
IkReal x9402=x9405.value;
IkReal x9403=((1.0)*x9402);
IkReal x9404=((((-2.0)*r10*r11*r20*r21*x9402))+(((-1.0)*(r12*r12)))+(((-1.0)*x9403*(r11*r11)*(r21*r21)))+(((-1.0)*x9403*(r10*r10)*(r20*r20))));
j4eval[0]=x9404;
j4eval[1]=r12;
j4eval[2]=x9401;
j4eval[3]=IKsign(x9404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9406=((-1.0)*r20);
IkReal x9407=x8995;
CheckValue<IkReal> x9409 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9406),IKFAST_ATAN2_MAGTHRESH);
if(!x9409.valid){
continue;
}
IkReal x9408=((-1.0)*(x9409.value));
sj5=gconst1;
cj5=gconst2;
j5=x9408;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9408;
IkReal gconst1=(r21*x9407);
IkReal gconst2=(x9406*x9407);
IkReal x9410=r22*r22;
IkReal x9411=(cj1*r12*sj2);
IkReal x9412=(cj2*r12*sj1);
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(((-1.0)+x9410),-1);
if(!x9416.valid){
continue;
}
IkReal x9413=x9416.value;
if((((1.0)+(((-1.0)*x9410)))) < -0.00001)
continue;
IkReal x9414=IKsqrt(((1.0)+(((-1.0)*x9410))));
IkReal x9415=((1.0)*r22*x9413*x9414);
j4eval[0]=((IKabs(((((-1.0)*x9411*x9415))+(((-1.0)*x9412*x9415)))))+(IKabs((x9411+x9412))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9417=((1.0)*gconst1);
IkReal x9418=(cj2*sj1);
IkReal x9419=(gconst2*r10);
IkReal x9420=(cj1*sj2);
CheckValue<IkReal> x9421 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9417*x9418))+((x9419*x9420))+(((-1.0)*r11*x9417*x9420))+((x9418*x9419)))),IkReal((((r12*x9420))+((r12*x9418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9421.valid){
continue;
}
CheckValue<IkReal> x9422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9417))+(((-1.0)*gconst2*r01)))),-1);
if(!x9422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9421.value)+(((1.5707963267949)*(x9422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9423=IKsin(j4);
IkReal x9424=IKcos(j4);
IkReal x9425=((1.0)*x9424);
IkReal x9426=(gconst2*x9424);
IkReal x9427=(gconst1*x9423);
IkReal x9428=((1.0)*x9423);
evalcond[0]=(((r21*x9427))+(((-1.0)*gconst2*r20*x9428))+(((-1.0)*r22*x9425)));
evalcond[1]=(((r01*x9427))+(((-1.0)*r02*x9425))+(((-1.0)*gconst2*r00*x9428)));
evalcond[2]=((((-1.0)*r12*x9428))+(((-1.0)*gconst1*r11*x9425))+((r10*x9426)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9428))+(((-1.0)*r12*x9425))+((r11*x9427)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9425))+((cj1*sj2))+((r20*x9426))+(((-1.0)*r22*x9428)));
evalcond[5]=((((-1.0)*gconst1*r01*x9425))+((r00*x9426))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x9428))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9429=(gconst1*r11);
IkReal x9430=(gconst2*r10);
CheckValue<IkReal> x9431 = IKatan2WithCheck(IkReal(((((-1.0)*x9429))+x9430)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9431.valid){
continue;
}
CheckValue<IkReal> x9432=IKPowWithIntegerCheck(IKsign(((((2.0)*x9429*x9430))+(((-1.0)*(x9429*x9429)))+(((-1.0)*(x9430*x9430)))+(((-1.0)*(r12*r12))))),-1);
if(!x9432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9431.value)+(((1.5707963267949)*(x9432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9433=IKsin(j4);
IkReal x9434=IKcos(j4);
IkReal x9435=((1.0)*x9434);
IkReal x9436=(gconst2*x9434);
IkReal x9437=(gconst1*x9433);
IkReal x9438=((1.0)*x9433);
evalcond[0]=(((r21*x9437))+(((-1.0)*gconst2*r20*x9438))+(((-1.0)*r22*x9435)));
evalcond[1]=((((-1.0)*gconst2*r00*x9438))+(((-1.0)*r02*x9435))+((r01*x9437)));
evalcond[2]=((((-1.0)*r12*x9438))+(((-1.0)*gconst1*r11*x9435))+((r10*x9436)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9438))+((r11*x9437))+(((-1.0)*r12*x9435)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9435))+((cj1*sj2))+((r20*x9436))+(((-1.0)*r22*x9438)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9438))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9435))+((r00*x9436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9439 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9439.valid){
continue;
}
CheckValue<IkReal> x9440=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9439.value)+(((1.5707963267949)*(x9440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9441=IKsin(j4);
IkReal x9442=IKcos(j4);
IkReal x9443=((1.0)*x9442);
IkReal x9444=(gconst2*x9442);
IkReal x9445=(gconst1*x9441);
IkReal x9446=((1.0)*x9441);
evalcond[0]=(((r21*x9445))+(((-1.0)*gconst2*r20*x9446))+(((-1.0)*r22*x9443)));
evalcond[1]=(((r01*x9445))+(((-1.0)*gconst2*r00*x9446))+(((-1.0)*r02*x9443)));
evalcond[2]=(((r10*x9444))+(((-1.0)*gconst1*r11*x9443))+(((-1.0)*r12*x9446)));
evalcond[3]=((-1.0)+((r11*x9445))+(((-1.0)*gconst2*r10*x9446))+(((-1.0)*r12*x9443)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9443))+(((-1.0)*r22*x9446))+((r20*x9444)));
evalcond[5]=(((r00*x9444))+(((-1.0)*gconst1*r01*x9443))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x9446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9447=((-1.0)*r20);
IkReal x9448=x8995;
CheckValue<IkReal> x9450 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9447),IKFAST_ATAN2_MAGTHRESH);
if(!x9450.valid){
continue;
}
IkReal x9449=((-1.0)*(x9450.value));
sj5=gconst1;
cj5=gconst2;
j5=x9449;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9449;
IkReal gconst1=(r21*x9448);
IkReal gconst2=(x9447*x9448);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9451=((-1.0)*r20);
IkReal x9452=x8995;
CheckValue<IkReal> x9454 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9451),IKFAST_ATAN2_MAGTHRESH);
if(!x9454.valid){
continue;
}
IkReal x9453=((-1.0)*(x9454.value));
sj5=gconst1;
cj5=gconst2;
j5=x9453;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9453;
IkReal gconst1=(r21*x9452);
IkReal gconst2=(x9451*x9452);
IkReal x9455=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(x9455,-1);
if(!x9459.valid){
continue;
}
IkReal x9456=x9459.value;
IkReal x9457=((1.0)*x9456);
IkReal x9458=((((-1.0)*x9457*(r01*r01)*(r21*r21)))+(((-1.0)*x9457*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9456)));
j4eval[0]=x9458;
j4eval[1]=IKsign(x9458);
j4eval[2]=r02;
j4eval[3]=x9455;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9460=((-1.0)*r20);
IkReal x9461=x8995;
CheckValue<IkReal> x9463 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9460),IKFAST_ATAN2_MAGTHRESH);
if(!x9463.valid){
continue;
}
IkReal x9462=((-1.0)*(x9463.value));
sj5=gconst1;
cj5=gconst2;
j5=x9462;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9462;
IkReal gconst1=(r21*x9461);
IkReal gconst2=(x9460*x9461);
IkReal x9464=r22*r22;
IkReal x9465=(cj1*r02*sj2);
IkReal x9466=(cj2*r02*sj1);
CheckValue<IkReal> x9470=IKPowWithIntegerCheck(((-1.0)+x9464),-1);
if(!x9470.valid){
continue;
}
IkReal x9467=x9470.value;
if((((1.0)+(((-1.0)*x9464)))) < -0.00001)
continue;
IkReal x9468=IKsqrt(((1.0)+(((-1.0)*x9464))));
IkReal x9469=((1.0)*r22*x9467*x9468);
j4eval[0]=((IKabs((x9465+x9466)))+(IKabs(((((-1.0)*x9465*x9469))+(((-1.0)*x9466*x9469))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9471=(cj2*sj1);
IkReal x9472=(cj1*sj2);
IkReal x9473=(gconst2*r00);
IkReal x9474=((1.0)*gconst1*r01);
CheckValue<IkReal> x9475 = IKatan2WithCheck(IkReal(((((-1.0)*x9471*x9474))+(((-1.0)*x9472*x9474))+((x9472*x9473))+((x9471*x9473)))),IkReal((((r02*x9472))+((r02*x9471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9475.valid){
continue;
}
CheckValue<IkReal> x9476=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9475.value)+(((1.5707963267949)*(x9476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9477=IKsin(j4);
IkReal x9478=IKcos(j4);
IkReal x9479=(gconst1*r11);
IkReal x9480=(gconst1*r21);
IkReal x9481=(gconst1*r01);
IkReal x9482=((1.0)*x9478);
IkReal x9483=(gconst2*x9478);
IkReal x9484=((1.0)*x9477);
evalcond[0]=(((x9477*x9480))+(((-1.0)*r22*x9482))+(((-1.0)*gconst2*r20*x9484)));
evalcond[1]=((((-1.0)*gconst2*r10*x9484))+((x9477*x9479))+(((-1.0)*r12*x9482)));
evalcond[2]=(((r00*x9483))+(((-1.0)*r02*x9484))+(((-1.0)*x9481*x9482)));
evalcond[3]=((-1.0)+((x9477*x9481))+(((-1.0)*gconst2*r00*x9484))+(((-1.0)*r02*x9482)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9480*x9482))+((cj1*sj2))+((r20*x9483))+(((-1.0)*r22*x9484)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9479*x9482))+((r10*x9483))+(((-1.0)*r12*x9484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9485=(gconst2*r00);
IkReal x9486=(gconst1*r01);
CheckValue<IkReal> x9487=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9486*x9486)))+(((-1.0)*(x9485*x9485)))+(((-1.0)*(r02*r02)))+(((2.0)*x9485*x9486)))),-1);
if(!x9487.valid){
continue;
}
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal(((((-1.0)*x9486))+x9485)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9487.value)))+(x9488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9489=IKsin(j4);
IkReal x9490=IKcos(j4);
IkReal x9491=(gconst1*r11);
IkReal x9492=(gconst1*r21);
IkReal x9493=(gconst1*r01);
IkReal x9494=((1.0)*x9490);
IkReal x9495=(gconst2*x9490);
IkReal x9496=((1.0)*x9489);
evalcond[0]=(((x9489*x9492))+(((-1.0)*gconst2*r20*x9496))+(((-1.0)*r22*x9494)));
evalcond[1]=(((x9489*x9491))+(((-1.0)*gconst2*r10*x9496))+(((-1.0)*r12*x9494)));
evalcond[2]=((((-1.0)*r02*x9496))+(((-1.0)*x9493*x9494))+((r00*x9495)));
evalcond[3]=((-1.0)+((x9489*x9493))+(((-1.0)*r02*x9494))+(((-1.0)*gconst2*r00*x9496)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9496))+((cj1*sj2))+(((-1.0)*x9492*x9494))+((r20*x9495)));
evalcond[5]=(((r10*x9495))+(((-1.0)*x9491*x9494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9497=((1.0)*gconst2);
CheckValue<IkReal> x9498 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9497))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9498.valid){
continue;
}
CheckValue<IkReal> x9499=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9497)))),-1);
if(!x9499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9498.value)+(((1.5707963267949)*(x9499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9500=IKsin(j4);
IkReal x9501=IKcos(j4);
IkReal x9502=(gconst1*r11);
IkReal x9503=(gconst1*r21);
IkReal x9504=(gconst1*r01);
IkReal x9505=((1.0)*x9501);
IkReal x9506=(gconst2*x9501);
IkReal x9507=((1.0)*x9500);
evalcond[0]=((((-1.0)*r22*x9505))+((x9500*x9503))+(((-1.0)*gconst2*r20*x9507)));
evalcond[1]=(((x9500*x9502))+(((-1.0)*r12*x9505))+(((-1.0)*gconst2*r10*x9507)));
evalcond[2]=((((-1.0)*x9504*x9505))+(((-1.0)*r02*x9507))+((r00*x9506)));
evalcond[3]=((-1.0)+((x9500*x9504))+(((-1.0)*gconst2*r00*x9507))+(((-1.0)*r02*x9505)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9507))+((r20*x9506))+(((-1.0)*x9503*x9505)));
evalcond[5]=(((r10*x9506))+(((-1.0)*r12*x9507))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9502*x9505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9508=((-1.0)*r20);
IkReal x9509=x8995;
CheckValue<IkReal> x9511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9508),IKFAST_ATAN2_MAGTHRESH);
if(!x9511.valid){
continue;
}
IkReal x9510=((-1.0)*(x9511.value));
sj5=gconst1;
cj5=gconst2;
j5=x9510;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9510;
IkReal gconst1=(r21*x9509);
IkReal gconst2=(x9508*x9509);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9512=((-1.0)*r20);
IkReal x9513=x8995;
CheckValue<IkReal> x9515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9512),IKFAST_ATAN2_MAGTHRESH);
if(!x9515.valid){
continue;
}
IkReal x9514=((-1.0)*(x9515.value));
sj5=gconst1;
cj5=gconst2;
j5=x9514;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9514;
IkReal gconst1=(r21*x9513);
IkReal gconst2=(x9512*x9513);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9516=((-1.0)*r20);
IkReal x9517=x8995;
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9516),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
IkReal x9518=((-1.0)*(x9519.value));
sj5=gconst1;
cj5=gconst2;
j5=x9518;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9518;
IkReal gconst1=(r21*x9517);
IkReal gconst2=(x9516*x9517);
IkReal x9520=r22*r22;
IkReal x9521=(cj1*r02*sj2);
IkReal x9522=(cj2*r02*sj1);
CheckValue<IkReal> x9526=IKPowWithIntegerCheck(((-1.0)+x9520),-1);
if(!x9526.valid){
continue;
}
IkReal x9523=x9526.value;
if((((1.0)+(((-1.0)*x9520)))) < -0.00001)
continue;
IkReal x9524=IKsqrt(((1.0)+(((-1.0)*x9520))));
IkReal x9525=((1.0)*r22*x9523*x9524);
j4eval[0]=((IKabs(((((-1.0)*x9521*x9525))+(((-1.0)*x9522*x9525)))))+(IKabs((x9521+x9522))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9527=(cj2*sj1);
IkReal x9528=(cj1*sj2);
IkReal x9529=(gconst2*r00);
IkReal x9530=((1.0)*gconst1*r01);
CheckValue<IkReal> x9531 = IKatan2WithCheck(IkReal((((x9527*x9529))+(((-1.0)*x9527*x9530))+((x9528*x9529))+(((-1.0)*x9528*x9530)))),IkReal((((r02*x9528))+((r02*x9527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9531.valid){
continue;
}
CheckValue<IkReal> x9532=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9531.value)+(((1.5707963267949)*(x9532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9533=IKsin(j4);
IkReal x9534=IKcos(j4);
IkReal x9535=(gconst1*r11);
IkReal x9536=(gconst1*r21);
IkReal x9537=(gconst1*r01);
IkReal x9538=((1.0)*x9534);
IkReal x9539=(gconst2*x9534);
IkReal x9540=((1.0)*x9533);
evalcond[0]=((((-1.0)*r22*x9538))+((x9533*x9536))+(((-1.0)*gconst2*r20*x9540)));
evalcond[1]=((((-1.0)*gconst2*r10*x9540))+((x9533*x9535))+(((-1.0)*r12*x9538)));
evalcond[2]=((((-1.0)*r02*x9540))+((r00*x9539))+(((-1.0)*x9537*x9538)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9538))+((x9533*x9537))+(((-1.0)*gconst2*r00*x9540)));
evalcond[4]=((((-1.0)*x9536*x9538))+((cj2*sj1))+((r20*x9539))+((cj1*sj2))+(((-1.0)*r22*x9540)));
evalcond[5]=((((-1.0)*r12*x9540))+((r10*x9539))+(((-1.0)*sj1*sj2))+(((-1.0)*x9535*x9538))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9541=(gconst1*r01);
IkReal x9542=(gconst2*r00);
CheckValue<IkReal> x9543=IKPowWithIntegerCheck(IKsign(((x9542*x9542)+(((-2.0)*x9541*x9542))+(x9541*x9541)+(r02*r02))),-1);
if(!x9543.valid){
continue;
}
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal((x9542+(((-1.0)*x9541)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9543.value)))+(x9544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9545=IKsin(j4);
IkReal x9546=IKcos(j4);
IkReal x9547=(gconst1*r11);
IkReal x9548=(gconst1*r21);
IkReal x9549=(gconst1*r01);
IkReal x9550=((1.0)*x9546);
IkReal x9551=(gconst2*x9546);
IkReal x9552=((1.0)*x9545);
evalcond[0]=((((-1.0)*r22*x9550))+((x9545*x9548))+(((-1.0)*gconst2*r20*x9552)));
evalcond[1]=((((-1.0)*gconst2*r10*x9552))+((x9545*x9547))+(((-1.0)*r12*x9550)));
evalcond[2]=((((-1.0)*r02*x9552))+(((-1.0)*x9549*x9550))+((r00*x9551)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9550))+(((-1.0)*gconst2*r00*x9552))+((x9545*x9549)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9552))+((cj1*sj2))+((r20*x9551))+(((-1.0)*x9548*x9550)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r10*x9551))+(((-1.0)*x9547*x9550))+((cj1*cj2))+(((-1.0)*r12*x9552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9553 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9553.valid){
continue;
}
CheckValue<IkReal> x9554=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9553.value)+(((1.5707963267949)*(x9554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9555=IKsin(j4);
IkReal x9556=IKcos(j4);
IkReal x9557=(gconst1*r11);
IkReal x9558=(gconst1*r21);
IkReal x9559=(gconst1*r01);
IkReal x9560=((1.0)*x9556);
IkReal x9561=(gconst2*x9556);
IkReal x9562=((1.0)*x9555);
evalcond[0]=((((-1.0)*gconst2*r20*x9562))+((x9555*x9558))+(((-1.0)*r22*x9560)));
evalcond[1]=(((x9555*x9557))+(((-1.0)*gconst2*r10*x9562))+(((-1.0)*r12*x9560)));
evalcond[2]=(((r00*x9561))+(((-1.0)*x9559*x9560))+(((-1.0)*r02*x9562)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9562))+((x9555*x9559))+(((-1.0)*r02*x9560)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9562))+(((-1.0)*x9558*x9560))+((r20*x9561)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9557*x9560))+((cj1*cj2))+(((-1.0)*r12*x9562))+((r10*x9561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9563=((-1.0)*r20);
IkReal x9564=((-1.0)*px);
CheckValue<IkReal> x9566 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9563),IKFAST_ATAN2_MAGTHRESH);
if(!x9566.valid){
continue;
}
IkReal x9565=((-1.0)*(x9566.value));
sj5=gconst1;
cj5=gconst2;
j5=x9565;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9564);
rxp1_1=(px*r21);
rxp1_2=(r11*x9564);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9565;
IkReal gconst1=r21;
IkReal gconst2=x9563;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9567=((-1.0)*r20);
IkReal x9568=((-1.0)*px);
CheckValue<IkReal> x9570 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9567),IKFAST_ATAN2_MAGTHRESH);
if(!x9570.valid){
continue;
}
IkReal x9569=((-1.0)*(x9570.value));
sj5=gconst1;
cj5=gconst2;
j5=x9569;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9568);
rxp1_1=(px*r21);
rxp1_2=(r11*x9568);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9569;
IkReal gconst1=r21;
IkReal gconst2=x9567;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9571=((-1.0)*r20);
IkReal x9572=((-1.0)*px);
CheckValue<IkReal> x9574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9571),IKFAST_ATAN2_MAGTHRESH);
if(!x9574.valid){
continue;
}
IkReal x9573=((-1.0)*(x9574.value));
sj5=gconst1;
cj5=gconst2;
j5=x9573;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9572);
rxp1_1=(px*r21);
rxp1_2=(r11*x9572);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9573;
IkReal gconst1=r21;
IkReal gconst2=x9571;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9577=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9577.valid){
continue;
}
IkReal x9575=x9577.value;
IkReal x9576=(sj0*x9575);
cj4array[0]=(((cj1*cj2*x9576))+(((-1.0)*sj1*sj2*x9576)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9578=IKsin(j4);
IkReal x9579=IKcos(j4);
IkReal x9580=(gconst1*x9578);
IkReal x9581=((1.0)*x9579);
IkReal x9582=((1.0)*gconst2*x9578);
evalcond[0]=((-1.0)*r02*x9578);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9581)));
evalcond[2]=((((-1.0)*r20*x9582))+((r21*x9580)));
evalcond[3]=(((r11*x9580))+(((-1.0)*r10*x9582)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9581))+((gconst2*r20*x9579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9585=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9585.valid){
continue;
}
IkReal x9583=x9585.value;
IkReal x9584=((1.0)*x9583);
cj4array[0]=((((-1.0)*cj2*sj1*x9584))+(((-1.0)*cj1*sj2*x9584)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9586=IKsin(j4);
IkReal x9587=IKcos(j4);
IkReal x9588=(gconst2*r10);
IkReal x9589=((1.0)*sj0);
IkReal x9590=(gconst1*r11);
IkReal x9591=((1.0)*x9586);
IkReal x9592=((1.0)*x9587);
evalcond[0]=((-1.0)*r02*x9586);
evalcond[1]=((((-1.0)*x9589))+(((-1.0)*r02*x9592)));
evalcond[2]=(((gconst1*r21*x9586))+(((-1.0)*gconst2*r20*x9591)));
evalcond[3]=((((-1.0)*x9588*x9591))+((x9586*x9590)));
evalcond[4]=((((-1.0)*x9590*x9592))+((x9587*x9588))+(((-1.0)*cj1*cj2*x9589))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9593=IKPowWithIntegerCheck(r02,-1);
if(!x9593.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9593.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9594=IKsin(j4);
IkReal x9595=IKcos(j4);
IkReal x9596=(gconst2*r10);
IkReal x9597=(gconst1*r11);
IkReal x9598=(gconst1*r21);
IkReal x9599=(gconst2*r20);
IkReal x9600=((1.0)*x9594);
IkReal x9601=((1.0)*x9595);
evalcond[0]=((-1.0)*r02*x9594);
evalcond[1]=(((x9594*x9598))+(((-1.0)*x9599*x9600)));
evalcond[2]=(((x9594*x9597))+(((-1.0)*x9596*x9600)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9595*x9599))+(((-1.0)*x9598*x9601)));
evalcond[4]=((((-1.0)*x9597*x9601))+(((-1.0)*cj1*cj2*sj0))+((x9595*x9596))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9602=(cj2*sj1);
IkReal x9603=(cj1*sj2);
IkReal x9604=(gconst1*r21);
IkReal x9605=((1.0)*gconst2*r20);
CheckValue<IkReal> x9606=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9604))+(x9604*x9604)+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9606.valid){
continue;
}
CheckValue<IkReal> x9607 = IKatan2WithCheck(IkReal((((r22*x9603))+((r22*x9602)))),IkReal(((((-1.0)*x9602*x9605))+((x9603*x9604))+((x9602*x9604))+(((-1.0)*x9603*x9605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9606.value)))+(x9607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9608=IKsin(j4);
IkReal x9609=IKcos(j4);
IkReal x9610=(gconst1*r11);
IkReal x9611=(sj1*sj2);
IkReal x9612=(gconst1*r21);
IkReal x9613=(gconst1*r01);
IkReal x9614=((1.0)*x9609);
IkReal x9615=(gconst2*x9609);
IkReal x9616=((1.0)*cj1*cj2);
IkReal x9617=((1.0)*x9608);
evalcond[0]=((((-1.0)*r22*x9614))+(((-1.0)*gconst2*r20*x9617))+((x9608*x9612)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9617))+(((-1.0)*r12*x9614))+((x9608*x9610)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9614))+((x9608*x9613))+(((-1.0)*gconst2*r00*x9617)));
evalcond[3]=(((cj2*sj1))+((r20*x9615))+(((-1.0)*x9612*x9614))+(((-1.0)*r22*x9617))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x9613*x9614))+((r00*x9615))+((cj0*x9611))+(((-1.0)*cj0*x9616))+(((-1.0)*r02*x9617)));
evalcond[5]=((((-1.0)*sj0*x9616))+((r10*x9615))+(((-1.0)*r12*x9617))+((sj0*x9611))+(((-1.0)*x9610*x9614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9618=((1.0)*gconst2);
CheckValue<IkReal> x9619=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9618)))),-1);
if(!x9619.valid){
continue;
}
CheckValue<IkReal> x9620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9618))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9619.value)))+(x9620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9621=IKsin(j4);
IkReal x9622=IKcos(j4);
IkReal x9623=(gconst1*r11);
IkReal x9624=(sj1*sj2);
IkReal x9625=(gconst1*r21);
IkReal x9626=(gconst1*r01);
IkReal x9627=((1.0)*x9622);
IkReal x9628=(gconst2*x9622);
IkReal x9629=((1.0)*cj1*cj2);
IkReal x9630=((1.0)*x9621);
evalcond[0]=((((-1.0)*r22*x9627))+((x9621*x9625))+(((-1.0)*gconst2*r20*x9630)));
evalcond[1]=((((-1.0)*gconst2*r10*x9630))+cj0+((x9621*x9623))+(((-1.0)*r12*x9627)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9630))+(((-1.0)*r02*x9627))+((x9621*x9626)));
evalcond[3]=(((cj2*sj1))+((r20*x9628))+(((-1.0)*r22*x9630))+((cj1*sj2))+(((-1.0)*x9625*x9627)));
evalcond[4]=(((cj0*x9624))+(((-1.0)*x9626*x9627))+((r00*x9628))+(((-1.0)*cj0*x9629))+(((-1.0)*r02*x9630)));
evalcond[5]=(((sj0*x9624))+((r10*x9628))+(((-1.0)*r12*x9630))+(((-1.0)*x9623*x9627))+(((-1.0)*sj0*x9629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9631=((1.0)*gconst2);
CheckValue<IkReal> x9632=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9631)))),-1);
if(!x9632.valid){
continue;
}
CheckValue<IkReal> x9633 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9632.value)))+(x9633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9634=IKsin(j4);
IkReal x9635=IKcos(j4);
IkReal x9636=(gconst1*r11);
IkReal x9637=(sj1*sj2);
IkReal x9638=(gconst1*r21);
IkReal x9639=(gconst1*r01);
IkReal x9640=((1.0)*x9635);
IkReal x9641=(gconst2*x9635);
IkReal x9642=((1.0)*cj1*cj2);
IkReal x9643=((1.0)*x9634);
evalcond[0]=(((x9634*x9638))+(((-1.0)*gconst2*r20*x9643))+(((-1.0)*r22*x9640)));
evalcond[1]=(((x9634*x9636))+(((-1.0)*r12*x9640))+cj0+(((-1.0)*gconst2*r10*x9643)));
evalcond[2]=(((x9634*x9639))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9643))+(((-1.0)*r02*x9640)));
evalcond[3]=((((-1.0)*x9638*x9640))+((cj2*sj1))+((cj1*sj2))+((r20*x9641))+(((-1.0)*r22*x9643)));
evalcond[4]=((((-1.0)*x9639*x9640))+((cj0*x9637))+((r00*x9641))+(((-1.0)*cj0*x9642))+(((-1.0)*r02*x9643)));
evalcond[5]=((((-1.0)*r12*x9643))+((sj0*x9637))+(((-1.0)*sj0*x9642))+((r10*x9641))+(((-1.0)*x9636*x9640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9644=((-1.0)*r20);
IkReal x9645=x8995;
CheckValue<IkReal> x9647 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9644),IKFAST_ATAN2_MAGTHRESH);
if(!x9647.valid){
continue;
}
IkReal x9646=((-1.0)*(x9647.value));
sj5=gconst1;
cj5=gconst2;
j5=x9646;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9646;
IkReal gconst1=(r21*x9645);
IkReal gconst2=(x9644*x9645);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9648=((-1.0)*r20);
IkReal x9649=x8995;
CheckValue<IkReal> x9651 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9648),IKFAST_ATAN2_MAGTHRESH);
if(!x9651.valid){
continue;
}
IkReal x9650=((-1.0)*(x9651.value));
sj5=gconst1;
cj5=gconst2;
j5=x9650;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9650;
IkReal gconst1=(r21*x9649);
IkReal gconst2=(x9648*x9649);
CheckValue<IkReal> x9659=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9659.valid){
continue;
}
IkReal x9652=x9659.value;
IkReal x9653=(sj3*x9652);
IkReal x9654=(r11*x9653);
IkReal x9655=(r00*x9653);
IkReal x9656=(r01*x9653);
IkReal x9657=(r10*x9653);
IkReal x9658=(r20*r21*x9653);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9655*(r20*r20)))+((r00*r20*r21*x9654))+((r10*r20*r21*x9656))+((r01*x9654*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9660=gconst2*gconst2;
IkReal x9661=gconst1*gconst1;
IkReal x9662=((1.0)*cj3);
IkReal x9663=((1.0)*sj3);
IkReal x9664=(r11*sj3);
IkReal x9665=(r10*sj3);
IkReal x9666=(gconst1*gconst2*r00);
IkReal x9667=(gconst1*gconst2*r01);
IkReal x9668=(r00*x9660);
IkReal x9669=(r01*x9661);
CheckValue<IkReal> x9670 = IKatan2WithCheck(IkReal((((gconst1*r02*x9665))+((gconst2*r02*x9664)))),IkReal((((x9665*x9669))+(((-1.0)*r10*x9663*x9666))+((x9664*x9667))+(((-1.0)*r11*x9663*x9668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9670.valid){
continue;
}
CheckValue<IkReal> x9671=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9667))+(((-1.0)*r02*r12*x9662))+(((-1.0)*r11*x9662*x9669))+((cj3*r11*x9666))+(((-1.0)*r10*x9662*x9668)))),-1);
if(!x9671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9670.value)+(((1.5707963267949)*(x9671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9672=IKsin(j4);
IkReal x9673=IKcos(j4);
IkReal x9674=(sj1*sj2);
IkReal x9675=(gconst1*sj3);
IkReal x9676=(cj3*gconst1);
IkReal x9677=(cj3*gconst2);
IkReal x9678=((1.0)*cj2);
IkReal x9679=(cj1*sj2);
IkReal x9680=(gconst2*sj3);
IkReal x9681=(cj1*x9678);
IkReal x9682=((1.0)*x9673);
IkReal x9683=((1.0)*x9672);
IkReal x9684=(gconst1*x9672);
IkReal x9685=(cj3*x9672);
IkReal x9686=(x9673*x9680);
evalcond[0]=(((r21*x9684))+(((-1.0)*r22*x9682))+(((-1.0)*gconst2*r20*x9683)));
evalcond[1]=((((-1.0)*r02*x9682))+(((-1.0)*gconst2*r00*x9683))+((r01*x9684)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9683))+(((-1.0)*r12*x9682))+((r11*x9684)));
evalcond[3]=((((-1.0)*r10*x9677*x9682))+((r10*x9675))+((r12*x9685))+((r11*x9673*x9676))+((r11*x9680)));
evalcond[4]=(((r11*x9677))+((r10*x9676))+(((-1.0)*r11*x9675*x9682))+((r10*x9686))+(((-1.0)*r12*sj3*x9683)));
evalcond[5]=(((cj2*sj1))+((r22*x9685))+((r20*x9675))+(((-1.0)*r20*x9677*x9682))+((r21*x9680))+x9679+((r21*x9673*x9676)));
evalcond[6]=(((r02*x9685))+((r00*x9675))+x9674+(((-1.0)*x9681))+(((-1.0)*r00*x9677*x9682))+((r01*x9680))+((r01*x9673*x9676)));
evalcond[7]=((((-1.0)*r21*x9675*x9682))+((r21*x9677))+(((-1.0)*r22*sj3*x9683))+((r20*x9676))+x9674+(((-1.0)*x9681))+((r20*x9686)));
evalcond[8]=((((-1.0)*sj1*x9678))+((r01*x9677))+((r00*x9676))+(((-1.0)*r02*sj3*x9683))+(((-1.0)*x9679))+(((-1.0)*r01*x9675*x9682))+((r00*x9686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9687=gconst2*gconst2;
IkReal x9688=gconst1*gconst1;
IkReal x9689=(gconst2*r11);
IkReal x9690=(cj3*r02);
IkReal x9691=(gconst1*r01);
IkReal x9692=(cj3*r10);
IkReal x9693=(r10*sj3);
IkReal x9694=((1.0)*gconst1*r00);
IkReal x9695=(r01*x9688);
IkReal x9696=(r00*x9687);
CheckValue<IkReal> x9697=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9691*x9693))+((r11*sj3*x9695))+(((-1.0)*sj3*x9689*x9694))+((x9693*x9696)))),-1);
if(!x9697.valid){
continue;
}
CheckValue<IkReal> x9698 = IKatan2WithCheck(IkReal((((x9689*x9690))+((gconst1*r10*x9690)))),IkReal(((((-1.0)*cj3*r11*x9696))+((cj3*x9689*x9691))+(((-1.0)*gconst2*x9692*x9694))+((x9692*x9695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9697.value)))+(x9698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9699=IKsin(j4);
IkReal x9700=IKcos(j4);
IkReal x9701=(sj1*sj2);
IkReal x9702=(gconst1*sj3);
IkReal x9703=(cj3*gconst1);
IkReal x9704=(cj3*gconst2);
IkReal x9705=((1.0)*cj2);
IkReal x9706=(cj1*sj2);
IkReal x9707=(gconst2*sj3);
IkReal x9708=(cj1*x9705);
IkReal x9709=((1.0)*x9700);
IkReal x9710=((1.0)*x9699);
IkReal x9711=(gconst1*x9699);
IkReal x9712=(cj3*x9699);
IkReal x9713=(x9700*x9707);
evalcond[0]=((((-1.0)*r22*x9709))+(((-1.0)*gconst2*r20*x9710))+((r21*x9711)));
evalcond[1]=((((-1.0)*r02*x9709))+(((-1.0)*gconst2*r00*x9710))+((r01*x9711)));
evalcond[2]=((1.0)+((r11*x9711))+(((-1.0)*gconst2*r10*x9710))+(((-1.0)*r12*x9709)));
evalcond[3]=(((r10*x9702))+((r11*x9700*x9703))+((r12*x9712))+((r11*x9707))+(((-1.0)*r10*x9704*x9709)));
evalcond[4]=(((r10*x9703))+(((-1.0)*r12*sj3*x9710))+((r11*x9704))+(((-1.0)*r11*x9702*x9709))+((r10*x9713)));
evalcond[5]=(((cj2*sj1))+((r22*x9712))+((r20*x9702))+((r21*x9700*x9703))+((r21*x9707))+x9706+(((-1.0)*r20*x9704*x9709)));
evalcond[6]=(((r02*x9712))+((r01*x9707))+(((-1.0)*x9708))+((r00*x9702))+x9701+(((-1.0)*r00*x9704*x9709))+((r01*x9700*x9703)));
evalcond[7]=(((r20*x9703))+(((-1.0)*r22*sj3*x9710))+((r21*x9704))+(((-1.0)*x9708))+x9701+((r20*x9713))+(((-1.0)*r21*x9702*x9709)));
evalcond[8]=((((-1.0)*r02*sj3*x9710))+(((-1.0)*sj1*x9705))+(((-1.0)*x9706))+(((-1.0)*r01*x9702*x9709))+((r01*x9704))+((r00*x9703))+((r00*x9713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9714=((1.0)*gconst2);
CheckValue<IkReal> x9715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9714))+(((-1.0)*gconst1*r00)))),-1);
if(!x9715.valid){
continue;
}
CheckValue<IkReal> x9716 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9714))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9715.value)))+(x9716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9717=IKsin(j4);
IkReal x9718=IKcos(j4);
IkReal x9719=(sj1*sj2);
IkReal x9720=(gconst1*sj3);
IkReal x9721=(cj3*gconst1);
IkReal x9722=(cj3*gconst2);
IkReal x9723=((1.0)*cj2);
IkReal x9724=(cj1*sj2);
IkReal x9725=(gconst2*sj3);
IkReal x9726=(cj1*x9723);
IkReal x9727=((1.0)*x9718);
IkReal x9728=((1.0)*x9717);
IkReal x9729=(gconst1*x9717);
IkReal x9730=(cj3*x9717);
IkReal x9731=(x9718*x9725);
evalcond[0]=((((-1.0)*gconst2*r20*x9728))+(((-1.0)*r22*x9727))+((r21*x9729)));
evalcond[1]=(((r01*x9729))+(((-1.0)*r02*x9727))+(((-1.0)*gconst2*r00*x9728)));
evalcond[2]=((1.0)+((r11*x9729))+(((-1.0)*r12*x9727))+(((-1.0)*gconst2*r10*x9728)));
evalcond[3]=(((r11*x9725))+(((-1.0)*r10*x9722*x9727))+((r12*x9730))+((r11*x9718*x9721))+((r10*x9720)));
evalcond[4]=(((r11*x9722))+(((-1.0)*r12*sj3*x9728))+(((-1.0)*r11*x9720*x9727))+((r10*x9721))+((r10*x9731)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9722*x9727))+x9724+((r20*x9720))+((r21*x9718*x9721))+((r21*x9725))+((r22*x9730)));
evalcond[6]=(((r01*x9725))+((r02*x9730))+((r01*x9718*x9721))+x9719+(((-1.0)*x9726))+(((-1.0)*r00*x9722*x9727))+((r00*x9720)));
evalcond[7]=(((r20*x9731))+(((-1.0)*r21*x9720*x9727))+x9719+((r20*x9721))+(((-1.0)*x9726))+(((-1.0)*r22*sj3*x9728))+((r21*x9722)));
evalcond[8]=(((r01*x9722))+(((-1.0)*r02*sj3*x9728))+(((-1.0)*sj1*x9723))+(((-1.0)*r01*x9720*x9727))+(((-1.0)*x9724))+((r00*x9721))+((r00*x9731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9732=((-1.0)*r20);
IkReal x9733=x8995;
CheckValue<IkReal> x9735 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9732),IKFAST_ATAN2_MAGTHRESH);
if(!x9735.valid){
continue;
}
IkReal x9734=((-1.0)*(x9735.value));
sj5=gconst1;
cj5=gconst2;
j5=x9734;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9734;
IkReal gconst1=(r21*x9733);
IkReal gconst2=(x9732*x9733);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9736=((-1.0)*r20);
IkReal x9737=x8995;
CheckValue<IkReal> x9739 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9736),IKFAST_ATAN2_MAGTHRESH);
if(!x9739.valid){
continue;
}
IkReal x9738=((-1.0)*(x9739.value));
sj5=gconst1;
cj5=gconst2;
j5=x9738;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9738;
IkReal gconst1=(r21*x9737);
IkReal gconst2=(x9736*x9737);
CheckValue<IkReal> x9747=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9747.valid){
continue;
}
IkReal x9740=x9747.value;
IkReal x9741=(sj3*x9740);
IkReal x9742=(r11*x9741);
IkReal x9743=(r00*x9741);
IkReal x9744=(r01*x9741);
IkReal x9745=(r10*x9741);
IkReal x9746=(r20*r21*x9741);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9742*(r21*r21)))+((r10*x9743*(r20*r20)))+((r10*r20*r21*x9744))+((r00*r20*r21*x9742))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9748=gconst2*gconst2;
IkReal x9749=gconst1*gconst1;
IkReal x9750=((1.0)*cj3);
IkReal x9751=((1.0)*sj3);
IkReal x9752=(r11*sj3);
IkReal x9753=(r10*sj3);
IkReal x9754=(gconst1*gconst2*r00);
IkReal x9755=(gconst1*gconst2*r01);
IkReal x9756=(r00*x9748);
IkReal x9757=(r01*x9749);
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal((((gconst2*r02*x9752))+((gconst1*r02*x9753)))),IkReal((((x9752*x9755))+(((-1.0)*r11*x9751*x9756))+((x9753*x9757))+(((-1.0)*r10*x9751*x9754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
CheckValue<IkReal> x9759=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9755))+((cj3*r11*x9754))+(((-1.0)*r10*x9750*x9756))+(((-1.0)*r02*r12*x9750))+(((-1.0)*r11*x9750*x9757)))),-1);
if(!x9759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9758.value)+(((1.5707963267949)*(x9759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9760=IKsin(j4);
IkReal x9761=IKcos(j4);
IkReal x9762=(cj2*sj1);
IkReal x9763=(cj1*sj2);
IkReal x9764=(gconst1*sj3);
IkReal x9765=(cj3*gconst1);
IkReal x9766=(sj1*sj2);
IkReal x9767=(cj3*gconst2);
IkReal x9768=(cj1*cj2);
IkReal x9769=(gconst2*sj3);
IkReal x9770=((1.0)*x9761);
IkReal x9771=((1.0)*x9760);
IkReal x9772=(gconst1*x9760);
IkReal x9773=(cj3*x9760);
IkReal x9774=(x9762+x9763);
IkReal x9775=(x9761*x9769);
evalcond[0]=((((-1.0)*r22*x9770))+(((-1.0)*gconst2*r20*x9771))+((r21*x9772)));
evalcond[1]=(((r01*x9772))+(((-1.0)*gconst2*r00*x9771))+(((-1.0)*r02*x9770)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9771))+(((-1.0)*r12*x9770))+((r11*x9772)));
evalcond[3]=(((r12*x9773))+(((-1.0)*r10*x9767*x9770))+((r10*x9764))+((r11*x9761*x9765))+((r11*x9769)));
evalcond[4]=(((r10*x9765))+((r10*x9775))+(((-1.0)*r11*x9764*x9770))+(((-1.0)*r12*sj3*x9771))+((r11*x9767)));
evalcond[5]=(((r22*x9773))+(((-1.0)*r20*x9767*x9770))+x9774+((r21*x9769))+((r20*x9764))+((r21*x9761*x9765)));
evalcond[6]=((((-1.0)*x9766))+((r00*x9764))+((r01*x9769))+((r02*x9773))+x9768+((r01*x9761*x9765))+(((-1.0)*r00*x9767*x9770)));
evalcond[7]=(((r00*x9765))+((r00*x9775))+((r01*x9767))+(((-1.0)*r01*x9764*x9770))+x9774+(((-1.0)*r02*sj3*x9771)));
evalcond[8]=((((-1.0)*x9768))+(((-1.0)*r21*x9764*x9770))+x9766+((r21*x9767))+((r20*x9775))+((r20*x9765))+(((-1.0)*r22*sj3*x9771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9776=gconst2*gconst2;
IkReal x9777=gconst1*gconst1;
IkReal x9778=(gconst2*r11);
IkReal x9779=(cj3*r02);
IkReal x9780=(gconst1*r01);
IkReal x9781=(cj3*r10);
IkReal x9782=(r10*sj3);
IkReal x9783=((1.0)*gconst1*r00);
IkReal x9784=(r01*x9777);
IkReal x9785=(r00*x9776);
CheckValue<IkReal> x9786=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9782*x9785))+((r11*sj3*x9784))+(((-1.0)*sj3*x9778*x9783))+(((-1.0)*gconst2*x9780*x9782)))),-1);
if(!x9786.valid){
continue;
}
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal((((gconst1*r10*x9779))+((x9778*x9779)))),IkReal(((((-1.0)*gconst2*x9781*x9783))+((x9781*x9784))+(((-1.0)*cj3*r11*x9785))+((cj3*x9778*x9780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9786.value)))+(x9787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9788=IKsin(j4);
IkReal x9789=IKcos(j4);
IkReal x9790=(cj2*sj1);
IkReal x9791=(cj1*sj2);
IkReal x9792=(gconst1*sj3);
IkReal x9793=(cj3*gconst1);
IkReal x9794=(sj1*sj2);
IkReal x9795=(cj3*gconst2);
IkReal x9796=(cj1*cj2);
IkReal x9797=(gconst2*sj3);
IkReal x9798=((1.0)*x9789);
IkReal x9799=((1.0)*x9788);
IkReal x9800=(gconst1*x9788);
IkReal x9801=(cj3*x9788);
IkReal x9802=(x9791+x9790);
IkReal x9803=(x9789*x9797);
evalcond[0]=(((r21*x9800))+(((-1.0)*gconst2*r20*x9799))+(((-1.0)*r22*x9798)));
evalcond[1]=((((-1.0)*r02*x9798))+(((-1.0)*gconst2*r00*x9799))+((r01*x9800)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9799))+((r11*x9800))+(((-1.0)*r12*x9798)));
evalcond[3]=(((r12*x9801))+((r11*x9797))+((r10*x9792))+(((-1.0)*r10*x9795*x9798))+((r11*x9789*x9793)));
evalcond[4]=(((r10*x9803))+((r11*x9795))+((r10*x9793))+(((-1.0)*r12*sj3*x9799))+(((-1.0)*r11*x9792*x9798)));
evalcond[5]=((((-1.0)*r20*x9795*x9798))+((r21*x9789*x9793))+((r20*x9792))+((r22*x9801))+((r21*x9797))+x9802);
evalcond[6]=((((-1.0)*x9794))+x9796+(((-1.0)*r00*x9795*x9798))+((r00*x9792))+((r02*x9801))+((r01*x9797))+((r01*x9789*x9793)));
evalcond[7]=(((r00*x9803))+(((-1.0)*r02*sj3*x9799))+((r00*x9793))+((r01*x9795))+x9802+(((-1.0)*r01*x9792*x9798)));
evalcond[8]=((((-1.0)*r21*x9792*x9798))+((r20*x9793))+(((-1.0)*x9796))+x9794+((r21*x9795))+(((-1.0)*r22*sj3*x9799))+((r20*x9803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
CheckValue<IkReal> x9805=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9804.value)+(((1.5707963267949)*(x9805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9806=IKsin(j4);
IkReal x9807=IKcos(j4);
IkReal x9808=(cj2*sj1);
IkReal x9809=(cj1*sj2);
IkReal x9810=(gconst1*sj3);
IkReal x9811=(cj3*gconst1);
IkReal x9812=(sj1*sj2);
IkReal x9813=(cj3*gconst2);
IkReal x9814=(cj1*cj2);
IkReal x9815=(gconst2*sj3);
IkReal x9816=((1.0)*x9807);
IkReal x9817=((1.0)*x9806);
IkReal x9818=(gconst1*x9806);
IkReal x9819=(cj3*x9806);
IkReal x9820=(x9809+x9808);
IkReal x9821=(x9807*x9815);
evalcond[0]=(((r21*x9818))+(((-1.0)*r22*x9816))+(((-1.0)*gconst2*r20*x9817)));
evalcond[1]=((((-1.0)*gconst2*r00*x9817))+(((-1.0)*r02*x9816))+((r01*x9818)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9817))+((r11*x9818))+(((-1.0)*r12*x9816)));
evalcond[3]=((((-1.0)*r10*x9813*x9816))+((r12*x9819))+((r11*x9815))+((r11*x9807*x9811))+((r10*x9810)));
evalcond[4]=((((-1.0)*r11*x9810*x9816))+((r11*x9813))+(((-1.0)*r12*sj3*x9817))+((r10*x9821))+((r10*x9811)));
evalcond[5]=(((r21*x9815))+((r21*x9807*x9811))+((r22*x9819))+x9820+(((-1.0)*r20*x9813*x9816))+((r20*x9810)));
evalcond[6]=((((-1.0)*x9812))+(((-1.0)*r00*x9813*x9816))+((r01*x9807*x9811))+((r02*x9819))+x9814+((r00*x9810))+((r01*x9815)));
evalcond[7]=((((-1.0)*r01*x9810*x9816))+((r00*x9821))+(((-1.0)*r02*sj3*x9817))+x9820+((r00*x9811))+((r01*x9813)));
evalcond[8]=(((r20*x9821))+((r21*x9813))+(((-1.0)*x9814))+(((-1.0)*r22*sj3*x9817))+x9812+(((-1.0)*r21*x9810*x9816))+((r20*x9811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9822=((-1.0)*r20);
IkReal x9823=x8995;
CheckValue<IkReal> x9825 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9822),IKFAST_ATAN2_MAGTHRESH);
if(!x9825.valid){
continue;
}
IkReal x9824=((-1.0)*(x9825.value));
sj5=gconst1;
cj5=gconst2;
j5=x9824;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9824;
IkReal gconst1=(r21*x9823);
IkReal gconst2=(x9822*x9823);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9826=((-1.0)*r20);
IkReal x9827=x8995;
CheckValue<IkReal> x9829 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9826),IKFAST_ATAN2_MAGTHRESH);
if(!x9829.valid){
continue;
}
IkReal x9828=((-1.0)*(x9829.value));
sj5=gconst1;
cj5=gconst2;
j5=x9828;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9828;
IkReal gconst1=(r21*x9827);
IkReal gconst2=(x9826*x9827);
CheckValue<IkReal> x9837=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9837.valid){
continue;
}
IkReal x9830=x9837.value;
IkReal x9831=(sj3*x9830);
IkReal x9832=(r11*x9831);
IkReal x9833=(r00*x9831);
IkReal x9834=(r01*x9831);
IkReal x9835=(r10*x9831);
IkReal x9836=(r20*r21*x9831);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9832*(r21*r21)))+((r10*r20*r21*x9834))+((r00*r20*r21*x9832))+((r10*x9833*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9838=gconst1*gconst1;
IkReal x9839=gconst2*gconst2;
IkReal x9840=((1.0)*cj3);
IkReal x9841=(gconst2*r10);
IkReal x9842=(r01*sj3);
IkReal x9843=(gconst1*r00*sj3);
IkReal x9844=(gconst1*gconst2*r11);
IkReal x9845=(r10*x9839);
IkReal x9846=(r11*x9838);
CheckValue<IkReal> x9847 = IKatan2WithCheck(IkReal((((gconst2*r12*x9842))+((r12*x9843)))),IkReal((((x9842*x9844))+((r00*sj3*x9846))+(((-1.0)*x9842*x9845))+(((-1.0)*x9841*x9843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9847.valid){
continue;
}
CheckValue<IkReal> x9848=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9844))+(((-1.0)*r02*r12*x9840))+(((-1.0)*r01*x9840*x9846))+(((-1.0)*r00*x9840*x9845))+((cj3*gconst1*r01*x9841)))),-1);
if(!x9848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9847.value)+(((1.5707963267949)*(x9848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9849=IKsin(j4);
IkReal x9850=IKcos(j4);
IkReal x9851=(sj1*sj2);
IkReal x9852=(gconst1*sj3);
IkReal x9853=(cj3*gconst1);
IkReal x9854=(cj3*gconst2);
IkReal x9855=((1.0)*cj2);
IkReal x9856=(cj1*sj2);
IkReal x9857=(gconst2*sj3);
IkReal x9858=(cj1*x9855);
IkReal x9859=((1.0)*x9850);
IkReal x9860=((1.0)*x9849);
IkReal x9861=(gconst1*x9849);
IkReal x9862=(cj3*x9849);
IkReal x9863=(x9850*x9857);
evalcond[0]=(((r21*x9861))+(((-1.0)*r22*x9859))+(((-1.0)*gconst2*r20*x9860)));
evalcond[1]=(((r11*x9861))+(((-1.0)*gconst2*r10*x9860))+(((-1.0)*r12*x9859)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9859))+((r01*x9861))+(((-1.0)*gconst2*r00*x9860)));
evalcond[3]=(((r02*x9862))+((r01*x9850*x9853))+((r00*x9852))+((r01*x9857))+(((-1.0)*r00*x9854*x9859)));
evalcond[4]=((((-1.0)*r01*x9852*x9859))+((r00*x9863))+((r00*x9853))+((r01*x9854))+(((-1.0)*r02*sj3*x9860)));
evalcond[5]=(((r21*x9857))+((cj2*sj1))+((r22*x9862))+((r21*x9850*x9853))+((r20*x9852))+x9856+(((-1.0)*r20*x9854*x9859)));
evalcond[6]=(((r10*x9852))+((r11*x9857))+(((-1.0)*r10*x9854*x9859))+((r11*x9850*x9853))+(((-1.0)*x9858))+((r12*x9862))+x9851);
evalcond[7]=(((r21*x9854))+(((-1.0)*r21*x9852*x9859))+((r20*x9853))+(((-1.0)*x9858))+((r20*x9863))+x9851+(((-1.0)*r22*sj3*x9860)));
evalcond[8]=(((r10*x9853))+((r11*x9854))+(((-1.0)*x9856))+(((-1.0)*sj1*x9855))+(((-1.0)*r11*x9852*x9859))+((r10*x9863))+(((-1.0)*r12*sj3*x9860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9864=gconst2*gconst2;
IkReal x9865=gconst1*gconst1;
IkReal x9866=(gconst1*r00);
IkReal x9867=(r11*sj3);
IkReal x9868=((1.0)*gconst2);
IkReal x9869=(cj3*r12);
IkReal x9870=(cj3*r11);
IkReal x9871=(gconst2*r01);
IkReal x9872=(cj3*r10);
IkReal x9873=(r10*sj3);
CheckValue<IkReal> x9874=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9865*x9867))+(((-1.0)*x9866*x9867*x9868))+((r00*x9864*x9873))+(((-1.0)*gconst1*r01*x9868*x9873)))),-1);
if(!x9874.valid){
continue;
}
CheckValue<IkReal> x9875 = IKatan2WithCheck(IkReal((((x9869*x9871))+((x9866*x9869)))),IkReal((((gconst1*x9870*x9871))+(((-1.0)*r01*x9864*x9872))+(((-1.0)*x9866*x9868*x9872))+((r00*x9865*x9870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9874.value)))+(x9875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9876=IKsin(j4);
IkReal x9877=IKcos(j4);
IkReal x9878=(sj1*sj2);
IkReal x9879=(gconst1*sj3);
IkReal x9880=(cj3*gconst1);
IkReal x9881=(cj3*gconst2);
IkReal x9882=((1.0)*cj2);
IkReal x9883=(cj1*sj2);
IkReal x9884=(gconst2*sj3);
IkReal x9885=(cj1*x9882);
IkReal x9886=((1.0)*x9877);
IkReal x9887=((1.0)*x9876);
IkReal x9888=(gconst1*x9876);
IkReal x9889=(cj3*x9876);
IkReal x9890=(x9877*x9884);
evalcond[0]=((((-1.0)*r22*x9886))+((r21*x9888))+(((-1.0)*gconst2*r20*x9887)));
evalcond[1]=(((r11*x9888))+(((-1.0)*gconst2*r10*x9887))+(((-1.0)*r12*x9886)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9887))+((r01*x9888))+(((-1.0)*r02*x9886)));
evalcond[3]=(((r01*x9877*x9880))+((r01*x9884))+(((-1.0)*r00*x9881*x9886))+((r00*x9879))+((r02*x9889)));
evalcond[4]=(((r01*x9881))+((r00*x9890))+((r00*x9880))+(((-1.0)*r02*sj3*x9887))+(((-1.0)*r01*x9879*x9886)));
evalcond[5]=(((cj2*sj1))+((r21*x9884))+((r20*x9879))+((r21*x9877*x9880))+((r22*x9889))+(((-1.0)*r20*x9881*x9886))+x9883);
evalcond[6]=((((-1.0)*r10*x9881*x9886))+((r12*x9889))+((r10*x9879))+(((-1.0)*x9885))+((r11*x9884))+((r11*x9877*x9880))+x9878);
evalcond[7]=((((-1.0)*r22*sj3*x9887))+((r20*x9880))+((r21*x9881))+(((-1.0)*x9885))+(((-1.0)*r21*x9879*x9886))+((r20*x9890))+x9878);
evalcond[8]=((((-1.0)*sj1*x9882))+((r11*x9881))+(((-1.0)*r12*sj3*x9887))+((r10*x9880))+(((-1.0)*x9883))+((r10*x9890))+(((-1.0)*r11*x9879*x9886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9891=((1.0)*gconst2);
CheckValue<IkReal> x9892 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9891))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9892.valid){
continue;
}
CheckValue<IkReal> x9893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9891))+(((-1.0)*gconst1*r10)))),-1);
if(!x9893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9892.value)+(((1.5707963267949)*(x9893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9894=IKsin(j4);
IkReal x9895=IKcos(j4);
IkReal x9896=(sj1*sj2);
IkReal x9897=(gconst1*sj3);
IkReal x9898=(cj3*gconst1);
IkReal x9899=(cj3*gconst2);
IkReal x9900=((1.0)*cj2);
IkReal x9901=(cj1*sj2);
IkReal x9902=(gconst2*sj3);
IkReal x9903=(cj1*x9900);
IkReal x9904=((1.0)*x9895);
IkReal x9905=((1.0)*x9894);
IkReal x9906=(gconst1*x9894);
IkReal x9907=(cj3*x9894);
IkReal x9908=(x9895*x9902);
evalcond[0]=((((-1.0)*gconst2*r20*x9905))+(((-1.0)*r22*x9904))+((r21*x9906)));
evalcond[1]=((((-1.0)*r12*x9904))+((r11*x9906))+(((-1.0)*gconst2*r10*x9905)));
evalcond[2]=((-1.0)+((r01*x9906))+(((-1.0)*r02*x9904))+(((-1.0)*gconst2*r00*x9905)));
evalcond[3]=((((-1.0)*r00*x9899*x9904))+((r02*x9907))+((r00*x9897))+((r01*x9902))+((r01*x9895*x9898)));
evalcond[4]=(((r01*x9899))+((r00*x9898))+((r00*x9908))+(((-1.0)*r02*sj3*x9905))+(((-1.0)*r01*x9897*x9904)));
evalcond[5]=(((cj2*sj1))+((r21*x9895*x9898))+((r22*x9907))+((r21*x9902))+((r20*x9897))+x9901+(((-1.0)*r20*x9899*x9904)));
evalcond[6]=(((r11*x9895*x9898))+((r12*x9907))+((r11*x9902))+(((-1.0)*x9903))+(((-1.0)*r10*x9899*x9904))+((r10*x9897))+x9896);
evalcond[7]=((((-1.0)*r22*sj3*x9905))+((r20*x9908))+(((-1.0)*r21*x9897*x9904))+(((-1.0)*x9903))+((r21*x9899))+((r20*x9898))+x9896);
evalcond[8]=((((-1.0)*x9901))+((r11*x9899))+((r10*x9898))+(((-1.0)*sj1*x9900))+((r10*x9908))+(((-1.0)*r12*sj3*x9905))+(((-1.0)*r11*x9897*x9904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9909=((-1.0)*r20);
IkReal x9910=x8995;
CheckValue<IkReal> x9912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9909),IKFAST_ATAN2_MAGTHRESH);
if(!x9912.valid){
continue;
}
IkReal x9911=((-1.0)*(x9912.value));
sj5=gconst1;
cj5=gconst2;
j5=x9911;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9911;
IkReal gconst1=(r21*x9910);
IkReal gconst2=(x9909*x9910);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9913=((-1.0)*r20);
IkReal x9914=x8995;
CheckValue<IkReal> x9916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9913),IKFAST_ATAN2_MAGTHRESH);
if(!x9916.valid){
continue;
}
IkReal x9915=((-1.0)*(x9916.value));
sj5=gconst1;
cj5=gconst2;
j5=x9915;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9915;
IkReal gconst1=(r21*x9914);
IkReal gconst2=(x9913*x9914);
CheckValue<IkReal> x9924=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9924.valid){
continue;
}
IkReal x9917=x9924.value;
IkReal x9918=(sj3*x9917);
IkReal x9919=(r11*x9918);
IkReal x9920=(r00*x9918);
IkReal x9921=(r01*x9918);
IkReal x9922=(r10*x9918);
IkReal x9923=(r20*r21*x9918);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9919*(r21*r21)))+((r00*r20*r21*x9919))+((r10*x9920*(r20*r20)))+((r10*r20*r21*x9921))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9925=gconst1*gconst1;
IkReal x9926=gconst2*gconst2;
IkReal x9927=((1.0)*cj3);
IkReal x9928=(gconst2*r10);
IkReal x9929=(r01*sj3);
IkReal x9930=(gconst1*r00*sj3);
IkReal x9931=(gconst1*gconst2*r11);
IkReal x9932=(r10*x9926);
IkReal x9933=(r11*x9925);
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal((((r12*x9930))+((gconst2*r12*x9929)))),IkReal(((((-1.0)*x9928*x9930))+((x9929*x9931))+(((-1.0)*x9929*x9932))+((r00*sj3*x9933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
CheckValue<IkReal> x9935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9927*x9932))+(((-1.0)*r01*x9927*x9933))+((cj3*gconst1*r01*x9928))+(((-1.0)*r02*r12*x9927))+((cj3*r00*x9931)))),-1);
if(!x9935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9934.value)+(((1.5707963267949)*(x9935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9936=IKsin(j4);
IkReal x9937=IKcos(j4);
IkReal x9938=(cj2*sj1);
IkReal x9939=(cj1*sj2);
IkReal x9940=(gconst1*sj3);
IkReal x9941=(cj3*gconst1);
IkReal x9942=(sj1*sj2);
IkReal x9943=(cj3*gconst2);
IkReal x9944=(cj1*cj2);
IkReal x9945=(gconst2*sj3);
IkReal x9946=((1.0)*x9937);
IkReal x9947=((1.0)*x9936);
IkReal x9948=(gconst1*x9936);
IkReal x9949=(cj3*x9936);
IkReal x9950=(x9939+x9938);
IkReal x9951=(x9937*x9945);
evalcond[0]=((((-1.0)*gconst2*r20*x9947))+(((-1.0)*r22*x9946))+((r21*x9948)));
evalcond[1]=((((-1.0)*gconst2*r10*x9947))+((r11*x9948))+(((-1.0)*r12*x9946)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9947))+((r01*x9948))+(((-1.0)*r02*x9946)));
evalcond[3]=((((-1.0)*r00*x9943*x9946))+((r02*x9949))+((r01*x9937*x9941))+((r01*x9945))+((r00*x9940)));
evalcond[4]=((((-1.0)*r01*x9940*x9946))+(((-1.0)*r02*sj3*x9947))+((r01*x9943))+((r00*x9941))+((r00*x9951)));
evalcond[5]=(((r21*x9937*x9941))+((r22*x9949))+(((-1.0)*r20*x9943*x9946))+((r20*x9940))+((r21*x9945))+x9950);
evalcond[6]=(((r11*x9937*x9941))+(((-1.0)*r10*x9943*x9946))+(((-1.0)*x9942))+((r12*x9949))+((r11*x9945))+x9944+((r10*x9940)));
evalcond[7]=((((-1.0)*r12*sj3*x9947))+((r11*x9943))+(((-1.0)*r11*x9940*x9946))+x9950+((r10*x9941))+((r10*x9951)));
evalcond[8]=((((-1.0)*x9944))+((r20*x9951))+(((-1.0)*r21*x9940*x9946))+((r20*x9941))+((r21*x9943))+x9942+(((-1.0)*r22*sj3*x9947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9952=gconst2*gconst2;
IkReal x9953=gconst1*gconst1;
IkReal x9954=(gconst1*r00);
IkReal x9955=(r11*sj3);
IkReal x9956=((1.0)*gconst2);
IkReal x9957=(cj3*r12);
IkReal x9958=(cj3*r11);
IkReal x9959=(gconst2*r01);
IkReal x9960=(cj3*r10);
IkReal x9961=(r10*sj3);
CheckValue<IkReal> x9962=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9954*x9955*x9956))+((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9956*x9961))+((r01*x9953*x9955))+((r00*x9952*x9961)))),-1);
if(!x9962.valid){
continue;
}
CheckValue<IkReal> x9963 = IKatan2WithCheck(IkReal((((x9957*x9959))+((x9954*x9957)))),IkReal((((r00*x9953*x9958))+(((-1.0)*x9954*x9956*x9960))+((gconst1*x9958*x9959))+(((-1.0)*r01*x9952*x9960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9962.value)))+(x9963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9964=IKsin(j4);
IkReal x9965=IKcos(j4);
IkReal x9966=(cj2*sj1);
IkReal x9967=(cj1*sj2);
IkReal x9968=(gconst1*sj3);
IkReal x9969=(cj3*gconst1);
IkReal x9970=(sj1*sj2);
IkReal x9971=(cj3*gconst2);
IkReal x9972=(cj1*cj2);
IkReal x9973=(gconst2*sj3);
IkReal x9974=((1.0)*x9965);
IkReal x9975=((1.0)*x9964);
IkReal x9976=(gconst1*x9964);
IkReal x9977=(cj3*x9964);
IkReal x9978=(x9966+x9967);
IkReal x9979=(x9965*x9973);
evalcond[0]=((((-1.0)*gconst2*r20*x9975))+(((-1.0)*r22*x9974))+((r21*x9976)));
evalcond[1]=((((-1.0)*gconst2*r10*x9975))+((r11*x9976))+(((-1.0)*r12*x9974)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9974))+((r01*x9976))+(((-1.0)*gconst2*r00*x9975)));
evalcond[3]=(((r00*x9968))+((r02*x9977))+((r01*x9973))+(((-1.0)*r00*x9971*x9974))+((r01*x9965*x9969)));
evalcond[4]=((((-1.0)*r01*x9968*x9974))+((r00*x9969))+(((-1.0)*r02*sj3*x9975))+((r00*x9979))+((r01*x9971)));
evalcond[5]=(((r22*x9977))+((r21*x9965*x9969))+((r21*x9973))+(((-1.0)*r20*x9971*x9974))+x9978+((r20*x9968)));
evalcond[6]=(((r10*x9968))+(((-1.0)*x9970))+((r12*x9977))+((r11*x9973))+((r11*x9965*x9969))+x9972+(((-1.0)*r10*x9971*x9974)));
evalcond[7]=(((r10*x9969))+(((-1.0)*r12*sj3*x9975))+((r11*x9971))+(((-1.0)*r11*x9968*x9974))+((r10*x9979))+x9978);
evalcond[8]=((((-1.0)*x9972))+((r20*x9979))+((r21*x9971))+x9970+(((-1.0)*r21*x9968*x9974))+(((-1.0)*r22*sj3*x9975))+((r20*x9969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9980 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9980.valid){
continue;
}
CheckValue<IkReal> x9981=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9980.value)+(((1.5707963267949)*(x9981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9982=IKsin(j4);
IkReal x9983=IKcos(j4);
IkReal x9984=(cj2*sj1);
IkReal x9985=(cj1*sj2);
IkReal x9986=(gconst1*sj3);
IkReal x9987=(cj3*gconst1);
IkReal x9988=(sj1*sj2);
IkReal x9989=(cj3*gconst2);
IkReal x9990=(cj1*cj2);
IkReal x9991=(gconst2*sj3);
IkReal x9992=((1.0)*x9983);
IkReal x9993=((1.0)*x9982);
IkReal x9994=(gconst1*x9982);
IkReal x9995=(cj3*x9982);
IkReal x9996=(x9984+x9985);
IkReal x9997=(x9983*x9991);
evalcond[0]=((((-1.0)*r22*x9992))+((r21*x9994))+(((-1.0)*gconst2*r20*x9993)));
evalcond[1]=((((-1.0)*gconst2*r10*x9993))+((r11*x9994))+(((-1.0)*r12*x9992)));
evalcond[2]=((1.0)+((r01*x9994))+(((-1.0)*r02*x9992))+(((-1.0)*gconst2*r00*x9993)));
evalcond[3]=(((r00*x9986))+((r01*x9991))+((r02*x9995))+((r01*x9983*x9987))+(((-1.0)*r00*x9989*x9992)));
evalcond[4]=(((r00*x9987))+((r00*x9997))+((r01*x9989))+(((-1.0)*r01*x9986*x9992))+(((-1.0)*r02*sj3*x9993)));
evalcond[5]=((((-1.0)*r20*x9989*x9992))+((r22*x9995))+((r21*x9991))+((r20*x9986))+x9996+((r21*x9983*x9987)));
evalcond[6]=(((r11*x9983*x9987))+(((-1.0)*r10*x9989*x9992))+((r10*x9986))+((r11*x9991))+((r12*x9995))+(((-1.0)*x9988))+x9990);
evalcond[7]=(((r11*x9989))+((r10*x9987))+((r10*x9997))+(((-1.0)*r11*x9986*x9992))+x9996+(((-1.0)*r12*sj3*x9993)));
evalcond[8]=((((-1.0)*r22*sj3*x9993))+(((-1.0)*r21*x9986*x9992))+((r21*x9989))+((r20*x9997))+(((-1.0)*x9990))+((r20*x9987))+x9988);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9998=((-1.0)*r20);
IkReal x9999=((-1.0)*px);
CheckValue<IkReal> x10001 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9998),IKFAST_ATAN2_MAGTHRESH);
if(!x10001.valid){
continue;
}
IkReal x10000=((-1.0)*(x10001.value));
sj5=gconst1;
cj5=gconst2;
j5=x10000;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9999);
rxp1_1=(px*r21);
rxp1_2=(r11*x9999);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10000;
IkReal gconst1=r21;
IkReal gconst2=x9998;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10002=((-1.0)*r20);
IkReal x10003=((-1.0)*px);
CheckValue<IkReal> x10005 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10002),IKFAST_ATAN2_MAGTHRESH);
if(!x10005.valid){
continue;
}
IkReal x10004=((-1.0)*(x10005.value));
sj5=gconst1;
cj5=gconst2;
j5=x10004;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10003);
rxp1_1=(px*r21);
rxp1_2=(r11*x10003);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10004;
IkReal gconst1=r21;
IkReal gconst2=x10002;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10006=((-1.0)*r20);
IkReal x10007=((-1.0)*px);
CheckValue<IkReal> x10009 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10006),IKFAST_ATAN2_MAGTHRESH);
if(!x10009.valid){
continue;
}
IkReal x10008=((-1.0)*(x10009.value));
sj5=gconst1;
cj5=gconst2;
j5=x10008;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10007);
rxp1_1=(px*r21);
rxp1_2=(r11*x10007);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10008;
IkReal gconst1=r21;
IkReal gconst2=x10006;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10010=((-1.0)*r20);
IkReal x10011=((-1.0)*px);
CheckValue<IkReal> x10013 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10010),IKFAST_ATAN2_MAGTHRESH);
if(!x10013.valid){
continue;
}
IkReal x10012=((-1.0)*(x10013.value));
sj5=gconst1;
cj5=gconst2;
j5=x10012;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10011);
rxp1_1=(px*r21);
rxp1_2=(r11*x10011);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10012;
IkReal gconst1=r21;
IkReal gconst2=x10010;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10014=((-1.0)*r20);
IkReal x10015=((-1.0)*px);
CheckValue<IkReal> x10017 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10014),IKFAST_ATAN2_MAGTHRESH);
if(!x10017.valid){
continue;
}
IkReal x10016=((-1.0)*(x10017.value));
sj5=gconst1;
cj5=gconst2;
j5=x10016;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10015);
rxp1_1=(px*r21);
rxp1_2=(r11*x10015);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10016;
IkReal gconst1=r21;
IkReal gconst2=x10014;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10018=((-1.0)*r20);
IkReal x10019=((-1.0)*px);
CheckValue<IkReal> x10021 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10018),IKFAST_ATAN2_MAGTHRESH);
if(!x10021.valid){
continue;
}
IkReal x10020=((-1.0)*(x10021.value));
sj5=gconst1;
cj5=gconst2;
j5=x10020;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10019);
rxp1_1=(px*r21);
rxp1_2=(r11*x10019);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x10020;
IkReal gconst1=r21;
IkReal gconst2=x10018;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10024=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x10024.valid){
continue;
}
IkReal x10022=x10024.value;
IkReal x10023=(sj0*x10022);
cj4array[0]=(((cj1*sj2*x10023))+((cj2*sj1*x10023)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10025=IKsin(j4);
IkReal x10026=IKcos(j4);
IkReal x10027=(gconst1*x10025);
IkReal x10028=((1.0)*x10026);
IkReal x10029=((1.0)*gconst2*x10025);
evalcond[0]=((-1.0)*r02*x10025);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10028)));
evalcond[2]=(((r21*x10027))+(((-1.0)*r20*x10029)));
evalcond[3]=((((-1.0)*r10*x10029))+((r11*x10027)));
evalcond[4]=(((gconst2*r20*x10026))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x10028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10031=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x10031.valid){
continue;
}
IkReal x10030=x10031.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10030))+((cj1*cj2*x10030)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10032=IKsin(j4);
IkReal x10033=IKcos(j4);
IkReal x10034=(gconst2*r10);
IkReal x10035=((1.0)*sj0);
IkReal x10036=((1.0)*x10032);
IkReal x10037=(gconst1*x10032);
IkReal x10038=((1.0)*x10033);
evalcond[0]=((-1.0)*r02*x10032);
evalcond[1]=((((-1.0)*r02*x10038))+(((-1.0)*x10035)));
evalcond[2]=(((r21*x10037))+(((-1.0)*gconst2*r20*x10036)));
evalcond[3]=((((-1.0)*x10034*x10036))+((r11*x10037)));
evalcond[4]=(((x10033*x10034))+(((-1.0)*cj2*sj1*x10035))+(((-1.0)*cj1*sj2*x10035))+(((-1.0)*gconst1*r11*x10038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10039=IKPowWithIntegerCheck(r02,-1);
if(!x10039.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10039.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10040=IKsin(j4);
IkReal x10041=IKcos(j4);
IkReal x10042=(gconst2*r10);
IkReal x10043=((1.0)*sj0);
IkReal x10044=(gconst1*r11);
IkReal x10045=(gconst1*r21);
IkReal x10046=(gconst2*r20);
IkReal x10047=((1.0)*x10040);
IkReal x10048=((1.0)*x10041);
evalcond[0]=((-1.0)*r02*x10040);
evalcond[1]=(((x10040*x10045))+(((-1.0)*x10046*x10047)));
evalcond[2]=((((-1.0)*x10042*x10047))+((x10040*x10044)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10045*x10048))+((x10041*x10046)));
evalcond[4]=((((-1.0)*x10044*x10048))+(((-1.0)*cj2*sj1*x10043))+(((-1.0)*cj1*sj2*x10043))+((x10041*x10042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10049=((-1.0)*r20);
IkReal x10050=((-1.0)*px);
CheckValue<IkReal> x10052 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10049),IKFAST_ATAN2_MAGTHRESH);
if(!x10052.valid){
continue;
}
IkReal x10051=((-1.0)*(x10052.value));
sj5=gconst1;
cj5=gconst2;
j5=x10051;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10050);
rxp1_1=(px*r21);
rxp1_2=(r11*x10050);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10051;
IkReal gconst1=r21;
IkReal gconst2=x10049;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10053=((-1.0)*r20);
IkReal x10054=((-1.0)*px);
CheckValue<IkReal> x10056 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10053),IKFAST_ATAN2_MAGTHRESH);
if(!x10056.valid){
continue;
}
IkReal x10055=((-1.0)*(x10056.value));
sj5=gconst1;
cj5=gconst2;
j5=x10055;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10054);
rxp1_1=(px*r21);
rxp1_2=(r11*x10054);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10055;
IkReal gconst1=r21;
IkReal gconst2=x10053;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10057=((-1.0)*r20);
IkReal x10058=((-1.0)*px);
CheckValue<IkReal> x10060 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x10057),IKFAST_ATAN2_MAGTHRESH);
if(!x10060.valid){
continue;
}
IkReal x10059=((-1.0)*(x10060.value));
sj5=gconst1;
cj5=gconst2;
j5=x10059;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10058);
rxp1_1=(px*r21);
rxp1_2=(r11*x10058);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x10059;
IkReal gconst1=r21;
IkReal gconst2=x10057;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10063=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10063.valid){
continue;
}
IkReal x10061=x10063.value;
IkReal x10062=(sj0*x10061);
cj4array[0]=(((cj2*sj1*x10062))+((cj1*sj2*x10062)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10064=IKsin(j4);
IkReal x10065=IKcos(j4);
IkReal x10066=((1.0)*gconst2);
IkReal x10067=(gconst1*r21);
evalcond[0]=(r02*x10064);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10065)));
evalcond[2]=(((x10064*x10067))+(((-1.0)*r20*x10064*x10066)));
evalcond[3]=((((-1.0)*r10*x10064*x10066))+((gconst1*r11*x10064)));
evalcond[4]=(((x10065*x10067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x10065*x10066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10069=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10069.valid){
continue;
}
IkReal x10068=x10069.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10068))+((cj1*cj2*x10068)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10070=IKsin(j4);
IkReal x10071=IKcos(j4);
IkReal x10072=((1.0)*sj0);
IkReal x10073=(gconst1*x10070);
IkReal x10074=((1.0)*x10071);
IkReal x10075=((1.0)*gconst2*x10070);
evalcond[0]=(r02*x10070);
evalcond[1]=((((-1.0)*x10072))+(((-1.0)*r02*x10074)));
evalcond[2]=((((-1.0)*r20*x10075))+((r21*x10073)));
evalcond[3]=((((-1.0)*r10*x10075))+((r11*x10073)));
evalcond[4]=((((-1.0)*gconst2*r10*x10074))+(((-1.0)*cj2*sj1*x10072))+(((-1.0)*cj1*sj2*x10072))+((gconst1*r11*x10071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10076=IKPowWithIntegerCheck(r02,-1);
if(!x10076.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10076.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10077=IKsin(j4);
IkReal x10078=IKcos(j4);
IkReal x10079=(gconst1*r21);
IkReal x10080=((1.0)*sj0);
IkReal x10081=(gconst1*r11);
IkReal x10082=((1.0)*gconst2*r10);
IkReal x10083=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10077);
evalcond[1]=((((-1.0)*x10077*x10083))+((x10077*x10079)));
evalcond[2]=((((-1.0)*x10077*x10082))+((x10077*x10081)));
evalcond[3]=((((-1.0)*x10078*x10083))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10078*x10079)));
evalcond[4]=((((-1.0)*x10078*x10082))+((x10078*x10081))+(((-1.0)*cj2*sj1*x10080))+(((-1.0)*cj1*sj2*x10080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10085=IKPowWithIntegerCheck(r02,-1);
if(!x10085.valid){
continue;
}
IkReal x10084=x10085.value;
CheckValue<IkReal> x10086=IKPowWithIntegerCheck(cj3,-1);
if(!x10086.valid){
continue;
}
if( IKabs((x10084*(x10086.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10084)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10084*(x10086.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10084))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10084*(x10086.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10084));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10087=IKsin(j4);
IkReal x10088=IKcos(j4);
IkReal x10089=(gconst2*r10);
IkReal x10090=(gconst1*r11);
IkReal x10091=(sj1*sj2);
IkReal x10092=(gconst2*r20);
IkReal x10093=(cj2*sj1);
IkReal x10094=((1.0)*sj0);
IkReal x10095=(gconst1*r20);
IkReal x10096=(gconst2*r11);
IkReal x10097=(gconst1*r21);
IkReal x10098=((1.0)*cj0);
IkReal x10099=(gconst1*r10);
IkReal x10100=(cj1*sj2);
IkReal x10101=(gconst2*r21);
IkReal x10102=(sj3*x10088);
IkReal x10103=((1.0)*cj1*cj2);
IkReal x10104=(cj3*x10088);
IkReal x10105=(r02*x10087);
IkReal x10106=((1.0)*x10087);
evalcond[0]=((((-1.0)*r02*x10088))+(((-1.0)*x10094)));
evalcond[1]=(((x10087*x10097))+(((-1.0)*x10092*x10106)));
evalcond[2]=(cj0+((x10087*x10090))+(((-1.0)*x10089*x10106)));
evalcond[3]=(((cj0*x10091))+((cj3*x10105))+(((-1.0)*cj1*cj2*x10098)));
evalcond[4]=((((-1.0)*x10093*x10098))+(((-1.0)*sj3*x10105))+(((-1.0)*x10098*x10100)));
evalcond[5]=(x10100+((x10097*x10104))+(((-1.0)*x10092*x10104))+x10093+((sj3*x10095))+((sj3*x10101)));
evalcond[6]=((((-1.0)*x10097*x10102))+((x10092*x10102))+x10091+((cj3*x10101))+(((-1.0)*x10103))+((cj3*x10095)));
evalcond[7]=((((-1.0)*x10089*x10104))+((sj0*x10091))+((x10090*x10104))+(((-1.0)*cj1*cj2*x10094))+((sj3*x10099))+((sj3*x10096)));
evalcond[8]=(((x10089*x10102))+(((-1.0)*x10094*x10100))+(((-1.0)*x10093*x10094))+(((-1.0)*x10090*x10102))+((cj3*x10096))+((cj3*x10099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10107=((1.0)*sj3);
IkReal x10108=((1.0)*gconst2);
CheckValue<IkReal> x10109=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10108))),-1);
if(!x10109.valid){
continue;
}
CheckValue<IkReal> x10110=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10108))),-1);
if(!x10110.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10109.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10110.value)*(((((-1.0)*gconst1*r20*x10107))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10107)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10109.value)))+IKsqr(((x10110.value)*(((((-1.0)*gconst1*r20*x10107))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10107))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10109.value)), ((x10110.value)*(((((-1.0)*gconst1*r20*x10107))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10107))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10111=IKsin(j4);
IkReal x10112=IKcos(j4);
IkReal x10113=(gconst2*r10);
IkReal x10114=(gconst1*r11);
IkReal x10115=(sj1*sj2);
IkReal x10116=(gconst2*r20);
IkReal x10117=(cj2*sj1);
IkReal x10118=((1.0)*sj0);
IkReal x10119=(gconst1*r20);
IkReal x10120=(gconst2*r11);
IkReal x10121=(gconst1*r21);
IkReal x10122=((1.0)*cj0);
IkReal x10123=(gconst1*r10);
IkReal x10124=(cj1*sj2);
IkReal x10125=(gconst2*r21);
IkReal x10126=(sj3*x10112);
IkReal x10127=((1.0)*cj1*cj2);
IkReal x10128=(cj3*x10112);
IkReal x10129=(r02*x10111);
IkReal x10130=((1.0)*x10111);
evalcond[0]=((((-1.0)*r02*x10112))+(((-1.0)*x10118)));
evalcond[1]=((((-1.0)*x10116*x10130))+((x10111*x10121)));
evalcond[2]=(cj0+(((-1.0)*x10113*x10130))+((x10111*x10114)));
evalcond[3]=(((cj3*x10129))+((cj0*x10115))+(((-1.0)*cj1*cj2*x10122)));
evalcond[4]=((((-1.0)*sj3*x10129))+(((-1.0)*x10117*x10122))+(((-1.0)*x10122*x10124)));
evalcond[5]=(x10124+x10117+((x10121*x10128))+((sj3*x10125))+((sj3*x10119))+(((-1.0)*x10116*x10128)));
evalcond[6]=(((cj3*x10125))+x10115+((x10116*x10126))+(((-1.0)*x10121*x10126))+((cj3*x10119))+(((-1.0)*x10127)));
evalcond[7]=((((-1.0)*x10113*x10128))+((x10114*x10128))+(((-1.0)*cj1*cj2*x10118))+((sj0*x10115))+((sj3*x10123))+((sj3*x10120)));
evalcond[8]=(((cj3*x10123))+((cj3*x10120))+(((-1.0)*x10117*x10118))+((x10113*x10126))+(((-1.0)*x10114*x10126))+(((-1.0)*x10118*x10124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10131=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10131.valid){
continue;
}
CheckValue<IkReal> x10132=IKPowWithIntegerCheck(r02,-1);
if(!x10132.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10131.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10132.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10131.value)))+IKsqr(((-1.0)*sj0*(x10132.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10131.value)), ((-1.0)*sj0*(x10132.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10133=IKsin(j4);
IkReal x10134=IKcos(j4);
IkReal x10135=(gconst2*r10);
IkReal x10136=(gconst1*r11);
IkReal x10137=(sj1*sj2);
IkReal x10138=(gconst2*r20);
IkReal x10139=(cj2*sj1);
IkReal x10140=((1.0)*sj0);
IkReal x10141=(gconst1*r20);
IkReal x10142=(gconst2*r11);
IkReal x10143=(gconst1*r21);
IkReal x10144=((1.0)*cj0);
IkReal x10145=(gconst1*r10);
IkReal x10146=(cj1*sj2);
IkReal x10147=(gconst2*r21);
IkReal x10148=(sj3*x10134);
IkReal x10149=((1.0)*cj1*cj2);
IkReal x10150=(cj3*x10134);
IkReal x10151=(r02*x10133);
IkReal x10152=((1.0)*x10133);
evalcond[0]=((((-1.0)*r02*x10134))+(((-1.0)*x10140)));
evalcond[1]=(((x10133*x10143))+(((-1.0)*x10138*x10152)));
evalcond[2]=(cj0+((x10133*x10136))+(((-1.0)*x10135*x10152)));
evalcond[3]=((((-1.0)*cj1*cj2*x10144))+((cj0*x10137))+((cj3*x10151)));
evalcond[4]=((((-1.0)*sj3*x10151))+(((-1.0)*x10144*x10146))+(((-1.0)*x10139*x10144)));
evalcond[5]=((((-1.0)*x10138*x10150))+((x10143*x10150))+x10139+x10146+((sj3*x10147))+((sj3*x10141)));
evalcond[6]=((((-1.0)*x10143*x10148))+((x10138*x10148))+x10137+(((-1.0)*x10149))+((cj3*x10141))+((cj3*x10147)));
evalcond[7]=(((x10136*x10150))+(((-1.0)*cj1*cj2*x10140))+(((-1.0)*x10135*x10150))+((sj3*x10142))+((sj3*x10145))+((sj0*x10137)));
evalcond[8]=(((x10135*x10148))+(((-1.0)*x10136*x10148))+((cj3*x10145))+((cj3*x10142))+(((-1.0)*x10139*x10140))+(((-1.0)*x10140*x10146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10153=gconst1*gconst1;
IkReal x10154=r21*r21;
IkReal x10155=gconst2*gconst2;
IkReal x10156=r20*r20;
IkReal x10157=(gconst2*r20);
IkReal x10158=(cj1*cj2);
IkReal x10159=(sj1*sj2);
IkReal x10160=(gconst1*r21);
IkReal x10161=(cj3*gconst2);
IkReal x10162=(cj3*r20);
CheckValue<IkReal> x10163=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10157*x10160))+((sj3*x10153*x10154))+((sj3*x10155*x10156)))),-1);
if(!x10163.valid){
continue;
}
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal((((gconst1*r22*x10162))+(((-1.0)*r22*x10158))+((r22*x10159))+((r21*r22*x10161)))),IkReal(((((-1.0)*x10157*x10159))+((r21*x10153*x10162))+(((-1.0)*gconst1*x10156*x10161))+(((-1.0)*r21*x10155*x10162))+((x10159*x10160))+((x10157*x10158))+(((-1.0)*x10158*x10160))+((gconst1*x10154*x10161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10163.value)))+(x10164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10165=IKsin(j4);
IkReal x10166=IKcos(j4);
IkReal x10167=(cj3*gconst1);
IkReal x10168=(gconst1*r01);
IkReal x10169=(gconst1*r11);
IkReal x10170=(sj1*sj2);
IkReal x10171=(cj3*gconst2);
IkReal x10172=(gconst1*sj3);
IkReal x10173=(gconst2*sj3);
IkReal x10174=((1.0)*sj0);
IkReal x10175=(cj1*sj2);
IkReal x10176=((1.0)*x10166);
IkReal x10177=((1.0)*x10165);
IkReal x10178=((1.0)*cj1*cj2);
IkReal x10179=(cj3*x10165);
IkReal x10180=((1.0)*cj2*sj1);
IkReal x10181=(x10166*x10173);
evalcond[0]=((((-1.0)*r22*x10176))+(((-1.0)*gconst2*r20*x10177))+((gconst1*r21*x10165)));
evalcond[1]=(cj0+((x10165*x10169))+(((-1.0)*r12*x10176))+(((-1.0)*gconst2*r10*x10177)));
evalcond[2]=((((-1.0)*gconst2*r00*x10177))+((x10165*x10168))+(((-1.0)*x10174))+(((-1.0)*r02*x10176)));
evalcond[3]=(((cj2*sj1))+((r21*x10166*x10167))+((r22*x10179))+x10175+((r21*x10173))+(((-1.0)*r20*x10171*x10176))+((r20*x10172)));
evalcond[4]=((((-1.0)*r22*sj3*x10177))+((r20*x10167))+(((-1.0)*r21*x10172*x10176))+x10170+((r21*x10171))+(((-1.0)*x10178))+((r20*x10181)));
evalcond[5]=(((r02*x10179))+((r01*x10166*x10167))+((r00*x10172))+((cj0*x10170))+((r01*x10173))+(((-1.0)*cj0*x10178))+(((-1.0)*r00*x10171*x10176)));
evalcond[6]=(((sj0*x10170))+((r10*x10172))+((r12*x10179))+((r11*x10173))+(((-1.0)*r10*x10171*x10176))+((r11*x10166*x10167))+(((-1.0)*cj1*cj2*x10174)));
evalcond[7]=((((-1.0)*r02*sj3*x10177))+(((-1.0)*cj0*x10175))+((r00*x10167))+((r01*x10171))+((r00*x10181))+(((-1.0)*cj0*x10180))+(((-1.0)*sj3*x10168*x10176)));
evalcond[8]=(((r10*x10167))+(((-1.0)*x10174*x10175))+((r10*x10181))+(((-1.0)*sj3*x10169*x10176))+((r11*x10171))+(((-1.0)*r12*sj3*x10177))+(((-1.0)*cj2*sj1*x10174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10182=((1.0)*gconst2);
CheckValue<IkReal> x10183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10182)))),-1);
if(!x10183.valid){
continue;
}
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst1*r21*sj0))+(((-1.0)*r20*sj0*x10182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10183.value)))+(x10184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10185=IKsin(j4);
IkReal x10186=IKcos(j4);
IkReal x10187=(cj3*gconst1);
IkReal x10188=(gconst1*r01);
IkReal x10189=(gconst1*r11);
IkReal x10190=(sj1*sj2);
IkReal x10191=(cj3*gconst2);
IkReal x10192=(gconst1*sj3);
IkReal x10193=(gconst2*sj3);
IkReal x10194=((1.0)*sj0);
IkReal x10195=(cj1*sj2);
IkReal x10196=((1.0)*x10186);
IkReal x10197=((1.0)*x10185);
IkReal x10198=((1.0)*cj1*cj2);
IkReal x10199=(cj3*x10185);
IkReal x10200=((1.0)*cj2*sj1);
IkReal x10201=(x10186*x10193);
evalcond[0]=(((gconst1*r21*x10185))+(((-1.0)*r22*x10196))+(((-1.0)*gconst2*r20*x10197)));
evalcond[1]=(cj0+(((-1.0)*r12*x10196))+((x10185*x10189))+(((-1.0)*gconst2*r10*x10197)));
evalcond[2]=((((-1.0)*r02*x10196))+(((-1.0)*gconst2*r00*x10197))+(((-1.0)*x10194))+((x10185*x10188)));
evalcond[3]=(((cj2*sj1))+((r21*x10186*x10187))+((r22*x10199))+x10195+((r21*x10193))+(((-1.0)*r20*x10191*x10196))+((r20*x10192)));
evalcond[4]=((((-1.0)*r22*sj3*x10197))+(((-1.0)*x10198))+x10190+(((-1.0)*r21*x10192*x10196))+((r21*x10191))+((r20*x10201))+((r20*x10187)));
evalcond[5]=(((r02*x10199))+((r01*x10186*x10187))+(((-1.0)*r00*x10191*x10196))+(((-1.0)*cj0*x10198))+((r01*x10193))+((cj0*x10190))+((r00*x10192)));
evalcond[6]=(((sj0*x10190))+((r11*x10193))+((r10*x10192))+((r12*x10199))+((r11*x10186*x10187))+(((-1.0)*r10*x10191*x10196))+(((-1.0)*cj1*cj2*x10194)));
evalcond[7]=((((-1.0)*cj0*x10195))+(((-1.0)*r02*sj3*x10197))+((r00*x10201))+(((-1.0)*cj0*x10200))+((r00*x10187))+((r01*x10191))+(((-1.0)*sj3*x10188*x10196)));
evalcond[8]=(((r10*x10187))+((r11*x10191))+((r10*x10201))+(((-1.0)*x10194*x10195))+(((-1.0)*r12*sj3*x10197))+(((-1.0)*cj2*sj1*x10194))+(((-1.0)*sj3*x10189*x10196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10202=((1.0)*gconst2);
CheckValue<IkReal> x10203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10202))+(((-1.0)*gconst1*r00)))),-1);
if(!x10203.valid){
continue;
}
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10202))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10203.value)))+(x10204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10205=IKsin(j4);
IkReal x10206=IKcos(j4);
IkReal x10207=(cj3*gconst1);
IkReal x10208=(gconst1*r01);
IkReal x10209=(gconst1*r11);
IkReal x10210=(sj1*sj2);
IkReal x10211=(cj3*gconst2);
IkReal x10212=(gconst1*sj3);
IkReal x10213=(gconst2*sj3);
IkReal x10214=((1.0)*sj0);
IkReal x10215=(cj1*sj2);
IkReal x10216=((1.0)*x10206);
IkReal x10217=((1.0)*x10205);
IkReal x10218=((1.0)*cj1*cj2);
IkReal x10219=(cj3*x10205);
IkReal x10220=((1.0)*cj2*sj1);
IkReal x10221=(x10206*x10213);
evalcond[0]=(((gconst1*r21*x10205))+(((-1.0)*r22*x10216))+(((-1.0)*gconst2*r20*x10217)));
evalcond[1]=(cj0+((x10205*x10209))+(((-1.0)*r12*x10216))+(((-1.0)*gconst2*r10*x10217)));
evalcond[2]=((((-1.0)*gconst2*r00*x10217))+(((-1.0)*x10214))+((x10205*x10208))+(((-1.0)*r02*x10216)));
evalcond[3]=(((cj2*sj1))+((r20*x10212))+((r21*x10213))+x10215+((r21*x10206*x10207))+(((-1.0)*r20*x10211*x10216))+((r22*x10219)));
evalcond[4]=((((-1.0)*x10218))+(((-1.0)*r21*x10212*x10216))+(((-1.0)*r22*sj3*x10217))+((r21*x10211))+x10210+((r20*x10207))+((r20*x10221)));
evalcond[5]=(((r01*x10213))+((r01*x10206*x10207))+(((-1.0)*cj0*x10218))+((r00*x10212))+(((-1.0)*r00*x10211*x10216))+((r02*x10219))+((cj0*x10210)));
evalcond[6]=(((r11*x10213))+((r10*x10212))+((sj0*x10210))+((r12*x10219))+(((-1.0)*cj1*cj2*x10214))+(((-1.0)*r10*x10211*x10216))+((r11*x10206*x10207)));
evalcond[7]=((((-1.0)*cj0*x10215))+(((-1.0)*r02*sj3*x10217))+((r01*x10211))+(((-1.0)*sj3*x10208*x10216))+((r00*x10207))+(((-1.0)*cj0*x10220))+((r00*x10221)));
evalcond[8]=(((r10*x10221))+((r11*x10211))+((r10*x10207))+(((-1.0)*cj2*sj1*x10214))+(((-1.0)*x10214*x10215))+(((-1.0)*sj3*x10209*x10216))+(((-1.0)*r12*sj3*x10217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10222=((-1.0)*r21);
IkReal x10224 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10224)==0){
continue;
}
IkReal x10223=pow(x10224,-0.5);
CheckValue<IkReal> x10225 = IKatan2WithCheck(IkReal(x10222),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10225.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10225.value))));
IkReal gconst4=(x10222*x10223);
IkReal gconst5=((1.0)*r20*x10223);
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10226.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10227=((-1.0)*r21);
CheckValue<IkReal> x10230 = IKatan2WithCheck(IkReal(x10227),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10230.valid){
continue;
}
IkReal x10228=((1.0)*(x10230.value));
IkReal x10229=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10228)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10228)));
IkReal gconst4=(x10227*x10229);
IkReal gconst5=((1.0)*r20*x10229);
IkReal x10231=r22*r22;
IkReal x10232=((1.0)*x10231);
CheckValue<IkReal> x10236=IKPowWithIntegerCheck(((-1.0)+x10231),-1);
if(!x10236.valid){
continue;
}
IkReal x10233=x10236.value;
if((((1.0)+(((-1.0)*x10232)))) < -0.00001)
continue;
IkReal x10234=IKsqrt(((1.0)+(((-1.0)*x10232))));
IkReal x10235=(cj0*x10233*x10234);
j4eval[0]=((IKabs(((((-1.0)*x10232*x10235))+x10235)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10237=((-1.0)*r21);
CheckValue<IkReal> x10240 = IKatan2WithCheck(IkReal(x10237),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10240.valid){
continue;
}
IkReal x10238=((1.0)*(x10240.value));
IkReal x10239=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10238)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10238)));
IkReal gconst4=(x10237*x10239);
IkReal gconst5=((1.0)*r20*x10239);
IkReal x10241=r22*r22;
IkReal x10242=((1.0)*x10241);
CheckValue<IkReal> x10246=IKPowWithIntegerCheck(((-1.0)+x10241),-1);
if(!x10246.valid){
continue;
}
IkReal x10243=x10246.value;
if((((1.0)+(((-1.0)*x10242)))) < -0.00001)
continue;
IkReal x10244=IKsqrt(((1.0)+(((-1.0)*x10242))));
IkReal x10245=(sj0*x10243*x10244);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10245+(((-1.0)*x10242*x10245))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10247=((-1.0)*r21);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(x10247),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
IkReal x10248=((1.0)*(x10250.value));
IkReal x10249=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10248)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10248)));
IkReal gconst4=(x10247*x10249);
IkReal gconst5=((1.0)*r20*x10249);
IkReal x10251=r22*r22;
IkReal x10252=(r12*sj0);
IkReal x10253=(cj0*r02);
CheckValue<IkReal> x10257=IKPowWithIntegerCheck(((-1.0)+x10251),-1);
if(!x10257.valid){
continue;
}
IkReal x10254=x10257.value;
if((((1.0)+(((-1.0)*x10251)))) < -0.00001)
continue;
IkReal x10255=IKsqrt(((1.0)+(((-1.0)*x10251))));
IkReal x10256=(r22*x10254*x10255);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10253*x10256))+((x10252*x10256)))))+(IKabs(((((-1.0)*x10253))+(((-1.0)*x10252))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10258=((-1.0)*r21);
CheckValue<IkReal> x10261 = IKatan2WithCheck(IkReal(x10258),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10261.valid){
continue;
}
IkReal x10259=((1.0)*(x10261.value));
IkReal x10260=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10259)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10259)));
IkReal gconst4=(x10258*x10260);
IkReal gconst5=((1.0)*r20*x10260);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10262=((-1.0)*r21);
CheckValue<IkReal> x10265 = IKatan2WithCheck(IkReal(x10262),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10265.valid){
continue;
}
IkReal x10263=((1.0)*(x10265.value));
IkReal x10264=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10263)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10263)));
IkReal gconst4=(x10262*x10264);
IkReal gconst5=((1.0)*r20*x10264);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10266=((-1.0)*r21);
CheckValue<IkReal> x10269 = IKatan2WithCheck(IkReal(x10266),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10269.valid){
continue;
}
IkReal x10267=((1.0)*(x10269.value));
IkReal x10268=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10267)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10267)));
IkReal gconst4=(x10266*x10268);
IkReal gconst5=((1.0)*r20*x10268);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10270=((-1.0)*r21);
CheckValue<IkReal> x10273 = IKatan2WithCheck(IkReal(x10270),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10273.valid){
continue;
}
IkReal x10271=((1.0)*(x10273.value));
IkReal x10272=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10271)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10271)));
IkReal gconst4=(x10270*x10272);
IkReal gconst5=((1.0)*r20*x10272);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10274=((-1.0)*r21);
CheckValue<IkReal> x10277 = IKatan2WithCheck(IkReal(x10274),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10277.valid){
continue;
}
IkReal x10275=((1.0)*(x10277.value));
IkReal x10276=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10275)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10275)));
IkReal gconst4=(x10274*x10276);
IkReal gconst5=((1.0)*r20*x10276);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10278=((-1.0)*r21);
CheckValue<IkReal> x10281 = IKatan2WithCheck(IkReal(x10278),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10281.valid){
continue;
}
IkReal x10279=((1.0)*(x10281.value));
IkReal x10280=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10279)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10279)));
IkReal gconst4=(x10278*x10280);
IkReal gconst5=((1.0)*r20*x10280);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10282=(gconst5*r10);
IkReal x10283=(gconst4*r11);
CheckValue<IkReal> x10284 = IKatan2WithCheck(IkReal((x10282+(((-1.0)*x10283)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10284.valid){
continue;
}
CheckValue<IkReal> x10285=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10282*x10282)+(x10283*x10283)+(((-2.0)*x10282*x10283)))),-1);
if(!x10285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10284.value)+(((1.5707963267949)*(x10285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10286=IKsin(j4);
IkReal x10287=IKcos(j4);
IkReal x10288=(gconst4*r11);
IkReal x10289=((1.0)*cj1);
IkReal x10290=(gconst5*r10);
IkReal x10291=(gconst4*r01);
IkReal x10292=(gconst5*r00);
IkReal x10293=(gconst4*r21);
IkReal x10294=(gconst5*r20);
IkReal x10295=((1.0)*x10287);
IkReal x10296=((1.0)*x10286);
evalcond[0]=((((-1.0)*x10294*x10296))+((x10286*x10293))+(((-1.0)*r22*x10295)));
evalcond[1]=((((-1.0)*x10292*x10296))+(((-1.0)*r02*x10295))+((x10286*x10291)));
evalcond[2]=((((-1.0)*r12*x10296))+((x10287*x10290))+(((-1.0)*x10288*x10295)));
evalcond[3]=((1.0)+(((-1.0)*x10290*x10296))+(((-1.0)*r12*x10295))+((x10286*x10288)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10293*x10295))+(((-1.0)*r22*x10296))+((x10287*x10294))+(((-1.0)*cj2*x10289)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10291*x10295))+(((-1.0)*r02*x10296))+((x10287*x10292))+(((-1.0)*sj2*x10289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10297=((1.0)*gconst5);
CheckValue<IkReal> x10298=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10297)))),-1);
if(!x10298.valid){
continue;
}
CheckValue<IkReal> x10299 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10298.value)))+(x10299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10300=IKsin(j4);
IkReal x10301=IKcos(j4);
IkReal x10302=(gconst4*r11);
IkReal x10303=((1.0)*cj1);
IkReal x10304=(gconst5*r10);
IkReal x10305=(gconst4*r01);
IkReal x10306=(gconst5*r00);
IkReal x10307=(gconst4*r21);
IkReal x10308=(gconst5*r20);
IkReal x10309=((1.0)*x10301);
IkReal x10310=((1.0)*x10300);
evalcond[0]=((((-1.0)*r22*x10309))+((x10300*x10307))+(((-1.0)*x10308*x10310)));
evalcond[1]=((((-1.0)*r02*x10309))+((x10300*x10305))+(((-1.0)*x10306*x10310)));
evalcond[2]=((((-1.0)*x10302*x10309))+(((-1.0)*r12*x10310))+((x10301*x10304)));
evalcond[3]=((1.0)+(((-1.0)*x10304*x10310))+(((-1.0)*r12*x10309))+((x10300*x10302)));
evalcond[4]=((((-1.0)*cj2*x10303))+((sj1*sj2))+(((-1.0)*x10307*x10309))+(((-1.0)*r22*x10310))+((x10301*x10308)));
evalcond[5]=((((-1.0)*x10305*x10309))+(((-1.0)*sj2*x10303))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10310))+((x10301*x10306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10311 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10311.valid){
continue;
}
CheckValue<IkReal> x10312=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10311.value)+(((1.5707963267949)*(x10312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10313=IKsin(j4);
IkReal x10314=IKcos(j4);
IkReal x10315=(gconst4*r11);
IkReal x10316=((1.0)*cj1);
IkReal x10317=(gconst5*r10);
IkReal x10318=(gconst4*r01);
IkReal x10319=(gconst5*r00);
IkReal x10320=(gconst4*r21);
IkReal x10321=(gconst5*r20);
IkReal x10322=((1.0)*x10314);
IkReal x10323=((1.0)*x10313);
evalcond[0]=(((x10313*x10320))+(((-1.0)*x10321*x10323))+(((-1.0)*r22*x10322)));
evalcond[1]=((((-1.0)*r02*x10322))+(((-1.0)*x10319*x10323))+((x10313*x10318)));
evalcond[2]=((((-1.0)*r12*x10323))+(((-1.0)*x10315*x10322))+((x10314*x10317)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10322))+((x10313*x10315))+(((-1.0)*x10317*x10323)));
evalcond[4]=(((x10314*x10321))+(((-1.0)*r22*x10323))+((sj1*sj2))+(((-1.0)*cj2*x10316))+(((-1.0)*x10320*x10322)));
evalcond[5]=((((-1.0)*r02*x10323))+(((-1.0)*cj2*sj1))+(((-1.0)*x10318*x10322))+((x10314*x10319))+(((-1.0)*sj2*x10316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10324=((-1.0)*r21);
CheckValue<IkReal> x10327 = IKatan2WithCheck(IkReal(x10324),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10327.valid){
continue;
}
IkReal x10325=((1.0)*(x10327.value));
IkReal x10326=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10325)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10325)));
IkReal gconst4=(x10324*x10326);
IkReal gconst5=((1.0)*r20*x10326);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10328=((-1.0)*r21);
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal(x10328),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
IkReal x10329=((1.0)*(x10331.value));
IkReal x10330=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10329)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10329)));
IkReal gconst4=(x10328*x10330);
IkReal gconst5=((1.0)*r20*x10330);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10332=((-1.0)*r21);
CheckValue<IkReal> x10335 = IKatan2WithCheck(IkReal(x10332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10335.valid){
continue;
}
IkReal x10333=((1.0)*(x10335.value));
IkReal x10334=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10333)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10333)));
IkReal gconst4=(x10332*x10334);
IkReal gconst5=((1.0)*r20*x10334);
IkReal x10336=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10340=IKPowWithIntegerCheck(x10336,-1);
if(!x10340.valid){
continue;
}
IkReal x10337=x10340.value;
IkReal x10338=((1.0)*x10337);
IkReal x10339=((((-1.0)*x10338*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10337))+(((-1.0)*x10338*(r11*r11)*(r21*r21))));
j4eval[0]=x10339;
j4eval[1]=r12;
j4eval[2]=x10336;
j4eval[3]=IKsign(x10339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10341=(gconst5*r10);
IkReal x10342=(gconst4*r11);
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal((x10342+(((-1.0)*x10341)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
CheckValue<IkReal> x10344=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10341*x10341)))+(((-1.0)*(x10342*x10342)))+(((2.0)*x10341*x10342))+(((-1.0)*(r12*r12))))),-1);
if(!x10344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10343.value)+(((1.5707963267949)*(x10344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10345=IKcos(j4);
IkReal x10346=IKsin(j4);
IkReal x10347=(gconst4*r11);
IkReal x10348=(gconst5*r10);
IkReal x10349=((1.0)*cj1);
IkReal x10350=(gconst5*r00);
IkReal x10351=(gconst5*r20);
IkReal x10352=((1.0)*x10345);
IkReal x10353=(gconst4*x10345);
IkReal x10354=((1.0)*x10346);
IkReal x10355=(gconst4*x10346);
evalcond[0]=(((x10345*x10347))+((r12*x10346))+(((-1.0)*x10348*x10352)));
evalcond[1]=(((r21*x10355))+(((-1.0)*r22*x10352))+(((-1.0)*x10351*x10354)));
evalcond[2]=(((r01*x10355))+(((-1.0)*x10350*x10354))+(((-1.0)*r02*x10352)));
evalcond[3]=((1.0)+((x10346*x10347))+(((-1.0)*x10348*x10354))+(((-1.0)*r12*x10352)));
evalcond[4]=(((r21*x10353))+(((-1.0)*cj2*x10349))+((sj1*sj2))+((r22*x10346))+(((-1.0)*x10351*x10352)));
evalcond[5]=((((-1.0)*sj2*x10349))+(((-1.0)*cj2*sj1))+((r01*x10353))+(((-1.0)*x10350*x10352))+((r02*x10346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10356=((1.0)*gconst5);
CheckValue<IkReal> x10357 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10357.valid){
continue;
}
CheckValue<IkReal> x10358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10356)))),-1);
if(!x10358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10357.value)+(((1.5707963267949)*(x10358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10359=IKcos(j4);
IkReal x10360=IKsin(j4);
IkReal x10361=(gconst4*r11);
IkReal x10362=(gconst5*r10);
IkReal x10363=((1.0)*cj1);
IkReal x10364=(gconst5*r00);
IkReal x10365=(gconst5*r20);
IkReal x10366=((1.0)*x10359);
IkReal x10367=(gconst4*x10359);
IkReal x10368=((1.0)*x10360);
IkReal x10369=(gconst4*x10360);
evalcond[0]=((((-1.0)*x10362*x10366))+((x10359*x10361))+((r12*x10360)));
evalcond[1]=(((r21*x10369))+(((-1.0)*x10365*x10368))+(((-1.0)*r22*x10366)));
evalcond[2]=(((r01*x10369))+(((-1.0)*r02*x10366))+(((-1.0)*x10364*x10368)));
evalcond[3]=((1.0)+(((-1.0)*x10362*x10368))+(((-1.0)*r12*x10366))+((x10360*x10361)));
evalcond[4]=(((r22*x10360))+((r21*x10367))+(((-1.0)*cj2*x10363))+((sj1*sj2))+(((-1.0)*x10365*x10366)));
evalcond[5]=(((r01*x10367))+(((-1.0)*cj2*sj1))+((r02*x10360))+(((-1.0)*x10364*x10366))+(((-1.0)*sj2*x10363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10370 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10370.valid){
continue;
}
CheckValue<IkReal> x10371=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10370.value)+(((1.5707963267949)*(x10371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10372=IKcos(j4);
IkReal x10373=IKsin(j4);
IkReal x10374=(gconst4*r11);
IkReal x10375=(gconst5*r10);
IkReal x10376=((1.0)*cj1);
IkReal x10377=(gconst5*r00);
IkReal x10378=(gconst5*r20);
IkReal x10379=((1.0)*x10372);
IkReal x10380=(gconst4*x10372);
IkReal x10381=((1.0)*x10373);
IkReal x10382=(gconst4*x10373);
evalcond[0]=((((-1.0)*x10375*x10379))+((x10372*x10374))+((r12*x10373)));
evalcond[1]=(((r21*x10382))+(((-1.0)*x10378*x10381))+(((-1.0)*r22*x10379)));
evalcond[2]=((((-1.0)*x10377*x10381))+(((-1.0)*r02*x10379))+((r01*x10382)));
evalcond[3]=((1.0)+(((-1.0)*x10375*x10381))+((x10373*x10374))+(((-1.0)*r12*x10379)));
evalcond[4]=((((-1.0)*cj2*x10376))+((r22*x10373))+((r21*x10380))+((sj1*sj2))+(((-1.0)*x10378*x10379)));
evalcond[5]=((((-1.0)*x10377*x10379))+(((-1.0)*cj2*sj1))+((r02*x10373))+((r01*x10380))+(((-1.0)*sj2*x10376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10383=((-1.0)*r21);
CheckValue<IkReal> x10386 = IKatan2WithCheck(IkReal(x10383),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10386.valid){
continue;
}
IkReal x10384=((1.0)*(x10386.value));
IkReal x10385=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10384)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10384)));
IkReal gconst4=(x10383*x10385);
IkReal gconst5=((1.0)*r20*x10385);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10387=((-1.0)*r21);
CheckValue<IkReal> x10390 = IKatan2WithCheck(IkReal(x10387),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10390.valid){
continue;
}
IkReal x10388=((1.0)*(x10390.value));
IkReal x10389=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10388)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10388)));
IkReal gconst4=(x10387*x10389);
IkReal gconst5=((1.0)*r20*x10389);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10391=((-1.0)*r21);
CheckValue<IkReal> x10394 = IKatan2WithCheck(IkReal(x10391),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10394.valid){
continue;
}
IkReal x10392=((1.0)*(x10394.value));
IkReal x10393=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10392)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10392)));
IkReal gconst4=(x10391*x10393);
IkReal gconst5=((1.0)*r20*x10393);
IkReal x10395=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10399=IKPowWithIntegerCheck(x10395,-1);
if(!x10399.valid){
continue;
}
IkReal x10396=x10399.value;
IkReal x10397=((1.0)*x10396);
IkReal x10398=((((-2.0)*r10*r11*r20*r21*x10396))+(((-1.0)*x10397*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10397*(r10*r10)*(r20*r20))));
j4eval[0]=x10398;
j4eval[1]=r12;
j4eval[2]=x10395;
j4eval[3]=IKsign(x10398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10400=(gconst5*r10);
IkReal x10401=(gconst4*r11);
CheckValue<IkReal> x10402=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10400*x10400)))+(((-1.0)*(x10401*x10401)))+(((2.0)*x10400*x10401))+(((-1.0)*(r12*r12))))),-1);
if(!x10402.valid){
continue;
}
CheckValue<IkReal> x10403 = IKatan2WithCheck(IkReal((x10401+(((-1.0)*x10400)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10402.value)))+(x10403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10404=IKcos(j4);
IkReal x10405=IKsin(j4);
IkReal x10406=(gconst4*r11);
IkReal x10407=(gconst5*r10);
IkReal x10408=(gconst5*r00);
IkReal x10409=(gconst5*r20);
IkReal x10410=((1.0)*x10404);
IkReal x10411=(gconst4*x10404);
IkReal x10412=((1.0)*x10405);
IkReal x10413=(gconst4*x10405);
evalcond[0]=((((-1.0)*x10407*x10410))+((x10404*x10406))+((r12*x10405)));
evalcond[1]=(((r21*x10413))+(((-1.0)*x10409*x10412))+(((-1.0)*r22*x10410)));
evalcond[2]=((((-1.0)*r02*x10410))+((r01*x10413))+(((-1.0)*x10408*x10412)));
evalcond[3]=((1.0)+(((-1.0)*x10407*x10412))+(((-1.0)*r12*x10410))+((x10405*x10406)));
evalcond[4]=(((cj2*sj1))+((r21*x10411))+((r22*x10405))+(((-1.0)*x10409*x10410))+((cj1*sj2)));
evalcond[5]=(((r01*x10411))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10405))+(((-1.0)*x10408*x10410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10414=((1.0)*gconst5);
CheckValue<IkReal> x10415=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10414)))),-1);
if(!x10415.valid){
continue;
}
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10414))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10415.value)))+(x10416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10417=IKcos(j4);
IkReal x10418=IKsin(j4);
IkReal x10419=(gconst4*r11);
IkReal x10420=(gconst5*r10);
IkReal x10421=(gconst5*r00);
IkReal x10422=(gconst5*r20);
IkReal x10423=((1.0)*x10417);
IkReal x10424=(gconst4*x10417);
IkReal x10425=((1.0)*x10418);
IkReal x10426=(gconst4*x10418);
evalcond[0]=((((-1.0)*x10420*x10423))+((r12*x10418))+((x10417*x10419)));
evalcond[1]=((((-1.0)*x10422*x10425))+(((-1.0)*r22*x10423))+((r21*x10426)));
evalcond[2]=(((r01*x10426))+(((-1.0)*x10421*x10425))+(((-1.0)*r02*x10423)));
evalcond[3]=((1.0)+(((-1.0)*x10420*x10425))+((x10418*x10419))+(((-1.0)*r12*x10423)));
evalcond[4]=(((cj2*sj1))+((r22*x10418))+(((-1.0)*x10422*x10423))+((cj1*sj2))+((r21*x10424)));
evalcond[5]=(((r01*x10424))+(((-1.0)*x10421*x10423))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10427 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10427.valid){
continue;
}
CheckValue<IkReal> x10428=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10427.value)+(((1.5707963267949)*(x10428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10429=IKcos(j4);
IkReal x10430=IKsin(j4);
IkReal x10431=(gconst4*r11);
IkReal x10432=(gconst5*r10);
IkReal x10433=(gconst5*r00);
IkReal x10434=(gconst5*r20);
IkReal x10435=((1.0)*x10429);
IkReal x10436=(gconst4*x10429);
IkReal x10437=((1.0)*x10430);
IkReal x10438=(gconst4*x10430);
evalcond[0]=((((-1.0)*x10432*x10435))+((r12*x10430))+((x10429*x10431)));
evalcond[1]=((((-1.0)*r22*x10435))+(((-1.0)*x10434*x10437))+((r21*x10438)));
evalcond[2]=(((r01*x10438))+(((-1.0)*x10433*x10437))+(((-1.0)*r02*x10435)));
evalcond[3]=((1.0)+((x10430*x10431))+(((-1.0)*x10432*x10437))+(((-1.0)*r12*x10435)));
evalcond[4]=(((cj2*sj1))+((r22*x10430))+((cj1*sj2))+(((-1.0)*x10434*x10435))+((r21*x10436)));
evalcond[5]=(((r01*x10436))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10433*x10435))+((r02*x10430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10439=((-1.0)*r21);
CheckValue<IkReal> x10442 = IKatan2WithCheck(IkReal(x10439),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10442.valid){
continue;
}
IkReal x10440=((1.0)*(x10442.value));
IkReal x10441=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10440)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10440)));
IkReal gconst4=(x10439*x10441);
IkReal gconst5=((1.0)*r20*x10441);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10443=((-1.0)*r21);
CheckValue<IkReal> x10446 = IKatan2WithCheck(IkReal(x10443),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10446.valid){
continue;
}
IkReal x10444=((1.0)*(x10446.value));
IkReal x10445=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10444)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10444)));
IkReal gconst4=(x10443*x10445);
IkReal gconst5=((1.0)*r20*x10445);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10447=((-1.0)*r21);
CheckValue<IkReal> x10450 = IKatan2WithCheck(IkReal(x10447),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10450.valid){
continue;
}
IkReal x10448=((1.0)*(x10450.value));
IkReal x10449=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10448)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10448)));
IkReal gconst4=(x10447*x10449);
IkReal gconst5=((1.0)*r20*x10449);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10451=(gconst5*r10);
IkReal x10452=(gconst4*r11);
CheckValue<IkReal> x10453=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10452*x10452)+(x10451*x10451)+(((-2.0)*x10451*x10452)))),-1);
if(!x10453.valid){
continue;
}
CheckValue<IkReal> x10454 = IKatan2WithCheck(IkReal(((((-1.0)*x10452))+x10451)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10453.value)))+(x10454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10455=IKsin(j4);
IkReal x10456=IKcos(j4);
IkReal x10457=(gconst4*r11);
IkReal x10458=(gconst5*r10);
IkReal x10459=(gconst4*r01);
IkReal x10460=(gconst5*r00);
IkReal x10461=(gconst4*r21);
IkReal x10462=(gconst5*r20);
IkReal x10463=((1.0)*x10456);
IkReal x10464=((1.0)*x10455);
evalcond[0]=((((-1.0)*r22*x10463))+((x10455*x10461))+(((-1.0)*x10462*x10464)));
evalcond[1]=((((-1.0)*r02*x10463))+(((-1.0)*x10460*x10464))+((x10455*x10459)));
evalcond[2]=((((-1.0)*x10457*x10463))+((x10456*x10458))+(((-1.0)*r12*x10464)));
evalcond[3]=((1.0)+((x10455*x10457))+(((-1.0)*x10458*x10464))+(((-1.0)*r12*x10463)));
evalcond[4]=((((-1.0)*x10461*x10463))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10464))+((x10456*x10462)));
evalcond[5]=((((-1.0)*r02*x10464))+(((-1.0)*x10459*x10463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10456*x10460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10465=((1.0)*gconst5);
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10465)))),-1);
if(!x10467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10466.value)+(((1.5707963267949)*(x10467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10468=IKsin(j4);
IkReal x10469=IKcos(j4);
IkReal x10470=(gconst4*r11);
IkReal x10471=(gconst5*r10);
IkReal x10472=(gconst4*r01);
IkReal x10473=(gconst5*r00);
IkReal x10474=(gconst4*r21);
IkReal x10475=(gconst5*r20);
IkReal x10476=((1.0)*x10469);
IkReal x10477=((1.0)*x10468);
evalcond[0]=((((-1.0)*r22*x10476))+(((-1.0)*x10475*x10477))+((x10468*x10474)));
evalcond[1]=((((-1.0)*r02*x10476))+(((-1.0)*x10473*x10477))+((x10468*x10472)));
evalcond[2]=((((-1.0)*x10470*x10476))+(((-1.0)*r12*x10477))+((x10469*x10471)));
evalcond[3]=((1.0)+((x10468*x10470))+(((-1.0)*x10471*x10477))+(((-1.0)*r12*x10476)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10477))+(((-1.0)*x10474*x10476))+((x10469*x10475)));
evalcond[5]=((((-1.0)*r02*x10477))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10472*x10476))+((x10469*x10473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10478 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10478.valid){
continue;
}
CheckValue<IkReal> x10479=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10478.value)+(((1.5707963267949)*(x10479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10480=IKsin(j4);
IkReal x10481=IKcos(j4);
IkReal x10482=(gconst4*r11);
IkReal x10483=(gconst5*r10);
IkReal x10484=(gconst4*r01);
IkReal x10485=(gconst5*r00);
IkReal x10486=(gconst4*r21);
IkReal x10487=(gconst5*r20);
IkReal x10488=((1.0)*x10481);
IkReal x10489=((1.0)*x10480);
evalcond[0]=((((-1.0)*r22*x10488))+((x10480*x10486))+(((-1.0)*x10487*x10489)));
evalcond[1]=((((-1.0)*x10485*x10489))+((x10480*x10484))+(((-1.0)*r02*x10488)));
evalcond[2]=((((-1.0)*r12*x10489))+(((-1.0)*x10482*x10488))+((x10481*x10483)));
evalcond[3]=((1.0)+((x10480*x10482))+(((-1.0)*r12*x10488))+(((-1.0)*x10483*x10489)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10489))+((cj1*sj2))+(((-1.0)*x10486*x10488))+((x10481*x10487)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10484*x10488))+(((-1.0)*r02*x10489))+((x10481*x10485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10490=gconst4*gconst4;
IkReal x10491=gconst5*gconst5;
IkReal x10492=(r10*r21);
IkReal x10493=((1.0)*cj3);
IkReal x10494=(r11*r21);
IkReal x10495=(r11*r20);
IkReal x10496=(r22*sj3);
IkReal x10497=(gconst4*r10);
IkReal x10498=((1.0)*sj3);
IkReal x10499=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10491*x10493))+(((-1.0)*x10490*x10493*x10494))+(((-1.0)*r12*r22*x10493))+((x10495*x10499))+((x10492*x10499)))),-1);
if(!x10500.valid){
continue;
}
CheckValue<IkReal> x10501 = IKatan2WithCheck(IkReal((((gconst5*r11*x10496))+((x10496*x10497)))),IkReal((((gconst4*gconst5*sj3*x10494))+(((-1.0)*gconst5*r20*x10497*x10498))+((sj3*x10490*x10492))+(((-1.0)*x10491*x10495*x10498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10500.value)))+(x10501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10502=IKsin(j4);
IkReal x10503=IKcos(j4);
IkReal x10504=(sj1*sj2);
IkReal x10505=(gconst5*sj3);
IkReal x10506=(cj3*gconst5);
IkReal x10507=(gconst4*r11);
IkReal x10508=((1.0)*cj1);
IkReal x10509=(gconst4*r01);
IkReal x10510=(cj2*sj1);
IkReal x10511=(gconst4*r21);
IkReal x10512=(gconst4*sj3);
IkReal x10513=(cj3*gconst4);
IkReal x10514=(cj2*x10508);
IkReal x10515=((1.0)*x10503);
IkReal x10516=((1.0)*x10502);
IkReal x10517=(cj3*x10502);
IkReal x10518=(cj3*x10503);
evalcond[0]=((((-1.0)*r22*x10515))+((x10502*x10511))+(((-1.0)*gconst5*r20*x10516)));
evalcond[1]=((((-1.0)*r02*x10515))+(((-1.0)*gconst5*r00*x10516))+((x10502*x10509)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10516))+(((-1.0)*r12*x10515))+((x10502*x10507)));
evalcond[3]=(((r12*x10517))+((r10*x10512))+((x10507*x10518))+((r11*x10505))+(((-1.0)*r10*x10506*x10515)));
evalcond[4]=(((r10*x10513))+(((-1.0)*r12*sj3*x10516))+(((-1.0)*sj3*x10507*x10515))+((r11*x10506))+((r10*x10503*x10505)));
evalcond[5]=((((-1.0)*r20*x10506*x10515))+((cj1*sj2))+((r20*x10512))+((r21*x10505))+((x10511*x10518))+x10510+((r22*x10517)));
evalcond[6]=(((x10509*x10518))+((r01*x10505))+((r00*x10512))+(((-1.0)*x10514))+(((-1.0)*r00*x10506*x10515))+x10504+((r02*x10517)));
evalcond[7]=((((-1.0)*r22*sj3*x10516))+((r20*x10513))+((r21*x10506))+(((-1.0)*x10514))+x10504+((r20*x10503*x10505))+(((-1.0)*sj3*x10511*x10515)));
evalcond[8]=((((-1.0)*sj2*x10508))+(((-1.0)*r02*sj3*x10516))+((r01*x10506))+(((-1.0)*x10510))+(((-1.0)*sj3*x10509*x10515))+((r00*x10513))+((r00*x10503*x10505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10519=((1.0)*gconst5);
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10519))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
CheckValue<IkReal> x10521=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10519)))),-1);
if(!x10521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10520.value)+(((1.5707963267949)*(x10521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10522=IKsin(j4);
IkReal x10523=IKcos(j4);
IkReal x10524=(sj1*sj2);
IkReal x10525=(gconst5*sj3);
IkReal x10526=(cj3*gconst5);
IkReal x10527=(gconst4*r11);
IkReal x10528=((1.0)*cj1);
IkReal x10529=(gconst4*r01);
IkReal x10530=(cj2*sj1);
IkReal x10531=(gconst4*r21);
IkReal x10532=(gconst4*sj3);
IkReal x10533=(cj3*gconst4);
IkReal x10534=(cj2*x10528);
IkReal x10535=((1.0)*x10523);
IkReal x10536=((1.0)*x10522);
IkReal x10537=(cj3*x10522);
IkReal x10538=(cj3*x10523);
evalcond[0]=((((-1.0)*r22*x10535))+((x10522*x10531))+(((-1.0)*gconst5*r20*x10536)));
evalcond[1]=((((-1.0)*r02*x10535))+((x10522*x10529))+(((-1.0)*gconst5*r00*x10536)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10536))+(((-1.0)*r12*x10535))+((x10522*x10527)));
evalcond[3]=(((r10*x10532))+((x10527*x10538))+((r12*x10537))+(((-1.0)*r10*x10526*x10535))+((r11*x10525)));
evalcond[4]=(((r10*x10533))+(((-1.0)*sj3*x10527*x10535))+((r10*x10523*x10525))+((r11*x10526))+(((-1.0)*r12*sj3*x10536)));
evalcond[5]=(((r22*x10537))+((cj1*sj2))+((r21*x10525))+((x10531*x10538))+(((-1.0)*r20*x10526*x10535))+x10530+((r20*x10532)));
evalcond[6]=((((-1.0)*x10534))+((r02*x10537))+((x10529*x10538))+x10524+((r00*x10532))+((r01*x10525))+(((-1.0)*r00*x10526*x10535)));
evalcond[7]=((((-1.0)*x10534))+(((-1.0)*r22*sj3*x10536))+((r21*x10526))+((r20*x10523*x10525))+x10524+(((-1.0)*sj3*x10531*x10535))+((r20*x10533)));
evalcond[8]=((((-1.0)*sj3*x10529*x10535))+(((-1.0)*sj2*x10528))+(((-1.0)*x10530))+(((-1.0)*r02*sj3*x10536))+((r00*x10533))+((r01*x10526))+((r00*x10523*x10525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
CheckValue<IkReal> x10540=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10539.value)+(((1.5707963267949)*(x10540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10541=IKsin(j4);
IkReal x10542=IKcos(j4);
IkReal x10543=(sj1*sj2);
IkReal x10544=(gconst5*sj3);
IkReal x10545=(cj3*gconst5);
IkReal x10546=(gconst4*r11);
IkReal x10547=((1.0)*cj1);
IkReal x10548=(gconst4*r01);
IkReal x10549=(cj2*sj1);
IkReal x10550=(gconst4*r21);
IkReal x10551=(gconst4*sj3);
IkReal x10552=(cj3*gconst4);
IkReal x10553=(cj2*x10547);
IkReal x10554=((1.0)*x10542);
IkReal x10555=((1.0)*x10541);
IkReal x10556=(cj3*x10541);
IkReal x10557=(cj3*x10542);
evalcond[0]=(((x10541*x10550))+(((-1.0)*gconst5*r20*x10555))+(((-1.0)*r22*x10554)));
evalcond[1]=((((-1.0)*r02*x10554))+((x10541*x10548))+(((-1.0)*gconst5*r00*x10555)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10555))+(((-1.0)*r12*x10554))+((x10541*x10546)));
evalcond[3]=(((x10546*x10557))+((r10*x10551))+(((-1.0)*r10*x10545*x10554))+((r11*x10544))+((r12*x10556)));
evalcond[4]=((((-1.0)*r12*sj3*x10555))+((r10*x10542*x10544))+((r10*x10552))+((r11*x10545))+(((-1.0)*sj3*x10546*x10554)));
evalcond[5]=(((r22*x10556))+((cj1*sj2))+(((-1.0)*r20*x10545*x10554))+((x10550*x10557))+((r20*x10551))+x10549+((r21*x10544)));
evalcond[6]=(((r02*x10556))+(((-1.0)*r00*x10545*x10554))+x10543+((r01*x10544))+((x10548*x10557))+((r00*x10551))+(((-1.0)*x10553)));
evalcond[7]=((((-1.0)*sj3*x10550*x10554))+(((-1.0)*r22*sj3*x10555))+((r20*x10552))+x10543+((r20*x10542*x10544))+((r21*x10545))+(((-1.0)*x10553)));
evalcond[8]=(((r00*x10542*x10544))+(((-1.0)*sj3*x10548*x10554))+(((-1.0)*x10549))+((r01*x10545))+((r00*x10552))+(((-1.0)*sj2*x10547))+(((-1.0)*r02*sj3*x10555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10558=((-1.0)*r21);
CheckValue<IkReal> x10561 = IKatan2WithCheck(IkReal(x10558),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10561.valid){
continue;
}
IkReal x10559=((1.0)*(x10561.value));
IkReal x10560=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10559)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10559)));
IkReal gconst4=(x10558*x10560);
IkReal gconst5=((1.0)*r20*x10560);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10562=((-1.0)*r21);
CheckValue<IkReal> x10565 = IKatan2WithCheck(IkReal(x10562),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10565.valid){
continue;
}
IkReal x10563=((1.0)*(x10565.value));
IkReal x10564=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10563)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10563)));
IkReal gconst4=(x10562*x10564);
IkReal gconst5=((1.0)*r20*x10564);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10566=((-1.0)*r21);
CheckValue<IkReal> x10569 = IKatan2WithCheck(IkReal(x10566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10569.valid){
continue;
}
IkReal x10567=((1.0)*(x10569.value));
IkReal x10568=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10567)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10567)));
IkReal gconst4=(x10566*x10568);
IkReal gconst5=((1.0)*r20*x10568);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10570=((-1.0)*r21);
CheckValue<IkReal> x10573 = IKatan2WithCheck(IkReal(x10570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10573.valid){
continue;
}
IkReal x10571=((1.0)*(x10573.value));
IkReal x10572=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10571)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10571)));
IkReal gconst4=(x10570*x10572);
IkReal gconst5=((1.0)*r20*x10572);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10574=((-1.0)*r21);
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(x10574),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
IkReal x10575=((1.0)*(x10577.value));
IkReal x10576=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10575)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10575)));
IkReal gconst4=(x10574*x10576);
IkReal gconst5=((1.0)*r20*x10576);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10578=((-1.0)*r21);
CheckValue<IkReal> x10581 = IKatan2WithCheck(IkReal(x10578),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10581.valid){
continue;
}
IkReal x10579=((1.0)*(x10581.value));
IkReal x10580=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10579)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10579)));
IkReal gconst4=(x10578*x10580);
IkReal gconst5=((1.0)*r20*x10580);
IkReal x10582=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10586=IKPowWithIntegerCheck(x10582,-1);
if(!x10586.valid){
continue;
}
IkReal x10583=x10586.value;
IkReal x10584=((1.0)*x10583);
IkReal x10585=((((-1.0)*x10584*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10583))+(((-1.0)*(r12*r12)))+(((-1.0)*x10584*(r11*r11)*(r21*r21))));
j4eval[0]=x10585;
j4eval[1]=r12;
j4eval[2]=x10582;
j4eval[3]=IKsign(x10585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10587=(gconst5*r10);
IkReal x10588=(gconst4*r11);
CheckValue<IkReal> x10589=IKPowWithIntegerCheck(IKsign(((((2.0)*x10587*x10588))+(((-1.0)*(x10587*x10587)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10588*x10588))))),-1);
if(!x10589.valid){
continue;
}
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal((x10587+(((-1.0)*x10588)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10589.value)))+(x10590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10591=IKsin(j4);
IkReal x10592=IKcos(j4);
IkReal x10593=(gconst4*r11);
IkReal x10594=(gconst5*r10);
IkReal x10595=(gconst4*r01);
IkReal x10596=(gconst5*r00);
IkReal x10597=(gconst4*r21);
IkReal x10598=(gconst5*r20);
IkReal x10599=((1.0)*x10592);
IkReal x10600=((1.0)*x10591);
evalcond[0]=((((-1.0)*x10598*x10600))+(((-1.0)*r22*x10599))+((x10591*x10597)));
evalcond[1]=((((-1.0)*r02*x10599))+((x10591*x10595))+(((-1.0)*x10596*x10600)));
evalcond[2]=((((-1.0)*r12*x10600))+((x10592*x10594))+(((-1.0)*x10593*x10599)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10599))+(((-1.0)*x10594*x10600))+((x10591*x10593)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10592*x10596))+(((-1.0)*x10595*x10599))+(((-1.0)*r02*x10600)));
evalcond[5]=((((-1.0)*x10597*x10599))+((x10592*x10598))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10601=((1.0)*gconst5);
CheckValue<IkReal> x10602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10601))+(((-1.0)*gconst4*r20)))),-1);
if(!x10602.valid){
continue;
}
CheckValue<IkReal> x10603 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10602.value)))+(x10603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10604=IKsin(j4);
IkReal x10605=IKcos(j4);
IkReal x10606=(gconst4*r11);
IkReal x10607=(gconst5*r10);
IkReal x10608=(gconst4*r01);
IkReal x10609=(gconst5*r00);
IkReal x10610=(gconst4*r21);
IkReal x10611=(gconst5*r20);
IkReal x10612=((1.0)*x10605);
IkReal x10613=((1.0)*x10604);
evalcond[0]=((((-1.0)*x10611*x10613))+(((-1.0)*r22*x10612))+((x10604*x10610)));
evalcond[1]=((((-1.0)*x10609*x10613))+(((-1.0)*r02*x10612))+((x10604*x10608)));
evalcond[2]=(((x10605*x10607))+(((-1.0)*r12*x10613))+(((-1.0)*x10606*x10612)));
evalcond[3]=((-1.0)+(((-1.0)*x10607*x10613))+((x10604*x10606))+(((-1.0)*r12*x10612)));
evalcond[4]=(((cj2*sj1))+((x10605*x10609))+((cj1*sj2))+(((-1.0)*r02*x10613))+(((-1.0)*x10608*x10612)));
evalcond[5]=((((-1.0)*x10610*x10612))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10613))+((x10605*x10611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10614=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10614.valid){
continue;
}
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10614.value)))+(x10615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10616=IKsin(j4);
IkReal x10617=IKcos(j4);
IkReal x10618=(gconst4*r11);
IkReal x10619=(gconst5*r10);
IkReal x10620=(gconst4*r01);
IkReal x10621=(gconst5*r00);
IkReal x10622=(gconst4*r21);
IkReal x10623=(gconst5*r20);
IkReal x10624=((1.0)*x10617);
IkReal x10625=((1.0)*x10616);
evalcond[0]=((((-1.0)*x10623*x10625))+((x10616*x10622))+(((-1.0)*r22*x10624)));
evalcond[1]=((((-1.0)*r02*x10624))+((x10616*x10620))+(((-1.0)*x10621*x10625)));
evalcond[2]=((((-1.0)*x10618*x10624))+(((-1.0)*r12*x10625))+((x10617*x10619)));
evalcond[3]=((-1.0)+((x10616*x10618))+(((-1.0)*r12*x10624))+(((-1.0)*x10619*x10625)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10625))+((cj1*sj2))+((x10617*x10621))+(((-1.0)*x10620*x10624)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10625))+((x10617*x10623))+(((-1.0)*x10622*x10624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10626=((-1.0)*r21);
CheckValue<IkReal> x10629 = IKatan2WithCheck(IkReal(x10626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10629.valid){
continue;
}
IkReal x10627=((1.0)*(x10629.value));
IkReal x10628=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10627)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10627)));
IkReal gconst4=(x10626*x10628);
IkReal gconst5=((1.0)*r20*x10628);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10630=((-1.0)*r21);
CheckValue<IkReal> x10633 = IKatan2WithCheck(IkReal(x10630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10633.valid){
continue;
}
IkReal x10631=((1.0)*(x10633.value));
IkReal x10632=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10631)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10631)));
IkReal gconst4=(x10630*x10632);
IkReal gconst5=((1.0)*r20*x10632);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10634=((-1.0)*r21);
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(x10634),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
IkReal x10635=((1.0)*(x10637.value));
IkReal x10636=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10635)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10635)));
IkReal gconst4=(x10634*x10636);
IkReal gconst5=((1.0)*r20*x10636);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10638=(gconst5*r10);
IkReal x10639=(gconst4*r11);
CheckValue<IkReal> x10640=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10638*x10638)+(x10639*x10639)+(((-2.0)*x10638*x10639)))),-1);
if(!x10640.valid){
continue;
}
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(((((-1.0)*x10638))+x10639)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10640.value)))+(x10641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10642=IKcos(j4);
IkReal x10643=IKsin(j4);
IkReal x10644=(gconst4*r11);
IkReal x10645=(gconst5*r10);
IkReal x10646=(gconst5*r00);
IkReal x10647=(gconst5*r20);
IkReal x10648=((1.0)*x10642);
IkReal x10649=(gconst4*x10642);
IkReal x10650=((1.0)*x10643);
IkReal x10651=(gconst4*x10643);
evalcond[0]=(((x10642*x10644))+(((-1.0)*x10645*x10648))+((r12*x10643)));
evalcond[1]=((((-1.0)*x10647*x10650))+(((-1.0)*r22*x10648))+((r21*x10651)));
evalcond[2]=((((-1.0)*r02*x10648))+(((-1.0)*x10646*x10650))+((r01*x10651)));
evalcond[3]=((-1.0)+((x10643*x10644))+(((-1.0)*r12*x10648))+(((-1.0)*x10645*x10650)));
evalcond[4]=(((cj2*sj1))+((r01*x10649))+((cj1*sj2))+(((-1.0)*x10646*x10648))+((r02*x10643)));
evalcond[5]=(((r21*x10649))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10647*x10648))+((r22*x10643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10652=((1.0)*gconst5);
CheckValue<IkReal> x10653 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10653.valid){
continue;
}
CheckValue<IkReal> x10654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10652))+(((-1.0)*gconst4*r20)))),-1);
if(!x10654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10653.value)+(((1.5707963267949)*(x10654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10655=IKcos(j4);
IkReal x10656=IKsin(j4);
IkReal x10657=(gconst4*r11);
IkReal x10658=(gconst5*r10);
IkReal x10659=(gconst5*r00);
IkReal x10660=(gconst5*r20);
IkReal x10661=((1.0)*x10655);
IkReal x10662=(gconst4*x10655);
IkReal x10663=((1.0)*x10656);
IkReal x10664=(gconst4*x10656);
evalcond[0]=((((-1.0)*x10658*x10661))+((x10655*x10657))+((r12*x10656)));
evalcond[1]=((((-1.0)*x10660*x10663))+(((-1.0)*r22*x10661))+((r21*x10664)));
evalcond[2]=((((-1.0)*r02*x10661))+(((-1.0)*x10659*x10663))+((r01*x10664)));
evalcond[3]=((-1.0)+((x10656*x10657))+(((-1.0)*x10658*x10663))+(((-1.0)*r12*x10661)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10656))+(((-1.0)*x10659*x10661))+((r01*x10662)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r22*x10656))+((sj1*sj2))+(((-1.0)*x10660*x10661))+((r21*x10662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10665=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10665.valid){
continue;
}
CheckValue<IkReal> x10666 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10665.value)))+(x10666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10667=IKcos(j4);
IkReal x10668=IKsin(j4);
IkReal x10669=(gconst4*r11);
IkReal x10670=(gconst5*r10);
IkReal x10671=(gconst5*r00);
IkReal x10672=(gconst5*r20);
IkReal x10673=((1.0)*x10667);
IkReal x10674=(gconst4*x10667);
IkReal x10675=((1.0)*x10668);
IkReal x10676=(gconst4*x10668);
evalcond[0]=(((r12*x10668))+((x10667*x10669))+(((-1.0)*x10670*x10673)));
evalcond[1]=((((-1.0)*x10672*x10675))+(((-1.0)*r22*x10673))+((r21*x10676)));
evalcond[2]=((((-1.0)*r02*x10673))+((r01*x10676))+(((-1.0)*x10671*x10675)));
evalcond[3]=((-1.0)+(((-1.0)*x10670*x10675))+(((-1.0)*r12*x10673))+((x10668*x10669)));
evalcond[4]=(((cj2*sj1))+((r02*x10668))+((cj1*sj2))+((r01*x10674))+(((-1.0)*x10671*x10673)));
evalcond[5]=(((r22*x10668))+(((-1.0)*x10672*x10673))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10677=((-1.0)*r21);
CheckValue<IkReal> x10680 = IKatan2WithCheck(IkReal(x10677),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10680.valid){
continue;
}
IkReal x10678=((1.0)*(x10680.value));
IkReal x10679=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10678)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10678)));
IkReal gconst4=(x10677*x10679);
IkReal gconst5=((1.0)*r20*x10679);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10681=((-1.0)*r21);
CheckValue<IkReal> x10684 = IKatan2WithCheck(IkReal(x10681),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10684.valid){
continue;
}
IkReal x10682=((1.0)*(x10684.value));
IkReal x10683=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10682)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10682)));
IkReal gconst4=(x10681*x10683);
IkReal gconst5=((1.0)*r20*x10683);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10685=((-1.0)*r21);
CheckValue<IkReal> x10688 = IKatan2WithCheck(IkReal(x10685),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10688.valid){
continue;
}
IkReal x10686=((1.0)*(x10688.value));
IkReal x10687=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10686)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10686)));
IkReal gconst4=(x10685*x10687);
IkReal gconst5=((1.0)*r20*x10687);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10689=(gconst5*r10);
IkReal x10690=(gconst4*r11);
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal(((((-1.0)*x10689))+x10690)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
CheckValue<IkReal> x10692=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10689*x10689)+(((-2.0)*x10689*x10690))+(x10690*x10690))),-1);
if(!x10692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10691.value)+(((1.5707963267949)*(x10692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10693=IKcos(j4);
IkReal x10694=IKsin(j4);
IkReal x10695=(gconst5*r10);
IkReal x10696=(gconst5*r00);
IkReal x10697=(gconst5*r20);
IkReal x10698=((1.0)*x10693);
IkReal x10699=(gconst4*x10694);
IkReal x10700=(gconst4*x10693);
IkReal x10701=((1.0)*x10694);
evalcond[0]=(((r11*x10700))+(((-1.0)*x10695*x10698))+((r12*x10694)));
evalcond[1]=(((r21*x10699))+(((-1.0)*x10697*x10701))+(((-1.0)*r22*x10698)));
evalcond[2]=((((-1.0)*x10696*x10701))+(((-1.0)*r02*x10698))+((r01*x10699)));
evalcond[3]=((-1.0)+((r11*x10699))+(((-1.0)*r12*x10698))+(((-1.0)*x10695*x10701)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10697*x10698))+((r22*x10694))+((r21*x10700)));
evalcond[5]=(((r01*x10700))+(((-1.0)*sj1*sj2))+(((-1.0)*x10696*x10698))+((r02*x10694))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10702=((1.0)*gconst5);
CheckValue<IkReal> x10703 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10703.valid){
continue;
}
CheckValue<IkReal> x10704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10702))+(((-1.0)*gconst4*r20)))),-1);
if(!x10704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10703.value)+(((1.5707963267949)*(x10704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10705=IKcos(j4);
IkReal x10706=IKsin(j4);
IkReal x10707=(gconst5*r10);
IkReal x10708=(gconst5*r00);
IkReal x10709=(gconst5*r20);
IkReal x10710=((1.0)*x10705);
IkReal x10711=(gconst4*x10706);
IkReal x10712=(gconst4*x10705);
IkReal x10713=((1.0)*x10706);
evalcond[0]=(((r11*x10712))+((r12*x10706))+(((-1.0)*x10707*x10710)));
evalcond[1]=((((-1.0)*x10709*x10713))+(((-1.0)*r22*x10710))+((r21*x10711)));
evalcond[2]=((((-1.0)*x10708*x10713))+((r01*x10711))+(((-1.0)*r02*x10710)));
evalcond[3]=((-1.0)+((r11*x10711))+(((-1.0)*r12*x10710))+(((-1.0)*x10707*x10713)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10709*x10710))+((cj1*sj2))+((r22*x10706))+((r21*x10712)));
evalcond[5]=((((-1.0)*x10708*x10710))+(((-1.0)*sj1*sj2))+((r01*x10712))+((r02*x10706))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10714=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10714.valid){
continue;
}
CheckValue<IkReal> x10715 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10714.value)))+(x10715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10716=IKcos(j4);
IkReal x10717=IKsin(j4);
IkReal x10718=(gconst5*r10);
IkReal x10719=(gconst5*r00);
IkReal x10720=(gconst5*r20);
IkReal x10721=((1.0)*x10716);
IkReal x10722=(gconst4*x10717);
IkReal x10723=(gconst4*x10716);
IkReal x10724=((1.0)*x10717);
evalcond[0]=(((r12*x10717))+(((-1.0)*x10718*x10721))+((r11*x10723)));
evalcond[1]=((((-1.0)*r22*x10721))+((r21*x10722))+(((-1.0)*x10720*x10724)));
evalcond[2]=((((-1.0)*r02*x10721))+(((-1.0)*x10719*x10724))+((r01*x10722)));
evalcond[3]=((-1.0)+(((-1.0)*x10718*x10724))+(((-1.0)*r12*x10721))+((r11*x10722)));
evalcond[4]=(((cj2*sj1))+((r21*x10723))+((cj1*sj2))+(((-1.0)*x10720*x10721))+((r22*x10717)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10719*x10721))+((r01*x10723))+((cj1*cj2))+((r02*x10717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10725=((-1.0)*r21);
CheckValue<IkReal> x10728 = IKatan2WithCheck(IkReal(x10725),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10728.valid){
continue;
}
IkReal x10726=((1.0)*(x10728.value));
IkReal x10727=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10726)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10726)));
IkReal gconst4=(x10725*x10727);
IkReal gconst5=((1.0)*r20*x10727);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10729=((-1.0)*r21);
CheckValue<IkReal> x10732 = IKatan2WithCheck(IkReal(x10729),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10732.valid){
continue;
}
IkReal x10730=((1.0)*(x10732.value));
IkReal x10731=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10730)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10730)));
IkReal gconst4=(x10729*x10731);
IkReal gconst5=((1.0)*r20*x10731);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10733=((-1.0)*r21);
CheckValue<IkReal> x10736 = IKatan2WithCheck(IkReal(x10733),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10736.valid){
continue;
}
IkReal x10734=((1.0)*(x10736.value));
IkReal x10735=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10734)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10734)));
IkReal gconst4=(x10733*x10735);
IkReal gconst5=((1.0)*r20*x10735);
IkReal x10737=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10741=IKPowWithIntegerCheck(x10737,-1);
if(!x10741.valid){
continue;
}
IkReal x10738=x10741.value;
IkReal x10739=((1.0)*x10738);
IkReal x10740=((((-2.0)*r10*r11*r20*r21*x10738))+(((-1.0)*x10739*(r11*r11)*(r21*r21)))+(((-1.0)*x10739*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10740;
j4eval[1]=r12;
j4eval[2]=x10737;
j4eval[3]=IKsign(x10740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10742=(gconst5*r10);
IkReal x10743=(gconst4*r11);
CheckValue<IkReal> x10744 = IKatan2WithCheck(IkReal(((((-1.0)*x10743))+x10742)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10744.valid){
continue;
}
CheckValue<IkReal> x10745=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10742*x10742)))+(((2.0)*x10742*x10743))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10743*x10743))))),-1);
if(!x10745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10744.value)+(((1.5707963267949)*(x10745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10746=IKsin(j4);
IkReal x10747=IKcos(j4);
IkReal x10748=(gconst4*r11);
IkReal x10749=(gconst5*r10);
IkReal x10750=(gconst5*r00);
IkReal x10751=(gconst5*r20);
IkReal x10752=((1.0)*x10747);
IkReal x10753=(gconst4*x10746);
IkReal x10754=((1.0)*x10746);
evalcond[0]=((((-1.0)*x10751*x10754))+(((-1.0)*r22*x10752))+((r21*x10753)));
evalcond[1]=((((-1.0)*r02*x10752))+(((-1.0)*x10750*x10754))+((r01*x10753)));
evalcond[2]=(((x10747*x10749))+(((-1.0)*x10748*x10752))+(((-1.0)*r12*x10754)));
evalcond[3]=((-1.0)+((x10746*x10748))+(((-1.0)*r12*x10752))+(((-1.0)*x10749*x10754)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10747*x10751))+(((-1.0)*r22*x10754))+(((-1.0)*gconst4*r21*x10752)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10747*x10750))+(((-1.0)*r02*x10754))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10755=((1.0)*gconst5);
CheckValue<IkReal> x10756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10755))+(((-1.0)*gconst4*r20)))),-1);
if(!x10756.valid){
continue;
}
CheckValue<IkReal> x10757 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10755))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10756.value)))+(x10757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10758=IKsin(j4);
IkReal x10759=IKcos(j4);
IkReal x10760=(gconst4*r11);
IkReal x10761=(gconst5*r10);
IkReal x10762=(gconst5*r00);
IkReal x10763=(gconst5*r20);
IkReal x10764=((1.0)*x10759);
IkReal x10765=(gconst4*x10758);
IkReal x10766=((1.0)*x10758);
evalcond[0]=((((-1.0)*x10763*x10766))+(((-1.0)*r22*x10764))+((r21*x10765)));
evalcond[1]=((((-1.0)*x10762*x10766))+((r01*x10765))+(((-1.0)*r02*x10764)));
evalcond[2]=(((x10759*x10761))+(((-1.0)*r12*x10766))+(((-1.0)*x10760*x10764)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10764))+(((-1.0)*x10761*x10766))+((x10758*x10760)));
evalcond[4]=(((x10759*x10763))+(((-1.0)*gconst4*r21*x10764))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10766)));
evalcond[5]=(((x10759*x10762))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10764))+(((-1.0)*r02*x10766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10767=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10767.valid){
continue;
}
CheckValue<IkReal> x10768 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10767.value)))+(x10768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10769=IKsin(j4);
IkReal x10770=IKcos(j4);
IkReal x10771=(gconst4*r11);
IkReal x10772=(gconst5*r10);
IkReal x10773=(gconst5*r00);
IkReal x10774=(gconst5*r20);
IkReal x10775=((1.0)*x10770);
IkReal x10776=(gconst4*x10769);
IkReal x10777=((1.0)*x10769);
evalcond[0]=((((-1.0)*r22*x10775))+(((-1.0)*x10774*x10777))+((r21*x10776)));
evalcond[1]=((((-1.0)*r02*x10775))+(((-1.0)*x10773*x10777))+((r01*x10776)));
evalcond[2]=((((-1.0)*r12*x10777))+(((-1.0)*x10771*x10775))+((x10770*x10772)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10775))+(((-1.0)*x10772*x10777))+((x10769*x10771)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10775))+((cj1*sj2))+(((-1.0)*r22*x10777))+((x10770*x10774)));
evalcond[5]=((((-1.0)*r02*x10777))+(((-1.0)*sj1*sj2))+((x10770*x10773))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10778=((-1.0)*r21);
IkReal x10779=((-1.0)*px);
CheckValue<IkReal> x10781 = IKatan2WithCheck(IkReal(x10778),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10781.valid){
continue;
}
IkReal x10780=((1.0)*(x10781.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10780)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10779);
rxp1_1=(px*r21);
rxp1_2=(r11*x10779);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10780)));
IkReal gconst4=x10778;
IkReal gconst5=((1.0)*r20);
IkReal x10782=((1.0)*cj3);
IkReal x10783=(r10*r20);
IkReal x10784=(r11*r21);
j4eval[0]=((((-1.0)*x10783))+(((-1.0)*x10784)));
j4eval[1]=((((-1.0)*x10782*x10784))+(((-1.0)*x10782*x10783)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10785=((-1.0)*r21);
IkReal x10786=((-1.0)*px);
CheckValue<IkReal> x10788 = IKatan2WithCheck(IkReal(x10785),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10788.valid){
continue;
}
IkReal x10787=((1.0)*(x10788.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10787)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10786);
rxp1_1=(px*r21);
rxp1_2=(r11*x10786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10787)));
IkReal gconst4=x10785;
IkReal gconst5=((1.0)*r20);
IkReal x10789=((1.0)*r11*r21);
IkReal x10790=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10790))+(((-1.0)*x10789)));
j4eval[1]=(((sj3*x10790))+((sj3*x10789)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10791=((-1.0)*r21);
IkReal x10792=((-1.0)*px);
CheckValue<IkReal> x10794 = IKatan2WithCheck(IkReal(x10791),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10794.valid){
continue;
}
IkReal x10793=((1.0)*(x10794.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10793)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10792);
rxp1_1=(px*r21);
rxp1_2=(r11*x10792);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10793)));
IkReal gconst4=x10791;
IkReal gconst5=((1.0)*r20);
IkReal x10795=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x10795))+(((-1.0)*r10*r20*x10795)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10796=((1.0)*r10);
CheckValue<IkReal> x10797=IKPowWithIntegerCheck(cj3,-1);
if(!x10797.valid){
continue;
}
CheckValue<IkReal> x10798=IKPowWithIntegerCheck(r02,-1);
if(!x10798.valid){
continue;
}
CheckValue<IkReal> x10799=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10796))+((cj3*gconst4*r11))),-1);
if(!x10799.valid){
continue;
}
if( IKabs(((x10797.value)*(x10798.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10799.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10796)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10797.value)*(x10798.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10799.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10796))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10797.value)*(x10798.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10799.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10796))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10800=IKsin(j4);
IkReal x10801=IKcos(j4);
IkReal x10802=(cj2*sj1);
IkReal x10803=(cj1*sj2);
IkReal x10804=(gconst5*sj3);
IkReal x10805=(gconst4*r11);
IkReal x10806=(sj1*sj2);
IkReal x10807=((1.0)*gconst5);
IkReal x10808=(cj1*cj2);
IkReal x10809=(gconst4*r21);
IkReal x10810=(cj3*gconst4);
IkReal x10811=(gconst4*sj3);
IkReal x10812=(cj3*gconst5);
IkReal x10813=(r20*x10801);
IkReal x10814=(r10*x10801);
IkReal x10815=(cj3*x10801);
IkReal x10816=(r02*x10800);
IkReal x10817=(x10802+x10803);
IkReal x10818=((1.0)*sj3*x10801);
evalcond[0]=((-1.0)*r02*x10801);
evalcond[1]=(((x10800*x10809))+(((-1.0)*r20*x10800*x10807)));
evalcond[2]=((((-1.0)*x10806))+((cj3*x10816))+x10808);
evalcond[3]=((((-1.0)*sj3*x10816))+x10817);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10800*x10807))+((x10800*x10805)));
evalcond[5]=(((x10805*x10815))+((r11*x10804))+((r10*x10811))+(((-1.0)*cj3*x10807*x10814)));
evalcond[6]=((((-1.0)*x10805*x10818))+((x10804*x10814))+((r10*x10810))+((r11*x10812)));
evalcond[7]=(((x10809*x10815))+((r20*x10811))+((r21*x10804))+(((-1.0)*cj3*x10807*x10813))+x10817);
evalcond[8]=(((x10804*x10813))+(((-1.0)*x10809*x10818))+((r20*x10810))+(((-1.0)*x10808))+((r21*x10812))+x10806);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10819=((1.0)*gconst5);
IkReal x10820=(gconst4*r11);
CheckValue<IkReal> x10821=IKPowWithIntegerCheck(((((-1.0)*r10*x10819))+x10820),-1);
if(!x10821.valid){
continue;
}
CheckValue<IkReal> x10822=IKPowWithIntegerCheck(((((-1.0)*sj3*x10820))+((gconst5*r10*sj3))),-1);
if(!x10822.valid){
continue;
}
if( IKabs(x10821.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10822.value)*(((((-1.0)*cj3*r11*x10819))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10821.value)+IKsqr(((x10822.value)*(((((-1.0)*cj3*r11*x10819))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10821.value, ((x10822.value)*(((((-1.0)*cj3*r11*x10819))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10823=IKsin(j4);
IkReal x10824=IKcos(j4);
IkReal x10825=(cj2*sj1);
IkReal x10826=(cj1*sj2);
IkReal x10827=(gconst5*sj3);
IkReal x10828=(gconst4*r11);
IkReal x10829=(sj1*sj2);
IkReal x10830=((1.0)*gconst5);
IkReal x10831=(cj1*cj2);
IkReal x10832=(gconst4*r21);
IkReal x10833=(cj3*gconst4);
IkReal x10834=(gconst4*sj3);
IkReal x10835=(cj3*gconst5);
IkReal x10836=(r20*x10824);
IkReal x10837=(r10*x10824);
IkReal x10838=(cj3*x10824);
IkReal x10839=(r02*x10823);
IkReal x10840=(x10825+x10826);
IkReal x10841=((1.0)*sj3*x10824);
evalcond[0]=((-1.0)*r02*x10824);
evalcond[1]=(((x10823*x10832))+(((-1.0)*r20*x10823*x10830)));
evalcond[2]=((((-1.0)*x10829))+((cj3*x10839))+x10831);
evalcond[3]=((((-1.0)*sj3*x10839))+x10840);
evalcond[4]=((-1.0)+((x10823*x10828))+(((-1.0)*r10*x10823*x10830)));
evalcond[5]=((((-1.0)*cj3*x10830*x10837))+((r10*x10834))+((r11*x10827))+((x10828*x10838)));
evalcond[6]=(((x10827*x10837))+((r10*x10833))+(((-1.0)*x10828*x10841))+((r11*x10835)));
evalcond[7]=(((r21*x10827))+(((-1.0)*cj3*x10830*x10836))+((x10832*x10838))+((r20*x10834))+x10840);
evalcond[8]=((((-1.0)*x10831))+(((-1.0)*x10832*x10841))+((x10827*x10836))+((r20*x10833))+((r21*x10835))+x10829);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10842=((1.0)*sj3);
IkReal x10843=(gconst4*r11);
IkReal x10844=((1.0)*gconst5*r10);
CheckValue<IkReal> x10845=IKPowWithIntegerCheck(((((-1.0)*x10844))+x10843),-1);
if(!x10845.valid){
continue;
}
CheckValue<IkReal> x10846=IKPowWithIntegerCheck(((((-1.0)*cj3*x10844))+((cj3*x10843))),-1);
if(!x10846.valid){
continue;
}
if( IKabs(x10845.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10846.value)*(((((-1.0)*gconst4*r10*x10842))+(((-1.0)*gconst5*r11*x10842)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10845.value)+IKsqr(((x10846.value)*(((((-1.0)*gconst4*r10*x10842))+(((-1.0)*gconst5*r11*x10842))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10845.value, ((x10846.value)*(((((-1.0)*gconst4*r10*x10842))+(((-1.0)*gconst5*r11*x10842))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10847=IKsin(j4);
IkReal x10848=IKcos(j4);
IkReal x10849=(cj2*sj1);
IkReal x10850=(cj1*sj2);
IkReal x10851=(gconst5*sj3);
IkReal x10852=(gconst4*r11);
IkReal x10853=(sj1*sj2);
IkReal x10854=((1.0)*gconst5);
IkReal x10855=(cj1*cj2);
IkReal x10856=(gconst4*r21);
IkReal x10857=(cj3*gconst4);
IkReal x10858=(gconst4*sj3);
IkReal x10859=(cj3*gconst5);
IkReal x10860=(r20*x10848);
IkReal x10861=(r10*x10848);
IkReal x10862=(cj3*x10848);
IkReal x10863=(r02*x10847);
IkReal x10864=(x10849+x10850);
IkReal x10865=((1.0)*sj3*x10848);
evalcond[0]=((-1.0)*r02*x10848);
evalcond[1]=(((x10847*x10856))+(((-1.0)*r20*x10847*x10854)));
evalcond[2]=((((-1.0)*x10853))+((cj3*x10863))+x10855);
evalcond[3]=((((-1.0)*sj3*x10863))+x10864);
evalcond[4]=((-1.0)+((x10847*x10852))+(((-1.0)*r10*x10847*x10854)));
evalcond[5]=(((r11*x10851))+((r10*x10858))+(((-1.0)*cj3*x10854*x10861))+((x10852*x10862)));
evalcond[6]=(((r11*x10859))+(((-1.0)*x10852*x10865))+((r10*x10857))+((x10851*x10861)));
evalcond[7]=(((x10856*x10862))+((r21*x10851))+((r20*x10858))+(((-1.0)*cj3*x10854*x10860))+x10864);
evalcond[8]=(((r21*x10859))+((r20*x10857))+((x10851*x10860))+(((-1.0)*x10856*x10865))+(((-1.0)*x10855))+x10853);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10866=gconst4*gconst4;
IkReal x10867=gconst5*gconst5;
IkReal x10868=(r10*r21);
IkReal x10869=((1.0)*cj3);
IkReal x10870=(r11*r21);
IkReal x10871=(r11*r20);
IkReal x10872=(r22*sj3);
IkReal x10873=(gconst4*r10);
IkReal x10874=((1.0)*sj3);
IkReal x10875=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10869))+(((-1.0)*r10*r20*x10867*x10869))+((x10868*x10875))+(((-1.0)*x10866*x10869*x10870))+((x10871*x10875)))),-1);
if(!x10876.valid){
continue;
}
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal((((gconst5*r11*x10872))+((x10872*x10873)))),IkReal(((((-1.0)*x10867*x10871*x10874))+(((-1.0)*gconst5*r20*x10873*x10874))+((gconst4*gconst5*sj3*x10870))+((sj3*x10866*x10868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10876.value)))+(x10877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10878=IKsin(j4);
IkReal x10879=IKcos(j4);
IkReal x10880=(cj2*sj1);
IkReal x10881=(cj1*sj2);
IkReal x10882=(gconst5*sj3);
IkReal x10883=(gconst4*r11);
IkReal x10884=(sj1*sj2);
IkReal x10885=(gconst5*r10);
IkReal x10886=(cj1*cj2);
IkReal x10887=(gconst4*r01);
IkReal x10888=(gconst4*r21);
IkReal x10889=(gconst5*r00);
IkReal x10890=(gconst4*sj3);
IkReal x10891=(cj3*gconst5);
IkReal x10892=(cj3*gconst4);
IkReal x10893=((1.0)*x10879);
IkReal x10894=((1.0)*x10878);
IkReal x10895=(cj3*x10878);
IkReal x10896=(cj3*x10879);
IkReal x10897=(x10880+x10881);
evalcond[0]=((((-1.0)*gconst5*r20*x10894))+(((-1.0)*r22*x10893))+((x10878*x10888)));
evalcond[1]=((((-1.0)*r02*x10893))+(((-1.0)*x10889*x10894))+((x10878*x10887)));
evalcond[2]=((-1.0)+(((-1.0)*x10885*x10894))+(((-1.0)*r12*x10893))+((x10878*x10883)));
evalcond[3]=(((x10883*x10896))+(((-1.0)*cj3*x10885*x10893))+((r12*x10895))+((r10*x10890))+((r11*x10882)));
evalcond[4]=((((-1.0)*sj3*x10883*x10893))+((r10*x10892))+((r11*x10891))+(((-1.0)*r12*sj3*x10894))+((r10*x10879*x10882)));
evalcond[5]=(((r20*x10890))+(((-1.0)*r20*x10891*x10893))+((r22*x10895))+((r21*x10882))+((x10888*x10896))+x10897);
evalcond[6]=((((-1.0)*x10884))+((x10887*x10896))+((r02*x10895))+(((-1.0)*cj3*x10889*x10893))+((r00*x10890))+((r01*x10882))+x10886);
evalcond[7]=((((-1.0)*r02*sj3*x10894))+((r01*x10891))+((r00*x10879*x10882))+(((-1.0)*sj3*x10887*x10893))+((r00*x10892))+x10897);
evalcond[8]=(((r20*x10892))+(((-1.0)*x10886))+((r20*x10879*x10882))+((r21*x10891))+(((-1.0)*r22*sj3*x10894))+(((-1.0)*sj3*x10888*x10893))+x10884);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10898=((1.0)*gconst5);
CheckValue<IkReal> x10899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10898))+(((-1.0)*gconst4*r20)))),-1);
if(!x10899.valid){
continue;
}
CheckValue<IkReal> x10900 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10898))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10899.value)))+(x10900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10901=IKsin(j4);
IkReal x10902=IKcos(j4);
IkReal x10903=(cj2*sj1);
IkReal x10904=(cj1*sj2);
IkReal x10905=(gconst5*sj3);
IkReal x10906=(gconst4*r11);
IkReal x10907=(sj1*sj2);
IkReal x10908=(gconst5*r10);
IkReal x10909=(cj1*cj2);
IkReal x10910=(gconst4*r01);
IkReal x10911=(gconst4*r21);
IkReal x10912=(gconst5*r00);
IkReal x10913=(gconst4*sj3);
IkReal x10914=(cj3*gconst5);
IkReal x10915=(cj3*gconst4);
IkReal x10916=((1.0)*x10902);
IkReal x10917=((1.0)*x10901);
IkReal x10918=(cj3*x10901);
IkReal x10919=(cj3*x10902);
IkReal x10920=(x10904+x10903);
evalcond[0]=(((x10901*x10911))+(((-1.0)*r22*x10916))+(((-1.0)*gconst5*r20*x10917)));
evalcond[1]=(((x10901*x10910))+(((-1.0)*r02*x10916))+(((-1.0)*x10912*x10917)));
evalcond[2]=((-1.0)+(((-1.0)*x10908*x10917))+(((-1.0)*r12*x10916))+((x10901*x10906)));
evalcond[3]=(((r12*x10918))+((x10906*x10919))+(((-1.0)*cj3*x10908*x10916))+((r11*x10905))+((r10*x10913)));
evalcond[4]=((((-1.0)*sj3*x10906*x10916))+((r10*x10902*x10905))+(((-1.0)*r12*sj3*x10917))+((r11*x10914))+((r10*x10915)));
evalcond[5]=((((-1.0)*r20*x10914*x10916))+((x10911*x10919))+((r22*x10918))+((r21*x10905))+x10920+((r20*x10913)));
evalcond[6]=(((x10910*x10919))+((r01*x10905))+((r02*x10918))+((r00*x10913))+(((-1.0)*cj3*x10912*x10916))+(((-1.0)*x10907))+x10909);
evalcond[7]=((((-1.0)*r02*sj3*x10917))+(((-1.0)*sj3*x10910*x10916))+((r00*x10915))+((r00*x10902*x10905))+((r01*x10914))+x10920);
evalcond[8]=((((-1.0)*sj3*x10911*x10916))+((r21*x10914))+((r20*x10902*x10905))+(((-1.0)*x10909))+x10907+(((-1.0)*r22*sj3*x10917))+((r20*x10915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10921=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10921.valid){
continue;
}
CheckValue<IkReal> x10922 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10921.value)))+(x10922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10923=IKsin(j4);
IkReal x10924=IKcos(j4);
IkReal x10925=(cj2*sj1);
IkReal x10926=(cj1*sj2);
IkReal x10927=(gconst5*sj3);
IkReal x10928=(gconst4*r11);
IkReal x10929=(sj1*sj2);
IkReal x10930=(gconst5*r10);
IkReal x10931=(cj1*cj2);
IkReal x10932=(gconst4*r01);
IkReal x10933=(gconst4*r21);
IkReal x10934=(gconst5*r00);
IkReal x10935=(gconst4*sj3);
IkReal x10936=(cj3*gconst5);
IkReal x10937=(cj3*gconst4);
IkReal x10938=((1.0)*x10924);
IkReal x10939=((1.0)*x10923);
IkReal x10940=(cj3*x10923);
IkReal x10941=(cj3*x10924);
IkReal x10942=(x10925+x10926);
evalcond[0]=((((-1.0)*r22*x10938))+(((-1.0)*gconst5*r20*x10939))+((x10923*x10933)));
evalcond[1]=((((-1.0)*r02*x10938))+(((-1.0)*x10934*x10939))+((x10923*x10932)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10938))+((x10923*x10928))+(((-1.0)*x10930*x10939)));
evalcond[3]=(((r10*x10935))+((r12*x10940))+(((-1.0)*cj3*x10930*x10938))+((r11*x10927))+((x10928*x10941)));
evalcond[4]=(((r10*x10937))+((r11*x10936))+(((-1.0)*r12*sj3*x10939))+((r10*x10924*x10927))+(((-1.0)*sj3*x10928*x10938)));
evalcond[5]=(((r21*x10927))+((x10933*x10941))+((r20*x10935))+x10942+((r22*x10940))+(((-1.0)*r20*x10936*x10938)));
evalcond[6]=((((-1.0)*x10929))+(((-1.0)*cj3*x10934*x10938))+((r01*x10927))+((x10932*x10941))+((r02*x10940))+((r00*x10935))+x10931);
evalcond[7]=((((-1.0)*sj3*x10932*x10938))+(((-1.0)*r02*sj3*x10939))+((r01*x10936))+((r00*x10937))+((r00*x10924*x10927))+x10942);
evalcond[8]=((((-1.0)*r22*sj3*x10939))+(((-1.0)*x10931))+(((-1.0)*sj3*x10933*x10938))+((r21*x10936))+((r20*x10924*x10927))+((r20*x10937))+x10929);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10943=((-1.0)*r21);
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(x10943),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
IkReal x10944=((1.0)*(x10946.value));
IkReal x10945=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10944)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10944)));
IkReal gconst4=(x10943*x10945);
IkReal gconst5=((1.0)*r20*x10945);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10947=((-1.0)*r21);
CheckValue<IkReal> x10950 = IKatan2WithCheck(IkReal(x10947),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10950.valid){
continue;
}
IkReal x10948=((1.0)*(x10950.value));
IkReal x10949=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10948)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10948)));
IkReal gconst4=(x10947*x10949);
IkReal gconst5=((1.0)*r20*x10949);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10951=((-1.0)*r21);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(x10951),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
IkReal x10952=((1.0)*(x10954.value));
IkReal x10953=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10952)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10952)));
IkReal gconst4=(x10951*x10953);
IkReal gconst5=((1.0)*r20*x10953);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10955=((-1.0)*r21);
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(x10955),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
IkReal x10956=((1.0)*(x10958.value));
IkReal x10957=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10956)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10956)));
IkReal gconst4=(x10955*x10957);
IkReal gconst5=((1.0)*r20*x10957);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10959=((-1.0)*r21);
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(x10959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
IkReal x10960=((1.0)*(x10962.value));
IkReal x10961=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10960)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10960)));
IkReal gconst4=(x10959*x10961);
IkReal gconst5=((1.0)*r20*x10961);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10963=((-1.0)*r21);
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(x10963),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
IkReal x10964=((1.0)*(x10966.value));
IkReal x10965=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10964)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10964)));
IkReal gconst4=(x10963*x10965);
IkReal gconst5=((1.0)*r20*x10965);
IkReal x10967=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10971=IKPowWithIntegerCheck(x10967,-1);
if(!x10971.valid){
continue;
}
IkReal x10968=x10971.value;
IkReal x10969=((1.0)*x10968);
IkReal x10970=((((-2.0)*r00*r01*r20*r21*x10968))+(((-1.0)*x10969*(r00*r00)*(r20*r20)))+(((-1.0)*x10969*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x10970;
j4eval[1]=r02;
j4eval[2]=x10967;
j4eval[3]=IKsign(x10970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10972=(gconst5*r00);
IkReal x10973=(gconst4*r01);
CheckValue<IkReal> x10974 = IKatan2WithCheck(IkReal(((((-1.0)*x10973))+x10972)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10974.valid){
continue;
}
CheckValue<IkReal> x10975=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10972*x10972)))+(((2.0)*x10972*x10973))+(((-1.0)*(x10973*x10973))))),-1);
if(!x10975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10974.value)+(((1.5707963267949)*(x10975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10976=IKsin(j4);
IkReal x10977=IKcos(j4);
IkReal x10978=(gconst4*r11);
IkReal x10979=((1.0)*cj1);
IkReal x10980=(gconst5*r10);
IkReal x10981=(gconst4*r01);
IkReal x10982=(gconst5*r00);
IkReal x10983=(gconst4*r21);
IkReal x10984=(gconst5*r20);
IkReal x10985=((1.0)*x10977);
IkReal x10986=((1.0)*x10976);
evalcond[0]=((((-1.0)*r22*x10985))+(((-1.0)*x10984*x10986))+((x10976*x10983)));
evalcond[1]=(((x10976*x10978))+(((-1.0)*r12*x10985))+(((-1.0)*x10980*x10986)));
evalcond[2]=(((x10977*x10982))+(((-1.0)*x10981*x10985))+(((-1.0)*r02*x10986)));
evalcond[3]=((-1.0)+(((-1.0)*x10982*x10986))+(((-1.0)*r02*x10985))+((x10976*x10981)));
evalcond[4]=((((-1.0)*x10983*x10985))+(((-1.0)*cj2*x10979))+(((-1.0)*r22*x10986))+((x10977*x10984))+((sj1*sj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10977*x10980))+(((-1.0)*r12*x10986))+(((-1.0)*x10978*x10985))+(((-1.0)*sj2*x10979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10987=((1.0)*gconst5);
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10987))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
CheckValue<IkReal> x10989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10987))+(((-1.0)*gconst4*r10)))),-1);
if(!x10989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10988.value)+(((1.5707963267949)*(x10989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10990=IKsin(j4);
IkReal x10991=IKcos(j4);
IkReal x10992=(gconst4*r11);
IkReal x10993=((1.0)*cj1);
IkReal x10994=(gconst5*r10);
IkReal x10995=(gconst4*r01);
IkReal x10996=(gconst5*r00);
IkReal x10997=(gconst4*r21);
IkReal x10998=(gconst5*r20);
IkReal x10999=((1.0)*x10991);
IkReal x11000=((1.0)*x10990);
evalcond[0]=((((-1.0)*r22*x10999))+(((-1.0)*x10998*x11000))+((x10990*x10997)));
evalcond[1]=((((-1.0)*x10994*x11000))+(((-1.0)*r12*x10999))+((x10990*x10992)));
evalcond[2]=((((-1.0)*r02*x11000))+(((-1.0)*x10995*x10999))+((x10991*x10996)));
evalcond[3]=((-1.0)+(((-1.0)*x10996*x11000))+(((-1.0)*r02*x10999))+((x10990*x10995)));
evalcond[4]=((((-1.0)*x10997*x10999))+(((-1.0)*cj2*x10993))+(((-1.0)*r22*x11000))+((x10991*x10998))+((sj1*sj2)));
evalcond[5]=((((-1.0)*x10992*x10999))+(((-1.0)*sj2*x10993))+(((-1.0)*cj2*sj1))+((x10991*x10994))+(((-1.0)*r12*x11000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11001 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11001.valid){
continue;
}
CheckValue<IkReal> x11002=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11001.value)+(((1.5707963267949)*(x11002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11003=IKsin(j4);
IkReal x11004=IKcos(j4);
IkReal x11005=(gconst4*r11);
IkReal x11006=((1.0)*cj1);
IkReal x11007=(gconst5*r10);
IkReal x11008=(gconst4*r01);
IkReal x11009=(gconst5*r00);
IkReal x11010=(gconst4*r21);
IkReal x11011=(gconst5*r20);
IkReal x11012=((1.0)*x11004);
IkReal x11013=((1.0)*x11003);
evalcond[0]=((((-1.0)*r22*x11012))+(((-1.0)*x11011*x11013))+((x11003*x11010)));
evalcond[1]=(((x11003*x11005))+(((-1.0)*x11007*x11013))+(((-1.0)*r12*x11012)));
evalcond[2]=((((-1.0)*r02*x11013))+((x11004*x11009))+(((-1.0)*x11008*x11012)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11012))+((x11003*x11008))+(((-1.0)*x11009*x11013)));
evalcond[4]=((((-1.0)*r22*x11013))+((x11004*x11011))+(((-1.0)*x11010*x11012))+((sj1*sj2))+(((-1.0)*cj2*x11006)));
evalcond[5]=(((x11004*x11007))+(((-1.0)*x11005*x11012))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x11013))+(((-1.0)*sj2*x11006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11014=((-1.0)*r21);
CheckValue<IkReal> x11017 = IKatan2WithCheck(IkReal(x11014),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11017.valid){
continue;
}
IkReal x11015=((1.0)*(x11017.value));
IkReal x11016=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11015)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11015)));
IkReal gconst4=(x11014*x11016);
IkReal gconst5=((1.0)*r20*x11016);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11018=((-1.0)*r21);
CheckValue<IkReal> x11021 = IKatan2WithCheck(IkReal(x11018),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11021.valid){
continue;
}
IkReal x11019=((1.0)*(x11021.value));
IkReal x11020=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11019)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11019)));
IkReal gconst4=(x11018*x11020);
IkReal gconst5=((1.0)*r20*x11020);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11022=((-1.0)*r21);
CheckValue<IkReal> x11025 = IKatan2WithCheck(IkReal(x11022),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11025.valid){
continue;
}
IkReal x11023=((1.0)*(x11025.value));
IkReal x11024=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11023)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11023)));
IkReal gconst4=(x11022*x11024);
IkReal gconst5=((1.0)*r20*x11024);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11026=(gconst4*r01);
IkReal x11027=(gconst5*r00);
CheckValue<IkReal> x11028=IKPowWithIntegerCheck(IKsign(((x11026*x11026)+(((-2.0)*x11026*x11027))+(r02*r02)+(x11027*x11027))),-1);
if(!x11028.valid){
continue;
}
CheckValue<IkReal> x11029 = IKatan2WithCheck(IkReal(((((-1.0)*x11027))+x11026)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11028.value)))+(x11029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11030=IKcos(j4);
IkReal x11031=IKsin(j4);
IkReal x11032=(gconst4*r11);
IkReal x11033=(gconst5*r10);
IkReal x11034=((1.0)*cj1);
IkReal x11035=(gconst5*r00);
IkReal x11036=(gconst5*r20);
IkReal x11037=((1.0)*x11030);
IkReal x11038=(gconst4*x11030);
IkReal x11039=((1.0)*x11031);
IkReal x11040=(gconst4*x11031);
evalcond[0]=(((r01*x11038))+(((-1.0)*x11035*x11037))+((r02*x11031)));
evalcond[1]=((((-1.0)*r22*x11037))+(((-1.0)*x11036*x11039))+((r21*x11040)));
evalcond[2]=((((-1.0)*x11033*x11039))+(((-1.0)*r12*x11037))+((x11031*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11037))+((r01*x11040))+(((-1.0)*x11035*x11039)));
evalcond[4]=(((r21*x11038))+((sj1*sj2))+(((-1.0)*x11036*x11037))+((r22*x11031))+(((-1.0)*cj2*x11034)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11034))+((x11030*x11032))+((r12*x11031))+(((-1.0)*x11033*x11037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11041=((1.0)*gconst5);
CheckValue<IkReal> x11042 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11041))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11042.valid){
continue;
}
CheckValue<IkReal> x11043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11041))+(((-1.0)*gconst4*r10)))),-1);
if(!x11043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11042.value)+(((1.5707963267949)*(x11043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11044=IKcos(j4);
IkReal x11045=IKsin(j4);
IkReal x11046=(gconst4*r11);
IkReal x11047=(gconst5*r10);
IkReal x11048=((1.0)*cj1);
IkReal x11049=(gconst5*r00);
IkReal x11050=(gconst5*r20);
IkReal x11051=((1.0)*x11044);
IkReal x11052=(gconst4*x11044);
IkReal x11053=((1.0)*x11045);
IkReal x11054=(gconst4*x11045);
evalcond[0]=((((-1.0)*x11049*x11051))+((r01*x11052))+((r02*x11045)));
evalcond[1]=((((-1.0)*r22*x11051))+(((-1.0)*x11050*x11053))+((r21*x11054)));
evalcond[2]=((((-1.0)*r12*x11051))+((x11045*x11046))+(((-1.0)*x11047*x11053)));
evalcond[3]=((-1.0)+(((-1.0)*x11049*x11053))+((r01*x11054))+(((-1.0)*r02*x11051)));
evalcond[4]=((((-1.0)*cj2*x11048))+((sj1*sj2))+((r22*x11045))+(((-1.0)*x11050*x11051))+((r21*x11052)));
evalcond[5]=(((x11044*x11046))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11048))+(((-1.0)*x11047*x11051))+((r12*x11045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11055 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11055.valid){
continue;
}
CheckValue<IkReal> x11056=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11055.value)+(((1.5707963267949)*(x11056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11057=IKcos(j4);
IkReal x11058=IKsin(j4);
IkReal x11059=(gconst4*r11);
IkReal x11060=(gconst5*r10);
IkReal x11061=((1.0)*cj1);
IkReal x11062=(gconst5*r00);
IkReal x11063=(gconst5*r20);
IkReal x11064=((1.0)*x11057);
IkReal x11065=(gconst4*x11057);
IkReal x11066=((1.0)*x11058);
IkReal x11067=(gconst4*x11058);
evalcond[0]=(((r01*x11065))+((r02*x11058))+(((-1.0)*x11062*x11064)));
evalcond[1]=((((-1.0)*r22*x11064))+((r21*x11067))+(((-1.0)*x11063*x11066)));
evalcond[2]=((((-1.0)*x11060*x11066))+(((-1.0)*r12*x11064))+((x11058*x11059)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11064))+((r01*x11067))+(((-1.0)*x11062*x11066)));
evalcond[4]=(((r22*x11058))+((sj1*sj2))+((r21*x11065))+(((-1.0)*cj2*x11061))+(((-1.0)*x11063*x11064)));
evalcond[5]=(((r12*x11058))+(((-1.0)*x11060*x11064))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11061))+((x11057*x11059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11068=((-1.0)*r21);
CheckValue<IkReal> x11071 = IKatan2WithCheck(IkReal(x11068),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11071.valid){
continue;
}
IkReal x11069=((1.0)*(x11071.value));
IkReal x11070=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11069)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11069)));
IkReal gconst4=(x11068*x11070);
IkReal gconst5=((1.0)*r20*x11070);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11072=((-1.0)*r21);
CheckValue<IkReal> x11075 = IKatan2WithCheck(IkReal(x11072),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11075.valid){
continue;
}
IkReal x11073=((1.0)*(x11075.value));
IkReal x11074=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11073)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11073)));
IkReal gconst4=(x11072*x11074);
IkReal gconst5=((1.0)*r20*x11074);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11076=((-1.0)*r21);
CheckValue<IkReal> x11079 = IKatan2WithCheck(IkReal(x11076),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11079.valid){
continue;
}
IkReal x11077=((1.0)*(x11079.value));
IkReal x11078=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11077)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11077)));
IkReal gconst4=(x11076*x11078);
IkReal gconst5=((1.0)*r20*x11078);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11080=(gconst4*r01);
IkReal x11081=(gconst5*r00);
CheckValue<IkReal> x11082=IKPowWithIntegerCheck(IKsign(((x11081*x11081)+(((-2.0)*x11080*x11081))+(r02*r02)+(x11080*x11080))),-1);
if(!x11082.valid){
continue;
}
CheckValue<IkReal> x11083 = IKatan2WithCheck(IkReal(((((-1.0)*x11081))+x11080)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11082.value)))+(x11083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11084=IKcos(j4);
IkReal x11085=IKsin(j4);
IkReal x11086=(gconst4*r11);
IkReal x11087=(gconst5*r10);
IkReal x11088=(gconst5*r00);
IkReal x11089=(gconst5*r20);
IkReal x11090=((1.0)*x11084);
IkReal x11091=(gconst4*x11084);
IkReal x11092=((1.0)*x11085);
IkReal x11093=(gconst4*x11085);
evalcond[0]=(((r01*x11091))+((r02*x11085))+(((-1.0)*x11088*x11090)));
evalcond[1]=((((-1.0)*r22*x11090))+((r21*x11093))+(((-1.0)*x11089*x11092)));
evalcond[2]=((((-1.0)*r12*x11090))+((x11085*x11086))+(((-1.0)*x11087*x11092)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11090))+((r01*x11093))+(((-1.0)*x11088*x11092)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11085))+((r21*x11091))+(((-1.0)*x11089*x11090)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11084*x11086))+((r12*x11085))+(((-1.0)*x11087*x11090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11094=((1.0)*gconst5);
CheckValue<IkReal> x11095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11094))+(((-1.0)*gconst4*r10)))),-1);
if(!x11095.valid){
continue;
}
CheckValue<IkReal> x11096 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11094))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11095.value)))+(x11096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11097=IKcos(j4);
IkReal x11098=IKsin(j4);
IkReal x11099=(gconst4*r11);
IkReal x11100=(gconst5*r10);
IkReal x11101=(gconst5*r00);
IkReal x11102=(gconst5*r20);
IkReal x11103=((1.0)*x11097);
IkReal x11104=(gconst4*x11097);
IkReal x11105=((1.0)*x11098);
IkReal x11106=(gconst4*x11098);
evalcond[0]=(((r02*x11098))+(((-1.0)*x11101*x11103))+((r01*x11104)));
evalcond[1]=((((-1.0)*x11102*x11105))+((r21*x11106))+(((-1.0)*r22*x11103)));
evalcond[2]=(((x11098*x11099))+(((-1.0)*x11100*x11105))+(((-1.0)*r12*x11103)));
evalcond[3]=((-1.0)+(((-1.0)*x11101*x11105))+(((-1.0)*r02*x11103))+((r01*x11106)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11102*x11103))+((r21*x11104))+((r22*x11098)));
evalcond[5]=(((x11097*x11099))+((r12*x11098))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11100*x11103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11107 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11107.valid){
continue;
}
CheckValue<IkReal> x11108=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11107.value)+(((1.5707963267949)*(x11108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11109=IKcos(j4);
IkReal x11110=IKsin(j4);
IkReal x11111=(gconst4*r11);
IkReal x11112=(gconst5*r10);
IkReal x11113=(gconst5*r00);
IkReal x11114=(gconst5*r20);
IkReal x11115=((1.0)*x11109);
IkReal x11116=(gconst4*x11109);
IkReal x11117=((1.0)*x11110);
IkReal x11118=(gconst4*x11110);
evalcond[0]=(((r02*x11110))+(((-1.0)*x11113*x11115))+((r01*x11116)));
evalcond[1]=((((-1.0)*x11114*x11117))+((r21*x11118))+(((-1.0)*r22*x11115)));
evalcond[2]=((((-1.0)*x11112*x11117))+(((-1.0)*r12*x11115))+((x11110*x11111)));
evalcond[3]=((-1.0)+(((-1.0)*x11113*x11117))+(((-1.0)*r02*x11115))+((r01*x11118)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11114*x11115))+((r21*x11116))+((r22*x11110)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11112*x11115))+((x11109*x11111))+((r12*x11110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11119=((-1.0)*r21);
CheckValue<IkReal> x11122 = IKatan2WithCheck(IkReal(x11119),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11122.valid){
continue;
}
IkReal x11120=((1.0)*(x11122.value));
IkReal x11121=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11120)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11120)));
IkReal gconst4=(x11119*x11121);
IkReal gconst5=((1.0)*r20*x11121);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11123=((-1.0)*r21);
CheckValue<IkReal> x11126 = IKatan2WithCheck(IkReal(x11123),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11126.valid){
continue;
}
IkReal x11124=((1.0)*(x11126.value));
IkReal x11125=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11124)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11124)));
IkReal gconst4=(x11123*x11125);
IkReal gconst5=((1.0)*r20*x11125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11127=((-1.0)*r21);
CheckValue<IkReal> x11130 = IKatan2WithCheck(IkReal(x11127),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11130.valid){
continue;
}
IkReal x11128=((1.0)*(x11130.value));
IkReal x11129=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11128)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11128)));
IkReal gconst4=(x11127*x11129);
IkReal gconst5=((1.0)*r20*x11129);
IkReal x11131=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11135=IKPowWithIntegerCheck(x11131,-1);
if(!x11135.valid){
continue;
}
IkReal x11132=x11135.value;
IkReal x11133=((1.0)*x11132);
IkReal x11134=((((-2.0)*r00*r01*r20*r21*x11132))+(((-1.0)*x11133*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11133*(r01*r01)*(r21*r21))));
j4eval[0]=x11134;
j4eval[1]=r02;
j4eval[2]=x11131;
j4eval[3]=IKsign(x11134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11136=(gconst5*r00);
IkReal x11137=(gconst4*r01);
CheckValue<IkReal> x11138=IKPowWithIntegerCheck(IKsign(((((2.0)*x11136*x11137))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11136*x11136)))+(((-1.0)*(x11137*x11137))))),-1);
if(!x11138.valid){
continue;
}
CheckValue<IkReal> x11139 = IKatan2WithCheck(IkReal(((((-1.0)*x11137))+x11136)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11138.value)))+(x11139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11140=IKsin(j4);
IkReal x11141=IKcos(j4);
IkReal x11142=(gconst4*r11);
IkReal x11143=(gconst5*r10);
IkReal x11144=(gconst4*r01);
IkReal x11145=(gconst5*r00);
IkReal x11146=(gconst4*r21);
IkReal x11147=(gconst5*r20);
IkReal x11148=((1.0)*x11141);
IkReal x11149=((1.0)*x11140);
evalcond[0]=(((x11140*x11146))+(((-1.0)*r22*x11148))+(((-1.0)*x11147*x11149)));
evalcond[1]=(((x11140*x11142))+(((-1.0)*x11143*x11149))+(((-1.0)*r12*x11148)));
evalcond[2]=(((x11141*x11145))+(((-1.0)*r02*x11149))+(((-1.0)*x11144*x11148)));
evalcond[3]=((-1.0)+((x11140*x11144))+(((-1.0)*r02*x11148))+(((-1.0)*x11145*x11149)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11149))+((x11141*x11147))+(((-1.0)*x11146*x11148)));
evalcond[5]=((((-1.0)*x11142*x11148))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11141*x11143))+(((-1.0)*r12*x11149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11150=((1.0)*gconst5);
CheckValue<IkReal> x11151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11150))+(((-1.0)*gconst4*r10)))),-1);
if(!x11151.valid){
continue;
}
CheckValue<IkReal> x11152 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11150))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11151.value)))+(x11152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11153=IKsin(j4);
IkReal x11154=IKcos(j4);
IkReal x11155=(gconst4*r11);
IkReal x11156=(gconst5*r10);
IkReal x11157=(gconst4*r01);
IkReal x11158=(gconst5*r00);
IkReal x11159=(gconst4*r21);
IkReal x11160=(gconst5*r20);
IkReal x11161=((1.0)*x11154);
IkReal x11162=((1.0)*x11153);
evalcond[0]=((((-1.0)*r22*x11161))+(((-1.0)*x11160*x11162))+((x11153*x11159)));
evalcond[1]=((((-1.0)*x11156*x11162))+(((-1.0)*r12*x11161))+((x11153*x11155)));
evalcond[2]=((((-1.0)*x11157*x11161))+((x11154*x11158))+(((-1.0)*r02*x11162)));
evalcond[3]=((-1.0)+(((-1.0)*x11158*x11162))+(((-1.0)*r02*x11161))+((x11153*x11157)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11162))+((cj1*sj2))+(((-1.0)*x11159*x11161))+((x11154*x11160)));
evalcond[5]=((((-1.0)*x11155*x11161))+(((-1.0)*cj1*cj2))+(((-1.0)*r12*x11162))+((sj1*sj2))+((x11154*x11156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
CheckValue<IkReal> x11164=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11163.value)+(((1.5707963267949)*(x11164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11165=IKsin(j4);
IkReal x11166=IKcos(j4);
IkReal x11167=(gconst4*r11);
IkReal x11168=(gconst5*r10);
IkReal x11169=(gconst4*r01);
IkReal x11170=(gconst5*r00);
IkReal x11171=(gconst4*r21);
IkReal x11172=(gconst5*r20);
IkReal x11173=((1.0)*x11166);
IkReal x11174=((1.0)*x11165);
evalcond[0]=((((-1.0)*x11172*x11174))+(((-1.0)*r22*x11173))+((x11165*x11171)));
evalcond[1]=((((-1.0)*r12*x11173))+((x11165*x11167))+(((-1.0)*x11168*x11174)));
evalcond[2]=(((x11166*x11170))+(((-1.0)*x11169*x11173))+(((-1.0)*r02*x11174)));
evalcond[3]=((-1.0)+((x11165*x11169))+(((-1.0)*x11170*x11174))+(((-1.0)*r02*x11173)));
evalcond[4]=(((cj2*sj1))+((x11166*x11172))+((cj1*sj2))+(((-1.0)*r22*x11174))+(((-1.0)*x11171*x11173)));
evalcond[5]=((((-1.0)*x11167*x11173))+((x11166*x11168))+(((-1.0)*r12*x11174))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11175=gconst4*gconst4;
IkReal x11176=gconst5*gconst5;
IkReal x11177=(r01*r20);
IkReal x11178=(gconst4*sj3);
IkReal x11179=(r01*r21);
IkReal x11180=((1.0)*cj3);
IkReal x11181=(r00*r21);
IkReal x11182=(r00*r20);
IkReal x11183=(cj3*gconst4*gconst5);
IkReal x11184=((1.0)*x11176);
CheckValue<IkReal> x11185=IKPowWithIntegerCheck(IKsign((((x11177*x11183))+((x11181*x11183))+(((-1.0)*x11175*x11179*x11180))+(((-1.0)*x11176*x11180*x11182))+(((-1.0)*r02*r22*x11180)))),-1);
if(!x11185.valid){
continue;
}
CheckValue<IkReal> x11186 = IKatan2WithCheck(IkReal((((r00*r22*x11178))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11178*x11182))+(((-1.0)*sj3*x11177*x11184))+((gconst5*x11178*x11179))+((sj3*x11175*x11181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11185.value)))+(x11186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11187=IKsin(j4);
IkReal x11188=IKcos(j4);
IkReal x11189=(sj1*sj2);
IkReal x11190=(gconst5*sj3);
IkReal x11191=(gconst4*r11);
IkReal x11192=(gconst5*r10);
IkReal x11193=((1.0)*cj1);
IkReal x11194=(gconst4*r01);
IkReal x11195=(cj2*sj1);
IkReal x11196=(gconst5*r00);
IkReal x11197=(gconst4*sj3);
IkReal x11198=(cj3*gconst5);
IkReal x11199=(cj3*gconst4);
IkReal x11200=(gconst4*r21);
IkReal x11201=(cj2*x11193);
IkReal x11202=((1.0)*x11188);
IkReal x11203=((1.0)*x11187);
IkReal x11204=(cj3*x11187);
IkReal x11205=(cj3*x11188);
evalcond[0]=((((-1.0)*r22*x11202))+((x11187*x11200))+(((-1.0)*gconst5*r20*x11203)));
evalcond[1]=((((-1.0)*r12*x11202))+(((-1.0)*x11192*x11203))+((x11187*x11191)));
evalcond[2]=((-1.0)+(((-1.0)*x11196*x11203))+(((-1.0)*r02*x11202))+((x11187*x11194)));
evalcond[3]=(((r02*x11204))+((r00*x11197))+((r01*x11190))+((x11194*x11205))+(((-1.0)*cj3*x11196*x11202)));
evalcond[4]=(((r00*x11199))+(((-1.0)*sj3*x11194*x11202))+((r01*x11198))+((r00*x11188*x11190))+(((-1.0)*r02*sj3*x11203)));
evalcond[5]=(((r21*x11190))+(((-1.0)*r20*x11198*x11202))+((r20*x11197))+((cj1*sj2))+x11195+((r22*x11204))+((r21*x11188*x11199)));
evalcond[6]=((((-1.0)*x11201))+((r11*x11190))+((x11191*x11205))+x11189+((r12*x11204))+(((-1.0)*cj3*x11192*x11202))+((r10*x11197)));
evalcond[7]=(((r21*x11198))+((r20*x11199))+(((-1.0)*x11201))+((r20*x11188*x11190))+(((-1.0)*r21*x11197*x11202))+(((-1.0)*r22*sj3*x11203))+x11189);
evalcond[8]=((((-1.0)*sj3*x11191*x11202))+(((-1.0)*sj2*x11193))+((r11*x11198))+(((-1.0)*x11195))+((r10*x11188*x11190))+((r10*x11199))+(((-1.0)*r12*sj3*x11203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11206=((1.0)*gconst5);
CheckValue<IkReal> x11207 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11206))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11207.valid){
continue;
}
CheckValue<IkReal> x11208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11206))+(((-1.0)*gconst4*r10)))),-1);
if(!x11208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11207.value)+(((1.5707963267949)*(x11208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11209=IKsin(j4);
IkReal x11210=IKcos(j4);
IkReal x11211=(sj1*sj2);
IkReal x11212=(gconst5*sj3);
IkReal x11213=(gconst4*r11);
IkReal x11214=(gconst5*r10);
IkReal x11215=((1.0)*cj1);
IkReal x11216=(gconst4*r01);
IkReal x11217=(cj2*sj1);
IkReal x11218=(gconst5*r00);
IkReal x11219=(gconst4*sj3);
IkReal x11220=(cj3*gconst5);
IkReal x11221=(cj3*gconst4);
IkReal x11222=(gconst4*r21);
IkReal x11223=(cj2*x11215);
IkReal x11224=((1.0)*x11210);
IkReal x11225=((1.0)*x11209);
IkReal x11226=(cj3*x11209);
IkReal x11227=(cj3*x11210);
evalcond[0]=(((x11209*x11222))+(((-1.0)*gconst5*r20*x11225))+(((-1.0)*r22*x11224)));
evalcond[1]=((((-1.0)*x11214*x11225))+((x11209*x11213))+(((-1.0)*r12*x11224)));
evalcond[2]=((-1.0)+(((-1.0)*x11218*x11225))+((x11209*x11216))+(((-1.0)*r02*x11224)));
evalcond[3]=(((r02*x11226))+((r01*x11212))+((r00*x11219))+((x11216*x11227))+(((-1.0)*cj3*x11218*x11224)));
evalcond[4]=((((-1.0)*r02*sj3*x11225))+(((-1.0)*sj3*x11216*x11224))+((r00*x11210*x11212))+((r00*x11221))+((r01*x11220)));
evalcond[5]=(((r21*x11212))+((r22*x11226))+((r20*x11219))+x11217+((cj1*sj2))+(((-1.0)*r20*x11220*x11224))+((r21*x11210*x11221)));
evalcond[6]=((((-1.0)*cj3*x11214*x11224))+x11211+((r12*x11226))+(((-1.0)*x11223))+((x11213*x11227))+((r11*x11212))+((r10*x11219)));
evalcond[7]=(((r20*x11210*x11212))+x11211+(((-1.0)*x11223))+(((-1.0)*r22*sj3*x11225))+((r20*x11221))+((r21*x11220))+(((-1.0)*r21*x11219*x11224)));
evalcond[8]=(((r10*x11210*x11212))+((r11*x11220))+(((-1.0)*sj3*x11213*x11224))+((r10*x11221))+(((-1.0)*x11217))+(((-1.0)*r12*sj3*x11225))+(((-1.0)*sj2*x11215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11228 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11228.valid){
continue;
}
CheckValue<IkReal> x11229=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11228.value)+(((1.5707963267949)*(x11229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11230=IKsin(j4);
IkReal x11231=IKcos(j4);
IkReal x11232=(sj1*sj2);
IkReal x11233=(gconst5*sj3);
IkReal x11234=(gconst4*r11);
IkReal x11235=(gconst5*r10);
IkReal x11236=((1.0)*cj1);
IkReal x11237=(gconst4*r01);
IkReal x11238=(cj2*sj1);
IkReal x11239=(gconst5*r00);
IkReal x11240=(gconst4*sj3);
IkReal x11241=(cj3*gconst5);
IkReal x11242=(cj3*gconst4);
IkReal x11243=(gconst4*r21);
IkReal x11244=(cj2*x11236);
IkReal x11245=((1.0)*x11231);
IkReal x11246=((1.0)*x11230);
IkReal x11247=(cj3*x11230);
IkReal x11248=(cj3*x11231);
evalcond[0]=((((-1.0)*gconst5*r20*x11246))+((x11230*x11243))+(((-1.0)*r22*x11245)));
evalcond[1]=(((x11230*x11234))+(((-1.0)*x11235*x11246))+(((-1.0)*r12*x11245)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11245))+((x11230*x11237))+(((-1.0)*x11239*x11246)));
evalcond[3]=(((r02*x11247))+((x11237*x11248))+(((-1.0)*cj3*x11239*x11245))+((r01*x11233))+((r00*x11240)));
evalcond[4]=(((r00*x11231*x11233))+(((-1.0)*r02*sj3*x11246))+(((-1.0)*sj3*x11237*x11245))+((r01*x11241))+((r00*x11242)));
evalcond[5]=(((r22*x11247))+x11238+((cj1*sj2))+((r20*x11240))+(((-1.0)*r20*x11241*x11245))+((r21*x11231*x11242))+((r21*x11233)));
evalcond[6]=(((x11234*x11248))+x11232+(((-1.0)*x11244))+((r11*x11233))+((r12*x11247))+((r10*x11240))+(((-1.0)*cj3*x11235*x11245)));
evalcond[7]=(x11232+(((-1.0)*x11244))+((r20*x11242))+(((-1.0)*r22*sj3*x11246))+((r21*x11241))+((r20*x11231*x11233))+(((-1.0)*r21*x11240*x11245)));
evalcond[8]=((((-1.0)*x11238))+(((-1.0)*sj2*x11236))+(((-1.0)*r12*sj3*x11246))+((r11*x11241))+(((-1.0)*sj3*x11234*x11245))+((r10*x11231*x11233))+((r10*x11242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11249=((-1.0)*r21);
CheckValue<IkReal> x11252 = IKatan2WithCheck(IkReal(x11249),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11252.valid){
continue;
}
IkReal x11250=((1.0)*(x11252.value));
IkReal x11251=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11250)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11250)));
IkReal gconst4=(x11249*x11251);
IkReal gconst5=((1.0)*r20*x11251);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11253=((-1.0)*r21);
CheckValue<IkReal> x11256 = IKatan2WithCheck(IkReal(x11253),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11256.valid){
continue;
}
IkReal x11254=((1.0)*(x11256.value));
IkReal x11255=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11254)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11254)));
IkReal gconst4=(x11253*x11255);
IkReal gconst5=((1.0)*r20*x11255);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11257=((-1.0)*r21);
CheckValue<IkReal> x11260 = IKatan2WithCheck(IkReal(x11257),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11260.valid){
continue;
}
IkReal x11258=((1.0)*(x11260.value));
IkReal x11259=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11258)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11258)));
IkReal gconst4=(x11257*x11259);
IkReal gconst5=((1.0)*r20*x11259);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11261=((-1.0)*r21);
CheckValue<IkReal> x11264 = IKatan2WithCheck(IkReal(x11261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11264.valid){
continue;
}
IkReal x11262=((1.0)*(x11264.value));
IkReal x11263=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11262)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11262)));
IkReal gconst4=(x11261*x11263);
IkReal gconst5=((1.0)*r20*x11263);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11265=((-1.0)*r21);
CheckValue<IkReal> x11268 = IKatan2WithCheck(IkReal(x11265),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11268.valid){
continue;
}
IkReal x11266=((1.0)*(x11268.value));
IkReal x11267=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11266)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11266)));
IkReal gconst4=(x11265*x11267);
IkReal gconst5=((1.0)*r20*x11267);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11269=((-1.0)*r21);
CheckValue<IkReal> x11272 = IKatan2WithCheck(IkReal(x11269),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11272.valid){
continue;
}
IkReal x11270=((1.0)*(x11272.value));
IkReal x11271=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11270)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11270)));
IkReal gconst4=(x11269*x11271);
IkReal gconst5=((1.0)*r20*x11271);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11273=(gconst5*r00);
IkReal x11274=(gconst4*r01);
CheckValue<IkReal> x11275 = IKatan2WithCheck(IkReal((x11273+(((-1.0)*x11274)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11275.valid){
continue;
}
CheckValue<IkReal> x11276=IKPowWithIntegerCheck(IKsign(((x11273*x11273)+(((-2.0)*x11273*x11274))+(x11274*x11274)+(r02*r02))),-1);
if(!x11276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11275.value)+(((1.5707963267949)*(x11276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11277=IKsin(j4);
IkReal x11278=IKcos(j4);
IkReal x11279=(gconst4*r11);
IkReal x11280=(gconst5*r10);
IkReal x11281=(gconst4*r01);
IkReal x11282=(gconst5*r00);
IkReal x11283=(gconst4*r21);
IkReal x11284=(gconst5*r20);
IkReal x11285=((1.0)*x11278);
IkReal x11286=((1.0)*x11277);
evalcond[0]=((((-1.0)*x11284*x11286))+(((-1.0)*r22*x11285))+((x11277*x11283)));
evalcond[1]=((((-1.0)*r12*x11285))+((x11277*x11279))+(((-1.0)*x11280*x11286)));
evalcond[2]=((((-1.0)*r02*x11286))+(((-1.0)*x11281*x11285))+((x11278*x11282)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11285))+(((-1.0)*x11282*x11286))+((x11277*x11281)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11286))+((cj1*sj2))+(((-1.0)*x11279*x11285))+((x11278*x11280)));
evalcond[5]=((((-1.0)*r22*x11286))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11283*x11285))+((x11278*x11284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11287=((1.0)*gconst5);
CheckValue<IkReal> x11288 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11287))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11288.valid){
continue;
}
CheckValue<IkReal> x11289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11287))+(((-1.0)*gconst4*r20)))),-1);
if(!x11289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11288.value)+(((1.5707963267949)*(x11289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11290=IKsin(j4);
IkReal x11291=IKcos(j4);
IkReal x11292=(gconst4*r11);
IkReal x11293=(gconst5*r10);
IkReal x11294=(gconst4*r01);
IkReal x11295=(gconst5*r00);
IkReal x11296=(gconst4*r21);
IkReal x11297=(gconst5*r20);
IkReal x11298=((1.0)*x11291);
IkReal x11299=((1.0)*x11290);
evalcond[0]=((((-1.0)*r22*x11298))+(((-1.0)*x11297*x11299))+((x11290*x11296)));
evalcond[1]=(((x11290*x11292))+(((-1.0)*x11293*x11299))+(((-1.0)*r12*x11298)));
evalcond[2]=((((-1.0)*r02*x11299))+((x11291*x11295))+(((-1.0)*x11294*x11298)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11298))+(((-1.0)*x11295*x11299))+((x11290*x11294)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11291*x11293))+(((-1.0)*x11292*x11298))+(((-1.0)*r12*x11299)));
evalcond[5]=((((-1.0)*r22*x11299))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11291*x11297))+(((-1.0)*x11296*x11298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11300=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11300.valid){
continue;
}
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11300.value)))+(x11301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11302=IKsin(j4);
IkReal x11303=IKcos(j4);
IkReal x11304=(gconst4*r11);
IkReal x11305=(gconst5*r10);
IkReal x11306=(gconst4*r01);
IkReal x11307=(gconst5*r00);
IkReal x11308=(gconst4*r21);
IkReal x11309=(gconst5*r20);
IkReal x11310=((1.0)*x11303);
IkReal x11311=((1.0)*x11302);
evalcond[0]=((((-1.0)*x11309*x11311))+(((-1.0)*r22*x11310))+((x11302*x11308)));
evalcond[1]=((((-1.0)*r12*x11310))+(((-1.0)*x11305*x11311))+((x11302*x11304)));
evalcond[2]=((((-1.0)*r02*x11311))+(((-1.0)*x11306*x11310))+((x11303*x11307)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11310))+(((-1.0)*x11307*x11311))+((x11302*x11306)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11304*x11310))+((cj1*sj2))+(((-1.0)*r12*x11311))+((x11303*x11305)));
evalcond[5]=((((-1.0)*r22*x11311))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11308*x11310))+((x11303*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11312=((-1.0)*r21);
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal(x11312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
IkReal x11313=((1.0)*(x11315.value));
IkReal x11314=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11313)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11313)));
IkReal gconst4=(x11312*x11314);
IkReal gconst5=((1.0)*r20*x11314);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11316=((-1.0)*r21);
CheckValue<IkReal> x11319 = IKatan2WithCheck(IkReal(x11316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11319.valid){
continue;
}
IkReal x11317=((1.0)*(x11319.value));
IkReal x11318=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11317)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11317)));
IkReal gconst4=(x11316*x11318);
IkReal gconst5=((1.0)*r20*x11318);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11320=((-1.0)*r21);
CheckValue<IkReal> x11323 = IKatan2WithCheck(IkReal(x11320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11323.valid){
continue;
}
IkReal x11321=((1.0)*(x11323.value));
IkReal x11322=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11321)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11321)));
IkReal gconst4=(x11320*x11322);
IkReal gconst5=((1.0)*r20*x11322);
IkReal x11324=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11328=IKPowWithIntegerCheck(x11324,-1);
if(!x11328.valid){
continue;
}
IkReal x11325=x11328.value;
IkReal x11326=((1.0)*x11325);
IkReal x11327=((((-1.0)*x11326*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11325))+(((-1.0)*(r02*r02)))+(((-1.0)*x11326*(r01*r01)*(r21*r21))));
j4eval[0]=x11327;
j4eval[1]=IKsign(x11327);
j4eval[2]=r02;
j4eval[3]=x11324;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11329=(gconst4*r01);
IkReal x11330=(gconst5*r00);
CheckValue<IkReal> x11331=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11330*x11330)))+(((-1.0)*(x11329*x11329)))+(((-1.0)*(r02*r02)))+(((2.0)*x11329*x11330)))),-1);
if(!x11331.valid){
continue;
}
CheckValue<IkReal> x11332 = IKatan2WithCheck(IkReal((x11329+(((-1.0)*x11330)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11331.value)))+(x11332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11333=IKcos(j4);
IkReal x11334=IKsin(j4);
IkReal x11335=(gconst4*r11);
IkReal x11336=(gconst5*r10);
IkReal x11337=(gconst5*r00);
IkReal x11338=(gconst5*r20);
IkReal x11339=((1.0)*x11333);
IkReal x11340=(gconst4*x11333);
IkReal x11341=((1.0)*x11334);
IkReal x11342=(gconst4*x11334);
evalcond[0]=((((-1.0)*x11337*x11339))+((r01*x11340))+((r02*x11334)));
evalcond[1]=((((-1.0)*r22*x11339))+(((-1.0)*x11338*x11341))+((r21*x11342)));
evalcond[2]=((((-1.0)*r12*x11339))+((x11334*x11335))+(((-1.0)*x11336*x11341)));
evalcond[3]=((1.0)+(((-1.0)*x11337*x11341))+((r01*x11342))+(((-1.0)*r02*x11339)));
evalcond[4]=(((cj2*sj1))+((r12*x11334))+(((-1.0)*x11336*x11339))+((cj1*sj2))+((x11333*x11335)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11338*x11339))+((r22*x11334))+((r21*x11340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11343=((1.0)*gconst5);
CheckValue<IkReal> x11344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11343))+(((-1.0)*gconst4*r20)))),-1);
if(!x11344.valid){
continue;
}
CheckValue<IkReal> x11345 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11343))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11344.value)))+(x11345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11346=IKcos(j4);
IkReal x11347=IKsin(j4);
IkReal x11348=(gconst4*r11);
IkReal x11349=(gconst5*r10);
IkReal x11350=(gconst5*r00);
IkReal x11351=(gconst5*r20);
IkReal x11352=((1.0)*x11346);
IkReal x11353=(gconst4*x11346);
IkReal x11354=((1.0)*x11347);
IkReal x11355=(gconst4*x11347);
evalcond[0]=((((-1.0)*x11350*x11352))+((r01*x11353))+((r02*x11347)));
evalcond[1]=((((-1.0)*x11351*x11354))+(((-1.0)*r22*x11352))+((r21*x11355)));
evalcond[2]=((((-1.0)*r12*x11352))+(((-1.0)*x11349*x11354))+((x11347*x11348)));
evalcond[3]=((1.0)+(((-1.0)*x11350*x11354))+((r01*x11355))+(((-1.0)*r02*x11352)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11347))+(((-1.0)*x11349*x11352))+((x11346*x11348)));
evalcond[5]=((((-1.0)*x11351*x11352))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11353))+((r22*x11347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11356=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11356.valid){
continue;
}
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11356.value)))+(x11357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11358=IKcos(j4);
IkReal x11359=IKsin(j4);
IkReal x11360=(gconst4*r11);
IkReal x11361=(gconst5*r10);
IkReal x11362=(gconst5*r00);
IkReal x11363=(gconst5*r20);
IkReal x11364=((1.0)*x11358);
IkReal x11365=(gconst4*x11358);
IkReal x11366=((1.0)*x11359);
IkReal x11367=(gconst4*x11359);
evalcond[0]=(((r01*x11365))+((r02*x11359))+(((-1.0)*x11362*x11364)));
evalcond[1]=(((r21*x11367))+(((-1.0)*r22*x11364))+(((-1.0)*x11363*x11366)));
evalcond[2]=(((x11359*x11360))+(((-1.0)*r12*x11364))+(((-1.0)*x11361*x11366)));
evalcond[3]=((1.0)+((r01*x11367))+(((-1.0)*x11362*x11366))+(((-1.0)*r02*x11364)));
evalcond[4]=(((cj2*sj1))+((r12*x11359))+((cj1*sj2))+((x11358*x11360))+(((-1.0)*x11361*x11364)));
evalcond[5]=(((r21*x11365))+(((-1.0)*x11363*x11364))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11368=((-1.0)*r21);
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal(x11368),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
IkReal x11369=((1.0)*(x11371.value));
IkReal x11370=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11369)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11369)));
IkReal gconst4=(x11368*x11370);
IkReal gconst5=((1.0)*r20*x11370);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11372=((-1.0)*r21);
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal(x11372),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
IkReal x11373=((1.0)*(x11375.value));
IkReal x11374=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11373)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11373)));
IkReal gconst4=(x11372*x11374);
IkReal gconst5=((1.0)*r20*x11374);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11376=((-1.0)*r21);
CheckValue<IkReal> x11379 = IKatan2WithCheck(IkReal(x11376),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11379.valid){
continue;
}
IkReal x11377=((1.0)*(x11379.value));
IkReal x11378=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11377)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11377)));
IkReal gconst4=(x11376*x11378);
IkReal gconst5=((1.0)*r20*x11378);
IkReal x11380=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11384=IKPowWithIntegerCheck(x11380,-1);
if(!x11384.valid){
continue;
}
IkReal x11381=x11384.value;
IkReal x11382=((1.0)*x11381);
IkReal x11383=((((-1.0)*x11382*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11381))+(((-1.0)*x11382*(r01*r01)*(r21*r21))));
j4eval[0]=x11383;
j4eval[1]=IKsign(x11383);
j4eval[2]=r02;
j4eval[3]=x11380;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11385=(gconst4*r01);
IkReal x11386=(gconst5*r00);
CheckValue<IkReal> x11387 = IKatan2WithCheck(IkReal((x11385+(((-1.0)*x11386)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11387.valid){
continue;
}
CheckValue<IkReal> x11388=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11386*x11386)))+(((2.0)*x11385*x11386))+(((-1.0)*(x11385*x11385))))),-1);
if(!x11388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11387.value)+(((1.5707963267949)*(x11388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11389=IKcos(j4);
IkReal x11390=IKsin(j4);
IkReal x11391=(gconst5*r10);
IkReal x11392=(gconst5*r00);
IkReal x11393=(gconst5*r20);
IkReal x11394=((1.0)*x11389);
IkReal x11395=(gconst4*x11390);
IkReal x11396=(gconst4*x11389);
IkReal x11397=((1.0)*x11390);
evalcond[0]=(((r02*x11390))+(((-1.0)*x11392*x11394))+((r01*x11396)));
evalcond[1]=((((-1.0)*x11393*x11397))+(((-1.0)*r22*x11394))+((r21*x11395)));
evalcond[2]=((((-1.0)*x11391*x11397))+((r11*x11395))+(((-1.0)*r12*x11394)));
evalcond[3]=((1.0)+(((-1.0)*x11392*x11397))+((r01*x11395))+(((-1.0)*r02*x11394)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11393*x11394))+((cj1*sj2))+((r21*x11396))+((r22*x11390)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11391*x11394))+((r12*x11390))+((r11*x11396))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11398=((1.0)*gconst5);
CheckValue<IkReal> x11399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11398))+(((-1.0)*gconst4*r20)))),-1);
if(!x11399.valid){
continue;
}
CheckValue<IkReal> x11400 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11399.value)))+(x11400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11401=IKcos(j4);
IkReal x11402=IKsin(j4);
IkReal x11403=(gconst5*r10);
IkReal x11404=(gconst5*r00);
IkReal x11405=(gconst5*r20);
IkReal x11406=((1.0)*x11401);
IkReal x11407=(gconst4*x11402);
IkReal x11408=(gconst4*x11401);
IkReal x11409=((1.0)*x11402);
evalcond[0]=(((r02*x11402))+(((-1.0)*x11404*x11406))+((r01*x11408)));
evalcond[1]=(((r21*x11407))+(((-1.0)*x11405*x11409))+(((-1.0)*r22*x11406)));
evalcond[2]=((((-1.0)*x11403*x11409))+((r11*x11407))+(((-1.0)*r12*x11406)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11406))+(((-1.0)*x11404*x11409))+((r01*x11407)));
evalcond[4]=(((cj2*sj1))+((r21*x11408))+((r22*x11402))+(((-1.0)*x11405*x11406))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x11402))+(((-1.0)*x11403*x11406))+((r11*x11408))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11410=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11410.valid){
continue;
}
CheckValue<IkReal> x11411 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11410.value)))+(x11411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11412=IKcos(j4);
IkReal x11413=IKsin(j4);
IkReal x11414=(gconst5*r10);
IkReal x11415=(gconst5*r00);
IkReal x11416=(gconst5*r20);
IkReal x11417=((1.0)*x11412);
IkReal x11418=(gconst4*x11413);
IkReal x11419=(gconst4*x11412);
IkReal x11420=((1.0)*x11413);
evalcond[0]=(((r01*x11419))+(((-1.0)*x11415*x11417))+((r02*x11413)));
evalcond[1]=((((-1.0)*x11416*x11420))+((r21*x11418))+(((-1.0)*r22*x11417)));
evalcond[2]=((((-1.0)*r12*x11417))+((r11*x11418))+(((-1.0)*x11414*x11420)));
evalcond[3]=((1.0)+((r01*x11418))+(((-1.0)*x11415*x11420))+(((-1.0)*r02*x11417)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11416*x11417))+((cj1*sj2))+((r22*x11413))+((r21*x11419)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11414*x11417))+((r12*x11413))+((r11*x11419))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11421=((-1.0)*r21);
CheckValue<IkReal> x11424 = IKatan2WithCheck(IkReal(x11421),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11424.valid){
continue;
}
IkReal x11422=((1.0)*(x11424.value));
IkReal x11423=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11422)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11422)));
IkReal gconst4=(x11421*x11423);
IkReal gconst5=((1.0)*r20*x11423);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11425=((-1.0)*r21);
CheckValue<IkReal> x11428 = IKatan2WithCheck(IkReal(x11425),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11428.valid){
continue;
}
IkReal x11426=((1.0)*(x11428.value));
IkReal x11427=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11426)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11426)));
IkReal gconst4=(x11425*x11427);
IkReal gconst5=((1.0)*r20*x11427);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11429=((-1.0)*r21);
CheckValue<IkReal> x11432 = IKatan2WithCheck(IkReal(x11429),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11432.valid){
continue;
}
IkReal x11430=((1.0)*(x11432.value));
IkReal x11431=x10223;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11430)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11430)));
IkReal gconst4=(x11429*x11431);
IkReal gconst5=((1.0)*r20*x11431);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11433=(gconst5*r00);
IkReal x11434=(gconst4*r01);
CheckValue<IkReal> x11435 = IKatan2WithCheck(IkReal((x11433+(((-1.0)*x11434)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11435.valid){
continue;
}
CheckValue<IkReal> x11436=IKPowWithIntegerCheck(IKsign(((x11433*x11433)+(x11434*x11434)+(r02*r02)+(((-2.0)*x11433*x11434)))),-1);
if(!x11436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11435.value)+(((1.5707963267949)*(x11436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11437=IKsin(j4);
IkReal x11438=IKcos(j4);
IkReal x11439=(gconst4*r11);
IkReal x11440=(gconst5*r10);
IkReal x11441=(gconst5*r00);
IkReal x11442=(gconst5*r20);
IkReal x11443=((1.0)*x11438);
IkReal x11444=(gconst4*x11437);
IkReal x11445=((1.0)*x11437);
evalcond[0]=((((-1.0)*r22*x11443))+((r21*x11444))+(((-1.0)*x11442*x11445)));
evalcond[1]=((((-1.0)*x11440*x11445))+(((-1.0)*r12*x11443))+((x11437*x11439)));
evalcond[2]=(((x11438*x11441))+(((-1.0)*gconst4*r01*x11443))+(((-1.0)*r02*x11445)));
evalcond[3]=((1.0)+(((-1.0)*x11441*x11445))+(((-1.0)*r02*x11443))+((r01*x11444)));
evalcond[4]=(((cj2*sj1))+((x11438*x11442))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11443))+(((-1.0)*r22*x11445)));
evalcond[5]=((((-1.0)*r12*x11445))+((x11438*x11440))+(((-1.0)*x11439*x11443))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11446=((1.0)*gconst5);
CheckValue<IkReal> x11447 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11447.valid){
continue;
}
CheckValue<IkReal> x11448=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11446))+(((-1.0)*gconst4*r20)))),-1);
if(!x11448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11447.value)+(((1.5707963267949)*(x11448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11449=IKsin(j4);
IkReal x11450=IKcos(j4);
IkReal x11451=(gconst4*r11);
IkReal x11452=(gconst5*r10);
IkReal x11453=(gconst5*r00);
IkReal x11454=(gconst5*r20);
IkReal x11455=((1.0)*x11450);
IkReal x11456=(gconst4*x11449);
IkReal x11457=((1.0)*x11449);
evalcond[0]=((((-1.0)*x11454*x11457))+((r21*x11456))+(((-1.0)*r22*x11455)));
evalcond[1]=((((-1.0)*x11452*x11457))+(((-1.0)*r12*x11455))+((x11449*x11451)));
evalcond[2]=((((-1.0)*r02*x11457))+((x11450*x11453))+(((-1.0)*gconst4*r01*x11455)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11455))+(((-1.0)*x11453*x11457))+((r01*x11456)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11455))+((cj1*sj2))+((x11450*x11454))+(((-1.0)*r22*x11457)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11450*x11452))+(((-1.0)*r12*x11457))+((cj1*cj2))+(((-1.0)*x11451*x11455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11458=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11458.valid){
continue;
}
CheckValue<IkReal> x11459 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11458.value)))+(x11459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11460=IKsin(j4);
IkReal x11461=IKcos(j4);
IkReal x11462=(gconst4*r11);
IkReal x11463=(gconst5*r10);
IkReal x11464=(gconst5*r00);
IkReal x11465=(gconst5*r20);
IkReal x11466=((1.0)*x11461);
IkReal x11467=(gconst4*x11460);
IkReal x11468=((1.0)*x11460);
evalcond[0]=((((-1.0)*r22*x11466))+((r21*x11467))+(((-1.0)*x11465*x11468)));
evalcond[1]=((((-1.0)*r12*x11466))+(((-1.0)*x11463*x11468))+((x11460*x11462)));
evalcond[2]=((((-1.0)*gconst4*r01*x11466))+(((-1.0)*r02*x11468))+((x11461*x11464)));
evalcond[3]=((1.0)+(((-1.0)*x11464*x11468))+((r01*x11467))+(((-1.0)*r02*x11466)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11466))+(((-1.0)*r22*x11468))+((x11461*x11465)));
evalcond[5]=((((-1.0)*r12*x11468))+(((-1.0)*x11462*x11466))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x11461*x11463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11469=((-1.0)*r21);
IkReal x11470=((-1.0)*r20);
CheckValue<IkReal> x11472 = IKatan2WithCheck(IkReal(x11469),IkReal(x11470),IKFAST_ATAN2_MAGTHRESH);
if(!x11472.valid){
continue;
}
IkReal x11471=((1.0)*(x11472.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11471)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11470);
rxp0_2=(py*r00);
rxp1_0=(py*x11469);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11471)));
IkReal gconst4=x11469;
IkReal gconst5=((1.0)*r20);
IkReal x11473=((1.0)*r01*r21);
IkReal x11474=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11474))+(((-1.0)*x11473)));
j4eval[1]=((((-1.0)*cj3*x11473))+(((-1.0)*cj3*x11474)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11475=((-1.0)*r21);
IkReal x11476=((-1.0)*r20);
CheckValue<IkReal> x11478 = IKatan2WithCheck(IkReal(x11475),IkReal(x11476),IKFAST_ATAN2_MAGTHRESH);
if(!x11478.valid){
continue;
}
IkReal x11477=((1.0)*(x11478.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11477)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11476);
rxp0_2=(py*r00);
rxp1_0=(py*x11475);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11477)));
IkReal gconst4=x11475;
IkReal gconst5=((1.0)*r20);
IkReal x11479=((1.0)*r01*r21);
IkReal x11480=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11479))+(((-1.0)*x11480)));
j4eval[1]=(((sj3*x11479))+((sj3*x11480)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11481=((-1.0)*r21);
IkReal x11482=((-1.0)*r20);
CheckValue<IkReal> x11484 = IKatan2WithCheck(IkReal(x11481),IkReal(x11482),IKFAST_ATAN2_MAGTHRESH);
if(!x11484.valid){
continue;
}
IkReal x11483=((1.0)*(x11484.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11483)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11482);
rxp0_2=(py*r00);
rxp1_0=(py*x11481);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11483)));
IkReal gconst4=x11481;
IkReal gconst5=((1.0)*r20);
IkReal x11485=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11485))+(((-1.0)*r01*r21*x11485)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11486=((1.0)*gconst5);
CheckValue<IkReal> x11487=IKPowWithIntegerCheck(cj3,-1);
if(!x11487.valid){
continue;
}
CheckValue<IkReal> x11488=IKPowWithIntegerCheck(r12,-1);
if(!x11488.valid){
continue;
}
CheckValue<IkReal> x11489=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11486))),-1);
if(!x11489.valid){
continue;
}
if( IKabs(((x11487.value)*(x11488.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11489.value)*(((((-1.0)*r01*sj3*x11486))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11487.value)*(x11488.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11489.value)*(((((-1.0)*r01*sj3*x11486))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11487.value)*(x11488.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11489.value)*(((((-1.0)*r01*sj3*x11486))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11490=IKsin(j4);
IkReal x11491=IKcos(j4);
IkReal x11492=(cj2*sj1);
IkReal x11493=(cj1*sj2);
IkReal x11494=(sj1*sj2);
IkReal x11495=(gconst5*sj3);
IkReal x11496=(gconst5*r00);
IkReal x11497=(cj3*gconst5);
IkReal x11498=(gconst4*sj3);
IkReal x11499=(cj3*gconst4);
IkReal x11500=(cj1*cj2);
IkReal x11501=((1.0)*x11490);
IkReal x11502=(gconst4*x11490);
IkReal x11503=((1.0)*x11491);
IkReal x11504=(x11492+x11493);
IkReal x11505=(x11491*x11495);
IkReal x11506=(x11491*x11499);
evalcond[0]=((-1.0)*r12*x11491);
evalcond[1]=((((-1.0)*gconst5*r20*x11501))+((r21*x11502)));
evalcond[2]=(x11500+((cj3*r12*x11490))+(((-1.0)*x11494)));
evalcond[3]=((((-1.0)*r12*sj3*x11501))+x11504);
evalcond[4]=((1.0)+((r01*x11502))+(((-1.0)*x11496*x11501)));
evalcond[5]=(((r00*x11498))+((r01*x11506))+(((-1.0)*cj3*x11496*x11503))+((r01*x11495)));
evalcond[6]=(((r00*x11499))+((r00*x11505))+(((-1.0)*r01*x11498*x11503))+((r01*x11497)));
evalcond[7]=((((-1.0)*r20*x11497*x11503))+x11504+((r21*x11495))+((r21*x11506))+((r20*x11498)));
evalcond[8]=(x11494+((r21*x11497))+((r20*x11499))+(((-1.0)*r21*x11498*x11503))+(((-1.0)*x11500))+((r20*x11505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11507=((1.0)*gconst4);
IkReal x11508=(gconst5*r00);
CheckValue<IkReal> x11509=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11508))),-1);
if(!x11509.valid){
continue;
}
CheckValue<IkReal> x11510=IKPowWithIntegerCheck((((sj3*x11508))+(((-1.0)*r01*sj3*x11507))),-1);
if(!x11510.valid){
continue;
}
if( IKabs(((-1.0)*(x11509.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11510.value)*(((((-1.0)*cj3*r00*x11507))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11509.value)))+IKsqr(((x11510.value)*(((((-1.0)*cj3*r00*x11507))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11509.value)), ((x11510.value)*(((((-1.0)*cj3*r00*x11507))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11511=IKsin(j4);
IkReal x11512=IKcos(j4);
IkReal x11513=(cj2*sj1);
IkReal x11514=(cj1*sj2);
IkReal x11515=(sj1*sj2);
IkReal x11516=(gconst5*sj3);
IkReal x11517=(gconst5*r00);
IkReal x11518=(cj3*gconst5);
IkReal x11519=(gconst4*sj3);
IkReal x11520=(cj3*gconst4);
IkReal x11521=(cj1*cj2);
IkReal x11522=((1.0)*x11511);
IkReal x11523=(gconst4*x11511);
IkReal x11524=((1.0)*x11512);
IkReal x11525=(x11514+x11513);
IkReal x11526=(x11512*x11516);
IkReal x11527=(x11512*x11520);
evalcond[0]=((-1.0)*r12*x11512);
evalcond[1]=((((-1.0)*gconst5*r20*x11522))+((r21*x11523)));
evalcond[2]=((((-1.0)*x11515))+x11521+((cj3*r12*x11511)));
evalcond[3]=(x11525+(((-1.0)*r12*sj3*x11522)));
evalcond[4]=((1.0)+(((-1.0)*x11517*x11522))+((r01*x11523)));
evalcond[5]=(((r01*x11516))+(((-1.0)*cj3*x11517*x11524))+((r01*x11527))+((r00*x11519)));
evalcond[6]=(((r01*x11518))+(((-1.0)*r01*x11519*x11524))+((r00*x11520))+((r00*x11526)));
evalcond[7]=(x11525+((r20*x11519))+((r21*x11527))+(((-1.0)*r20*x11518*x11524))+((r21*x11516)));
evalcond[8]=(x11515+((r20*x11526))+((r20*x11520))+((r21*x11518))+(((-1.0)*x11521))+(((-1.0)*r21*x11519*x11524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11528=((1.0)*gconst5);
IkReal x11529=(gconst4*r01);
CheckValue<IkReal> x11530=IKPowWithIntegerCheck(((((-1.0)*r00*x11528))+x11529),-1);
if(!x11530.valid){
continue;
}
CheckValue<IkReal> x11531=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11528))+((cj3*x11529))),-1);
if(!x11531.valid){
continue;
}
if( IKabs(((-1.0)*(x11530.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11531.value)*(((((-1.0)*r01*sj3*x11528))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11530.value)))+IKsqr(((x11531.value)*(((((-1.0)*r01*sj3*x11528))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11530.value)), ((x11531.value)*(((((-1.0)*r01*sj3*x11528))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11532=IKsin(j4);
IkReal x11533=IKcos(j4);
IkReal x11534=(cj2*sj1);
IkReal x11535=(cj1*sj2);
IkReal x11536=(sj1*sj2);
IkReal x11537=(gconst5*sj3);
IkReal x11538=(gconst5*r00);
IkReal x11539=(cj3*gconst5);
IkReal x11540=(gconst4*sj3);
IkReal x11541=(cj3*gconst4);
IkReal x11542=(cj1*cj2);
IkReal x11543=((1.0)*x11532);
IkReal x11544=(gconst4*x11532);
IkReal x11545=((1.0)*x11533);
IkReal x11546=(x11535+x11534);
IkReal x11547=(x11533*x11537);
IkReal x11548=(x11533*x11541);
evalcond[0]=((-1.0)*r12*x11533);
evalcond[1]=((((-1.0)*gconst5*r20*x11543))+((r21*x11544)));
evalcond[2]=(((cj3*r12*x11532))+x11542+(((-1.0)*x11536)));
evalcond[3]=(x11546+(((-1.0)*r12*sj3*x11543)));
evalcond[4]=((1.0)+((r01*x11544))+(((-1.0)*x11538*x11543)));
evalcond[5]=(((r00*x11540))+((r01*x11548))+(((-1.0)*cj3*x11538*x11545))+((r01*x11537)));
evalcond[6]=(((r00*x11547))+((r00*x11541))+(((-1.0)*r01*x11540*x11545))+((r01*x11539)));
evalcond[7]=(x11546+((r21*x11537))+(((-1.0)*r20*x11539*x11545))+((r20*x11540))+((r21*x11548)));
evalcond[8]=(x11536+((r21*x11539))+(((-1.0)*x11542))+((r20*x11541))+((r20*x11547))+(((-1.0)*r21*x11540*x11545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11549=gconst4*gconst4;
IkReal x11550=gconst5*gconst5;
IkReal x11551=(r01*r20);
IkReal x11552=(gconst4*sj3);
IkReal x11553=(r01*r21);
IkReal x11554=((1.0)*cj3);
IkReal x11555=(r00*r21);
IkReal x11556=(r00*r20);
IkReal x11557=(cj3*gconst4*gconst5);
IkReal x11558=((1.0)*x11550);
CheckValue<IkReal> x11559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11554))+((x11551*x11557))+(((-1.0)*x11550*x11554*x11556))+((x11555*x11557))+(((-1.0)*x11549*x11553*x11554)))),-1);
if(!x11559.valid){
continue;
}
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal((((r00*r22*x11552))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11549*x11555))+((gconst5*x11552*x11553))+(((-1.0)*gconst5*x11552*x11556))+(((-1.0)*sj3*x11551*x11558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11559.value)))+(x11560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11561=IKsin(j4);
IkReal x11562=IKcos(j4);
IkReal x11563=(cj2*sj1);
IkReal x11564=(cj1*sj2);
IkReal x11565=(gconst5*sj3);
IkReal x11566=(gconst4*r11);
IkReal x11567=(sj1*sj2);
IkReal x11568=(gconst5*r10);
IkReal x11569=(cj1*cj2);
IkReal x11570=(gconst4*r01);
IkReal x11571=(gconst5*r00);
IkReal x11572=(gconst4*sj3);
IkReal x11573=(cj3*gconst5);
IkReal x11574=(cj3*gconst4);
IkReal x11575=(gconst4*r21);
IkReal x11576=((1.0)*x11562);
IkReal x11577=((1.0)*x11561);
IkReal x11578=(cj3*x11561);
IkReal x11579=(cj3*x11562);
IkReal x11580=(x11563+x11564);
evalcond[0]=(((x11561*x11575))+(((-1.0)*gconst5*r20*x11577))+(((-1.0)*r22*x11576)));
evalcond[1]=(((x11561*x11566))+(((-1.0)*x11568*x11577))+(((-1.0)*r12*x11576)));
evalcond[2]=((1.0)+((x11561*x11570))+(((-1.0)*x11571*x11577))+(((-1.0)*r02*x11576)));
evalcond[3]=(((r00*x11572))+((r01*x11565))+((x11570*x11579))+(((-1.0)*cj3*x11571*x11576))+((r02*x11578)));
evalcond[4]=((((-1.0)*sj3*x11570*x11576))+((r01*x11573))+((r00*x11574))+(((-1.0)*r02*sj3*x11577))+((r00*x11562*x11565)));
evalcond[5]=(x11580+((r21*x11562*x11574))+((r20*x11572))+((r21*x11565))+((r22*x11578))+(((-1.0)*r20*x11573*x11576)));
evalcond[6]=(((x11566*x11579))+x11569+((r10*x11572))+((r12*x11578))+(((-1.0)*x11567))+((r11*x11565))+(((-1.0)*cj3*x11568*x11576)));
evalcond[7]=(((r10*x11562*x11565))+x11580+((r10*x11574))+(((-1.0)*sj3*x11566*x11576))+((r11*x11573))+(((-1.0)*r12*sj3*x11577)));
evalcond[8]=((((-1.0)*r21*x11572*x11576))+x11567+((r20*x11562*x11565))+((r20*x11574))+(((-1.0)*r22*sj3*x11577))+(((-1.0)*x11569))+((r21*x11573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11581=((1.0)*gconst5);
CheckValue<IkReal> x11582 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11582.valid){
continue;
}
CheckValue<IkReal> x11583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11581))+(((-1.0)*gconst4*r20)))),-1);
if(!x11583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11582.value)+(((1.5707963267949)*(x11583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11584=IKsin(j4);
IkReal x11585=IKcos(j4);
IkReal x11586=(cj2*sj1);
IkReal x11587=(cj1*sj2);
IkReal x11588=(gconst5*sj3);
IkReal x11589=(gconst4*r11);
IkReal x11590=(sj1*sj2);
IkReal x11591=(gconst5*r10);
IkReal x11592=(cj1*cj2);
IkReal x11593=(gconst4*r01);
IkReal x11594=(gconst5*r00);
IkReal x11595=(gconst4*sj3);
IkReal x11596=(cj3*gconst5);
IkReal x11597=(cj3*gconst4);
IkReal x11598=(gconst4*r21);
IkReal x11599=((1.0)*x11585);
IkReal x11600=((1.0)*x11584);
IkReal x11601=(cj3*x11584);
IkReal x11602=(cj3*x11585);
IkReal x11603=(x11586+x11587);
evalcond[0]=((((-1.0)*gconst5*r20*x11600))+(((-1.0)*r22*x11599))+((x11584*x11598)));
evalcond[1]=(((x11584*x11589))+(((-1.0)*x11591*x11600))+(((-1.0)*r12*x11599)));
evalcond[2]=((1.0)+(((-1.0)*x11594*x11600))+(((-1.0)*r02*x11599))+((x11584*x11593)));
evalcond[3]=(((r01*x11588))+((r00*x11595))+((r02*x11601))+((x11593*x11602))+(((-1.0)*cj3*x11594*x11599)));
evalcond[4]=((((-1.0)*r02*sj3*x11600))+((r01*x11596))+((r00*x11585*x11588))+((r00*x11597))+(((-1.0)*sj3*x11593*x11599)));
evalcond[5]=(x11603+(((-1.0)*r20*x11596*x11599))+((r20*x11595))+((r22*x11601))+((r21*x11585*x11597))+((r21*x11588)));
evalcond[6]=(x11592+((r10*x11595))+((x11589*x11602))+(((-1.0)*cj3*x11591*x11599))+(((-1.0)*x11590))+((r12*x11601))+((r11*x11588)));
evalcond[7]=(x11603+((r10*x11597))+((r11*x11596))+((r10*x11585*x11588))+(((-1.0)*sj3*x11589*x11599))+(((-1.0)*r12*sj3*x11600)));
evalcond[8]=(x11590+((r20*x11597))+(((-1.0)*r21*x11595*x11599))+(((-1.0)*x11592))+(((-1.0)*r22*sj3*x11600))+((r21*x11596))+((r20*x11585*x11588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11604=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11604.valid){
continue;
}
CheckValue<IkReal> x11605 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11604.value)))+(x11605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11606=IKsin(j4);
IkReal x11607=IKcos(j4);
IkReal x11608=(cj2*sj1);
IkReal x11609=(cj1*sj2);
IkReal x11610=(gconst5*sj3);
IkReal x11611=(gconst4*r11);
IkReal x11612=(sj1*sj2);
IkReal x11613=(gconst5*r10);
IkReal x11614=(cj1*cj2);
IkReal x11615=(gconst4*r01);
IkReal x11616=(gconst5*r00);
IkReal x11617=(gconst4*sj3);
IkReal x11618=(cj3*gconst5);
IkReal x11619=(cj3*gconst4);
IkReal x11620=(gconst4*r21);
IkReal x11621=((1.0)*x11607);
IkReal x11622=((1.0)*x11606);
IkReal x11623=(cj3*x11606);
IkReal x11624=(cj3*x11607);
IkReal x11625=(x11609+x11608);
evalcond[0]=((((-1.0)*r22*x11621))+((x11606*x11620))+(((-1.0)*gconst5*r20*x11622)));
evalcond[1]=((((-1.0)*r12*x11621))+((x11606*x11611))+(((-1.0)*x11613*x11622)));
evalcond[2]=((1.0)+(((-1.0)*x11616*x11622))+((x11606*x11615))+(((-1.0)*r02*x11621)));
evalcond[3]=(((x11615*x11624))+(((-1.0)*cj3*x11616*x11621))+((r02*x11623))+((r00*x11617))+((r01*x11610)));
evalcond[4]=((((-1.0)*sj3*x11615*x11621))+(((-1.0)*r02*sj3*x11622))+((r00*x11607*x11610))+((r00*x11619))+((r01*x11618)));
evalcond[5]=(((r21*x11607*x11619))+x11625+((r21*x11610))+((r22*x11623))+(((-1.0)*r20*x11618*x11621))+((r20*x11617)));
evalcond[6]=(x11614+((r12*x11623))+((x11611*x11624))+(((-1.0)*x11612))+((r11*x11610))+(((-1.0)*cj3*x11613*x11621))+((r10*x11617)));
evalcond[7]=(x11625+((r11*x11618))+((r10*x11607*x11610))+((r10*x11619))+(((-1.0)*sj3*x11611*x11621))+(((-1.0)*r12*sj3*x11622)));
evalcond[8]=(x11612+(((-1.0)*x11614))+((r21*x11618))+(((-1.0)*r22*sj3*x11622))+((r20*x11607*x11610))+((r20*x11619))+(((-1.0)*r21*x11617*x11621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11626=((-1.0)*r21);
IkReal x11627=((-1.0)*px);
CheckValue<IkReal> x11629 = IKatan2WithCheck(IkReal(x11626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11629.valid){
continue;
}
IkReal x11628=((1.0)*(x11629.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11628)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11627);
rxp1_1=(px*r21);
rxp1_2=(r11*x11627);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11628)));
IkReal gconst4=x11626;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11630=((-1.0)*r21);
IkReal x11631=((-1.0)*px);
CheckValue<IkReal> x11633 = IKatan2WithCheck(IkReal(x11630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11633.valid){
continue;
}
IkReal x11632=((1.0)*(x11633.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11632)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11631);
rxp1_1=(px*r21);
rxp1_2=(r11*x11631);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11632)));
IkReal gconst4=x11630;
IkReal gconst5=((1.0)*r20);
IkReal x11634=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11634))+((x11634*(r10*r10)))+(((-1.0)*x11634*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11635=((-1.0)*r21);
IkReal x11636=((-1.0)*px);
CheckValue<IkReal> x11638 = IKatan2WithCheck(IkReal(x11635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11638.valid){
continue;
}
IkReal x11637=((1.0)*(x11638.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11637)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11636);
rxp1_1=(px*r21);
rxp1_2=(r11*x11636);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11637)));
IkReal gconst4=x11635;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11639=((-1.0)*r21);
IkReal x11640=((-1.0)*px);
CheckValue<IkReal> x11642 = IKatan2WithCheck(IkReal(x11639),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11642.valid){
continue;
}
IkReal x11641=((1.0)*(x11642.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11641)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11640);
rxp1_1=(px*r21);
rxp1_2=(r11*x11640);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11641)));
IkReal gconst4=x11639;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11643=((-1.0)*r21);
IkReal x11644=((-1.0)*px);
CheckValue<IkReal> x11646 = IKatan2WithCheck(IkReal(x11643),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11646.valid){
continue;
}
IkReal x11645=((1.0)*(x11646.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11645)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11644);
rxp1_1=(px*r21);
rxp1_2=(r11*x11644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11645)));
IkReal gconst4=x11643;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11647=((-1.0)*r21);
IkReal x11648=((-1.0)*px);
CheckValue<IkReal> x11650 = IKatan2WithCheck(IkReal(x11647),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11650.valid){
continue;
}
IkReal x11649=((1.0)*(x11650.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11649)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11648);
rxp1_1=(px*r21);
rxp1_2=(r11*x11648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11649)));
IkReal gconst4=x11647;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11653=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11653.valid){
continue;
}
IkReal x11651=x11653.value;
IkReal x11652=(sj0*x11651);
cj4array[0]=(((cj2*sj1*x11652))+((cj1*sj2*x11652)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11654=IKsin(j4);
IkReal x11655=IKcos(j4);
IkReal x11656=(gconst5*r20);
IkReal x11657=(gconst4*x11654);
IkReal x11658=((1.0)*x11655);
IkReal x11659=((1.0)*x11654);
evalcond[0]=((-1.0)*r02*x11654);
evalcond[1]=((((-1.0)*r02*x11658))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x11656*x11659))+((r21*x11657)));
evalcond[3]=(((r11*x11657))+(((-1.0)*gconst5*r10*x11659)));
evalcond[4]=((((-1.0)*gconst4*r21*x11658))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11655*x11656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11661=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11661.valid){
continue;
}
IkReal x11660=x11661.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11660))+((cj1*cj2*x11660)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11662=IKsin(j4);
IkReal x11663=IKcos(j4);
IkReal x11664=(gconst5*r10);
IkReal x11665=((1.0)*sj0);
IkReal x11666=(gconst4*x11662);
IkReal x11667=((1.0)*x11663);
IkReal x11668=((1.0)*x11662);
evalcond[0]=((-1.0)*r02*x11662);
evalcond[1]=((((-1.0)*r02*x11667))+(((-1.0)*x11665)));
evalcond[2]=(((r21*x11666))+(((-1.0)*gconst5*r20*x11668)));
evalcond[3]=((((-1.0)*x11664*x11668))+((r11*x11666)));
evalcond[4]=((((-1.0)*cj1*sj2*x11665))+(((-1.0)*cj2*sj1*x11665))+(((-1.0)*gconst4*r11*x11667))+((x11663*x11664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11669=IKPowWithIntegerCheck(r02,-1);
if(!x11669.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11669.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11670=IKsin(j4);
IkReal x11671=IKcos(j4);
IkReal x11672=((1.0)*sj0);
IkReal x11673=(gconst5*x11671);
IkReal x11674=(gconst4*x11670);
IkReal x11675=((1.0)*gconst4*x11671);
IkReal x11676=((1.0)*gconst5*x11670);
evalcond[0]=((-1.0)*r02*x11670);
evalcond[1]=((((-1.0)*r20*x11676))+((r21*x11674)));
evalcond[2]=(((r11*x11674))+(((-1.0)*r10*x11676)));
evalcond[3]=((((-1.0)*r21*x11675))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11673)));
evalcond[4]=((((-1.0)*cj1*sj2*x11672))+(((-1.0)*cj2*sj1*x11672))+((r10*x11673))+(((-1.0)*r11*x11675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11677=((-1.0)*r21);
IkReal x11678=((-1.0)*px);
CheckValue<IkReal> x11680 = IKatan2WithCheck(IkReal(x11677),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11680.valid){
continue;
}
IkReal x11679=((1.0)*(x11680.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11679)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11678);
rxp1_1=(px*r21);
rxp1_2=(r11*x11678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11679)));
IkReal gconst4=x11677;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11681=((-1.0)*r21);
IkReal x11682=((-1.0)*px);
CheckValue<IkReal> x11684 = IKatan2WithCheck(IkReal(x11681),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11684.valid){
continue;
}
IkReal x11683=((1.0)*(x11684.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11683)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11682);
rxp1_1=(px*r21);
rxp1_2=(r11*x11682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11683)));
IkReal gconst4=x11681;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11685=((-1.0)*r21);
IkReal x11686=((-1.0)*px);
CheckValue<IkReal> x11688 = IKatan2WithCheck(IkReal(x11685),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11688.valid){
continue;
}
IkReal x11687=((1.0)*(x11688.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11687)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11686);
rxp1_1=(px*r21);
rxp1_2=(r11*x11686);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11687)));
IkReal gconst4=x11685;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11691=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11691.valid){
continue;
}
IkReal x11689=x11691.value;
IkReal x11690=(sj0*x11689);
cj4array[0]=(((cj2*sj1*x11690))+((cj1*sj2*x11690)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11692=IKsin(j4);
IkReal x11693=IKcos(j4);
IkReal x11694=(gconst5*r20);
IkReal x11695=(gconst4*x11692);
IkReal x11696=((1.0)*x11693);
IkReal x11697=((1.0)*x11692);
evalcond[0]=(r02*x11692);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11696)));
evalcond[2]=((((-1.0)*x11694*x11697))+((r21*x11695)));
evalcond[3]=((((-1.0)*gconst5*r10*x11697))+((r11*x11695)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11693))+(((-1.0)*x11694*x11696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11699=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11699.valid){
continue;
}
IkReal x11698=x11699.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11698))+((cj1*cj2*x11698)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11700=IKsin(j4);
IkReal x11701=IKcos(j4);
IkReal x11702=(gconst4*r11);
IkReal x11703=((1.0)*sj0);
IkReal x11704=(gconst5*r10);
IkReal x11705=((1.0)*x11701);
IkReal x11706=((1.0)*x11700);
evalcond[0]=(r02*x11700);
evalcond[1]=((((-1.0)*x11703))+(((-1.0)*r02*x11705)));
evalcond[2]=((((-1.0)*gconst5*r20*x11706))+((gconst4*r21*x11700)));
evalcond[3]=((((-1.0)*x11704*x11706))+((x11700*x11702)));
evalcond[4]=((((-1.0)*cj1*sj2*x11703))+(((-1.0)*x11704*x11705))+((x11701*x11702))+(((-1.0)*cj2*sj1*x11703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11707=IKPowWithIntegerCheck(r02,-1);
if(!x11707.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11707.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11708=IKsin(j4);
IkReal x11709=IKcos(j4);
IkReal x11710=(gconst4*r11);
IkReal x11711=((1.0)*cj1);
IkReal x11712=(gconst4*r21);
IkReal x11713=((1.0)*gconst5*x11709);
IkReal x11714=((1.0)*gconst5*x11708);
evalcond[0]=(r02*x11708);
evalcond[1]=(((x11708*x11712))+(((-1.0)*r20*x11714)));
evalcond[2]=(((x11708*x11710))+(((-1.0)*r10*x11714)));
evalcond[3]=((((-1.0)*cj2*x11711))+(((-1.0)*r20*x11713))+((sj1*sj2))+((x11709*x11712)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x11711))+(((-1.0)*r10*x11713))+((x11709*x11710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11716=IKPowWithIntegerCheck(r02,-1);
if(!x11716.valid){
continue;
}
IkReal x11715=x11716.value;
CheckValue<IkReal> x11717=IKPowWithIntegerCheck(cj3,-1);
if(!x11717.valid){
continue;
}
if( IKabs((x11715*(x11717.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11715)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11715*(x11717.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11715))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11715*(x11717.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11715));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11718=IKsin(j4);
IkReal x11719=IKcos(j4);
IkReal x11720=(gconst5*sj3);
IkReal x11721=(gconst4*r11);
IkReal x11722=(sj1*sj2);
IkReal x11723=((1.0)*gconst5);
IkReal x11724=(cj2*sj1);
IkReal x11725=((1.0)*sj0);
IkReal x11726=((1.0)*cj0);
IkReal x11727=(gconst4*r21);
IkReal x11728=(cj1*sj2);
IkReal x11729=(cj3*gconst4);
IkReal x11730=(gconst4*sj3);
IkReal x11731=(cj3*gconst5);
IkReal x11732=(r20*x11719);
IkReal x11733=((1.0)*cj1*cj2);
IkReal x11734=(r10*x11719);
IkReal x11735=(cj3*x11719);
IkReal x11736=(r02*x11718);
IkReal x11737=((1.0)*sj3*x11719);
evalcond[0]=((((-1.0)*x11725))+(((-1.0)*r02*x11719)));
evalcond[1]=((((-1.0)*r20*x11718*x11723))+((x11718*x11727)));
evalcond[2]=(cj0+(((-1.0)*r10*x11718*x11723))+((x11718*x11721)));
evalcond[3]=(((cj0*x11722))+(((-1.0)*cj1*cj2*x11726))+((cj3*x11736)));
evalcond[4]=((((-1.0)*x11724*x11726))+(((-1.0)*x11726*x11728))+(((-1.0)*sj3*x11736)));
evalcond[5]=(x11724+x11728+((x11727*x11735))+(((-1.0)*cj3*x11723*x11732))+((r20*x11730))+((r21*x11720)));
evalcond[6]=(x11722+(((-1.0)*x11733))+((r20*x11729))+((x11720*x11732))+((r21*x11731))+(((-1.0)*x11727*x11737)));
evalcond[7]=((((-1.0)*cj3*x11723*x11734))+((sj0*x11722))+((r10*x11730))+(((-1.0)*cj1*cj2*x11725))+((x11721*x11735))+((r11*x11720)));
evalcond[8]=(((r11*x11731))+(((-1.0)*x11724*x11725))+(((-1.0)*x11721*x11737))+((x11720*x11734))+((r10*x11729))+(((-1.0)*x11725*x11728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11738=((1.0)*gconst5);
CheckValue<IkReal> x11739=IKPowWithIntegerCheck(((((-1.0)*r10*x11738))+((gconst4*r11))),-1);
if(!x11739.valid){
continue;
}
CheckValue<IkReal> x11740=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11738))+((cj3*gconst4*r21))),-1);
if(!x11740.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11740.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11738)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11739.value)))+IKsqr(((x11740.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11738))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11739.value)), ((x11740.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11738))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11741=IKsin(j4);
IkReal x11742=IKcos(j4);
IkReal x11743=(gconst5*sj3);
IkReal x11744=(gconst4*r11);
IkReal x11745=(sj1*sj2);
IkReal x11746=((1.0)*gconst5);
IkReal x11747=(cj2*sj1);
IkReal x11748=((1.0)*sj0);
IkReal x11749=((1.0)*cj0);
IkReal x11750=(gconst4*r21);
IkReal x11751=(cj1*sj2);
IkReal x11752=(cj3*gconst4);
IkReal x11753=(gconst4*sj3);
IkReal x11754=(cj3*gconst5);
IkReal x11755=(r20*x11742);
IkReal x11756=((1.0)*cj1*cj2);
IkReal x11757=(r10*x11742);
IkReal x11758=(cj3*x11742);
IkReal x11759=(r02*x11741);
IkReal x11760=((1.0)*sj3*x11742);
evalcond[0]=((((-1.0)*x11748))+(((-1.0)*r02*x11742)));
evalcond[1]=((((-1.0)*r20*x11741*x11746))+((x11741*x11750)));
evalcond[2]=(cj0+(((-1.0)*r10*x11741*x11746))+((x11741*x11744)));
evalcond[3]=(((cj0*x11745))+(((-1.0)*cj1*cj2*x11749))+((cj3*x11759)));
evalcond[4]=((((-1.0)*x11749*x11751))+(((-1.0)*sj3*x11759))+(((-1.0)*x11747*x11749)));
evalcond[5]=(x11751+x11747+(((-1.0)*cj3*x11746*x11755))+((x11750*x11758))+((r21*x11743))+((r20*x11753)));
evalcond[6]=(x11745+((x11743*x11755))+(((-1.0)*x11756))+(((-1.0)*x11750*x11760))+((r21*x11754))+((r20*x11752)));
evalcond[7]=(((sj0*x11745))+((r10*x11753))+((x11744*x11758))+(((-1.0)*cj3*x11746*x11757))+(((-1.0)*cj1*cj2*x11748))+((r11*x11743)));
evalcond[8]=(((x11743*x11757))+((r11*x11754))+((r10*x11752))+(((-1.0)*x11748*x11751))+(((-1.0)*x11747*x11748))+(((-1.0)*x11744*x11760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11761=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11761.valid){
continue;
}
CheckValue<IkReal> x11762=IKPowWithIntegerCheck(r02,-1);
if(!x11762.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11761.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11762.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11761.value)))+IKsqr(((-1.0)*sj0*(x11762.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11761.value)), ((-1.0)*sj0*(x11762.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11763=IKsin(j4);
IkReal x11764=IKcos(j4);
IkReal x11765=(gconst5*sj3);
IkReal x11766=(gconst4*r11);
IkReal x11767=(sj1*sj2);
IkReal x11768=((1.0)*gconst5);
IkReal x11769=(cj2*sj1);
IkReal x11770=((1.0)*sj0);
IkReal x11771=((1.0)*cj0);
IkReal x11772=(gconst4*r21);
IkReal x11773=(cj1*sj2);
IkReal x11774=(cj3*gconst4);
IkReal x11775=(gconst4*sj3);
IkReal x11776=(cj3*gconst5);
IkReal x11777=(r20*x11764);
IkReal x11778=((1.0)*cj1*cj2);
IkReal x11779=(r10*x11764);
IkReal x11780=(cj3*x11764);
IkReal x11781=(r02*x11763);
IkReal x11782=((1.0)*sj3*x11764);
evalcond[0]=((((-1.0)*r02*x11764))+(((-1.0)*x11770)));
evalcond[1]=(((x11763*x11772))+(((-1.0)*r20*x11763*x11768)));
evalcond[2]=(((x11763*x11766))+cj0+(((-1.0)*r10*x11763*x11768)));
evalcond[3]=(((cj0*x11767))+((cj3*x11781))+(((-1.0)*cj1*cj2*x11771)));
evalcond[4]=((((-1.0)*x11771*x11773))+(((-1.0)*sj3*x11781))+(((-1.0)*x11769*x11771)));
evalcond[5]=(x11773+x11769+((r20*x11775))+((x11772*x11780))+(((-1.0)*cj3*x11768*x11777))+((r21*x11765)));
evalcond[6]=(x11767+((r20*x11774))+((x11765*x11777))+(((-1.0)*x11772*x11782))+((r21*x11776))+(((-1.0)*x11778)));
evalcond[7]=(((r11*x11765))+((r10*x11775))+((x11766*x11780))+((sj0*x11767))+(((-1.0)*cj1*cj2*x11770))+(((-1.0)*cj3*x11768*x11779)));
evalcond[8]=((((-1.0)*x11766*x11782))+((r10*x11774))+((x11765*x11779))+((r11*x11776))+(((-1.0)*x11770*x11773))+(((-1.0)*x11769*x11770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11783=((1.0)*sj0);
IkReal x11784=((1.0)*gconst4);
CheckValue<IkReal> x11785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11784))+(((-1.0)*gconst5*r21)))),-1);
if(!x11785.valid){
continue;
}
CheckValue<IkReal> x11786 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11783))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x11784))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11783))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11785.value)))+(x11786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11787=IKsin(j4);
IkReal x11788=IKcos(j4);
IkReal x11789=(gconst5*sj3);
IkReal x11790=(cj3*gconst5);
IkReal x11791=(gconst4*r11);
IkReal x11792=(sj1*sj2);
IkReal x11793=(cj2*sj1);
IkReal x11794=((1.0)*sj0);
IkReal x11795=(gconst4*r01);
IkReal x11796=(gconst4*r21);
IkReal x11797=((1.0)*cj0);
IkReal x11798=(cj1*sj2);
IkReal x11799=(gconst4*sj3);
IkReal x11800=(cj3*gconst4);
IkReal x11801=((1.0)*x11788);
IkReal x11802=((1.0)*cj1*cj2);
IkReal x11803=(cj3*x11787);
IkReal x11804=(cj3*x11788);
IkReal x11805=((1.0)*gconst5*x11787);
IkReal x11806=((1.0)*sj3*x11787);
evalcond[0]=((((-1.0)*r20*x11805))+(((-1.0)*r22*x11801))+((x11787*x11796)));
evalcond[1]=(cj0+(((-1.0)*r10*x11805))+(((-1.0)*r12*x11801))+((x11787*x11791)));
evalcond[2]=((((-1.0)*r02*x11801))+((x11787*x11795))+(((-1.0)*r00*x11805))+(((-1.0)*x11794)));
evalcond[3]=(((r21*x11789))+x11798+x11793+((x11796*x11804))+((r20*x11799))+((r22*x11803))+(((-1.0)*r20*x11790*x11801)));
evalcond[4]=(x11792+((r20*x11788*x11789))+(((-1.0)*sj3*x11796*x11801))+(((-1.0)*r22*x11806))+(((-1.0)*x11802))+((r20*x11800))+((r21*x11790)));
evalcond[5]=((((-1.0)*cj1*cj2*x11797))+((r02*x11803))+((x11795*x11804))+(((-1.0)*r00*x11790*x11801))+((r00*x11799))+((cj0*x11792))+((r01*x11789)));
evalcond[6]=(((r11*x11789))+(((-1.0)*cj1*cj2*x11794))+(((-1.0)*r10*x11790*x11801))+((r10*x11799))+((x11791*x11804))+((sj0*x11792))+((r12*x11803)));
evalcond[7]=(((r00*x11800))+(((-1.0)*x11793*x11797))+(((-1.0)*x11797*x11798))+((r00*x11788*x11789))+(((-1.0)*sj3*x11795*x11801))+((r01*x11790))+(((-1.0)*r02*x11806)));
evalcond[8]=((((-1.0)*x11793*x11794))+((r11*x11790))+(((-1.0)*x11794*x11798))+(((-1.0)*r12*x11806))+((r10*x11788*x11789))+((r10*x11800))+(((-1.0)*sj3*x11791*x11801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11807=((1.0)*gconst5);
CheckValue<IkReal> x11808 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst4*r21*sj0))+(((-1.0)*r20*sj0*x11807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11808.valid){
continue;
}
CheckValue<IkReal> x11809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11807))+(((-1.0)*gconst4*r10)))),-1);
if(!x11809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11808.value)+(((1.5707963267949)*(x11809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11810=IKsin(j4);
IkReal x11811=IKcos(j4);
IkReal x11812=(gconst5*sj3);
IkReal x11813=(cj3*gconst5);
IkReal x11814=(gconst4*r11);
IkReal x11815=(sj1*sj2);
IkReal x11816=(cj2*sj1);
IkReal x11817=((1.0)*sj0);
IkReal x11818=(gconst4*r01);
IkReal x11819=(gconst4*r21);
IkReal x11820=((1.0)*cj0);
IkReal x11821=(cj1*sj2);
IkReal x11822=(gconst4*sj3);
IkReal x11823=(cj3*gconst4);
IkReal x11824=((1.0)*x11811);
IkReal x11825=((1.0)*cj1*cj2);
IkReal x11826=(cj3*x11810);
IkReal x11827=(cj3*x11811);
IkReal x11828=((1.0)*gconst5*x11810);
IkReal x11829=((1.0)*sj3*x11810);
evalcond[0]=((((-1.0)*r20*x11828))+(((-1.0)*r22*x11824))+((x11810*x11819)));
evalcond[1]=(cj0+(((-1.0)*r10*x11828))+(((-1.0)*r12*x11824))+((x11810*x11814)));
evalcond[2]=((((-1.0)*r02*x11824))+(((-1.0)*x11817))+(((-1.0)*r00*x11828))+((x11810*x11818)));
evalcond[3]=(((r21*x11812))+((x11819*x11827))+((r22*x11826))+(((-1.0)*r20*x11813*x11824))+((r20*x11822))+x11816+x11821);
evalcond[4]=(((r21*x11813))+(((-1.0)*x11825))+(((-1.0)*r22*x11829))+((r20*x11823))+x11815+(((-1.0)*sj3*x11819*x11824))+((r20*x11811*x11812)));
evalcond[5]=(((r01*x11812))+(((-1.0)*r00*x11813*x11824))+((x11818*x11827))+((r02*x11826))+((cj0*x11815))+(((-1.0)*cj1*cj2*x11820))+((r00*x11822)));
evalcond[6]=(((sj0*x11815))+((x11814*x11827))+((r10*x11822))+((r12*x11826))+(((-1.0)*r10*x11813*x11824))+((r11*x11812))+(((-1.0)*cj1*cj2*x11817)));
evalcond[7]=((((-1.0)*sj3*x11818*x11824))+(((-1.0)*x11820*x11821))+((r01*x11813))+(((-1.0)*r02*x11829))+((r00*x11823))+((r00*x11811*x11812))+(((-1.0)*x11816*x11820)));
evalcond[8]=((((-1.0)*x11816*x11817))+((r10*x11823))+(((-1.0)*r12*x11829))+((r10*x11811*x11812))+(((-1.0)*sj3*x11814*x11824))+((r11*x11813))+(((-1.0)*x11817*x11821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11830=((1.0)*gconst5);
CheckValue<IkReal> x11831 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11830))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11831.valid){
continue;
}
CheckValue<IkReal> x11832=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11830)))),-1);
if(!x11832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11831.value)+(((1.5707963267949)*(x11832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11833=IKsin(j4);
IkReal x11834=IKcos(j4);
IkReal x11835=(gconst5*sj3);
IkReal x11836=(cj3*gconst5);
IkReal x11837=(gconst4*r11);
IkReal x11838=(sj1*sj2);
IkReal x11839=(cj2*sj1);
IkReal x11840=((1.0)*sj0);
IkReal x11841=(gconst4*r01);
IkReal x11842=(gconst4*r21);
IkReal x11843=((1.0)*cj0);
IkReal x11844=(cj1*sj2);
IkReal x11845=(gconst4*sj3);
IkReal x11846=(cj3*gconst4);
IkReal x11847=((1.0)*x11834);
IkReal x11848=((1.0)*cj1*cj2);
IkReal x11849=(cj3*x11833);
IkReal x11850=(cj3*x11834);
IkReal x11851=((1.0)*gconst5*x11833);
IkReal x11852=((1.0)*sj3*x11833);
evalcond[0]=((((-1.0)*r20*x11851))+((x11833*x11842))+(((-1.0)*r22*x11847)));
evalcond[1]=(cj0+(((-1.0)*r12*x11847))+((x11833*x11837))+(((-1.0)*r10*x11851)));
evalcond[2]=((((-1.0)*r02*x11847))+(((-1.0)*x11840))+((x11833*x11841))+(((-1.0)*r00*x11851)));
evalcond[3]=((((-1.0)*r20*x11836*x11847))+((r21*x11835))+((r20*x11845))+((x11842*x11850))+((r22*x11849))+x11844+x11839);
evalcond[4]=((((-1.0)*x11848))+((r21*x11836))+((r20*x11846))+(((-1.0)*sj3*x11842*x11847))+((r20*x11834*x11835))+(((-1.0)*r22*x11852))+x11838);
evalcond[5]=(((x11841*x11850))+(((-1.0)*r00*x11836*x11847))+(((-1.0)*cj1*cj2*x11843))+((r00*x11845))+((cj0*x11838))+((r02*x11849))+((r01*x11835)));
evalcond[6]=((((-1.0)*r10*x11836*x11847))+(((-1.0)*cj1*cj2*x11840))+((r11*x11835))+((x11837*x11850))+((r12*x11849))+((r10*x11845))+((sj0*x11838)));
evalcond[7]=((((-1.0)*r02*x11852))+(((-1.0)*x11843*x11844))+((r00*x11834*x11835))+(((-1.0)*x11839*x11843))+((r00*x11846))+((r01*x11836))+(((-1.0)*sj3*x11841*x11847)));
evalcond[8]=((((-1.0)*x11840*x11844))+(((-1.0)*x11839*x11840))+((r11*x11836))+(((-1.0)*r12*x11852))+((r10*x11846))+(((-1.0)*sj3*x11837*x11847))+((r10*x11834*x11835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11853=((-1.0)*r10);
IkReal x11855 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11855)==0){
continue;
}
IkReal x11854=pow(x11855,-0.5);
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11853),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11856.value));
IkReal gconst7=(r11*x11854);
IkReal gconst8=(x11853*x11854);
CheckValue<IkReal> x11857 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11857.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11857.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11858=((-1.0)*r10);
IkReal x11859=x11854;
CheckValue<IkReal> x11861 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11858),IKFAST_ATAN2_MAGTHRESH);
if(!x11861.valid){
continue;
}
IkReal x11860=((-1.0)*(x11861.value));
sj5=gconst7;
cj5=gconst8;
j5=x11860;
IkReal gconst6=x11860;
IkReal gconst7=(r11*x11859);
IkReal gconst8=(x11858*x11859);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11862=((1.0)*sj0);
IkReal x11863=((1.0)*gconst7);
CheckValue<IkReal> x11864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11863))+(((-1.0)*gconst8*r21)))),-1);
if(!x11864.valid){
continue;
}
CheckValue<IkReal> x11865 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11862)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11862))+(((-1.0)*cj0*r01*x11863))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11864.value)))+(x11865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11866=IKsin(j4);
IkReal x11867=IKcos(j4);
IkReal x11868=(gconst7*sj3);
IkReal x11869=(cj3*gconst8);
IkReal x11870=(cj3*gconst7);
IkReal x11871=(sj1*sj2);
IkReal x11872=(cj2*sj1);
IkReal x11873=((1.0)*sj0);
IkReal x11874=((1.0)*cj0);
IkReal x11875=(gconst8*sj3);
IkReal x11876=(cj1*sj2);
IkReal x11877=((1.0)*x11867);
IkReal x11878=((1.0)*x11866);
IkReal x11879=((1.0)*cj1*cj2);
IkReal x11880=(cj3*x11866);
IkReal x11881=(gconst7*x11866);
IkReal x11882=(x11867*x11875);
evalcond[0]=((((-1.0)*r22*x11877))+(((-1.0)*gconst8*r20*x11878))+((r21*x11881)));
evalcond[1]=(cj0+(((-1.0)*gconst8*r10*x11878))+(((-1.0)*r12*x11877))+((r11*x11881)));
evalcond[2]=(((r01*x11881))+(((-1.0)*x11873))+(((-1.0)*r02*x11877))+(((-1.0)*gconst8*r00*x11878)));
evalcond[3]=(((r21*x11867*x11870))+((r20*x11868))+((r22*x11880))+(((-1.0)*r20*x11869*x11877))+((r21*x11875))+x11872+x11876);
evalcond[4]=((((-1.0)*r22*sj3*x11878))+(((-1.0)*x11879))+((r20*x11870))+(((-1.0)*r21*x11868*x11877))+x11871+((r21*x11869))+((r20*x11882)));
evalcond[5]=(((r01*x11867*x11870))+(((-1.0)*cj1*cj2*x11874))+((r00*x11868))+((r01*x11875))+((r02*x11880))+((cj0*x11871))+(((-1.0)*r00*x11869*x11877)));
evalcond[6]=((((-1.0)*cj1*cj2*x11873))+(((-1.0)*r10*x11869*x11877))+((sj0*x11871))+((r10*x11868))+((r11*x11867*x11870))+((r11*x11875))+((r12*x11880)));
evalcond[7]=((((-1.0)*x11872*x11874))+((r00*x11882))+(((-1.0)*r01*x11868*x11877))+((r00*x11870))+((r01*x11869))+(((-1.0)*r02*sj3*x11878))+(((-1.0)*x11874*x11876)));
evalcond[8]=((((-1.0)*x11872*x11873))+(((-1.0)*r11*x11868*x11877))+((r10*x11882))+((r11*x11869))+(((-1.0)*x11873*x11876))+((r10*x11870))+(((-1.0)*r12*sj3*x11878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11883=((1.0)*gconst8);
CheckValue<IkReal> x11884=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11883)))),-1);
if(!x11884.valid){
continue;
}
CheckValue<IkReal> x11885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11884.value)))+(x11885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11886=IKsin(j4);
IkReal x11887=IKcos(j4);
IkReal x11888=(gconst7*sj3);
IkReal x11889=(cj3*gconst8);
IkReal x11890=(cj3*gconst7);
IkReal x11891=(sj1*sj2);
IkReal x11892=(cj2*sj1);
IkReal x11893=((1.0)*sj0);
IkReal x11894=((1.0)*cj0);
IkReal x11895=(gconst8*sj3);
IkReal x11896=(cj1*sj2);
IkReal x11897=((1.0)*x11887);
IkReal x11898=((1.0)*x11886);
IkReal x11899=((1.0)*cj1*cj2);
IkReal x11900=(cj3*x11886);
IkReal x11901=(gconst7*x11886);
IkReal x11902=(x11887*x11895);
evalcond[0]=((((-1.0)*r22*x11897))+((r21*x11901))+(((-1.0)*gconst8*r20*x11898)));
evalcond[1]=(cj0+(((-1.0)*gconst8*r10*x11898))+(((-1.0)*r12*x11897))+((r11*x11901)));
evalcond[2]=(((r01*x11901))+(((-1.0)*r02*x11897))+(((-1.0)*x11893))+(((-1.0)*gconst8*r00*x11898)));
evalcond[3]=((((-1.0)*r20*x11889*x11897))+((r22*x11900))+((r21*x11895))+((r21*x11887*x11890))+x11896+x11892+((r20*x11888)));
evalcond[4]=((((-1.0)*r22*sj3*x11898))+((r21*x11889))+(((-1.0)*r21*x11888*x11897))+(((-1.0)*x11899))+((r20*x11902))+((r20*x11890))+x11891);
evalcond[5]=((((-1.0)*cj1*cj2*x11894))+((r00*x11888))+((r01*x11895))+((r01*x11887*x11890))+(((-1.0)*r00*x11889*x11897))+((r02*x11900))+((cj0*x11891)));
evalcond[6]=((((-1.0)*cj1*cj2*x11893))+((sj0*x11891))+((r12*x11900))+((r10*x11888))+(((-1.0)*r10*x11889*x11897))+((r11*x11895))+((r11*x11887*x11890)));
evalcond[7]=(((r01*x11889))+(((-1.0)*x11894*x11896))+((r00*x11890))+((r00*x11902))+(((-1.0)*x11892*x11894))+(((-1.0)*r01*x11888*x11897))+(((-1.0)*r02*sj3*x11898)));
evalcond[8]=((((-1.0)*r11*x11888*x11897))+((r10*x11890))+((r10*x11902))+(((-1.0)*x11892*x11893))+(((-1.0)*x11893*x11896))+(((-1.0)*r12*sj3*x11898))+((r11*x11889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11903=((-1.0)*r11);
IkReal x11905 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11905)==0){
continue;
}
IkReal x11904=pow(x11905,-0.5);
CheckValue<IkReal> x11906 = IKatan2WithCheck(IkReal(x11903),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11906.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11906.value))));
IkReal gconst10=(x11903*x11904);
IkReal gconst11=((1.0)*r10*x11904);
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11907.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11908=((-1.0)*r11);
CheckValue<IkReal> x11911 = IKatan2WithCheck(IkReal(x11908),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11911.valid){
continue;
}
IkReal x11909=((1.0)*(x11911.value));
IkReal x11910=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11909)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11909)));
IkReal gconst10=(x11908*x11910);
IkReal gconst11=((1.0)*r10*x11910);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11912=((-1.0)*r11);
CheckValue<IkReal> x11915 = IKatan2WithCheck(IkReal(x11912),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11915.valid){
continue;
}
IkReal x11913=((1.0)*(x11915.value));
IkReal x11914=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11913)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11913)));
IkReal gconst10=(x11912*x11914);
IkReal gconst11=((1.0)*r10*x11914);
IkReal x11916=r12*r12;
IkReal x11917=((1.0)*sj0);
IkReal x11918=(cj0*r02);
IkReal x11919=x11904;
j4eval[0]=((IKabs(((((-1.0)*x11917*x11919))+((sj0*x11916*x11919))+((r12*x11918*x11919)))))+(IKabs(((((-1.0)*x11918))+(((-1.0)*r12*x11917))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11920=((-1.0)*r11);
CheckValue<IkReal> x11923 = IKatan2WithCheck(IkReal(x11920),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11923.valid){
continue;
}
IkReal x11921=((1.0)*(x11923.value));
IkReal x11922=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11921)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11921)));
IkReal gconst10=(x11920*x11922);
IkReal gconst11=((1.0)*r10*x11922);
IkReal x11924=((1.0)*cj3);
CheckValue<IkReal> x11929=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11929.valid){
continue;
}
IkReal x11925=x11929.value;
IkReal x11926=(cj3*x11925);
IkReal x11927=(x11924*x11925);
IkReal x11928=((((-1.0)*x11924*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x11926))+(((-1.0)*x11927*(r11*r11)*(r21*r21)))+(((-1.0)*x11927*(r10*r10)*(r20*r20))));
j4eval[0]=x11928;
j4eval[1]=IKsign(x11928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11930=((-1.0)*r11);
CheckValue<IkReal> x11933 = IKatan2WithCheck(IkReal(x11930),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11933.valid){
continue;
}
IkReal x11931=((1.0)*(x11933.value));
IkReal x11932=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11931)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11931)));
IkReal gconst10=(x11930*x11932);
IkReal gconst11=((1.0)*r10*x11932);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11934=((-1.0)*r11);
CheckValue<IkReal> x11937 = IKatan2WithCheck(IkReal(x11934),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11937.valid){
continue;
}
IkReal x11935=((1.0)*(x11937.value));
IkReal x11936=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11935)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11935)));
IkReal gconst10=(x11934*x11936);
IkReal gconst11=((1.0)*r10*x11936);
IkReal x11938=r12*r12;
IkReal x11939=((1.0)*sj0);
IkReal x11940=(cj0*r02);
IkReal x11941=x11904;
j4eval[0]=((IKabs((((r12*x11940*x11941))+(((-1.0)*x11939*x11941))+((sj0*x11938*x11941)))))+(IKabs(((((-1.0)*x11940))+(((-1.0)*r12*x11939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11942=((-1.0)*r11);
CheckValue<IkReal> x11945 = IKatan2WithCheck(IkReal(x11942),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11945.valid){
continue;
}
IkReal x11943=((1.0)*(x11945.value));
IkReal x11944=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11943)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11943)));
IkReal gconst10=(x11942*x11944);
IkReal gconst11=((1.0)*r10*x11944);
IkReal x11946=r12*r12;
IkReal x11947=(cj1*cj2*r22);
IkReal x11948=(r22*sj1*sj2);
CheckValue<IkReal> x11952=IKPowWithIntegerCheck(((-1.0)+x11946),-1);
if(!x11952.valid){
continue;
}
IkReal x11949=x11952.value;
if((((1.0)+(((-1.0)*x11946)))) < -0.00001)
continue;
IkReal x11950=IKsqrt(((1.0)+(((-1.0)*x11946))));
IkReal x11951=(r12*x11949*x11950);
j4eval[0]=((IKabs((((x11947*x11951))+(((-1.0)*x11948*x11951)))))+(IKabs((x11948+(((-1.0)*x11947))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11953=((-1.0)*r11);
CheckValue<IkReal> x11956 = IKatan2WithCheck(IkReal(x11953),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11956.valid){
continue;
}
IkReal x11954=((1.0)*(x11956.value));
IkReal x11955=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11954)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11954)));
IkReal gconst10=(x11953*x11955);
IkReal gconst11=((1.0)*r10*x11955);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11957=((-1.0)*r11);
CheckValue<IkReal> x11960 = IKatan2WithCheck(IkReal(x11957),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11960.valid){
continue;
}
IkReal x11958=((1.0)*(x11960.value));
IkReal x11959=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11958)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11958)));
IkReal gconst10=(x11957*x11959);
IkReal gconst11=((1.0)*r10*x11959);
IkReal x11961=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11965=IKPowWithIntegerCheck(x11961,-1);
if(!x11965.valid){
continue;
}
IkReal x11962=x11965.value;
IkReal x11963=((1.0)*x11962);
IkReal x11964=((((-2.0)*r00*r01*r10*r11*x11962))+(((-1.0)*(r02*r02)))+(((-1.0)*x11963*(r00*r00)*(r10*r10)))+(((-1.0)*x11963*(r01*r01)*(r11*r11))));
j4eval[0]=x11964;
j4eval[1]=IKsign(x11964);
j4eval[2]=r02;
j4eval[3]=x11961;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11966=((-1.0)*r11);
CheckValue<IkReal> x11969 = IKatan2WithCheck(IkReal(x11966),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11969.valid){
continue;
}
IkReal x11967=((1.0)*(x11969.value));
IkReal x11968=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11967)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11967)));
IkReal gconst10=(x11966*x11968);
IkReal gconst11=((1.0)*r10*x11968);
IkReal x11970=r12*r12;
IkReal x11971=(cj1*cj2*r22);
IkReal x11972=(r22*sj1*sj2);
CheckValue<IkReal> x11976=IKPowWithIntegerCheck(((-1.0)+x11970),-1);
if(!x11976.valid){
continue;
}
IkReal x11973=x11976.value;
if((((1.0)+(((-1.0)*x11970)))) < -0.00001)
continue;
IkReal x11974=IKsqrt(((1.0)+(((-1.0)*x11970))));
IkReal x11975=(r12*x11973*x11974);
j4eval[0]=((IKabs((x11972+(((-1.0)*x11971)))))+(IKabs((((x11971*x11975))+(((-1.0)*x11972*x11975))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11977=(gconst10*r21);
IkReal x11978=(gconst11*r20);
IkReal x11979=(sj1*sj2);
IkReal x11980=(cj1*cj2);
CheckValue<IkReal> x11981 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11980))+((r22*x11979)))),IkReal((((x11977*x11979))+(((-1.0)*x11977*x11980))+((x11978*x11980))+(((-1.0)*x11978*x11979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11981.valid){
continue;
}
CheckValue<IkReal> x11982=IKPowWithIntegerCheck(IKsign(((x11977*x11977)+(x11978*x11978)+(((-2.0)*x11977*x11978))+(r22*r22))),-1);
if(!x11982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11981.value)+(((1.5707963267949)*(x11982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11983=IKsin(j4);
IkReal x11984=IKcos(j4);
IkReal x11985=((1.0)*cj2);
IkReal x11986=((1.0)*x11984);
IkReal x11987=(gconst10*x11983);
IkReal x11988=((1.0)*x11983);
IkReal x11989=(gconst11*x11984);
IkReal x11990=(gconst11*x11988);
evalcond[0]=(((r21*x11987))+(((-1.0)*r20*x11990))+(((-1.0)*r22*x11986)));
evalcond[1]=((((-1.0)*r12*x11986))+((r11*x11987))+(((-1.0)*r10*x11990)));
evalcond[2]=((((-1.0)*gconst10*r01*x11986))+(((-1.0)*r02*x11988))+((r00*x11989)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11986))+((r01*x11987))+(((-1.0)*r00*x11990)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst10*r21*x11986))+((r20*x11989))+(((-1.0)*r22*x11988))+(((-1.0)*cj1*x11985)));
evalcond[5]=((((-1.0)*r12*x11988))+((r10*x11989))+(((-1.0)*gconst10*r11*x11986))+(((-1.0)*sj1*x11985))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11991=(gconst11*r00);
IkReal x11992=(gconst10*r01);
CheckValue<IkReal> x11993 = IKatan2WithCheck(IkReal((x11991+(((-1.0)*x11992)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11993.valid){
continue;
}
CheckValue<IkReal> x11994=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11992*x11992)))+(((-1.0)*(x11991*x11991)))+(((2.0)*x11991*x11992)))),-1);
if(!x11994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11993.value)+(((1.5707963267949)*(x11994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11995=IKsin(j4);
IkReal x11996=IKcos(j4);
IkReal x11997=((1.0)*cj2);
IkReal x11998=((1.0)*x11996);
IkReal x11999=(gconst10*x11995);
IkReal x12000=((1.0)*x11995);
IkReal x12001=(gconst11*x11996);
IkReal x12002=(gconst11*x12000);
evalcond[0]=(((r21*x11999))+(((-1.0)*r22*x11998))+(((-1.0)*r20*x12002)));
evalcond[1]=((((-1.0)*r10*x12002))+(((-1.0)*r12*x11998))+((r11*x11999)));
evalcond[2]=(((r00*x12001))+(((-1.0)*r02*x12000))+(((-1.0)*gconst10*r01*x11998)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11998))+(((-1.0)*r00*x12002))+((r01*x11999)));
evalcond[4]=(((r20*x12001))+(((-1.0)*gconst10*r21*x11998))+((sj1*sj2))+(((-1.0)*cj1*x11997))+(((-1.0)*r22*x12000)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11997))+(((-1.0)*r12*x12000))+((r10*x12001))+(((-1.0)*gconst10*r11*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12003 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12003.valid){
continue;
}
CheckValue<IkReal> x12004=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12003.value)+(((1.5707963267949)*(x12004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12005=IKsin(j4);
IkReal x12006=IKcos(j4);
IkReal x12007=((1.0)*cj2);
IkReal x12008=((1.0)*x12006);
IkReal x12009=(gconst10*x12005);
IkReal x12010=((1.0)*x12005);
IkReal x12011=(gconst11*x12006);
IkReal x12012=(gconst11*x12010);
evalcond[0]=((((-1.0)*r20*x12012))+((r21*x12009))+(((-1.0)*r22*x12008)));
evalcond[1]=((((-1.0)*r10*x12012))+(((-1.0)*r12*x12008))+((r11*x12009)));
evalcond[2]=((((-1.0)*r02*x12010))+(((-1.0)*gconst10*r01*x12008))+((r00*x12011)));
evalcond[3]=((-1.0)+((r01*x12009))+(((-1.0)*r02*x12008))+(((-1.0)*r00*x12012)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst10*r21*x12008))+(((-1.0)*r22*x12010))+((r20*x12011))+(((-1.0)*cj1*x12007)));
evalcond[5]=(((r10*x12011))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12010))+(((-1.0)*gconst10*r11*x12008))+(((-1.0)*sj1*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12013=((-1.0)*r11);
CheckValue<IkReal> x12016 = IKatan2WithCheck(IkReal(x12013),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12016.valid){
continue;
}
IkReal x12014=((1.0)*(x12016.value));
IkReal x12015=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12014)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12014)));
IkReal gconst10=(x12013*x12015);
IkReal gconst11=((1.0)*r10*x12015);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12017=((-1.0)*r11);
CheckValue<IkReal> x12020 = IKatan2WithCheck(IkReal(x12017),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12020.valid){
continue;
}
IkReal x12018=((1.0)*(x12020.value));
IkReal x12019=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12018)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12018)));
IkReal gconst10=(x12017*x12019);
IkReal gconst11=((1.0)*r10*x12019);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12021=((-1.0)*r11);
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal(x12021),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
IkReal x12022=((1.0)*(x12024.value));
IkReal x12023=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12022)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12022)));
IkReal gconst10=(x12021*x12023);
IkReal gconst11=((1.0)*r10*x12023);
IkReal x12025=r12*r12;
CheckValue<IkReal> x12028=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x12025))),-1);
if(!x12028.valid){
continue;
}
IkReal x12026=x12028.value;
IkReal x12027=((1.0)*x12026);
j4eval[0]=IKsign((((x12027*(r10*r10*r10*r10)))+x12025+(((2.0)*x12026*(r10*r10)*(r11*r11)))+((x12027*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12029=(cj2*sj1);
IkReal x12030=(gconst10*r11);
IkReal x12031=(gconst11*r10);
IkReal x12032=(cj1*sj2);
CheckValue<IkReal> x12033 = IKatan2WithCheck(IkReal((((r12*x12029))+((r12*x12032)))),IkReal(((((-1.0)*x12029*x12031))+((x12030*x12032))+(((-1.0)*x12031*x12032))+((x12029*x12030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12033.valid){
continue;
}
CheckValue<IkReal> x12034=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12030*x12031))+(x12030*x12030)+(x12031*x12031))),-1);
if(!x12034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12033.value)+(((1.5707963267949)*(x12034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12035=IKsin(j4);
IkReal x12036=IKcos(j4);
IkReal x12037=((1.0)*x12036);
IkReal x12038=(gconst10*x12035);
IkReal x12039=((1.0)*x12035);
IkReal x12040=(gconst11*x12036);
IkReal x12041=(gconst11*x12039);
evalcond[0]=((((-1.0)*r20*x12041))+((r21*x12038))+(((-1.0)*r22*x12037)));
evalcond[1]=((((-1.0)*r10*x12041))+(((-1.0)*r12*x12037))+((r11*x12038)));
evalcond[2]=((((-1.0)*gconst10*r01*x12037))+(((-1.0)*r02*x12039))+((r00*x12040)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12041))+((r01*x12038))+(((-1.0)*r02*x12037)));
evalcond[4]=(((r10*x12040))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r11*x12037))+(((-1.0)*r12*x12039)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12040))+(((-1.0)*gconst10*r21*x12037))+(((-1.0)*r22*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12042=(gconst11*r00);
IkReal x12043=(gconst10*r01);
CheckValue<IkReal> x12044 = IKatan2WithCheck(IkReal(((((-1.0)*x12043))+x12042)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12044.valid){
continue;
}
CheckValue<IkReal> x12045=IKPowWithIntegerCheck(IKsign(((x12042*x12042)+(((-2.0)*x12042*x12043))+(r02*r02)+(x12043*x12043))),-1);
if(!x12045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12044.value)+(((1.5707963267949)*(x12045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12046=IKsin(j4);
IkReal x12047=IKcos(j4);
IkReal x12048=((1.0)*x12047);
IkReal x12049=(gconst10*x12046);
IkReal x12050=((1.0)*x12046);
IkReal x12051=(gconst11*x12047);
IkReal x12052=(gconst11*x12050);
evalcond[0]=((((-1.0)*r20*x12052))+((r21*x12049))+(((-1.0)*r22*x12048)));
evalcond[1]=((((-1.0)*r12*x12048))+(((-1.0)*r10*x12052))+((r11*x12049)));
evalcond[2]=((((-1.0)*gconst10*r01*x12048))+((r00*x12051))+(((-1.0)*r02*x12050)));
evalcond[3]=((1.0)+((r01*x12049))+(((-1.0)*r00*x12052))+(((-1.0)*r02*x12048)));
evalcond[4]=(((cj2*sj1))+((r10*x12051))+((cj1*sj2))+(((-1.0)*gconst10*r11*x12048))+(((-1.0)*r12*x12050)));
evalcond[5]=(((r20*x12051))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x12050))+(((-1.0)*gconst10*r21*x12048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12053=((1.0)*gconst11);
CheckValue<IkReal> x12054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12053))+(((-1.0)*gconst10*r20)))),-1);
if(!x12054.valid){
continue;
}
CheckValue<IkReal> x12055 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12054.value)))+(x12055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12056=IKsin(j4);
IkReal x12057=IKcos(j4);
IkReal x12058=((1.0)*x12057);
IkReal x12059=(gconst10*x12056);
IkReal x12060=((1.0)*x12056);
IkReal x12061=(gconst11*x12057);
IkReal x12062=(gconst11*x12060);
evalcond[0]=((((-1.0)*r20*x12062))+(((-1.0)*r22*x12058))+((r21*x12059)));
evalcond[1]=((((-1.0)*r10*x12062))+(((-1.0)*r12*x12058))+((r11*x12059)));
evalcond[2]=(((r00*x12061))+(((-1.0)*r02*x12060))+(((-1.0)*gconst10*r01*x12058)));
evalcond[3]=((1.0)+((r01*x12059))+(((-1.0)*r02*x12058))+(((-1.0)*r00*x12062)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x12061))+(((-1.0)*r12*x12060))+(((-1.0)*gconst10*r11*x12058)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12061))+(((-1.0)*gconst10*r21*x12058))+(((-1.0)*r22*x12060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12063=((-1.0)*r11);
IkReal x12064=((-1.0)*r10);
CheckValue<IkReal> x12066 = IKatan2WithCheck(IkReal(x12063),IkReal(x12064),IKFAST_ATAN2_MAGTHRESH);
if(!x12066.valid){
continue;
}
IkReal x12065=((1.0)*(x12066.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12065)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12064);
rxp1_1=(px*r21);
rxp1_2=(px*x12063);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12065)));
IkReal gconst10=x12063;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12067=((-1.0)*r11);
IkReal x12068=((-1.0)*r10);
CheckValue<IkReal> x12070 = IKatan2WithCheck(IkReal(x12067),IkReal(x12068),IKFAST_ATAN2_MAGTHRESH);
if(!x12070.valid){
continue;
}
IkReal x12069=((1.0)*(x12070.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12069)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12068);
rxp1_1=(px*r21);
rxp1_2=(px*x12067);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12069)));
IkReal gconst10=x12067;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12071=((-1.0)*r11);
IkReal x12072=((-1.0)*r10);
CheckValue<IkReal> x12074 = IKatan2WithCheck(IkReal(x12071),IkReal(x12072),IKFAST_ATAN2_MAGTHRESH);
if(!x12074.valid){
continue;
}
IkReal x12073=((1.0)*(x12074.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12073)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12072);
rxp1_1=(px*r21);
rxp1_2=(px*x12071);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12073)));
IkReal gconst10=x12071;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12077=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12077.valid){
continue;
}
IkReal x12075=x12077.value;
IkReal x12076=(sj0*x12075);
cj4array[0]=(((cj2*sj1*x12076))+((cj1*sj2*x12076)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12078=IKsin(j4);
IkReal x12079=IKcos(j4);
IkReal x12080=(gconst10*r21);
IkReal x12081=(gconst11*r20);
IkReal x12082=((1.0)*x12078);
IkReal x12083=((1.0)*x12079);
evalcond[0]=((-1.0)*r02*x12078);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12083)));
evalcond[2]=(((x12078*x12080))+(((-1.0)*x12081*x12082)));
evalcond[3]=(((gconst10*r11*x12078))+(((-1.0)*gconst11*r10*x12082)));
evalcond[4]=(((x12079*x12081))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12080*x12083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12085=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12085.valid){
continue;
}
IkReal x12084=x12085.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12084))+((cj1*cj2*x12084)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12086=IKsin(j4);
IkReal x12087=IKcos(j4);
IkReal x12088=((1.0)*sj0);
IkReal x12089=(gconst10*x12086);
IkReal x12090=((1.0)*x12087);
IkReal x12091=((1.0)*gconst11*x12086);
evalcond[0]=((-1.0)*r02*x12086);
evalcond[1]=((((-1.0)*x12088))+(((-1.0)*r02*x12090)));
evalcond[2]=((((-1.0)*r20*x12091))+((r21*x12089)));
evalcond[3]=((((-1.0)*r10*x12091))+((r11*x12089)));
evalcond[4]=(((gconst11*r10*x12087))+(((-1.0)*gconst10*r11*x12090))+(((-1.0)*cj2*sj1*x12088))+(((-1.0)*cj1*sj2*x12088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12092=IKPowWithIntegerCheck(r02,-1);
if(!x12092.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12092.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12093=IKsin(j4);
IkReal x12094=IKcos(j4);
IkReal x12095=(gconst10*r21);
IkReal x12096=((1.0)*sj0);
IkReal x12097=(gconst10*r11);
IkReal x12098=(gconst11*x12094);
IkReal x12099=((1.0)*x12094);
IkReal x12100=((1.0)*gconst11*x12093);
evalcond[0]=((-1.0)*r02*x12093);
evalcond[1]=((((-1.0)*r20*x12100))+((x12093*x12095)));
evalcond[2]=((((-1.0)*r10*x12100))+((x12093*x12097)));
evalcond[3]=((((-1.0)*x12095*x12099))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12098)));
evalcond[4]=((((-1.0)*x12097*x12099))+(((-1.0)*cj2*sj1*x12096))+(((-1.0)*cj1*sj2*x12096))+((r10*x12098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12101=((1.0)*gconst11);
CheckValue<IkReal> x12102 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12101))+(((-1.0)*cj0*r00*x12101))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12102.valid){
continue;
}
CheckValue<IkReal> x12103=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12102.value)+(((1.5707963267949)*(x12103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12104=IKsin(j4);
IkReal x12105=IKcos(j4);
IkReal x12106=((1.0)*cj2);
IkReal x12107=((1.0)*sj0);
IkReal x12108=(cj1*sj2);
IkReal x12109=(gconst10*x12104);
IkReal x12110=((1.0)*x12105);
IkReal x12111=(gconst11*x12105);
IkReal x12112=((1.0)*x12104);
IkReal x12113=(gconst11*x12112);
evalcond[0]=((((-1.0)*r20*x12113))+((r21*x12109)));
evalcond[1]=((((-1.0)*r12*x12110))+cj0+(((-1.0)*r10*x12113))+((r11*x12109)));
evalcond[2]=(((r20*x12111))+((sj1*sj2))+(((-1.0)*cj1*x12106))+(((-1.0)*gconst10*r21*x12110)));
evalcond[3]=((((-1.0)*r00*x12113))+((r01*x12109))+(((-1.0)*x12107))+(((-1.0)*r02*x12110)));
evalcond[4]=((((-1.0)*cj0*sj1*x12106))+((r00*x12111))+(((-1.0)*gconst10*r01*x12110))+(((-1.0)*cj0*x12108))+(((-1.0)*r02*x12112)));
evalcond[5]=((((-1.0)*sj0*sj1*x12106))+((r10*x12111))+(((-1.0)*r12*x12112))+(((-1.0)*gconst10*r11*x12110))+(((-1.0)*x12107*x12108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12114=(gconst10*r21);
IkReal x12115=(gconst11*r20);
IkReal x12116=(sj1*sj2);
IkReal x12117=(cj1*cj2);
CheckValue<IkReal> x12118=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12114*x12115))+(r22*r22)+(x12115*x12115)+(x12114*x12114))),-1);
if(!x12118.valid){
continue;
}
CheckValue<IkReal> x12119 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12117))+((r22*x12116)))),IkReal(((((-1.0)*x12115*x12116))+(((-1.0)*x12114*x12117))+((x12115*x12117))+((x12114*x12116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12118.value)))+(x12119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12120=IKsin(j4);
IkReal x12121=IKcos(j4);
IkReal x12122=((1.0)*cj2);
IkReal x12123=((1.0)*sj0);
IkReal x12124=(cj1*sj2);
IkReal x12125=((1.0)*x12121);
IkReal x12126=(gconst10*x12120);
IkReal x12127=((1.0)*x12120);
IkReal x12128=(gconst11*x12121);
IkReal x12129=(gconst11*x12127);
evalcond[0]=((((-1.0)*r20*x12129))+((r21*x12126))+(((-1.0)*r22*x12125)));
evalcond[1]=(cj0+(((-1.0)*r12*x12125))+(((-1.0)*r10*x12129))+((r11*x12126)));
evalcond[2]=((((-1.0)*x12123))+((r01*x12126))+(((-1.0)*r02*x12125))+(((-1.0)*r00*x12129)));
evalcond[3]=((((-1.0)*cj1*x12122))+((sj1*sj2))+(((-1.0)*r22*x12127))+(((-1.0)*gconst10*r21*x12125))+((r20*x12128)));
evalcond[4]=((((-1.0)*gconst10*r01*x12125))+((r00*x12128))+(((-1.0)*cj0*x12124))+(((-1.0)*r02*x12127))+(((-1.0)*cj0*sj1*x12122)));
evalcond[5]=((((-1.0)*gconst10*r11*x12125))+(((-1.0)*r12*x12127))+(((-1.0)*sj0*sj1*x12122))+(((-1.0)*x12123*x12124))+((r10*x12128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12130=((1.0)*sj0);
IkReal x12131=((1.0)*gconst10);
CheckValue<IkReal> x12132 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12130)))),IkReal(((((-1.0)*gconst10*r11*x12130))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12132.valid){
continue;
}
CheckValue<IkReal> x12133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12131))+(((-1.0)*gconst11*r21)))),-1);
if(!x12133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12132.value)+(((1.5707963267949)*(x12133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12134=IKsin(j4);
IkReal x12135=IKcos(j4);
IkReal x12136=((1.0)*cj2);
IkReal x12137=((1.0)*sj0);
IkReal x12138=(cj1*sj2);
IkReal x12139=((1.0)*x12135);
IkReal x12140=(gconst10*x12134);
IkReal x12141=((1.0)*x12134);
IkReal x12142=(gconst11*x12135);
IkReal x12143=(gconst11*x12141);
evalcond[0]=((((-1.0)*r22*x12139))+(((-1.0)*r20*x12143))+((r21*x12140)));
evalcond[1]=(cj0+((r11*x12140))+(((-1.0)*r12*x12139))+(((-1.0)*r10*x12143)));
evalcond[2]=((((-1.0)*r00*x12143))+(((-1.0)*x12137))+((r01*x12140))+(((-1.0)*r02*x12139)));
evalcond[3]=((((-1.0)*r22*x12141))+(((-1.0)*cj1*x12136))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12139))+((r20*x12142)));
evalcond[4]=((((-1.0)*gconst10*r01*x12139))+(((-1.0)*r02*x12141))+((r00*x12142))+(((-1.0)*cj0*x12138))+(((-1.0)*cj0*sj1*x12136)));
evalcond[5]=((((-1.0)*gconst10*r11*x12139))+((r10*x12142))+(((-1.0)*x12137*x12138))+(((-1.0)*r12*x12141))+(((-1.0)*sj0*sj1*x12136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12144=((1.0)*gconst11);
CheckValue<IkReal> x12145 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12145.valid){
continue;
}
CheckValue<IkReal> x12146=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12144)))),-1);
if(!x12146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12145.value)+(((1.5707963267949)*(x12146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12147=IKsin(j4);
IkReal x12148=IKcos(j4);
IkReal x12149=((1.0)*cj2);
IkReal x12150=((1.0)*sj0);
IkReal x12151=(cj1*sj2);
IkReal x12152=((1.0)*x12148);
IkReal x12153=(gconst10*x12147);
IkReal x12154=((1.0)*x12147);
IkReal x12155=(gconst11*x12148);
IkReal x12156=(gconst11*x12154);
evalcond[0]=((((-1.0)*r22*x12152))+((r21*x12153))+(((-1.0)*r20*x12156)));
evalcond[1]=(cj0+(((-1.0)*r12*x12152))+((r11*x12153))+(((-1.0)*r10*x12156)));
evalcond[2]=((((-1.0)*r02*x12152))+(((-1.0)*r00*x12156))+((r01*x12153))+(((-1.0)*x12150)));
evalcond[3]=((((-1.0)*gconst10*r21*x12152))+(((-1.0)*r22*x12154))+((sj1*sj2))+((r20*x12155))+(((-1.0)*cj1*x12149)));
evalcond[4]=((((-1.0)*r02*x12154))+(((-1.0)*cj0*sj1*x12149))+((r00*x12155))+(((-1.0)*cj0*x12151))+(((-1.0)*gconst10*r01*x12152)));
evalcond[5]=(((r10*x12155))+(((-1.0)*sj0*sj1*x12149))+(((-1.0)*gconst10*r11*x12152))+(((-1.0)*r12*x12154))+(((-1.0)*x12150*x12151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12157=((-1.0)*r11);
CheckValue<IkReal> x12160 = IKatan2WithCheck(IkReal(x12157),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12160.valid){
continue;
}
IkReal x12158=((1.0)*(x12160.value));
IkReal x12159=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12158)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12158)));
IkReal gconst10=(x12157*x12159);
IkReal gconst11=((1.0)*r10*x12159);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12161=((-1.0)*r11);
CheckValue<IkReal> x12164 = IKatan2WithCheck(IkReal(x12161),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12164.valid){
continue;
}
IkReal x12162=((1.0)*(x12164.value));
IkReal x12163=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12162)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12162)));
IkReal gconst10=(x12161*x12163);
IkReal gconst11=((1.0)*r10*x12163);
IkReal x12165=r12*r12;
IkReal x12166=((1.0)*sj0);
IkReal x12167=(cj0*r02);
IkReal x12168=x11904;
j4eval[0]=((IKabs((((sj0*x12165*x12168))+((r12*x12167*x12168))+(((-1.0)*x12166*x12168)))))+(IKabs(((((-1.0)*x12167))+(((-1.0)*r12*x12166))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12169=((-1.0)*r11);
CheckValue<IkReal> x12172 = IKatan2WithCheck(IkReal(x12169),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12172.valid){
continue;
}
IkReal x12170=((1.0)*(x12172.value));
IkReal x12171=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12170)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12170)));
IkReal gconst10=(x12169*x12171);
IkReal gconst11=((1.0)*r10*x12171);
IkReal x12173=r12*r12;
IkReal x12174=((1.0)+(((-1.0)*x12173)));
IkReal x12175=(r22*sj1*sj2);
IkReal x12176=(cj1*cj2*r22);
CheckValue<IkReal> x12183=IKPowWithIntegerCheck(x12174,-1);
if(!x12183.valid){
continue;
}
IkReal x12177=x12183.value;
CheckValue<IkReal> x12184=IKPowWithIntegerCheck(((-1.0)+x12173),-1);
if(!x12184.valid){
continue;
}
IkReal x12178=x12184.value;
IkReal x12179=((1.0)*x12177);
if((x12174) < -0.00001)
continue;
IkReal x12180=IKsqrt(x12174);
IkReal x12181=(r12*x12178*x12180);
IkReal x12182=((((-1.0)*(r22*r22)))+(((-1.0)*x12179*(r11*r11)*(r21*r21)))+(((-1.0)*x12179*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12177)));
j4eval[0]=x12182;
j4eval[1]=((IKabs(((((-1.0)*x12175*x12181))+((x12176*x12181)))))+(IKabs(((((-1.0)*x12176))+x12175))));
j4eval[2]=IKsign(x12182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12185=((-1.0)*r11);
CheckValue<IkReal> x12188 = IKatan2WithCheck(IkReal(x12185),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12188.valid){
continue;
}
IkReal x12186=((1.0)*(x12188.value));
IkReal x12187=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12186)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12186)));
IkReal gconst10=(x12185*x12187);
IkReal gconst11=((1.0)*r10*x12187);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12189=((-1.0)*r11);
CheckValue<IkReal> x12192 = IKatan2WithCheck(IkReal(x12189),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12192.valid){
continue;
}
IkReal x12190=((1.0)*(x12192.value));
IkReal x12191=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12190)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12190)));
IkReal gconst10=(x12189*x12191);
IkReal gconst11=((1.0)*r10*x12191);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12193=((-1.0)*r11);
CheckValue<IkReal> x12196 = IKatan2WithCheck(IkReal(x12193),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12196.valid){
continue;
}
IkReal x12194=((1.0)*(x12196.value));
IkReal x12195=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12194)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12194)));
IkReal gconst10=(x12193*x12195);
IkReal gconst11=((1.0)*r10*x12195);
IkReal x12197=(cj1*r02*sj2);
IkReal x12198=(cj2*r02*sj1);
IkReal x12199=x11904;
IkReal x12200=(r12*x12199);
j4eval[0]=((IKabs((((x12197*x12200))+((x12198*x12200)))))+(IKabs((x12198+x12197))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12201=(cj1*sj2);
IkReal x12202=(cj2*sj1);
IkReal x12203=(gconst11*r00);
IkReal x12204=((1.0)*gconst10*r01);
CheckValue<IkReal> x12205=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12205.valid){
continue;
}
CheckValue<IkReal> x12206 = IKatan2WithCheck(IkReal(((((-1.0)*x12202*x12204))+((x12201*x12203))+(((-1.0)*x12201*x12204))+((x12202*x12203)))),IkReal((((r02*x12202))+((r02*x12201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12205.value)))+(x12206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12207=IKcos(j4);
IkReal x12208=IKsin(j4);
IkReal x12209=((1.0)*cj2);
IkReal x12210=((1.0)*x12207);
IkReal x12211=(gconst10*x12207);
IkReal x12212=(gconst10*x12208);
IkReal x12213=((1.0)*gconst11*x12208);
evalcond[0]=(((r02*x12208))+(((-1.0)*gconst11*r00*x12210))+((r01*x12211)));
evalcond[1]=((((-1.0)*r22*x12210))+((r21*x12212))+(((-1.0)*r20*x12213)));
evalcond[2]=((((-1.0)*r12*x12210))+(((-1.0)*r10*x12213))+((r11*x12212)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12210))+(((-1.0)*r00*x12213))+((r01*x12212)));
evalcond[4]=(((r22*x12208))+((sj1*sj2))+(((-1.0)*cj1*x12209))+(((-1.0)*gconst11*r20*x12210))+((r21*x12211)));
evalcond[5]=((((-1.0)*gconst11*r10*x12210))+((r12*x12208))+(((-1.0)*cj1*sj2))+((r11*x12211))+(((-1.0)*sj1*x12209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12214=(gconst10*r01);
IkReal x12215=(gconst11*r00);
CheckValue<IkReal> x12216=IKPowWithIntegerCheck(IKsign(((x12215*x12215)+(x12214*x12214)+(((-2.0)*x12214*x12215))+(r02*r02))),-1);
if(!x12216.valid){
continue;
}
CheckValue<IkReal> x12217 = IKatan2WithCheck(IkReal((x12214+(((-1.0)*x12215)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12216.value)))+(x12217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12218=IKcos(j4);
IkReal x12219=IKsin(j4);
IkReal x12220=((1.0)*cj2);
IkReal x12221=((1.0)*x12218);
IkReal x12222=(gconst10*x12218);
IkReal x12223=(gconst10*x12219);
IkReal x12224=((1.0)*gconst11*x12219);
evalcond[0]=(((r02*x12219))+((r01*x12222))+(((-1.0)*gconst11*r00*x12221)));
evalcond[1]=((((-1.0)*r22*x12221))+((r21*x12223))+(((-1.0)*r20*x12224)));
evalcond[2]=(((r11*x12223))+(((-1.0)*r12*x12221))+(((-1.0)*r10*x12224)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12224))+((r01*x12223))+(((-1.0)*r02*x12221)));
evalcond[4]=(((r22*x12219))+(((-1.0)*cj1*x12220))+((sj1*sj2))+((r21*x12222))+(((-1.0)*gconst11*r20*x12221)));
evalcond[5]=(((r11*x12222))+(((-1.0)*sj1*x12220))+((r12*x12219))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
CheckValue<IkReal> x12226=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12225.value)+(((1.5707963267949)*(x12226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12227=IKcos(j4);
IkReal x12228=IKsin(j4);
IkReal x12229=((1.0)*cj2);
IkReal x12230=((1.0)*x12227);
IkReal x12231=(gconst10*x12227);
IkReal x12232=(gconst10*x12228);
IkReal x12233=((1.0)*gconst11*x12228);
evalcond[0]=(((r01*x12231))+((r02*x12228))+(((-1.0)*gconst11*r00*x12230)));
evalcond[1]=((((-1.0)*r22*x12230))+(((-1.0)*r20*x12233))+((r21*x12232)));
evalcond[2]=((((-1.0)*r12*x12230))+((r11*x12232))+(((-1.0)*r10*x12233)));
evalcond[3]=((-1.0)+((r01*x12232))+(((-1.0)*r00*x12233))+(((-1.0)*r02*x12230)));
evalcond[4]=((((-1.0)*gconst11*r20*x12230))+(((-1.0)*cj1*x12229))+((r22*x12228))+((sj1*sj2))+((r21*x12231)));
evalcond[5]=((((-1.0)*sj1*x12229))+(((-1.0)*gconst11*r10*x12230))+(((-1.0)*cj1*sj2))+((r11*x12231))+((r12*x12228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12234=((-1.0)*r11);
CheckValue<IkReal> x12237 = IKatan2WithCheck(IkReal(x12234),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12237.valid){
continue;
}
IkReal x12235=((1.0)*(x12237.value));
IkReal x12236=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12235)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12235)));
IkReal gconst10=(x12234*x12236);
IkReal gconst11=((1.0)*r10*x12236);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12238=((-1.0)*r11);
CheckValue<IkReal> x12241 = IKatan2WithCheck(IkReal(x12238),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12241.valid){
continue;
}
IkReal x12239=((1.0)*(x12241.value));
IkReal x12240=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12239)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12239)));
IkReal gconst10=(x12238*x12240);
IkReal gconst11=((1.0)*r10*x12240);
IkReal x12242=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12246=IKPowWithIntegerCheck(x12242,-1);
if(!x12246.valid){
continue;
}
IkReal x12243=x12246.value;
IkReal x12244=((1.0)*x12243);
IkReal x12245=((((-1.0)*x12244*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12244*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x12243)));
j4eval[0]=x12245;
j4eval[1]=r02;
j4eval[2]=x12242;
j4eval[3]=IKsign(x12245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12247=((-1.0)*r11);
CheckValue<IkReal> x12250 = IKatan2WithCheck(IkReal(x12247),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12250.valid){
continue;
}
IkReal x12248=((1.0)*(x12250.value));
IkReal x12249=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12248)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12248)));
IkReal gconst10=(x12247*x12249);
IkReal gconst11=((1.0)*r10*x12249);
IkReal x12251=r12*r12;
IkReal x12252=((1.0)*r02);
IkReal x12253=(cj1*sj2);
IkReal x12254=(cj2*sj1);
CheckValue<IkReal> x12258=IKPowWithIntegerCheck(((-1.0)+x12251),-1);
if(!x12258.valid){
continue;
}
IkReal x12255=x12258.value;
if((((1.0)+(((-1.0)*x12251)))) < -0.00001)
continue;
IkReal x12256=IKsqrt(((1.0)+(((-1.0)*x12251))));
IkReal x12257=(r12*x12255*x12256);
j4eval[0]=((IKabs(((((-1.0)*x12252*x12254*x12257))+(((-1.0)*x12252*x12253*x12257)))))+(IKabs(((((-1.0)*x12252*x12253))+(((-1.0)*x12252*x12254))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12259=(cj1*sj2);
IkReal x12260=(gconst10*r01);
IkReal x12261=(cj2*sj1);
IkReal x12262=((1.0)*r02);
IkReal x12263=((1.0)*gconst11*r00);
CheckValue<IkReal> x12264=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12264.valid){
continue;
}
CheckValue<IkReal> x12265 = IKatan2WithCheck(IkReal((((x12260*x12261))+(((-1.0)*x12261*x12263))+(((-1.0)*x12259*x12263))+((x12259*x12260)))),IkReal(((((-1.0)*x12261*x12262))+(((-1.0)*x12259*x12262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12264.value)))+(x12265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12266=IKcos(j4);
IkReal x12267=IKsin(j4);
IkReal x12268=((1.0)*x12266);
IkReal x12269=(gconst10*x12266);
IkReal x12270=(gconst10*x12267);
IkReal x12271=((1.0)*gconst11*x12267);
evalcond[0]=((((-1.0)*gconst11*r00*x12268))+((r01*x12269))+((r02*x12267)));
evalcond[1]=(((r21*x12270))+(((-1.0)*r22*x12268))+(((-1.0)*r20*x12271)));
evalcond[2]=((((-1.0)*r12*x12268))+(((-1.0)*r10*x12271))+((r11*x12270)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12271))+(((-1.0)*r02*x12268))+((r01*x12270)));
evalcond[4]=(((cj2*sj1))+((r12*x12267))+((cj1*sj2))+((r11*x12269))+(((-1.0)*gconst11*r10*x12268)));
evalcond[5]=((((-1.0)*gconst11*r20*x12268))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12269))+((r22*x12267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12272=(gconst10*r01);
IkReal x12273=(gconst11*r00);
CheckValue<IkReal> x12274=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12273*x12273)))+(((-1.0)*(r02*r02)))+(((2.0)*x12272*x12273))+(((-1.0)*(x12272*x12272))))),-1);
if(!x12274.valid){
continue;
}
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal(((((-1.0)*x12273))+x12272)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12274.value)))+(x12275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12276=IKcos(j4);
IkReal x12277=IKsin(j4);
IkReal x12278=((1.0)*x12276);
IkReal x12279=(gconst10*x12276);
IkReal x12280=(gconst10*x12277);
IkReal x12281=((1.0)*gconst11*x12277);
evalcond[0]=(((r02*x12277))+(((-1.0)*gconst11*r00*x12278))+((r01*x12279)));
evalcond[1]=((((-1.0)*r22*x12278))+(((-1.0)*r20*x12281))+((r21*x12280)));
evalcond[2]=((((-1.0)*r10*x12281))+((r11*x12280))+(((-1.0)*r12*x12278)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12278))+((r01*x12280))+(((-1.0)*r00*x12281)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x12277))+((r11*x12279))+(((-1.0)*gconst11*r10*x12278)));
evalcond[5]=(((r21*x12279))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12278))+((r22*x12277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12282=((1.0)*gconst11);
CheckValue<IkReal> x12283=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12282)))),-1);
if(!x12283.valid){
continue;
}
CheckValue<IkReal> x12284 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12283.value)))+(x12284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12285=IKcos(j4);
IkReal x12286=IKsin(j4);
IkReal x12287=((1.0)*x12285);
IkReal x12288=(gconst10*x12285);
IkReal x12289=(gconst10*x12286);
IkReal x12290=((1.0)*gconst11*x12286);
evalcond[0]=(((r02*x12286))+(((-1.0)*gconst11*r00*x12287))+((r01*x12288)));
evalcond[1]=((((-1.0)*r22*x12287))+(((-1.0)*r20*x12290))+((r21*x12289)));
evalcond[2]=((((-1.0)*r10*x12290))+(((-1.0)*r12*x12287))+((r11*x12289)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12290))+((r01*x12289))+(((-1.0)*r02*x12287)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12287))+((r12*x12286))+((r11*x12288)));
evalcond[5]=(((r22*x12286))+(((-1.0)*gconst11*r20*x12287))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12291=((-1.0)*r11);
IkReal x12292=((-1.0)*r10);
CheckValue<IkReal> x12294 = IKatan2WithCheck(IkReal(x12291),IkReal(x12292),IKFAST_ATAN2_MAGTHRESH);
if(!x12294.valid){
continue;
}
IkReal x12293=((1.0)*(x12294.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12293)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12292);
rxp1_1=(px*r21);
rxp1_2=(px*x12291);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12293)));
IkReal gconst10=x12291;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12295=((-1.0)*r11);
IkReal x12296=((-1.0)*r10);
CheckValue<IkReal> x12298 = IKatan2WithCheck(IkReal(x12295),IkReal(x12296),IKFAST_ATAN2_MAGTHRESH);
if(!x12298.valid){
continue;
}
IkReal x12297=((1.0)*(x12298.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12297)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12296);
rxp1_1=(px*r21);
rxp1_2=(px*x12295);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12297)));
IkReal gconst10=x12295;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12299=((-1.0)*r11);
IkReal x12300=((-1.0)*r10);
CheckValue<IkReal> x12302 = IKatan2WithCheck(IkReal(x12299),IkReal(x12300),IKFAST_ATAN2_MAGTHRESH);
if(!x12302.valid){
continue;
}
IkReal x12301=((1.0)*(x12302.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12301)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12300);
rxp1_1=(px*r21);
rxp1_2=(px*x12299);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12301)));
IkReal gconst10=x12299;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12305=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12305.valid){
continue;
}
IkReal x12303=x12305.value;
IkReal x12304=(sj0*x12303);
cj4array[0]=(((cj1*sj2*x12304))+((cj2*sj1*x12304)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12306=IKsin(j4);
IkReal x12307=IKcos(j4);
IkReal x12308=(gconst10*r21);
IkReal x12309=((1.0)*x12307);
IkReal x12310=((1.0)*gconst11*x12306);
evalcond[0]=(r02*x12306);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12309)));
evalcond[2]=((((-1.0)*r20*x12310))+((x12306*x12308)));
evalcond[3]=((((-1.0)*r10*x12310))+((gconst10*r11*x12306)));
evalcond[4]=((((-1.0)*gconst11*r20*x12309))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12307*x12308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12312=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12312.valid){
continue;
}
IkReal x12311=x12312.value;
cj4array[0]=(((cj1*cj2*x12311))+(((-1.0)*sj1*sj2*x12311)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12313=IKsin(j4);
IkReal x12314=IKcos(j4);
IkReal x12315=((1.0)*sj0);
IkReal x12316=(gconst10*x12313);
IkReal x12317=((1.0)*x12314);
IkReal x12318=((1.0)*gconst11*x12313);
evalcond[0]=(r02*x12313);
evalcond[1]=((((-1.0)*r02*x12317))+(((-1.0)*x12315)));
evalcond[2]=((((-1.0)*r20*x12318))+((r21*x12316)));
evalcond[3]=((((-1.0)*r10*x12318))+((r11*x12316)));
evalcond[4]=((((-1.0)*gconst11*r10*x12317))+(((-1.0)*cj2*sj1*x12315))+((gconst10*r11*x12314))+(((-1.0)*cj1*sj2*x12315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12319=IKPowWithIntegerCheck(r02,-1);
if(!x12319.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12319.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12320=IKsin(j4);
IkReal x12321=IKcos(j4);
IkReal x12322=(gconst10*r21);
IkReal x12323=((1.0)*cj1);
IkReal x12324=(gconst10*r11);
IkReal x12325=((1.0)*gconst11*x12320);
IkReal x12326=((1.0)*gconst11*x12321);
evalcond[0]=(r02*x12320);
evalcond[1]=((((-1.0)*r20*x12325))+((x12320*x12322)));
evalcond[2]=((((-1.0)*r10*x12325))+((x12320*x12324)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x12326))+(((-1.0)*cj2*x12323))+((x12321*x12322)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12323))+(((-1.0)*r10*x12326))+((x12321*x12324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12327=((1.0)*gconst11);
CheckValue<IkReal> x12328 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12327))+(((-1.0)*r10*sj0*x12327))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12328.valid){
continue;
}
CheckValue<IkReal> x12329=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12328.value)+(((1.5707963267949)*(x12329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12330=IKsin(j4);
IkReal x12331=IKcos(j4);
IkReal x12332=((1.0)*gconst11);
IkReal x12333=((1.0)*cj2);
IkReal x12334=((1.0)*sj0);
IkReal x12335=(cj1*sj2);
IkReal x12336=(gconst10*x12331);
IkReal x12337=(gconst10*x12330);
IkReal x12338=((1.0)*x12331);
evalcond[0]=(((r21*x12337))+(((-1.0)*r20*x12330*x12332)));
evalcond[1]=(cj0+((r11*x12337))+(((-1.0)*r10*x12330*x12332))+(((-1.0)*r12*x12338)));
evalcond[2]=(((r21*x12336))+((sj1*sj2))+(((-1.0)*cj1*x12333))+(((-1.0)*r20*x12331*x12332)));
evalcond[3]=(((r01*x12337))+(((-1.0)*x12334))+(((-1.0)*r00*x12330*x12332))+(((-1.0)*r02*x12338)));
evalcond[4]=(((r01*x12336))+(((-1.0)*cj0*x12335))+(((-1.0)*r00*x12331*x12332))+((r02*x12330))+(((-1.0)*cj0*sj1*x12333)));
evalcond[5]=((((-1.0)*x12334*x12335))+(((-1.0)*sj0*sj1*x12333))+(((-1.0)*r10*x12331*x12332))+((r12*x12330))+((r11*x12336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12339=(gconst10*r21);
IkReal x12340=(gconst11*r20);
IkReal x12341=(sj1*sj2);
IkReal x12342=(cj1*cj2);
CheckValue<IkReal> x12343 = IKatan2WithCheck(IkReal((((r22*x12341))+(((-1.0)*r22*x12342)))),IkReal((((x12340*x12342))+((x12339*x12341))+(((-1.0)*x12339*x12342))+(((-1.0)*x12340*x12341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12343.valid){
continue;
}
CheckValue<IkReal> x12344=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12340*x12340)))+(((-1.0)*(x12339*x12339)))+(((-1.0)*(r22*r22)))+(((2.0)*x12339*x12340)))),-1);
if(!x12344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12343.value)+(((1.5707963267949)*(x12344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12345=IKsin(j4);
IkReal x12346=IKcos(j4);
IkReal x12347=((1.0)*cj2);
IkReal x12348=((1.0)*sj0);
IkReal x12349=(cj1*sj2);
IkReal x12350=((1.0)*x12346);
IkReal x12351=(gconst10*x12346);
IkReal x12352=(gconst10*x12345);
IkReal x12353=((1.0)*gconst11*x12345);
evalcond[0]=(((r21*x12352))+(((-1.0)*r20*x12353))+(((-1.0)*r22*x12350)));
evalcond[1]=(cj0+(((-1.0)*r10*x12353))+((r11*x12352))+(((-1.0)*r12*x12350)));
evalcond[2]=((((-1.0)*r02*x12350))+(((-1.0)*x12348))+((r01*x12352))+(((-1.0)*r00*x12353)));
evalcond[3]=(((sj1*sj2))+((r22*x12345))+((r21*x12351))+(((-1.0)*gconst11*r20*x12350))+(((-1.0)*cj1*x12347)));
evalcond[4]=(((r01*x12351))+(((-1.0)*gconst11*r00*x12350))+(((-1.0)*cj0*sj1*x12347))+((r02*x12345))+(((-1.0)*cj0*x12349)));
evalcond[5]=((((-1.0)*x12348*x12349))+(((-1.0)*sj0*sj1*x12347))+((r11*x12351))+((r12*x12345))+(((-1.0)*gconst11*r10*x12350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12354=((1.0)*sj0);
IkReal x12355=((1.0)*gconst10);
CheckValue<IkReal> x12356 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12354)))),IkReal(((((-1.0)*gconst10*r11*x12354))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12356.valid){
continue;
}
CheckValue<IkReal> x12357=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12355)))),-1);
if(!x12357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12356.value)+(((1.5707963267949)*(x12357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12358=IKsin(j4);
IkReal x12359=IKcos(j4);
IkReal x12360=((1.0)*cj2);
IkReal x12361=((1.0)*sj0);
IkReal x12362=(cj1*sj2);
IkReal x12363=((1.0)*x12359);
IkReal x12364=(gconst10*x12359);
IkReal x12365=(gconst10*x12358);
IkReal x12366=((1.0)*gconst11*x12358);
evalcond[0]=((((-1.0)*r22*x12363))+(((-1.0)*r20*x12366))+((r21*x12365)));
evalcond[1]=(((r11*x12365))+cj0+(((-1.0)*r12*x12363))+(((-1.0)*r10*x12366)));
evalcond[2]=((((-1.0)*x12361))+(((-1.0)*r00*x12366))+(((-1.0)*r02*x12363))+((r01*x12365)));
evalcond[3]=((((-1.0)*cj1*x12360))+((sj1*sj2))+((r22*x12358))+((r21*x12364))+(((-1.0)*gconst11*r20*x12363)));
evalcond[4]=((((-1.0)*cj0*x12362))+(((-1.0)*gconst11*r00*x12363))+(((-1.0)*cj0*sj1*x12360))+((r02*x12358))+((r01*x12364)));
evalcond[5]=(((r11*x12364))+(((-1.0)*sj0*sj1*x12360))+(((-1.0)*gconst11*r10*x12363))+(((-1.0)*x12361*x12362))+((r12*x12358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12367=((1.0)*gconst11);
CheckValue<IkReal> x12368 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12368.valid){
continue;
}
CheckValue<IkReal> x12369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12367)))),-1);
if(!x12369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12368.value)+(((1.5707963267949)*(x12369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12370=IKsin(j4);
IkReal x12371=IKcos(j4);
IkReal x12372=((1.0)*cj2);
IkReal x12373=((1.0)*sj0);
IkReal x12374=(cj1*sj2);
IkReal x12375=((1.0)*x12371);
IkReal x12376=(gconst10*x12371);
IkReal x12377=(gconst10*x12370);
IkReal x12378=((1.0)*gconst11*x12370);
evalcond[0]=((((-1.0)*r22*x12375))+(((-1.0)*r20*x12378))+((r21*x12377)));
evalcond[1]=(((r11*x12377))+cj0+(((-1.0)*r10*x12378))+(((-1.0)*r12*x12375)));
evalcond[2]=((((-1.0)*x12373))+(((-1.0)*r00*x12378))+(((-1.0)*r02*x12375))+((r01*x12377)));
evalcond[3]=((((-1.0)*cj1*x12372))+((sj1*sj2))+((r21*x12376))+(((-1.0)*gconst11*r20*x12375))+((r22*x12370)));
evalcond[4]=((((-1.0)*gconst11*r00*x12375))+(((-1.0)*cj0*sj1*x12372))+((r02*x12370))+((r01*x12376))+(((-1.0)*cj0*x12374)));
evalcond[5]=(((r11*x12376))+(((-1.0)*sj0*sj1*x12372))+(((-1.0)*gconst11*r10*x12375))+(((-1.0)*x12373*x12374))+((r12*x12370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12379=((-1.0)*r11);
CheckValue<IkReal> x12382 = IKatan2WithCheck(IkReal(x12379),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12382.valid){
continue;
}
IkReal x12380=((1.0)*(x12382.value));
IkReal x12381=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12380)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12380)));
IkReal gconst10=(x12379*x12381);
IkReal gconst11=((1.0)*r10*x12381);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12383=gconst10*gconst10;
IkReal x12384=gconst11*gconst11;
IkReal x12385=(gconst10*r21);
IkReal x12386=(cj3*r00);
IkReal x12387=(r00*sj3);
IkReal x12388=((1.0)*gconst11);
IkReal x12389=(gconst10*r20);
IkReal x12390=(r01*sj3);
IkReal x12391=(cj3*gconst11*r01);
IkReal x12392=(r21*x12383);
IkReal x12393=(r20*x12384);
CheckValue<IkReal> x12394 = IKatan2WithCheck(IkReal((((r22*x12391))+((gconst10*r22*x12386)))),IkReal(((((-1.0)*cj3*r01*x12393))+((x12385*x12391))+(((-1.0)*x12386*x12388*x12389))+((x12386*x12392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12394.valid){
continue;
}
CheckValue<IkReal> x12395=IKPowWithIntegerCheck(IKsign((((x12390*x12392))+(((-1.0)*x12385*x12387*x12388))+((x12387*x12393))+(((-1.0)*x12388*x12389*x12390))+((r02*r22*sj3)))),-1);
if(!x12395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12394.value)+(((1.5707963267949)*(x12395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12396=IKsin(j4);
IkReal x12397=IKcos(j4);
IkReal x12398=(sj1*sj2);
IkReal x12399=(gconst10*sj3);
IkReal x12400=(cj3*gconst10);
IkReal x12401=(gconst11*r20);
IkReal x12402=(gconst11*r21);
IkReal x12403=(gconst11*r00);
IkReal x12404=(cj3*gconst11);
IkReal x12405=(gconst11*r10);
IkReal x12406=((1.0)*cj1);
IkReal x12407=(cj2*sj1);
IkReal x12408=(gconst11*sj3);
IkReal x12409=(cj2*x12406);
IkReal x12410=((1.0)*x12397);
IkReal x12411=((1.0)*x12396);
IkReal x12412=(gconst10*x12396);
IkReal x12413=(cj3*x12396);
IkReal x12414=(sj3*x12397);
evalcond[0]=((((-1.0)*r22*x12410))+((r21*x12412))+(((-1.0)*x12401*x12411)));
evalcond[1]=(((r11*x12412))+(((-1.0)*r12*x12410))+(((-1.0)*x12405*x12411)));
evalcond[2]=((-1.0)+((r01*x12412))+(((-1.0)*r02*x12410))+(((-1.0)*x12403*x12411)));
evalcond[3]=(((r00*x12399))+(((-1.0)*cj3*x12403*x12410))+((r01*x12397*x12400))+((r02*x12413))+((r01*x12408)));
evalcond[4]=((((-1.0)*r02*sj3*x12411))+((x12403*x12414))+((r01*x12404))+((r00*x12400))+(((-1.0)*r01*x12399*x12410)));
evalcond[5]=(((cj1*sj2))+((r20*x12399))+((r21*x12397*x12400))+((sj3*x12402))+((r22*x12413))+x12407+(((-1.0)*cj3*x12401*x12410)));
evalcond[6]=((((-1.0)*x12409))+((r11*x12397*x12400))+x12398+((r10*x12399))+((r12*x12413))+(((-1.0)*r10*x12404*x12410))+((r11*x12408)));
evalcond[7]=((((-1.0)*x12409))+(((-1.0)*r21*x12399*x12410))+x12398+((x12401*x12414))+((cj3*x12402))+(((-1.0)*r22*sj3*x12411))+((r20*x12400)));
evalcond[8]=((((-1.0)*r11*x12399*x12410))+((x12405*x12414))+(((-1.0)*sj2*x12406))+((r10*x12400))+(((-1.0)*r12*sj3*x12411))+((r11*x12404))+(((-1.0)*x12407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12415 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12415.valid){
continue;
}
CheckValue<IkReal> x12416=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12415.value)+(((1.5707963267949)*(x12416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12417=IKsin(j4);
IkReal x12418=IKcos(j4);
IkReal x12419=(sj1*sj2);
IkReal x12420=(gconst10*sj3);
IkReal x12421=(cj3*gconst10);
IkReal x12422=(gconst11*r20);
IkReal x12423=(gconst11*r21);
IkReal x12424=(gconst11*r00);
IkReal x12425=(cj3*gconst11);
IkReal x12426=(gconst11*r10);
IkReal x12427=((1.0)*cj1);
IkReal x12428=(cj2*sj1);
IkReal x12429=(gconst11*sj3);
IkReal x12430=(cj2*x12427);
IkReal x12431=((1.0)*x12418);
IkReal x12432=((1.0)*x12417);
IkReal x12433=(gconst10*x12417);
IkReal x12434=(cj3*x12417);
IkReal x12435=(sj3*x12418);
evalcond[0]=(((r21*x12433))+(((-1.0)*r22*x12431))+(((-1.0)*x12422*x12432)));
evalcond[1]=((((-1.0)*r12*x12431))+((r11*x12433))+(((-1.0)*x12426*x12432)));
evalcond[2]=((-1.0)+(((-1.0)*x12424*x12432))+(((-1.0)*r02*x12431))+((r01*x12433)));
evalcond[3]=((((-1.0)*cj3*x12424*x12431))+((r02*x12434))+((r01*x12429))+((r01*x12418*x12421))+((r00*x12420)));
evalcond[4]=((((-1.0)*r01*x12420*x12431))+(((-1.0)*r02*sj3*x12432))+((r01*x12425))+((x12424*x12435))+((r00*x12421)));
evalcond[5]=(((r20*x12420))+((cj1*sj2))+(((-1.0)*cj3*x12422*x12431))+((r22*x12434))+x12428+((sj3*x12423))+((r21*x12418*x12421)));
evalcond[6]=(((r11*x12418*x12421))+(((-1.0)*x12430))+(((-1.0)*r10*x12425*x12431))+((r12*x12434))+((r10*x12420))+((r11*x12429))+x12419);
evalcond[7]=(((r20*x12421))+(((-1.0)*r22*sj3*x12432))+(((-1.0)*x12430))+((cj3*x12423))+((x12422*x12435))+x12419+(((-1.0)*r21*x12420*x12431)));
evalcond[8]=((((-1.0)*x12428))+(((-1.0)*r12*sj3*x12432))+((r10*x12421))+(((-1.0)*sj2*x12427))+((r11*x12425))+(((-1.0)*r11*x12420*x12431))+((x12426*x12435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12436=((-1.0)*r11);
CheckValue<IkReal> x12439 = IKatan2WithCheck(IkReal(x12436),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12439.valid){
continue;
}
IkReal x12437=((1.0)*(x12439.value));
IkReal x12438=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12437)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12437)));
IkReal gconst10=(x12436*x12438);
IkReal gconst11=((1.0)*r10*x12438);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12440=gconst10*gconst10;
IkReal x12441=gconst11*gconst11;
IkReal x12442=(gconst10*r21);
IkReal x12443=(cj3*r00);
IkReal x12444=(r00*sj3);
IkReal x12445=((1.0)*gconst11);
IkReal x12446=(gconst10*r20);
IkReal x12447=(r01*sj3);
IkReal x12448=(cj3*gconst11*r01);
IkReal x12449=(r21*x12440);
IkReal x12450=(r20*x12441);
CheckValue<IkReal> x12451=IKPowWithIntegerCheck(IKsign((((x12444*x12450))+(((-1.0)*x12442*x12444*x12445))+((x12447*x12449))+(((-1.0)*x12445*x12446*x12447))+((r02*r22*sj3)))),-1);
if(!x12451.valid){
continue;
}
CheckValue<IkReal> x12452 = IKatan2WithCheck(IkReal((((r22*x12448))+((gconst10*r22*x12443)))),IkReal((((x12443*x12449))+(((-1.0)*cj3*r01*x12450))+(((-1.0)*x12443*x12445*x12446))+((x12442*x12448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12451.value)))+(x12452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12453=IKsin(j4);
IkReal x12454=IKcos(j4);
IkReal x12455=(cj2*sj1);
IkReal x12456=(cj1*sj2);
IkReal x12457=(gconst10*sj3);
IkReal x12458=(cj3*gconst10);
IkReal x12459=(gconst11*r20);
IkReal x12460=(gconst11*r21);
IkReal x12461=(gconst11*r00);
IkReal x12462=(sj1*sj2);
IkReal x12463=(cj3*gconst11);
IkReal x12464=(gconst11*r10);
IkReal x12465=(cj1*cj2);
IkReal x12466=(gconst11*sj3);
IkReal x12467=((1.0)*x12454);
IkReal x12468=((1.0)*x12453);
IkReal x12469=(gconst10*x12453);
IkReal x12470=(cj3*x12453);
IkReal x12471=(sj3*x12454);
IkReal x12472=(x12456+x12455);
evalcond[0]=((((-1.0)*r22*x12467))+(((-1.0)*x12459*x12468))+((r21*x12469)));
evalcond[1]=((((-1.0)*x12464*x12468))+((r11*x12469))+(((-1.0)*r12*x12467)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12467))+((r01*x12469))+(((-1.0)*x12461*x12468)));
evalcond[3]=(((r01*x12466))+((r01*x12454*x12458))+((r00*x12457))+((r02*x12470))+(((-1.0)*cj3*x12461*x12467)));
evalcond[4]=((((-1.0)*r02*sj3*x12468))+((r01*x12463))+((x12461*x12471))+((r00*x12458))+(((-1.0)*r01*x12457*x12467)));
evalcond[5]=(((r21*x12454*x12458))+((sj3*x12460))+((r20*x12457))+(((-1.0)*cj3*x12459*x12467))+((r22*x12470))+x12472);
evalcond[6]=(((r11*x12454*x12458))+(((-1.0)*r10*x12463*x12467))+(((-1.0)*x12462))+((r12*x12470))+((r11*x12466))+x12465+((r10*x12457)));
evalcond[7]=(((x12464*x12471))+(((-1.0)*r11*x12457*x12467))+((r11*x12463))+(((-1.0)*r12*sj3*x12468))+x12472+((r10*x12458)));
evalcond[8]=(((cj3*x12460))+(((-1.0)*r21*x12457*x12467))+(((-1.0)*x12465))+(((-1.0)*r22*sj3*x12468))+((r20*x12458))+((x12459*x12471))+x12462);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12473=((1.0)*gconst11);
CheckValue<IkReal> x12474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12473))+(((-1.0)*gconst10*r20)))),-1);
if(!x12474.valid){
continue;
}
CheckValue<IkReal> x12475 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12474.value)))+(x12475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12476=IKsin(j4);
IkReal x12477=IKcos(j4);
IkReal x12478=(cj2*sj1);
IkReal x12479=(cj1*sj2);
IkReal x12480=(gconst10*sj3);
IkReal x12481=(cj3*gconst10);
IkReal x12482=(gconst11*r20);
IkReal x12483=(gconst11*r21);
IkReal x12484=(gconst11*r00);
IkReal x12485=(sj1*sj2);
IkReal x12486=(cj3*gconst11);
IkReal x12487=(gconst11*r10);
IkReal x12488=(cj1*cj2);
IkReal x12489=(gconst11*sj3);
IkReal x12490=((1.0)*x12477);
IkReal x12491=((1.0)*x12476);
IkReal x12492=(gconst10*x12476);
IkReal x12493=(cj3*x12476);
IkReal x12494=(sj3*x12477);
IkReal x12495=(x12479+x12478);
evalcond[0]=(((r21*x12492))+(((-1.0)*x12482*x12491))+(((-1.0)*r22*x12490)));
evalcond[1]=((((-1.0)*x12487*x12491))+(((-1.0)*r12*x12490))+((r11*x12492)));
evalcond[2]=((1.0)+((r01*x12492))+(((-1.0)*r02*x12490))+(((-1.0)*x12484*x12491)));
evalcond[3]=(((r00*x12480))+((r01*x12477*x12481))+((r01*x12489))+((r02*x12493))+(((-1.0)*cj3*x12484*x12490)));
evalcond[4]=(((r00*x12481))+((r01*x12486))+((x12484*x12494))+(((-1.0)*r01*x12480*x12490))+(((-1.0)*r02*sj3*x12491)));
evalcond[5]=(((r21*x12477*x12481))+((sj3*x12483))+((r20*x12480))+((r22*x12493))+x12495+(((-1.0)*cj3*x12482*x12490)));
evalcond[6]=((((-1.0)*x12485))+(((-1.0)*r10*x12486*x12490))+((r11*x12489))+((r10*x12480))+x12488+((r12*x12493))+((r11*x12477*x12481)));
evalcond[7]=(((x12487*x12494))+(((-1.0)*r12*sj3*x12491))+((r11*x12486))+((r10*x12481))+x12495+(((-1.0)*r11*x12480*x12490)));
evalcond[8]=((((-1.0)*x12488))+((x12482*x12494))+((cj3*x12483))+((r20*x12481))+(((-1.0)*r21*x12480*x12490))+x12485+(((-1.0)*r22*sj3*x12491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12496=((-1.0)*r11);
IkReal x12497=((-1.0)*r10);
CheckValue<IkReal> x12499 = IKatan2WithCheck(IkReal(x12496),IkReal(x12497),IKFAST_ATAN2_MAGTHRESH);
if(!x12499.valid){
continue;
}
IkReal x12498=((1.0)*(x12499.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12498)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12497);
rxp1_1=(px*r21);
rxp1_2=(px*x12496);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12498)));
IkReal gconst10=x12496;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12500=((-1.0)*r11);
IkReal x12501=((-1.0)*r10);
CheckValue<IkReal> x12503 = IKatan2WithCheck(IkReal(x12500),IkReal(x12501),IKFAST_ATAN2_MAGTHRESH);
if(!x12503.valid){
continue;
}
IkReal x12502=((1.0)*(x12503.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12502)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12501);
rxp1_1=(px*r21);
rxp1_2=(px*x12500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12502)));
IkReal gconst10=x12500;
IkReal gconst11=((1.0)*r10);
IkReal x12504=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12504))+(((-1.0)*r11*r21*x12504)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12505=((-1.0)*r11);
IkReal x12506=((-1.0)*r10);
CheckValue<IkReal> x12508 = IKatan2WithCheck(IkReal(x12505),IkReal(x12506),IKFAST_ATAN2_MAGTHRESH);
if(!x12508.valid){
continue;
}
IkReal x12507=((1.0)*(x12508.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12507)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12506);
rxp1_1=(px*r21);
rxp1_2=(px*x12505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12507)));
IkReal gconst10=x12505;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12510=IKPowWithIntegerCheck(r02,-1);
if(!x12510.valid){
continue;
}
IkReal x12509=x12510.value;
CheckValue<IkReal> x12511=IKPowWithIntegerCheck(cj3,-1);
if(!x12511.valid){
continue;
}
if( IKabs((x12509*(x12511.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12509)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12509*(x12511.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12509))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12509*(x12511.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12509));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12512=IKsin(j4);
IkReal x12513=IKcos(j4);
IkReal x12514=(cj3*r10);
IkReal x12515=((1.0)*gconst11);
IkReal x12516=(sj1*sj2);
IkReal x12517=(gconst11*sj3);
IkReal x12518=(cj3*r11);
IkReal x12519=(cj2*sj1);
IkReal x12520=(gconst10*r20);
IkReal x12521=(gconst10*sj3);
IkReal x12522=((1.0)*cj0);
IkReal x12523=((1.0)*sj0);
IkReal x12524=(cj1*sj2);
IkReal x12525=(cj3*r21);
IkReal x12526=((1.0)*cj1*cj2);
IkReal x12527=(r20*x12513);
IkReal x12528=(gconst10*x12512);
IkReal x12529=(gconst10*x12513);
IkReal x12530=(r02*x12512);
IkReal x12531=((1.0)*x12513);
evalcond[0]=((((-1.0)*x12523))+(((-1.0)*r02*x12531)));
evalcond[1]=((((-1.0)*r20*x12512*x12515))+((r21*x12528)));
evalcond[2]=(cj0+((r11*x12528))+(((-1.0)*r10*x12512*x12515)));
evalcond[3]=(((cj3*x12530))+((cj0*x12516))+(((-1.0)*cj1*cj2*x12522)));
evalcond[4]=((((-1.0)*x12522*x12524))+(((-1.0)*x12519*x12522))+(((-1.0)*sj3*x12530)));
evalcond[5]=(((sj3*x12520))+((r21*x12517))+((x12525*x12529))+x12519+x12524+(((-1.0)*cj3*x12515*x12527)));
evalcond[6]=((((-1.0)*x12526))+((x12517*x12527))+((gconst11*x12525))+(((-1.0)*r21*x12521*x12531))+x12516+((cj3*x12520)));
evalcond[7]=(((r10*x12521))+((sj0*x12516))+(((-1.0)*x12513*x12514*x12515))+((r11*x12517))+((x12518*x12529))+(((-1.0)*cj1*cj2*x12523)));
evalcond[8]=(((gconst11*x12518))+(((-1.0)*r11*x12521*x12531))+(((-1.0)*x12523*x12524))+(((-1.0)*x12519*x12523))+((r10*x12513*x12517))+((gconst10*x12514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12532=((1.0)*r20);
IkReal x12533=((1.0)*gconst11);
CheckValue<IkReal> x12534=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12533))),-1);
if(!x12534.valid){
continue;
}
CheckValue<IkReal> x12535=IKPowWithIntegerCheck((((cj3*gconst10*r21))+(((-1.0)*cj3*gconst11*x12532))),-1);
if(!x12535.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12534.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12535.value)*(((((-1.0)*gconst10*sj3*x12532))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12534.value)))+IKsqr(((x12535.value)*(((((-1.0)*gconst10*sj3*x12532))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12533))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12534.value)), ((x12535.value)*(((((-1.0)*gconst10*sj3*x12532))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12533))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12536=IKsin(j4);
IkReal x12537=IKcos(j4);
IkReal x12538=(cj3*r10);
IkReal x12539=((1.0)*gconst11);
IkReal x12540=(sj1*sj2);
IkReal x12541=(gconst11*sj3);
IkReal x12542=(cj3*r11);
IkReal x12543=(cj2*sj1);
IkReal x12544=(gconst10*r20);
IkReal x12545=(gconst10*sj3);
IkReal x12546=((1.0)*cj0);
IkReal x12547=((1.0)*sj0);
IkReal x12548=(cj1*sj2);
IkReal x12549=(cj3*r21);
IkReal x12550=((1.0)*cj1*cj2);
IkReal x12551=(r20*x12537);
IkReal x12552=(gconst10*x12536);
IkReal x12553=(gconst10*x12537);
IkReal x12554=(r02*x12536);
IkReal x12555=((1.0)*x12537);
evalcond[0]=((((-1.0)*r02*x12555))+(((-1.0)*x12547)));
evalcond[1]=((((-1.0)*r20*x12536*x12539))+((r21*x12552)));
evalcond[2]=((((-1.0)*r10*x12536*x12539))+cj0+((r11*x12552)));
evalcond[3]=(((cj3*x12554))+(((-1.0)*cj1*cj2*x12546))+((cj0*x12540)));
evalcond[4]=((((-1.0)*x12546*x12548))+(((-1.0)*sj3*x12554))+(((-1.0)*x12543*x12546)));
evalcond[5]=(((x12549*x12553))+((sj3*x12544))+x12543+x12548+(((-1.0)*cj3*x12539*x12551))+((r21*x12541)));
evalcond[6]=(((cj3*x12544))+((gconst11*x12549))+((x12541*x12551))+x12540+(((-1.0)*r21*x12545*x12555))+(((-1.0)*x12550)));
evalcond[7]=(((x12542*x12553))+((r11*x12541))+((r10*x12545))+((sj0*x12540))+(((-1.0)*x12537*x12538*x12539))+(((-1.0)*cj1*cj2*x12547)));
evalcond[8]=((((-1.0)*x12547*x12548))+((r10*x12537*x12541))+(((-1.0)*r11*x12545*x12555))+((gconst11*x12542))+((gconst10*x12538))+(((-1.0)*x12543*x12547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12556=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12556.valid){
continue;
}
CheckValue<IkReal> x12557=IKPowWithIntegerCheck(r02,-1);
if(!x12557.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12556.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12557.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12556.value)))+IKsqr(((-1.0)*sj0*(x12557.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12556.value)), ((-1.0)*sj0*(x12557.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12558=IKsin(j4);
IkReal x12559=IKcos(j4);
IkReal x12560=(cj3*r10);
IkReal x12561=((1.0)*gconst11);
IkReal x12562=(sj1*sj2);
IkReal x12563=(gconst11*sj3);
IkReal x12564=(cj3*r11);
IkReal x12565=(cj2*sj1);
IkReal x12566=(gconst10*r20);
IkReal x12567=(gconst10*sj3);
IkReal x12568=((1.0)*cj0);
IkReal x12569=((1.0)*sj0);
IkReal x12570=(cj1*sj2);
IkReal x12571=(cj3*r21);
IkReal x12572=((1.0)*cj1*cj2);
IkReal x12573=(r20*x12559);
IkReal x12574=(gconst10*x12558);
IkReal x12575=(gconst10*x12559);
IkReal x12576=(r02*x12558);
IkReal x12577=((1.0)*x12559);
evalcond[0]=((((-1.0)*r02*x12577))+(((-1.0)*x12569)));
evalcond[1]=(((r21*x12574))+(((-1.0)*r20*x12558*x12561)));
evalcond[2]=(cj0+((r11*x12574))+(((-1.0)*r10*x12558*x12561)));
evalcond[3]=((((-1.0)*cj1*cj2*x12568))+((cj0*x12562))+((cj3*x12576)));
evalcond[4]=((((-1.0)*x12565*x12568))+(((-1.0)*sj3*x12576))+(((-1.0)*x12568*x12570)));
evalcond[5]=((((-1.0)*cj3*x12561*x12573))+((x12571*x12575))+((r21*x12563))+x12565+x12570+((sj3*x12566)));
evalcond[6]=(((cj3*x12566))+((x12563*x12573))+((gconst11*x12571))+(((-1.0)*x12572))+(((-1.0)*r21*x12567*x12577))+x12562);
evalcond[7]=(((r11*x12563))+((sj0*x12562))+((r10*x12567))+(((-1.0)*cj1*cj2*x12569))+(((-1.0)*x12559*x12560*x12561))+((x12564*x12575)));
evalcond[8]=(((r10*x12559*x12563))+(((-1.0)*x12565*x12569))+((gconst11*x12564))+(((-1.0)*x12569*x12570))+((gconst10*x12560))+(((-1.0)*r11*x12567*x12577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12578=((-1.0)*r11);
CheckValue<IkReal> x12581 = IKatan2WithCheck(IkReal(x12578),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12581.valid){
continue;
}
IkReal x12579=((1.0)*(x12581.value));
IkReal x12580=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12579)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12579)));
IkReal gconst10=(x12578*x12580);
IkReal gconst11=((1.0)*r10*x12580);
IkReal x12582=r12*r12;
IkReal x12583=((1.0)*sj0);
IkReal x12584=(cj0*r02);
IkReal x12585=x11904;
j4eval[0]=((IKabs((((r12*x12584*x12585))+((sj0*x12582*x12585))+(((-1.0)*x12583*x12585)))))+(IKabs(((((-1.0)*r12*x12583))+(((-1.0)*x12584))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12586=((1.0)*r12);
IkReal x12587=(sj1*sj2);
IkReal x12588=((1.0)*r21);
IkReal x12589=(cj3*gconst11);
IkReal x12590=(r11*sj3);
IkReal x12591=(gconst11*r20);
IkReal x12592=((1.0)*sj3);
IkReal x12593=(cj1*cj2);
IkReal x12594=(gconst10*r21*sj3);
IkReal x12595=(cj3*gconst10*r20);
CheckValue<IkReal> x12596=IKPowWithIntegerCheck((((gconst11*r10*x12594))+(((-1.0)*gconst11*r10*x12591*x12592))+((gconst10*x12590*x12591))+(((-1.0)*x12588*x12590*(gconst10*gconst10)))),-1);
if(!x12596.valid){
continue;
}
CheckValue<IkReal> x12597=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12588))+((sj3*x12591))),-1);
if(!x12597.valid){
continue;
}
if( IKabs(((x12596.value)*((((r12*x12593))+((cj0*x12594))+(((-1.0)*x12586*x12587))+(((-1.0)*cj0*x12591*x12592))+(((-1.0)*x12586*x12595))+(((-1.0)*r21*x12586*x12589)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12597.value)*(((((-1.0)*x12588*x12589))+(((-1.0)*x12587))+x12593+(((-1.0)*x12595)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12596.value)*((((r12*x12593))+((cj0*x12594))+(((-1.0)*x12586*x12587))+(((-1.0)*cj0*x12591*x12592))+(((-1.0)*x12586*x12595))+(((-1.0)*r21*x12586*x12589))))))+IKsqr(((x12597.value)*(((((-1.0)*x12588*x12589))+(((-1.0)*x12587))+x12593+(((-1.0)*x12595))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12596.value)*((((r12*x12593))+((cj0*x12594))+(((-1.0)*x12586*x12587))+(((-1.0)*cj0*x12591*x12592))+(((-1.0)*x12586*x12595))+(((-1.0)*r21*x12586*x12589))))), ((x12597.value)*(((((-1.0)*x12588*x12589))+(((-1.0)*x12587))+x12593+(((-1.0)*x12595))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12598=IKsin(j4);
IkReal x12599=IKcos(j4);
IkReal x12600=(cj3*r10);
IkReal x12601=(gconst11*r20);
IkReal x12602=(gconst11*sj3);
IkReal x12603=(sj1*sj2);
IkReal x12604=(cj3*r11);
IkReal x12605=(r10*sj3);
IkReal x12606=(gconst10*r01);
IkReal x12607=(gconst10*sj3);
IkReal x12608=(cj2*sj1);
IkReal x12609=((1.0)*sj0);
IkReal x12610=(cj1*sj2);
IkReal x12611=(gconst10*r21);
IkReal x12612=(cj3*gconst10);
IkReal x12613=(cj3*gconst11);
IkReal x12614=((1.0)*cj0);
IkReal x12615=((1.0)*x12598);
IkReal x12616=((1.0)*cj1*cj2);
IkReal x12617=(gconst11*x12599);
IkReal x12618=(sj3*x12599);
IkReal x12619=(gconst10*x12598);
IkReal x12620=((1.0)*x12599);
IkReal x12621=(cj3*x12599);
IkReal x12622=(cj3*x12598);
evalcond[0]=(((x12598*x12611))+(((-1.0)*x12601*x12615)));
evalcond[1]=(cj0+(((-1.0)*r12*x12620))+(((-1.0)*gconst11*r10*x12615))+((r11*x12619)));
evalcond[2]=((((-1.0)*r02*x12620))+((x12598*x12606))+(((-1.0)*x12609))+(((-1.0)*gconst11*r00*x12615)));
evalcond[3]=(((r20*x12607))+((x12611*x12621))+(((-1.0)*cj3*x12601*x12620))+x12608+x12610+((r21*x12602)));
evalcond[4]=(((x12601*x12618))+((r21*x12613))+((r20*x12612))+x12603+(((-1.0)*r21*x12607*x12620))+(((-1.0)*x12616)));
evalcond[5]=(((r02*x12622))+((r00*x12607))+((x12606*x12621))+((r01*x12602))+((cj0*x12603))+(((-1.0)*r00*x12613*x12620))+(((-1.0)*cj1*cj2*x12614)));
evalcond[6]=(((gconst10*x12605))+((r11*x12602))+(((-1.0)*x12600*x12617))+((r12*x12622))+((sj0*x12603))+((gconst10*x12599*x12604))+(((-1.0)*cj1*cj2*x12609)));
evalcond[7]=(((r00*x12599*x12602))+(((-1.0)*x12606*x12618))+(((-1.0)*x12610*x12614))+(((-1.0)*r02*sj3*x12615))+((r00*x12612))+(((-1.0)*x12608*x12614))+((r01*x12613)));
evalcond[8]=(((r10*x12599*x12602))+((gconst10*x12600))+(((-1.0)*x12608*x12609))+(((-1.0)*x12609*x12610))+((gconst11*x12604))+(((-1.0)*r11*x12607*x12620))+(((-1.0)*r12*sj3*x12615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12623=((1.0)*sj0);
IkReal x12624=((1.0)*gconst10);
CheckValue<IkReal> x12625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12624))+(((-1.0)*gconst11*r21)))),-1);
if(!x12625.valid){
continue;
}
CheckValue<IkReal> x12626 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12623))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12624))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12623))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12625.value)))+(x12626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12627=IKsin(j4);
IkReal x12628=IKcos(j4);
IkReal x12629=(cj3*r10);
IkReal x12630=(gconst11*r20);
IkReal x12631=(gconst11*sj3);
IkReal x12632=(sj1*sj2);
IkReal x12633=(cj3*r11);
IkReal x12634=(r10*sj3);
IkReal x12635=(gconst10*r01);
IkReal x12636=(gconst10*sj3);
IkReal x12637=(cj2*sj1);
IkReal x12638=((1.0)*sj0);
IkReal x12639=(cj1*sj2);
IkReal x12640=(gconst10*r21);
IkReal x12641=(cj3*gconst10);
IkReal x12642=(cj3*gconst11);
IkReal x12643=((1.0)*cj0);
IkReal x12644=((1.0)*x12627);
IkReal x12645=((1.0)*cj1*cj2);
IkReal x12646=(gconst11*x12628);
IkReal x12647=(sj3*x12628);
IkReal x12648=(gconst10*x12627);
IkReal x12649=((1.0)*x12628);
IkReal x12650=(cj3*x12628);
IkReal x12651=(cj3*x12627);
evalcond[0]=(((x12627*x12640))+(((-1.0)*x12630*x12644)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12644))+(((-1.0)*r12*x12649))+((r11*x12648)));
evalcond[2]=((((-1.0)*r02*x12649))+((x12627*x12635))+(((-1.0)*gconst11*r00*x12644))+(((-1.0)*x12638)));
evalcond[3]=((((-1.0)*cj3*x12630*x12649))+((x12640*x12650))+((r20*x12636))+x12637+x12639+((r21*x12631)));
evalcond[4]=(((x12630*x12647))+((r20*x12641))+(((-1.0)*r21*x12636*x12649))+x12632+(((-1.0)*x12645))+((r21*x12642)));
evalcond[5]=((((-1.0)*r00*x12642*x12649))+((r02*x12651))+((x12635*x12650))+((r01*x12631))+((cj0*x12632))+((r00*x12636))+(((-1.0)*cj1*cj2*x12643)));
evalcond[6]=(((r11*x12631))+(((-1.0)*x12629*x12646))+((gconst10*x12628*x12633))+(((-1.0)*cj1*cj2*x12638))+((sj0*x12632))+((r12*x12651))+((gconst10*x12634)));
evalcond[7]=((((-1.0)*x12639*x12643))+(((-1.0)*x12637*x12643))+(((-1.0)*x12635*x12647))+((r00*x12641))+((r01*x12642))+((r00*x12628*x12631))+(((-1.0)*r02*sj3*x12644)));
evalcond[8]=((((-1.0)*r11*x12636*x12649))+(((-1.0)*x12637*x12638))+((r10*x12628*x12631))+(((-1.0)*r12*sj3*x12644))+(((-1.0)*x12638*x12639))+((gconst10*x12629))+((gconst11*x12633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12652=gconst10*gconst10;
IkReal x12653=r21*r21;
IkReal x12654=gconst11*gconst11;
IkReal x12655=r20*r20;
IkReal x12656=((1.0)*cj3);
IkReal x12657=(r20*sj3);
IkReal x12658=(gconst10*gconst11);
IkReal x12659=(cj2*sj1);
IkReal x12660=(gconst10*r21);
IkReal x12661=(cj1*sj2);
IkReal x12662=((1.0)*gconst11*r20);
CheckValue<IkReal> x12663 = IKatan2WithCheck(IkReal((((gconst10*r22*x12657))+((gconst11*r21*r22*sj3))+((r22*x12659))+((r22*x12661)))),IkReal(((((-1.0)*x12661*x12662))+((x12659*x12660))+(((-1.0)*sj3*x12655*x12658))+((sj3*x12653*x12658))+(((-1.0)*x12659*x12662))+(((-1.0)*r21*x12654*x12657))+((r21*x12652*x12657))+((x12660*x12661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12663.valid){
continue;
}
CheckValue<IkReal> x12664=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12654*x12655*x12656))+(((2.0)*cj3*r20*r21*x12658))+(((-1.0)*x12652*x12653*x12656))+(((-1.0)*x12656*(r22*r22))))),-1);
if(!x12664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12663.value)+(((1.5707963267949)*(x12664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12665=IKsin(j4);
IkReal x12666=IKcos(j4);
IkReal x12667=(cj3*r10);
IkReal x12668=(gconst11*r20);
IkReal x12669=(gconst11*sj3);
IkReal x12670=(sj1*sj2);
IkReal x12671=(gconst11*r00);
IkReal x12672=(cj3*r11);
IkReal x12673=(gconst10*sj3);
IkReal x12674=(cj2*sj1);
IkReal x12675=(cj3*r01);
IkReal x12676=((1.0)*sj0);
IkReal x12677=(cj1*sj2);
IkReal x12678=(cj3*r21);
IkReal x12679=(cj3*gconst10);
IkReal x12680=((1.0)*cj0);
IkReal x12681=((1.0)*x12666);
IkReal x12682=((1.0)*x12665);
IkReal x12683=((1.0)*cj1*cj2);
IkReal x12684=(cj3*x12665);
IkReal x12685=(gconst10*x12665);
IkReal x12686=(gconst10*x12666);
evalcond[0]=(((r21*x12685))+(((-1.0)*r22*x12681))+(((-1.0)*x12668*x12682)));
evalcond[1]=(cj0+((r11*x12685))+(((-1.0)*gconst11*r10*x12682))+(((-1.0)*r12*x12681)));
evalcond[2]=(((r01*x12685))+(((-1.0)*x12676))+(((-1.0)*r02*x12681))+(((-1.0)*x12671*x12682)));
evalcond[3]=(((r20*x12673))+((r21*x12669))+((x12678*x12686))+(((-1.0)*cj3*x12668*x12681))+((r22*x12684))+x12677+x12674);
evalcond[4]=(((r20*x12679))+(((-1.0)*r22*sj3*x12682))+(((-1.0)*r21*x12673*x12681))+((gconst11*x12678))+(((-1.0)*x12683))+x12670+((sj3*x12666*x12668)));
evalcond[5]=((((-1.0)*cj3*x12671*x12681))+((x12675*x12686))+((r02*x12684))+((r00*x12673))+((r01*x12669))+(((-1.0)*cj1*cj2*x12680))+((cj0*x12670)));
evalcond[6]=(((r10*x12673))+((sj0*x12670))+((r12*x12684))+((x12672*x12686))+(((-1.0)*gconst11*x12667*x12681))+((r11*x12669))+(((-1.0)*cj1*cj2*x12676)));
evalcond[7]=((((-1.0)*x12674*x12680))+((gconst11*x12675))+((r00*x12666*x12669))+(((-1.0)*r02*sj3*x12682))+(((-1.0)*r01*x12673*x12681))+(((-1.0)*x12677*x12680))+((r00*x12679)));
evalcond[8]=((((-1.0)*x12676*x12677))+((gconst11*x12672))+((gconst10*x12667))+((r10*x12666*x12669))+(((-1.0)*x12674*x12676))+(((-1.0)*r11*x12673*x12681))+(((-1.0)*r12*sj3*x12682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12687=((1.0)*sj0);
IkReal x12688=((1.0)*gconst10);
CheckValue<IkReal> x12689 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12687)))),IkReal(((((-1.0)*cj0*r01*x12688))+(((-1.0)*gconst10*r11*x12687))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12689.valid){
continue;
}
CheckValue<IkReal> x12690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12688))+(((-1.0)*gconst11*r21)))),-1);
if(!x12690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12689.value)+(((1.5707963267949)*(x12690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12691=IKsin(j4);
IkReal x12692=IKcos(j4);
IkReal x12693=(cj3*r10);
IkReal x12694=(gconst11*r20);
IkReal x12695=(gconst11*sj3);
IkReal x12696=(sj1*sj2);
IkReal x12697=(gconst11*r00);
IkReal x12698=(cj3*r11);
IkReal x12699=(gconst10*sj3);
IkReal x12700=(cj2*sj1);
IkReal x12701=(cj3*r01);
IkReal x12702=((1.0)*sj0);
IkReal x12703=(cj1*sj2);
IkReal x12704=(cj3*r21);
IkReal x12705=(cj3*gconst10);
IkReal x12706=((1.0)*cj0);
IkReal x12707=((1.0)*x12692);
IkReal x12708=((1.0)*x12691);
IkReal x12709=((1.0)*cj1*cj2);
IkReal x12710=(cj3*x12691);
IkReal x12711=(gconst10*x12691);
IkReal x12712=(gconst10*x12692);
evalcond[0]=(((r21*x12711))+(((-1.0)*r22*x12707))+(((-1.0)*x12694*x12708)));
evalcond[1]=(cj0+((r11*x12711))+(((-1.0)*gconst11*r10*x12708))+(((-1.0)*r12*x12707)));
evalcond[2]=((((-1.0)*x12702))+(((-1.0)*x12697*x12708))+((r01*x12711))+(((-1.0)*r02*x12707)));
evalcond[3]=(((r22*x12710))+((r21*x12695))+x12703+x12700+(((-1.0)*cj3*x12694*x12707))+((r20*x12699))+((x12704*x12712)));
evalcond[4]=((((-1.0)*r21*x12699*x12707))+((gconst11*x12704))+((sj3*x12692*x12694))+(((-1.0)*x12709))+((r20*x12705))+(((-1.0)*r22*sj3*x12708))+x12696);
evalcond[5]=(((r00*x12699))+((cj0*x12696))+((r02*x12710))+(((-1.0)*cj1*cj2*x12706))+((x12701*x12712))+(((-1.0)*cj3*x12697*x12707))+((r01*x12695)));
evalcond[6]=(((x12698*x12712))+((sj0*x12696))+((r12*x12710))+((r10*x12699))+(((-1.0)*cj1*cj2*x12702))+(((-1.0)*gconst11*x12693*x12707))+((r11*x12695)));
evalcond[7]=((((-1.0)*x12703*x12706))+((gconst11*x12701))+(((-1.0)*r01*x12699*x12707))+((r00*x12705))+(((-1.0)*x12700*x12706))+((r00*x12692*x12695))+(((-1.0)*r02*sj3*x12708)));
evalcond[8]=((((-1.0)*x12702*x12703))+(((-1.0)*r11*x12699*x12707))+((gconst10*x12693))+((gconst11*x12698))+(((-1.0)*x12700*x12702))+((r10*x12692*x12695))+(((-1.0)*r12*sj3*x12708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12713=((1.0)*gconst11);
CheckValue<IkReal> x12714 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12714.valid){
continue;
}
CheckValue<IkReal> x12715=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12713)))),-1);
if(!x12715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12714.value)+(((1.5707963267949)*(x12715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12716=IKsin(j4);
IkReal x12717=IKcos(j4);
IkReal x12718=(cj3*r10);
IkReal x12719=(gconst11*r20);
IkReal x12720=(gconst11*sj3);
IkReal x12721=(sj1*sj2);
IkReal x12722=(gconst11*r00);
IkReal x12723=(cj3*r11);
IkReal x12724=(gconst10*sj3);
IkReal x12725=(cj2*sj1);
IkReal x12726=(cj3*r01);
IkReal x12727=((1.0)*sj0);
IkReal x12728=(cj1*sj2);
IkReal x12729=(cj3*r21);
IkReal x12730=(cj3*gconst10);
IkReal x12731=((1.0)*cj0);
IkReal x12732=((1.0)*x12717);
IkReal x12733=((1.0)*x12716);
IkReal x12734=((1.0)*cj1*cj2);
IkReal x12735=(cj3*x12716);
IkReal x12736=(gconst10*x12716);
IkReal x12737=(gconst10*x12717);
evalcond[0]=(((r21*x12736))+(((-1.0)*r22*x12732))+(((-1.0)*x12719*x12733)));
evalcond[1]=((((-1.0)*gconst11*r10*x12733))+((r11*x12736))+cj0+(((-1.0)*r12*x12732)));
evalcond[2]=((((-1.0)*r02*x12732))+(((-1.0)*x12727))+(((-1.0)*x12722*x12733))+((r01*x12736)));
evalcond[3]=(((r21*x12720))+((r20*x12724))+((x12729*x12737))+x12728+x12725+(((-1.0)*cj3*x12719*x12732))+((r22*x12735)));
evalcond[4]=(((sj3*x12717*x12719))+(((-1.0)*x12734))+(((-1.0)*r21*x12724*x12732))+((r20*x12730))+((gconst11*x12729))+x12721+(((-1.0)*r22*sj3*x12733)));
evalcond[5]=(((cj0*x12721))+(((-1.0)*cj3*x12722*x12732))+((r02*x12735))+(((-1.0)*cj1*cj2*x12731))+((r00*x12724))+((r01*x12720))+((x12726*x12737)));
evalcond[6]=(((x12723*x12737))+((r11*x12720))+((r12*x12735))+(((-1.0)*cj1*cj2*x12727))+((r10*x12724))+((sj0*x12721))+(((-1.0)*gconst11*x12718*x12732)));
evalcond[7]=(((r00*x12717*x12720))+(((-1.0)*r02*sj3*x12733))+(((-1.0)*x12728*x12731))+((gconst11*x12726))+(((-1.0)*x12725*x12731))+((r00*x12730))+(((-1.0)*r01*x12724*x12732)));
evalcond[8]=((((-1.0)*r12*sj3*x12733))+(((-1.0)*x12727*x12728))+((gconst11*x12723))+(((-1.0)*r11*x12724*x12732))+((gconst10*x12718))+(((-1.0)*x12725*x12727))+((r10*x12717*x12720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12738=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12738;
j4eval[1]=IKsign(x12738);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12739=((1.0)*cj5);
IkReal x12740=((((-1.0)*r01*x12739))+(((-1.0)*r00*sj5)));
j4eval[0]=x12740;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12739))))));
j4eval[2]=IKsign(x12740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12741=cj5*cj5;
IkReal x12742=(cj3*r21);
IkReal x12743=(cj5*sj5);
IkReal x12744=((1.0)*cj3);
IkReal x12745=(((cj3*r11*r20*x12743))+(((-1.0)*r12*r22*x12744))+(((-1.0)*r11*x12742))+((r10*x12742*x12743))+((r11*x12741*x12742))+(((-1.0)*r10*r20*x12741*x12744)));
j4eval[0]=x12745;
j4eval[1]=IKsign(x12745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12746=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12746;
j4eval[1]=IKsign(x12746);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12747=((1.0)*cj5);
IkReal x12748=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12747)));
j4eval[0]=x12748;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12747))))));
j4eval[2]=IKsign(x12748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12749=cj5*cj5;
IkReal x12750=r11*r11;
IkReal x12751=(r11*sj5);
IkReal x12752=(cj5*r10);
IkReal x12753=((r12*r12)+((x12749*(r10*r10)))+x12750+(((-1.0)*x12749*x12750))+(((-2.0)*x12751*x12752)));
j4eval[0]=x12753;
j4eval[1]=IKsign(x12753);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12751))+x12752))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12754=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12754);
rxp1_1=(px*r21);
rxp1_2=(r11*x12754);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12755=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12755);
rxp1_1=(px*r21);
rxp1_2=(r11*x12755);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12756=((1.0)*sj1);
CheckValue<IkReal> x12757=IKPowWithIntegerCheck(r02,-1);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12758.valid){
continue;
}
if( IKabs(((x12757.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12756)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12758.value)*(((((-1.0)*sj2*x12756))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12757.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12756))))))+IKsqr(((x12758.value)*(((((-1.0)*sj2*x12756))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12757.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12756))))), ((x12758.value)*(((((-1.0)*sj2*x12756))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12759=IKsin(j4);
IkReal x12760=IKcos(j4);
IkReal x12761=(cj5*r20);
IkReal x12762=((1.0)*cj2);
IkReal x12763=(cj5*r10);
IkReal x12764=((1.0)*x12759);
IkReal x12765=(sj5*x12759);
IkReal x12766=((1.0)*sj5*x12760);
evalcond[0]=((-1.0)*r02*x12760);
evalcond[1]=(((r21*x12765))+(((-1.0)*x12761*x12764)));
evalcond[2]=((((-1.0)*r11*x12766))+((x12760*x12763)));
evalcond[3]=((1.0)+(((-1.0)*x12763*x12764))+((r11*x12765)));
evalcond[4]=((((-1.0)*sj1*x12762))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12764)));
evalcond[5]=((((-1.0)*r21*x12766))+((sj1*sj2))+((x12760*x12761))+(((-1.0)*cj1*x12762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12767=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12767.valid){
continue;
}
CheckValue<IkReal> x12768=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12768.valid){
continue;
}
if( IKabs(((-1.0)*(x12767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12767.value)))+IKsqr(((x12768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12767.value)), ((x12768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12769=IKsin(j4);
IkReal x12770=IKcos(j4);
IkReal x12771=(cj5*r20);
IkReal x12772=((1.0)*cj2);
IkReal x12773=(cj5*r10);
IkReal x12774=((1.0)*x12769);
IkReal x12775=(sj5*x12769);
IkReal x12776=((1.0)*sj5*x12770);
evalcond[0]=((-1.0)*r02*x12770);
evalcond[1]=((((-1.0)*x12771*x12774))+((r21*x12775)));
evalcond[2]=(((x12770*x12773))+(((-1.0)*r11*x12776)));
evalcond[3]=((1.0)+(((-1.0)*x12773*x12774))+((r11*x12775)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12774))+(((-1.0)*sj1*x12772)));
evalcond[5]=(((x12770*x12771))+(((-1.0)*cj1*x12772))+(((-1.0)*r21*x12776))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12777=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12777);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12777);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12778=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12778);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12778);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12779=IKPowWithIntegerCheck(r22,-1);
if(!x12779.valid){
continue;
}
CheckValue<IkReal> x12780=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12780.valid){
continue;
}
if( IKabs(((x12779.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12780.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12779.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12780.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12779.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12780.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12781=IKsin(j4);
IkReal x12782=IKcos(j4);
IkReal x12783=((1.0)*cj2);
IkReal x12784=(cj5*x12782);
IkReal x12785=(sj5*x12781);
IkReal x12786=((1.0)*sj5*x12782);
IkReal x12787=((1.0)*cj5*x12781);
evalcond[0]=((-1.0)*r22*x12782);
evalcond[1]=(((r01*x12785))+(((-1.0)*r00*x12787)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12783))+(((-1.0)*r22*x12781)));
evalcond[3]=(((r10*x12784))+(((-1.0)*r11*x12786)));
evalcond[4]=((1.0)+((r11*x12785))+(((-1.0)*r10*x12787)));
evalcond[5]=((((-1.0)*r01*x12786))+(((-1.0)*cj1*sj2))+((r00*x12784))+(((-1.0)*sj1*x12783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12788=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12788.valid){
continue;
}
CheckValue<IkReal> x12789=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12789.valid){
continue;
}
if( IKabs(((-1.0)*(x12788.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12789.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12788.value)))+IKsqr(((x12789.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12788.value)), ((x12789.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12790=IKsin(j4);
IkReal x12791=IKcos(j4);
IkReal x12792=((1.0)*cj2);
IkReal x12793=(cj5*x12791);
IkReal x12794=(sj5*x12790);
IkReal x12795=((1.0)*sj5*x12791);
IkReal x12796=((1.0)*cj5*x12790);
evalcond[0]=((-1.0)*r22*x12791);
evalcond[1]=(((r01*x12794))+(((-1.0)*r00*x12796)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12792))+(((-1.0)*r22*x12790)));
evalcond[3]=(((r10*x12793))+(((-1.0)*r11*x12795)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12796))+((r11*x12794)));
evalcond[5]=((((-1.0)*sj1*x12792))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x12795))+((r00*x12793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12797=cj5*cj5;
IkReal x12798=r11*r11;
IkReal x12799=(cj5*r10);
IkReal x12800=(r11*sj5);
CheckValue<IkReal> x12801 = IKatan2WithCheck(IkReal((x12799+(((-1.0)*x12800)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12801.valid){
continue;
}
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12799*x12800))+x12798+(((-1.0)*x12797*x12798))+((x12797*(r10*r10))))),-1);
if(!x12802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12801.value)+(((1.5707963267949)*(x12802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12803=IKsin(j4);
IkReal x12804=IKcos(j4);
IkReal x12805=(cj5*r10);
IkReal x12806=(r01*sj5);
IkReal x12807=((1.0)*cj2);
IkReal x12808=(cj5*r00);
IkReal x12809=(cj5*r20);
IkReal x12810=((1.0)*x12804);
IkReal x12811=((1.0)*x12803);
IkReal x12812=(sj5*x12803);
evalcond[0]=((((-1.0)*x12809*x12811))+((r21*x12812))+(((-1.0)*r22*x12810)));
evalcond[1]=((((-1.0)*r02*x12810))+((x12803*x12806))+(((-1.0)*x12808*x12811)));
evalcond[2]=((((-1.0)*r12*x12811))+((x12804*x12805))+(((-1.0)*r11*sj5*x12810)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12810))+(((-1.0)*x12805*x12811))+((r11*x12812)));
evalcond[4]=((((-1.0)*r21*sj5*x12810))+((sj1*sj2))+(((-1.0)*r22*x12811))+(((-1.0)*cj1*x12807))+((x12804*x12809)));
evalcond[5]=((((-1.0)*sj1*x12807))+(((-1.0)*r02*x12811))+(((-1.0)*cj1*sj2))+(((-1.0)*x12806*x12810))+((x12804*x12808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12813=((1.0)*cj5);
CheckValue<IkReal> x12814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12813)))),-1);
if(!x12814.valid){
continue;
}
CheckValue<IkReal> x12815 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12814.value)))+(x12815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12816=IKsin(j4);
IkReal x12817=IKcos(j4);
IkReal x12818=(cj5*r10);
IkReal x12819=(r01*sj5);
IkReal x12820=((1.0)*cj2);
IkReal x12821=(cj5*r00);
IkReal x12822=(cj5*r20);
IkReal x12823=((1.0)*x12817);
IkReal x12824=((1.0)*x12816);
IkReal x12825=(sj5*x12816);
evalcond[0]=((((-1.0)*r22*x12823))+(((-1.0)*x12822*x12824))+((r21*x12825)));
evalcond[1]=((((-1.0)*r02*x12823))+((x12816*x12819))+(((-1.0)*x12821*x12824)));
evalcond[2]=((((-1.0)*r11*sj5*x12823))+(((-1.0)*r12*x12824))+((x12817*x12818)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12823))+((r11*x12825))+(((-1.0)*x12818*x12824)));
evalcond[4]=((((-1.0)*r22*x12824))+(((-1.0)*cj1*x12820))+((sj1*sj2))+(((-1.0)*r21*sj5*x12823))+((x12817*x12822)));
evalcond[5]=((((-1.0)*r02*x12824))+(((-1.0)*cj1*sj2))+((x12817*x12821))+(((-1.0)*sj1*x12820))+(((-1.0)*x12819*x12823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12826=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12826.valid){
continue;
}
CheckValue<IkReal> x12827 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12826.value)))+(x12827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12828=IKsin(j4);
IkReal x12829=IKcos(j4);
IkReal x12830=(cj5*r10);
IkReal x12831=(r01*sj5);
IkReal x12832=((1.0)*cj2);
IkReal x12833=(cj5*r00);
IkReal x12834=(cj5*r20);
IkReal x12835=((1.0)*x12829);
IkReal x12836=((1.0)*x12828);
IkReal x12837=(sj5*x12828);
evalcond[0]=(((r21*x12837))+(((-1.0)*r22*x12835))+(((-1.0)*x12834*x12836)));
evalcond[1]=((((-1.0)*x12833*x12836))+((x12828*x12831))+(((-1.0)*r02*x12835)));
evalcond[2]=((((-1.0)*r11*sj5*x12835))+(((-1.0)*r12*x12836))+((x12829*x12830)));
evalcond[3]=((1.0)+((r11*x12837))+(((-1.0)*r12*x12835))+(((-1.0)*x12830*x12836)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x12836))+(((-1.0)*r21*sj5*x12835))+(((-1.0)*cj1*x12832))+((x12829*x12834)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12836))+(((-1.0)*sj1*x12832))+(((-1.0)*x12831*x12835))+((x12829*x12833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12838=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12838;
j4eval[1]=IKsign(x12838);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12839=((1.0)*cj5);
IkReal x12840=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12839)));
j4eval[0]=x12840;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12839))))));
j4eval[2]=IKsign(x12840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12841=(sj1*sj2);
IkReal x12842=(cj5*r10);
IkReal x12843=(r11*sj5);
IkReal x12844=(cj1*cj2);
IkReal x12845=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12845;
j4eval[1]=((IKabs(((((-1.0)*r12*x12841))+((r12*x12844)))))+(IKabs((((x12842*x12844))+(((-1.0)*x12841*x12842))+((x12841*x12843))+(((-1.0)*x12843*x12844))))));
j4eval[2]=IKsign(x12845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12846=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12846);
rxp1_1=(px*r21);
rxp1_2=(r11*x12846);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12847=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12847);
rxp1_1=(px*r21);
rxp1_2=(r11*x12847);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12848=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12848)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12848)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12849=((1.0)*cj5);
CheckValue<IkReal> x12850=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12849))),-1);
if(!x12850.valid){
continue;
}
CheckValue<IkReal> x12851=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12849))),-1);
if(!x12851.valid){
continue;
}
if( IKabs(((-1.0)*(x12850.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12851.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12850.value)))+IKsqr(((x12851.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12850.value)), ((x12851.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12852=IKsin(j4);
IkReal x12853=IKcos(j4);
IkReal x12854=((1.0)*cj2);
IkReal x12855=(r21*sj5);
IkReal x12856=(r11*sj5);
IkReal x12857=((1.0)*cj5*x12852);
IkReal x12858=((1.0)*cj5*x12853);
evalcond[0]=((-1.0)*r02*x12853);
evalcond[1]=(((x12852*x12855))+(((-1.0)*r20*x12857)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r02*x12852))+(((-1.0)*sj1*x12854)));
evalcond[3]=(((x12853*x12856))+(((-1.0)*r10*x12858)));
evalcond[4]=((1.0)+((x12852*x12856))+(((-1.0)*r10*x12857)));
evalcond[5]=(((x12853*x12855))+(((-1.0)*cj1*x12854))+((sj1*sj2))+(((-1.0)*r20*x12858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12859=IKPowWithIntegerCheck(r02,-1);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12860.valid){
continue;
}
if( IKabs(((x12859.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12860.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12859.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12860.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12859.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12860.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12861=IKsin(j4);
IkReal x12862=IKcos(j4);
IkReal x12863=((1.0)*cj2);
IkReal x12864=(r21*sj5);
IkReal x12865=(r11*sj5);
IkReal x12866=((1.0)*cj5*x12861);
IkReal x12867=((1.0)*cj5*x12862);
evalcond[0]=((-1.0)*r02*x12862);
evalcond[1]=(((x12861*x12864))+(((-1.0)*r20*x12866)));
evalcond[2]=((((-1.0)*sj1*x12863))+(((-1.0)*cj1*sj2))+((r02*x12861)));
evalcond[3]=((((-1.0)*r10*x12867))+((x12862*x12865)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12866))+((x12861*x12865)));
evalcond[5]=(((sj1*sj2))+((x12862*x12864))+(((-1.0)*cj1*x12863))+(((-1.0)*r20*x12867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12868=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12868;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12869=((1.0)*cj5);
IkReal x12870=((((-1.0)*r21*x12869))+(((-1.0)*r20*sj5)));
j4eval[0]=x12870;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12869))+((r11*sj5))))));
j4eval[2]=IKsign(x12870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12871=cj5*cj5;
IkReal x12872=(r11*r21);
IkReal x12873=((1.0)*r20);
IkReal x12874=(cj5*sj5);
IkReal x12875=(((r11*r20*x12874))+((x12871*x12872))+(((-1.0)*r12*r22))+(((-1.0)*x12872))+((r10*r21*x12874))+(((-1.0)*r10*x12871*x12873)));
j4eval[0]=x12875;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12873)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12876=cj5*cj5;
IkReal x12877=(r21*sj5);
IkReal x12878=(r11*r21);
IkReal x12879=((1.0)*r20);
CheckValue<IkReal> x12880 = IKatan2WithCheck(IkReal((x12877+(((-1.0)*cj5*x12879)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12880.valid){
continue;
}
CheckValue<IkReal> x12881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12876*x12879))+(((-1.0)*x12878))+((x12876*x12878))+((cj5*r10*x12877))+((cj5*r11*r20*sj5)))),-1);
if(!x12881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12880.value)+(((1.5707963267949)*(x12881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12882=IKcos(j4);
IkReal x12883=IKsin(j4);
IkReal x12884=(cj5*r00);
IkReal x12885=(cj5*r20);
IkReal x12886=(cj5*r10);
IkReal x12887=((1.0)*x12882);
IkReal x12888=((1.0)*x12883);
IkReal x12889=(sj5*x12882);
IkReal x12890=(sj5*x12883);
evalcond[0]=((((-1.0)*x12885*x12887))+((r22*x12883))+((r21*x12889)));
evalcond[1]=((((-1.0)*x12886*x12887))+((r12*x12883))+((r11*x12889)));
evalcond[2]=((((-1.0)*r22*x12887))+((r21*x12890))+(((-1.0)*x12885*x12888)));
evalcond[3]=(((r01*x12890))+(((-1.0)*r02*x12887))+(((-1.0)*x12884*x12888)));
evalcond[4]=((-1.0)+(((-1.0)*x12884*x12887))+((r01*x12889))+((r02*x12883)));
evalcond[5]=((1.0)+(((-1.0)*x12886*x12888))+(((-1.0)*r12*x12887))+((r11*x12890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12891=((1.0)*cj5);
CheckValue<IkReal> x12892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12891))+(((-1.0)*r20*sj5)))),-1);
if(!x12892.valid){
continue;
}
CheckValue<IkReal> x12893 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12891)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12892.value)))+(x12893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12894=IKcos(j4);
IkReal x12895=IKsin(j4);
IkReal x12896=(cj5*r00);
IkReal x12897=(cj5*r20);
IkReal x12898=(cj5*r10);
IkReal x12899=((1.0)*x12894);
IkReal x12900=((1.0)*x12895);
IkReal x12901=(sj5*x12894);
IkReal x12902=(sj5*x12895);
evalcond[0]=(((r22*x12895))+((r21*x12901))+(((-1.0)*x12897*x12899)));
evalcond[1]=(((r12*x12895))+((r11*x12901))+(((-1.0)*x12898*x12899)));
evalcond[2]=((((-1.0)*r22*x12899))+(((-1.0)*x12897*x12900))+((r21*x12902)));
evalcond[3]=(((r01*x12902))+(((-1.0)*x12896*x12900))+(((-1.0)*r02*x12899)));
evalcond[4]=((-1.0)+((r01*x12901))+(((-1.0)*x12896*x12899))+((r02*x12895)));
evalcond[5]=((1.0)+(((-1.0)*x12898*x12900))+((r11*x12902))+(((-1.0)*r12*x12899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12903 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12903.valid){
continue;
}
CheckValue<IkReal> x12904=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12903.value)+(((1.5707963267949)*(x12904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12905=IKcos(j4);
IkReal x12906=IKsin(j4);
IkReal x12907=(cj5*r00);
IkReal x12908=(cj5*r20);
IkReal x12909=(cj5*r10);
IkReal x12910=((1.0)*x12905);
IkReal x12911=((1.0)*x12906);
IkReal x12912=(sj5*x12905);
IkReal x12913=(sj5*x12906);
evalcond[0]=((((-1.0)*x12908*x12910))+((r21*x12912))+((r22*x12906)));
evalcond[1]=((((-1.0)*x12909*x12910))+((r12*x12906))+((r11*x12912)));
evalcond[2]=((((-1.0)*x12908*x12911))+((r21*x12913))+(((-1.0)*r22*x12910)));
evalcond[3]=((((-1.0)*r02*x12910))+(((-1.0)*x12907*x12911))+((r01*x12913)));
evalcond[4]=((-1.0)+((r02*x12906))+(((-1.0)*x12907*x12910))+((r01*x12912)));
evalcond[5]=((1.0)+(((-1.0)*x12909*x12911))+(((-1.0)*r12*x12910))+((r11*x12913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12914=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12914;
j4eval[1]=IKsign(x12914);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12915=((1.0)*cj5);
IkReal x12916=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12915)));
j4eval[0]=x12916;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12915)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12917=cj5*cj5;
IkReal x12918=(r11*r21);
IkReal x12919=((1.0)*r20);
IkReal x12920=(cj5*sj5);
IkReal x12921=((((-1.0)*r12*r22))+((x12917*x12918))+((r11*r20*x12920))+(((-1.0)*x12918))+(((-1.0)*r10*x12917*x12919))+((r10*r21*x12920)));
j4eval[0]=x12921;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12919))))));
j4eval[2]=IKsign(x12921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12922=cj5*cj5;
IkReal x12923=(r21*sj5);
IkReal x12924=(r11*r21);
IkReal x12925=((1.0)*r20);
CheckValue<IkReal> x12926=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12923))+(((-1.0)*r12*r22))+(((-1.0)*x12924))+(((-1.0)*r10*x12922*x12925))+((x12922*x12924))+((cj5*r11*r20*sj5)))),-1);
if(!x12926.valid){
continue;
}
CheckValue<IkReal> x12927 = IKatan2WithCheck(IkReal((x12923+(((-1.0)*cj5*x12925)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12926.value)))+(x12927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12928=IKcos(j4);
IkReal x12929=IKsin(j4);
IkReal x12930=(cj5*r00);
IkReal x12931=(cj5*r20);
IkReal x12932=(cj5*r10);
IkReal x12933=((1.0)*x12928);
IkReal x12934=((1.0)*x12929);
IkReal x12935=(sj5*x12928);
IkReal x12936=(sj5*x12929);
evalcond[0]=(((r22*x12929))+((r21*x12935))+(((-1.0)*x12931*x12933)));
evalcond[1]=(((r11*x12935))+(((-1.0)*x12932*x12933))+((r12*x12929)));
evalcond[2]=((((-1.0)*r22*x12933))+((r21*x12936))+(((-1.0)*x12931*x12934)));
evalcond[3]=((((-1.0)*r02*x12933))+(((-1.0)*x12930*x12934))+((r01*x12936)));
evalcond[4]=((1.0)+(((-1.0)*x12930*x12933))+((r02*x12929))+((r01*x12935)));
evalcond[5]=((1.0)+((r11*x12936))+(((-1.0)*r12*x12933))+(((-1.0)*x12932*x12934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12937=((1.0)*cj5);
CheckValue<IkReal> x12938 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12937))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12938.valid){
continue;
}
CheckValue<IkReal> x12939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12937)))),-1);
if(!x12939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12938.value)+(((1.5707963267949)*(x12939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12940=IKcos(j4);
IkReal x12941=IKsin(j4);
IkReal x12942=(cj5*r00);
IkReal x12943=(cj5*r20);
IkReal x12944=(cj5*r10);
IkReal x12945=((1.0)*x12940);
IkReal x12946=((1.0)*x12941);
IkReal x12947=(sj5*x12940);
IkReal x12948=(sj5*x12941);
evalcond[0]=(((r22*x12941))+((r21*x12947))+(((-1.0)*x12943*x12945)));
evalcond[1]=(((r12*x12941))+((r11*x12947))+(((-1.0)*x12944*x12945)));
evalcond[2]=(((r21*x12948))+(((-1.0)*r22*x12945))+(((-1.0)*x12943*x12946)));
evalcond[3]=(((r01*x12948))+(((-1.0)*r02*x12945))+(((-1.0)*x12942*x12946)));
evalcond[4]=((1.0)+((r01*x12947))+((r02*x12941))+(((-1.0)*x12942*x12945)));
evalcond[5]=((1.0)+((r11*x12948))+(((-1.0)*x12944*x12946))+(((-1.0)*r12*x12945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12949=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12949.valid){
continue;
}
CheckValue<IkReal> x12950 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12949.value)))+(x12950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12951=IKcos(j4);
IkReal x12952=IKsin(j4);
IkReal x12953=(cj5*r00);
IkReal x12954=(cj5*r20);
IkReal x12955=(cj5*r10);
IkReal x12956=((1.0)*x12951);
IkReal x12957=((1.0)*x12952);
IkReal x12958=(sj5*x12951);
IkReal x12959=(sj5*x12952);
evalcond[0]=((((-1.0)*x12954*x12956))+((r22*x12952))+((r21*x12958)));
evalcond[1]=((((-1.0)*x12955*x12956))+((r12*x12952))+((r11*x12958)));
evalcond[2]=((((-1.0)*x12954*x12957))+((r21*x12959))+(((-1.0)*r22*x12956)));
evalcond[3]=(((r01*x12959))+(((-1.0)*x12953*x12957))+(((-1.0)*r02*x12956)));
evalcond[4]=((1.0)+((r01*x12958))+(((-1.0)*x12953*x12956))+((r02*x12952)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12956))+(((-1.0)*x12955*x12957))+((r11*x12959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12960=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12960;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12961=((1.0)*cj5);
IkReal x12962=((((-1.0)*r21*x12961))+(((-1.0)*r20*sj5)));
j4eval[0]=x12962;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12961))))));
j4eval[2]=IKsign(x12962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12963=cj5*cj5;
IkReal x12964=(r11*r21);
IkReal x12965=((1.0)*r20);
IkReal x12966=(cj5*sj5);
IkReal x12967=(((r11*r20*x12966))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12963*x12965))+(((-1.0)*x12964))+((r10*r21*x12966))+((x12963*x12964)));
j4eval[0]=x12967;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12965))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12968=cj5*cj5;
IkReal x12969=(r21*sj5);
IkReal x12970=(r11*r21);
IkReal x12971=((1.0)*r20);
CheckValue<IkReal> x12972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12970))+((x12968*x12970))+((cj5*r10*x12969))+(((-1.0)*r10*x12968*x12971))+((cj5*r11*r20*sj5)))),-1);
if(!x12972.valid){
continue;
}
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal((x12969+(((-1.0)*cj5*x12971)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12972.value)))+(x12973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12974=IKcos(j4);
IkReal x12975=IKsin(j4);
IkReal x12976=(cj5*r00);
IkReal x12977=(cj5*r20);
IkReal x12978=(cj5*r10);
IkReal x12979=((1.0)*x12974);
IkReal x12980=((1.0)*x12975);
IkReal x12981=(sj5*x12974);
IkReal x12982=(sj5*x12975);
evalcond[0]=(((r21*x12981))+((r22*x12975))+(((-1.0)*x12977*x12979)));
evalcond[1]=(((r11*x12981))+((r12*x12975))+(((-1.0)*x12978*x12979)));
evalcond[2]=((((-1.0)*x12977*x12980))+((r21*x12982))+(((-1.0)*r22*x12979)));
evalcond[3]=(((r01*x12982))+(((-1.0)*r02*x12979))+(((-1.0)*x12976*x12980)));
evalcond[4]=((-1.0)+((r02*x12975))+((r01*x12981))+(((-1.0)*x12976*x12979)));
evalcond[5]=((1.0)+((r11*x12982))+(((-1.0)*r12*x12979))+(((-1.0)*x12978*x12980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12983=((1.0)*cj5);
CheckValue<IkReal> x12984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12983))+(((-1.0)*r20*sj5)))),-1);
if(!x12984.valid){
continue;
}
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12983))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12984.value)))+(x12985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12986=IKcos(j4);
IkReal x12987=IKsin(j4);
IkReal x12988=(cj5*r00);
IkReal x12989=(cj5*r20);
IkReal x12990=(cj5*r10);
IkReal x12991=((1.0)*x12986);
IkReal x12992=((1.0)*x12987);
IkReal x12993=(sj5*x12986);
IkReal x12994=(sj5*x12987);
evalcond[0]=(((r22*x12987))+((r21*x12993))+(((-1.0)*x12989*x12991)));
evalcond[1]=(((r11*x12993))+(((-1.0)*x12990*x12991))+((r12*x12987)));
evalcond[2]=((((-1.0)*r22*x12991))+((r21*x12994))+(((-1.0)*x12989*x12992)));
evalcond[3]=(((r01*x12994))+(((-1.0)*x12988*x12992))+(((-1.0)*r02*x12991)));
evalcond[4]=((-1.0)+((r01*x12993))+(((-1.0)*x12988*x12991))+((r02*x12987)));
evalcond[5]=((1.0)+((r11*x12994))+(((-1.0)*r12*x12991))+(((-1.0)*x12990*x12992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12995 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12995.valid){
continue;
}
CheckValue<IkReal> x12996=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12995.value)+(((1.5707963267949)*(x12996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12997=IKcos(j4);
IkReal x12998=IKsin(j4);
IkReal x12999=(cj5*r00);
IkReal x13000=(cj5*r20);
IkReal x13001=(cj5*r10);
IkReal x13002=((1.0)*x12997);
IkReal x13003=((1.0)*x12998);
IkReal x13004=(sj5*x12997);
IkReal x13005=(sj5*x12998);
evalcond[0]=(((r22*x12998))+(((-1.0)*x13000*x13002))+((r21*x13004)));
evalcond[1]=((((-1.0)*x13001*x13002))+((r12*x12998))+((r11*x13004)));
evalcond[2]=((((-1.0)*r22*x13002))+(((-1.0)*x13000*x13003))+((r21*x13005)));
evalcond[3]=((((-1.0)*x12999*x13003))+(((-1.0)*r02*x13002))+((r01*x13005)));
evalcond[4]=((-1.0)+(((-1.0)*x12999*x13002))+((r02*x12998))+((r01*x13004)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13002))+(((-1.0)*x13001*x13003))+((r11*x13005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13006=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13006;
j4eval[1]=IKsign(x13006);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13007=((1.0)*cj5);
IkReal x13008=((((-1.0)*r11*x13007))+(((-1.0)*r10*sj5)));
j4eval[0]=x13008;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13007))))));
j4eval[2]=IKsign(x13008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13009=cj5*cj5;
IkReal x13010=(r11*r21);
IkReal x13011=((1.0)*r20);
IkReal x13012=(cj5*sj5);
IkReal x13013=((((-1.0)*r10*x13009*x13011))+(((-1.0)*r12*r22))+((x13009*x13010))+((r11*r20*x13012))+(((-1.0)*x13010))+((r10*r21*x13012)));
j4eval[0]=x13013;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13011)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13013);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13014=cj5*cj5;
IkReal x13015=(r21*sj5);
IkReal x13016=(r11*r21);
IkReal x13017=((1.0)*r20);
CheckValue<IkReal> x13018=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13015))+(((-1.0)*r10*x13014*x13017))+(((-1.0)*r12*r22))+(((-1.0)*x13016))+((x13014*x13016))+((cj5*r11*r20*sj5)))),-1);
if(!x13018.valid){
continue;
}
CheckValue<IkReal> x13019 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13017))+x13015)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13018.value)))+(x13019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13020=IKcos(j4);
IkReal x13021=IKsin(j4);
IkReal x13022=(cj5*r00);
IkReal x13023=(cj5*r20);
IkReal x13024=(cj5*r10);
IkReal x13025=((1.0)*x13020);
IkReal x13026=((1.0)*x13021);
IkReal x13027=(sj5*x13020);
IkReal x13028=(sj5*x13021);
evalcond[0]=(((r21*x13027))+((r22*x13021))+(((-1.0)*x13023*x13025)));
evalcond[1]=((((-1.0)*x13024*x13025))+((r11*x13027))+((r12*x13021)));
evalcond[2]=((((-1.0)*r22*x13025))+((r21*x13028))+(((-1.0)*x13023*x13026)));
evalcond[3]=(((r01*x13028))+(((-1.0)*x13022*x13026))+(((-1.0)*r02*x13025)));
evalcond[4]=((1.0)+((r01*x13027))+((r02*x13021))+(((-1.0)*x13022*x13025)));
evalcond[5]=((1.0)+(((-1.0)*x13024*x13026))+((r11*x13028))+(((-1.0)*r12*x13025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13029=((1.0)*cj5);
CheckValue<IkReal> x13030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13029)))),-1);
if(!x13030.valid){
continue;
}
CheckValue<IkReal> x13031 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13029)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13030.value)))+(x13031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13032=IKcos(j4);
IkReal x13033=IKsin(j4);
IkReal x13034=(cj5*r00);
IkReal x13035=(cj5*r20);
IkReal x13036=(cj5*r10);
IkReal x13037=((1.0)*x13032);
IkReal x13038=((1.0)*x13033);
IkReal x13039=(sj5*x13032);
IkReal x13040=(sj5*x13033);
evalcond[0]=(((r22*x13033))+(((-1.0)*x13035*x13037))+((r21*x13039)));
evalcond[1]=((((-1.0)*x13036*x13037))+((r11*x13039))+((r12*x13033)));
evalcond[2]=(((r21*x13040))+(((-1.0)*x13035*x13038))+(((-1.0)*r22*x13037)));
evalcond[3]=((((-1.0)*r02*x13037))+(((-1.0)*x13034*x13038))+((r01*x13040)));
evalcond[4]=((1.0)+(((-1.0)*x13034*x13037))+((r01*x13039))+((r02*x13033)));
evalcond[5]=((1.0)+(((-1.0)*x13036*x13038))+((r11*x13040))+(((-1.0)*r12*x13037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13041=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13041.valid){
continue;
}
CheckValue<IkReal> x13042 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13041.value)))+(x13042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13043=IKcos(j4);
IkReal x13044=IKsin(j4);
IkReal x13045=(cj5*r00);
IkReal x13046=(cj5*r20);
IkReal x13047=(cj5*r10);
IkReal x13048=((1.0)*x13043);
IkReal x13049=((1.0)*x13044);
IkReal x13050=(sj5*x13043);
IkReal x13051=(sj5*x13044);
evalcond[0]=((((-1.0)*x13046*x13048))+((r21*x13050))+((r22*x13044)));
evalcond[1]=((((-1.0)*x13047*x13048))+((r12*x13044))+((r11*x13050)));
evalcond[2]=((((-1.0)*x13046*x13049))+((r21*x13051))+(((-1.0)*r22*x13048)));
evalcond[3]=((((-1.0)*x13045*x13049))+(((-1.0)*r02*x13048))+((r01*x13051)));
evalcond[4]=((1.0)+(((-1.0)*x13045*x13048))+((r02*x13044))+((r01*x13050)));
evalcond[5]=((1.0)+(((-1.0)*x13047*x13049))+(((-1.0)*r12*x13048))+((r11*x13051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13052=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13052;
j4eval[1]=IKsign(x13052);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13053=((1.0)*cj5);
IkReal x13054=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13053)));
j4eval[0]=x13054;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13053))+((r21*sj5))))));
j4eval[2]=IKsign(x13054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13055=cj5*cj5;
IkReal x13056=(r11*r21);
IkReal x13057=((1.0)*r20);
IkReal x13058=(cj5*sj5);
IkReal x13059=(((x13055*x13056))+((r10*r21*x13058))+((r11*r20*x13058))+(((-1.0)*x13056))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13055*x13057)));
j4eval[0]=x13059;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13057))))));
j4eval[2]=IKsign(x13059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13060=cj5*cj5;
IkReal x13061=(r21*sj5);
IkReal x13062=(r11*r21);
IkReal x13063=((1.0)*r20);
CheckValue<IkReal> x13064=IKPowWithIntegerCheck(IKsign((((x13060*x13062))+(((-1.0)*x13062))+(((-1.0)*r12*r22))+((cj5*r10*x13061))+(((-1.0)*r10*x13060*x13063))+((cj5*r11*r20*sj5)))),-1);
if(!x13064.valid){
continue;
}
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal((x13061+(((-1.0)*cj5*x13063)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13064.value)))+(x13065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13066=IKcos(j4);
IkReal x13067=IKsin(j4);
IkReal x13068=(cj5*r00);
IkReal x13069=(cj5*r20);
IkReal x13070=(cj5*r10);
IkReal x13071=((1.0)*x13066);
IkReal x13072=((1.0)*x13067);
IkReal x13073=(sj5*x13066);
IkReal x13074=(sj5*x13067);
evalcond[0]=(((r21*x13073))+(((-1.0)*x13069*x13071))+((r22*x13067)));
evalcond[1]=(((r12*x13067))+((r11*x13073))+(((-1.0)*x13070*x13071)));
evalcond[2]=(((r21*x13074))+(((-1.0)*x13069*x13072))+(((-1.0)*r22*x13071)));
evalcond[3]=((((-1.0)*r02*x13071))+(((-1.0)*x13068*x13072))+((r01*x13074)));
evalcond[4]=((1.0)+((r02*x13067))+(((-1.0)*x13068*x13071))+((r01*x13073)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13071))+((r11*x13074))+(((-1.0)*x13070*x13072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13075=((1.0)*cj5);
CheckValue<IkReal> x13076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13075))+(((-1.0)*r10*sj5)))),-1);
if(!x13076.valid){
continue;
}
CheckValue<IkReal> x13077 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13075)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13076.value)))+(x13077.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13078=IKcos(j4);
IkReal x13079=IKsin(j4);
IkReal x13080=(cj5*r00);
IkReal x13081=(cj5*r20);
IkReal x13082=(cj5*r10);
IkReal x13083=((1.0)*x13078);
IkReal x13084=((1.0)*x13079);
IkReal x13085=(sj5*x13078);
IkReal x13086=(sj5*x13079);
evalcond[0]=((((-1.0)*x13081*x13083))+((r22*x13079))+((r21*x13085)));
evalcond[1]=((((-1.0)*x13082*x13083))+((r11*x13085))+((r12*x13079)));
evalcond[2]=((((-1.0)*x13081*x13084))+(((-1.0)*r22*x13083))+((r21*x13086)));
evalcond[3]=((((-1.0)*r02*x13083))+(((-1.0)*x13080*x13084))+((r01*x13086)));
evalcond[4]=((1.0)+((r02*x13079))+(((-1.0)*x13080*x13083))+((r01*x13085)));
evalcond[5]=((1.0)+(((-1.0)*x13082*x13084))+((r11*x13086))+(((-1.0)*r12*x13083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13087=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13087.valid){
continue;
}
CheckValue<IkReal> x13088 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13087.value)))+(x13088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13089=IKcos(j4);
IkReal x13090=IKsin(j4);
IkReal x13091=(cj5*r00);
IkReal x13092=(cj5*r20);
IkReal x13093=(cj5*r10);
IkReal x13094=((1.0)*x13089);
IkReal x13095=((1.0)*x13090);
IkReal x13096=(sj5*x13089);
IkReal x13097=(sj5*x13090);
evalcond[0]=(((r22*x13090))+(((-1.0)*x13092*x13094))+((r21*x13096)));
evalcond[1]=(((r11*x13096))+((r12*x13090))+(((-1.0)*x13093*x13094)));
evalcond[2]=((((-1.0)*r22*x13094))+(((-1.0)*x13092*x13095))+((r21*x13097)));
evalcond[3]=(((r01*x13097))+(((-1.0)*x13091*x13095))+(((-1.0)*r02*x13094)));
evalcond[4]=((1.0)+((r02*x13090))+((r01*x13096))+(((-1.0)*x13091*x13094)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13094))+((r11*x13097))+(((-1.0)*x13093*x13095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13098=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13098;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13099=((1.0)*cj5);
IkReal x13100=((((-1.0)*r21*x13099))+(((-1.0)*r20*sj5)));
j4eval[0]=x13100;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13099))+((r11*sj5))))));
j4eval[2]=IKsign(x13100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13101=cj5*cj5;
IkReal x13102=(r11*r21);
IkReal x13103=((1.0)*r20);
IkReal x13104=(cj5*sj5);
IkReal x13105=((((-1.0)*r12*r22))+((x13101*x13102))+((r11*r20*x13104))+(((-1.0)*r10*x13101*x13103))+(((-1.0)*x13102))+((r10*r21*x13104)));
j4eval[0]=x13105;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13103))))));
j4eval[2]=IKsign(x13105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13106=cj5*cj5;
IkReal x13107=(r21*sj5);
IkReal x13108=(r11*r21);
IkReal x13109=((1.0)*r20);
CheckValue<IkReal> x13110 = IKatan2WithCheck(IkReal((x13107+(((-1.0)*cj5*x13109)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13110.valid){
continue;
}
CheckValue<IkReal> x13111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13106*x13108))+(((-1.0)*x13108))+((cj5*r10*x13107))+(((-1.0)*r10*x13106*x13109))+((cj5*r11*r20*sj5)))),-1);
if(!x13111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13110.value)+(((1.5707963267949)*(x13111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13112=IKcos(j4);
IkReal x13113=IKsin(j4);
IkReal x13114=(cj5*r00);
IkReal x13115=(cj5*r20);
IkReal x13116=(cj5*r10);
IkReal x13117=((1.0)*x13112);
IkReal x13118=((1.0)*x13113);
IkReal x13119=(sj5*x13112);
IkReal x13120=(sj5*x13113);
evalcond[0]=(((r22*x13113))+((r21*x13119))+(((-1.0)*x13115*x13117)));
evalcond[1]=(((r12*x13113))+(((-1.0)*x13116*x13117))+((r11*x13119)));
evalcond[2]=((((-1.0)*x13115*x13118))+((r21*x13120))+(((-1.0)*r22*x13117)));
evalcond[3]=(((r01*x13120))+(((-1.0)*x13114*x13118))+(((-1.0)*r02*x13117)));
evalcond[4]=((-1.0)+((r02*x13113))+(((-1.0)*x13114*x13117))+((r01*x13119)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13117))+(((-1.0)*x13116*x13118))+((r11*x13120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13121=((1.0)*cj5);
CheckValue<IkReal> x13122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13121))+(((-1.0)*r20*sj5)))),-1);
if(!x13122.valid){
continue;
}
CheckValue<IkReal> x13123 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13121)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13122.value)))+(x13123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13124=IKcos(j4);
IkReal x13125=IKsin(j4);
IkReal x13126=(cj5*r00);
IkReal x13127=(cj5*r20);
IkReal x13128=(cj5*r10);
IkReal x13129=((1.0)*x13124);
IkReal x13130=((1.0)*x13125);
IkReal x13131=(sj5*x13124);
IkReal x13132=(sj5*x13125);
evalcond[0]=((((-1.0)*x13127*x13129))+((r21*x13131))+((r22*x13125)));
evalcond[1]=(((r12*x13125))+((r11*x13131))+(((-1.0)*x13128*x13129)));
evalcond[2]=(((r21*x13132))+(((-1.0)*r22*x13129))+(((-1.0)*x13127*x13130)));
evalcond[3]=((((-1.0)*r02*x13129))+((r01*x13132))+(((-1.0)*x13126*x13130)));
evalcond[4]=((-1.0)+(((-1.0)*x13126*x13129))+((r01*x13131))+((r02*x13125)));
evalcond[5]=((1.0)+((r11*x13132))+(((-1.0)*r12*x13129))+(((-1.0)*x13128*x13130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13133 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13133.valid){
continue;
}
CheckValue<IkReal> x13134=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13133.value)+(((1.5707963267949)*(x13134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13135=IKcos(j4);
IkReal x13136=IKsin(j4);
IkReal x13137=(cj5*r00);
IkReal x13138=(cj5*r20);
IkReal x13139=(cj5*r10);
IkReal x13140=((1.0)*x13135);
IkReal x13141=((1.0)*x13136);
IkReal x13142=(sj5*x13135);
IkReal x13143=(sj5*x13136);
evalcond[0]=((((-1.0)*x13138*x13140))+((r21*x13142))+((r22*x13136)));
evalcond[1]=((((-1.0)*x13139*x13140))+((r12*x13136))+((r11*x13142)));
evalcond[2]=((((-1.0)*x13138*x13141))+(((-1.0)*r22*x13140))+((r21*x13143)));
evalcond[3]=((((-1.0)*x13137*x13141))+(((-1.0)*r02*x13140))+((r01*x13143)));
evalcond[4]=((-1.0)+(((-1.0)*x13137*x13140))+((r02*x13136))+((r01*x13142)));
evalcond[5]=((1.0)+(((-1.0)*x13139*x13141))+((r11*x13143))+(((-1.0)*r12*x13140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13144=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13144;
j4eval[1]=IKsign(x13144);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13145=((1.0)*cj5);
IkReal x13146=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13145)));
j4eval[0]=x13146;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13145))+((r21*sj5))))));
j4eval[2]=IKsign(x13146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13147=cj5*cj5;
IkReal x13148=(r11*r21);
IkReal x13149=((1.0)*r20);
IkReal x13150=(cj5*sj5);
IkReal x13151=((((-1.0)*r10*x13147*x13149))+(((-1.0)*r12*r22))+((x13147*x13148))+((r11*r20*x13150))+((r10*r21*x13150))+(((-1.0)*x13148)));
j4eval[0]=x13151;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x13149))+((r21*sj5))))));
j4eval[2]=IKsign(x13151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13152=cj5*cj5;
IkReal x13153=(r21*sj5);
IkReal x13154=(r11*r21);
IkReal x13155=((1.0)*r20);
CheckValue<IkReal> x13156 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13155))+x13153)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13156.valid){
continue;
}
CheckValue<IkReal> x13157=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13153))+((x13152*x13154))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13152*x13155))+(((-1.0)*x13154))+((cj5*r11*r20*sj5)))),-1);
if(!x13157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13156.value)+(((1.5707963267949)*(x13157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13158=IKcos(j4);
IkReal x13159=IKsin(j4);
IkReal x13160=(cj5*r00);
IkReal x13161=(cj5*r20);
IkReal x13162=(cj5*r10);
IkReal x13163=((1.0)*x13158);
IkReal x13164=((1.0)*x13159);
IkReal x13165=(sj5*x13158);
IkReal x13166=(sj5*x13159);
evalcond[0]=((((-1.0)*x13161*x13163))+((r22*x13159))+((r21*x13165)));
evalcond[1]=((((-1.0)*x13162*x13163))+((r11*x13165))+((r12*x13159)));
evalcond[2]=((((-1.0)*r22*x13163))+(((-1.0)*x13161*x13164))+((r21*x13166)));
evalcond[3]=((((-1.0)*x13160*x13164))+((r01*x13166))+(((-1.0)*r02*x13163)));
evalcond[4]=((1.0)+((r02*x13159))+(((-1.0)*x13160*x13163))+((r01*x13165)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13163))+(((-1.0)*x13162*x13164))+((r11*x13166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13167=((1.0)*cj5);
CheckValue<IkReal> x13168 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13167))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13168.valid){
continue;
}
CheckValue<IkReal> x13169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13167)))),-1);
if(!x13169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13168.value)+(((1.5707963267949)*(x13169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13170=IKcos(j4);
IkReal x13171=IKsin(j4);
IkReal x13172=(cj5*r00);
IkReal x13173=(cj5*r20);
IkReal x13174=(cj5*r10);
IkReal x13175=((1.0)*x13170);
IkReal x13176=((1.0)*x13171);
IkReal x13177=(sj5*x13170);
IkReal x13178=(sj5*x13171);
evalcond[0]=((((-1.0)*x13173*x13175))+((r22*x13171))+((r21*x13177)));
evalcond[1]=(((r12*x13171))+((r11*x13177))+(((-1.0)*x13174*x13175)));
evalcond[2]=((((-1.0)*x13173*x13176))+(((-1.0)*r22*x13175))+((r21*x13178)));
evalcond[3]=(((r01*x13178))+(((-1.0)*x13172*x13176))+(((-1.0)*r02*x13175)));
evalcond[4]=((1.0)+((r01*x13177))+(((-1.0)*x13172*x13175))+((r02*x13171)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13175))+((r11*x13178))+(((-1.0)*x13174*x13176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13179=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13179.valid){
continue;
}
CheckValue<IkReal> x13180 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13179.value)))+(x13180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13181=IKcos(j4);
IkReal x13182=IKsin(j4);
IkReal x13183=(cj5*r00);
IkReal x13184=(cj5*r20);
IkReal x13185=(cj5*r10);
IkReal x13186=((1.0)*x13181);
IkReal x13187=((1.0)*x13182);
IkReal x13188=(sj5*x13181);
IkReal x13189=(sj5*x13182);
evalcond[0]=(((r22*x13182))+((r21*x13188))+(((-1.0)*x13184*x13186)));
evalcond[1]=(((r12*x13182))+((r11*x13188))+(((-1.0)*x13185*x13186)));
evalcond[2]=(((r21*x13189))+(((-1.0)*r22*x13186))+(((-1.0)*x13184*x13187)));
evalcond[3]=((((-1.0)*x13183*x13187))+(((-1.0)*r02*x13186))+((r01*x13189)));
evalcond[4]=((1.0)+((r02*x13182))+(((-1.0)*x13183*x13186))+((r01*x13188)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13186))+((r11*x13189))+(((-1.0)*x13185*x13187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13190=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13190;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13191=((1.0)*cj5);
IkReal x13192=((((-1.0)*r21*x13191))+(((-1.0)*r20*sj5)));
j4eval[0]=x13192;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13191))+((r11*sj5))))));
j4eval[2]=IKsign(x13192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13193=cj5*cj5;
IkReal x13194=(r11*r21);
IkReal x13195=((1.0)*r20);
IkReal x13196=(cj5*sj5);
IkReal x13197=(((r11*r20*x13196))+((r10*r21*x13196))+(((-1.0)*x13194))+(((-1.0)*r12*r22))+((x13193*x13194))+(((-1.0)*r10*x13193*x13195)));
j4eval[0]=x13197;
j4eval[1]=((IKabs(((((-1.0)*cj5*x13195))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13198=cj5*cj5;
IkReal x13199=(r21*sj5);
IkReal x13200=(r11*r21);
IkReal x13201=((1.0)*r20);
CheckValue<IkReal> x13202=IKPowWithIntegerCheck(IKsign((((x13198*x13200))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13198*x13201))+(((-1.0)*x13200))+((cj5*r11*r20*sj5))+((cj5*r10*x13199)))),-1);
if(!x13202.valid){
continue;
}
CheckValue<IkReal> x13203 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13201))+x13199)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13202.value)))+(x13203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13204=IKcos(j4);
IkReal x13205=IKsin(j4);
IkReal x13206=(cj5*r00);
IkReal x13207=(cj5*r20);
IkReal x13208=(cj5*r10);
IkReal x13209=((1.0)*x13204);
IkReal x13210=((1.0)*x13205);
IkReal x13211=(sj5*x13204);
IkReal x13212=(sj5*x13205);
evalcond[0]=(((r21*x13211))+((r22*x13205))+(((-1.0)*x13207*x13209)));
evalcond[1]=(((r11*x13211))+(((-1.0)*x13208*x13209))+((r12*x13205)));
evalcond[2]=(((r21*x13212))+(((-1.0)*x13207*x13210))+(((-1.0)*r22*x13209)));
evalcond[3]=(((r01*x13212))+(((-1.0)*x13206*x13210))+(((-1.0)*r02*x13209)));
evalcond[4]=((-1.0)+((r01*x13211))+((r02*x13205))+(((-1.0)*x13206*x13209)));
evalcond[5]=((1.0)+((r11*x13212))+(((-1.0)*x13208*x13210))+(((-1.0)*r12*x13209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13213=((1.0)*cj5);
CheckValue<IkReal> x13214 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13213)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13214.valid){
continue;
}
CheckValue<IkReal> x13215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13213))+(((-1.0)*r20*sj5)))),-1);
if(!x13215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13214.value)+(((1.5707963267949)*(x13215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13216=IKcos(j4);
IkReal x13217=IKsin(j4);
IkReal x13218=(cj5*r00);
IkReal x13219=(cj5*r20);
IkReal x13220=(cj5*r10);
IkReal x13221=((1.0)*x13216);
IkReal x13222=((1.0)*x13217);
IkReal x13223=(sj5*x13216);
IkReal x13224=(sj5*x13217);
evalcond[0]=(((r21*x13223))+(((-1.0)*x13219*x13221))+((r22*x13217)));
evalcond[1]=((((-1.0)*x13220*x13221))+((r12*x13217))+((r11*x13223)));
evalcond[2]=(((r21*x13224))+(((-1.0)*r22*x13221))+(((-1.0)*x13219*x13222)));
evalcond[3]=((((-1.0)*x13218*x13222))+(((-1.0)*r02*x13221))+((r01*x13224)));
evalcond[4]=((-1.0)+(((-1.0)*x13218*x13221))+((r01*x13223))+((r02*x13217)));
evalcond[5]=((1.0)+(((-1.0)*x13220*x13222))+(((-1.0)*r12*x13221))+((r11*x13224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13225 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13225.valid){
continue;
}
CheckValue<IkReal> x13226=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13225.value)+(((1.5707963267949)*(x13226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13227=IKcos(j4);
IkReal x13228=IKsin(j4);
IkReal x13229=(cj5*r00);
IkReal x13230=(cj5*r20);
IkReal x13231=(cj5*r10);
IkReal x13232=((1.0)*x13227);
IkReal x13233=((1.0)*x13228);
IkReal x13234=(sj5*x13227);
IkReal x13235=(sj5*x13228);
evalcond[0]=(((r22*x13228))+((r21*x13234))+(((-1.0)*x13230*x13232)));
evalcond[1]=(((r11*x13234))+((r12*x13228))+(((-1.0)*x13231*x13232)));
evalcond[2]=(((r21*x13235))+(((-1.0)*r22*x13232))+(((-1.0)*x13230*x13233)));
evalcond[3]=(((r01*x13235))+(((-1.0)*x13229*x13233))+(((-1.0)*r02*x13232)));
evalcond[4]=((-1.0)+((r01*x13234))+((r02*x13228))+(((-1.0)*x13229*x13232)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13232))+((r11*x13235))+(((-1.0)*x13231*x13233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13236=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13236);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13236);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13237=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13237);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13237);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13238=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13238))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13238)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13239=((1.0)*cj5);
CheckValue<IkReal> x13240=IKPowWithIntegerCheck(((((-1.0)*r10*x13239))+((r11*sj5))),-1);
if(!x13240.valid){
continue;
}
CheckValue<IkReal> x13241=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13239))),-1);
if(!x13241.valid){
continue;
}
if( IKabs(((-1.0)*(x13240.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13241.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13240.value)))+IKsqr(((x13241.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13240.value)), ((x13241.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13242=IKsin(j4);
IkReal x13243=IKcos(j4);
IkReal x13244=((1.0)*cj5);
IkReal x13245=((1.0)*cj2);
IkReal x13246=(sj5*x13243);
IkReal x13247=(sj5*x13242);
evalcond[0]=((-1.0)*r22*x13243);
evalcond[1]=(((sj1*sj2))+((r22*x13242))+(((-1.0)*cj1*x13245)));
evalcond[2]=((((-1.0)*r00*x13242*x13244))+((r01*x13247)));
evalcond[3]=((((-1.0)*r10*x13243*x13244))+((r11*x13246)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13242*x13244))+((r11*x13247)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x13243*x13244))+((r01*x13246))+(((-1.0)*sj1*x13245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13248=IKPowWithIntegerCheck(r22,-1);
if(!x13248.valid){
continue;
}
CheckValue<IkReal> x13249=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13249.valid){
continue;
}
if( IKabs(((x13248.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13249.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13248.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13249.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13248.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13249.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13250=IKsin(j4);
IkReal x13251=IKcos(j4);
IkReal x13252=((1.0)*cj5);
IkReal x13253=((1.0)*cj2);
IkReal x13254=(sj5*x13251);
IkReal x13255=(sj5*x13250);
evalcond[0]=((-1.0)*r22*x13251);
evalcond[1]=(((sj1*sj2))+((r22*x13250))+(((-1.0)*cj1*x13253)));
evalcond[2]=(((r01*x13255))+(((-1.0)*r00*x13250*x13252)));
evalcond[3]=((((-1.0)*r10*x13251*x13252))+((r11*x13254)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13250*x13252))+((r11*x13255)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x13254))+(((-1.0)*r00*x13251*x13252))+(((-1.0)*sj1*x13253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13256=(sj1*sj2);
IkReal x13257=(cj5*r10);
IkReal x13258=(r11*sj5);
IkReal x13259=(cj1*cj2);
CheckValue<IkReal> x13260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13260.valid){
continue;
}
CheckValue<IkReal> x13261 = IKatan2WithCheck(IkReal((((x13256*x13258))+(((-1.0)*x13256*x13257))+((x13257*x13259))+(((-1.0)*x13258*x13259)))),IkReal((((r12*x13259))+(((-1.0)*r12*x13256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13260.value)))+(x13261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13262=IKcos(j4);
IkReal x13263=IKsin(j4);
IkReal x13264=(cj5*r00);
IkReal x13265=(cj5*r10);
IkReal x13266=(r21*sj5);
IkReal x13267=((1.0)*cj2);
IkReal x13268=(cj5*r20);
IkReal x13269=((1.0)*x13262);
IkReal x13270=((1.0)*x13263);
IkReal x13271=(sj5*x13263);
IkReal x13272=(sj5*x13262);
evalcond[0]=((((-1.0)*x13265*x13269))+((r11*x13272))+((r12*x13263)));
evalcond[1]=((((-1.0)*x13268*x13270))+(((-1.0)*r22*x13269))+((x13263*x13266)));
evalcond[2]=(((r01*x13271))+(((-1.0)*x13264*x13270))+(((-1.0)*r02*x13269)));
evalcond[3]=((1.0)+(((-1.0)*x13265*x13270))+((r11*x13271))+(((-1.0)*r12*x13269)));
evalcond[4]=((((-1.0)*cj1*x13267))+((sj1*sj2))+((r22*x13263))+((x13262*x13266))+(((-1.0)*x13268*x13269)));
evalcond[5]=(((r01*x13272))+(((-1.0)*sj1*x13267))+(((-1.0)*cj1*sj2))+(((-1.0)*x13264*x13269))+((r02*x13263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13273=((1.0)*cj5);
CheckValue<IkReal> x13274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13273))+(((-1.0)*r00*sj5)))),-1);
if(!x13274.valid){
continue;
}
CheckValue<IkReal> x13275 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13273))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13274.value)))+(x13275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13276=IKcos(j4);
IkReal x13277=IKsin(j4);
IkReal x13278=(cj5*r00);
IkReal x13279=(cj5*r10);
IkReal x13280=(r21*sj5);
IkReal x13281=((1.0)*cj2);
IkReal x13282=(cj5*r20);
IkReal x13283=((1.0)*x13276);
IkReal x13284=((1.0)*x13277);
IkReal x13285=(sj5*x13277);
IkReal x13286=(sj5*x13276);
evalcond[0]=(((r12*x13277))+((r11*x13286))+(((-1.0)*x13279*x13283)));
evalcond[1]=((((-1.0)*r22*x13283))+((x13277*x13280))+(((-1.0)*x13282*x13284)));
evalcond[2]=((((-1.0)*r02*x13283))+(((-1.0)*x13278*x13284))+((r01*x13285)));
evalcond[3]=((1.0)+((r11*x13285))+(((-1.0)*x13279*x13284))+(((-1.0)*r12*x13283)));
evalcond[4]=((((-1.0)*cj1*x13281))+((sj1*sj2))+(((-1.0)*x13282*x13283))+((r22*x13277))+((x13276*x13280)));
evalcond[5]=((((-1.0)*sj1*x13281))+(((-1.0)*cj1*sj2))+((r02*x13277))+(((-1.0)*x13278*x13283))+((r01*x13286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13287=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13287.valid){
continue;
}
CheckValue<IkReal> x13288 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13287.value)))+(x13288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13289=IKcos(j4);
IkReal x13290=IKsin(j4);
IkReal x13291=(cj5*r00);
IkReal x13292=(cj5*r10);
IkReal x13293=(r21*sj5);
IkReal x13294=((1.0)*cj2);
IkReal x13295=(cj5*r20);
IkReal x13296=((1.0)*x13289);
IkReal x13297=((1.0)*x13290);
IkReal x13298=(sj5*x13290);
IkReal x13299=(sj5*x13289);
evalcond[0]=(((r11*x13299))+((r12*x13290))+(((-1.0)*x13292*x13296)));
evalcond[1]=((((-1.0)*x13295*x13297))+((x13290*x13293))+(((-1.0)*r22*x13296)));
evalcond[2]=((((-1.0)*x13291*x13297))+(((-1.0)*r02*x13296))+((r01*x13298)));
evalcond[3]=((1.0)+((r11*x13298))+(((-1.0)*x13292*x13297))+(((-1.0)*r12*x13296)));
evalcond[4]=((((-1.0)*x13295*x13296))+(((-1.0)*cj1*x13294))+((sj1*sj2))+((r22*x13290))+((x13289*x13293)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x13290))+(((-1.0)*x13291*x13296))+(((-1.0)*sj1*x13294))+((r01*x13299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13300=((-1.0)*r00);
IkReal x13302 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13302)==0){
continue;
}
IkReal x13301=pow(x13302,-0.5);
CheckValue<IkReal> x13303 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13300),IKFAST_ATAN2_MAGTHRESH);
if(!x13303.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13303.value));
IkReal gconst19=(r01*x13301);
IkReal gconst20=(x13300*x13301);
CheckValue<IkReal> x13304 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13304.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13304.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13305=((-1.0)*r00);
IkReal x13306=x13301;
CheckValue<IkReal> x13308 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13305),IKFAST_ATAN2_MAGTHRESH);
if(!x13308.valid){
continue;
}
IkReal x13307=((-1.0)*(x13308.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13307;
IkReal gconst18=x13307;
IkReal gconst19=(r01*x13306);
IkReal gconst20=(x13305*x13306);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13309=((-1.0)*r00);
IkReal x13310=x13301;
CheckValue<IkReal> x13312 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13309),IKFAST_ATAN2_MAGTHRESH);
if(!x13312.valid){
continue;
}
IkReal x13311=((-1.0)*(x13312.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13311;
IkReal gconst18=x13311;
IkReal gconst19=(r01*x13310);
IkReal gconst20=(x13309*x13310);
CheckValue<IkReal> x13320=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13320.valid){
continue;
}
IkReal x13313=x13320.value;
IkReal x13314=(sj3*x13313);
IkReal x13315=(r11*x13314);
IkReal x13316=(r21*x13314);
IkReal x13317=(r20*x13314);
IkReal x13318=(r10*x13314);
IkReal x13319=(r00*r01*x13314);
j4eval[0]=IKsign((((r00*r01*r20*x13315))+((r10*x13317*(r00*r00)))+((r12*r22*sj3))+((r21*x13315*(r01*r01)))+((r00*r01*r10*x13316))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13321=gconst19*gconst19;
IkReal x13322=gconst20*gconst20;
IkReal x13323=(gconst20*sj3);
IkReal x13324=((1.0)*cj3);
IkReal x13325=(r10*sj3);
IkReal x13326=(gconst19*r21);
IkReal x13327=(r11*r20);
IkReal x13328=(cj3*gconst20);
IkReal x13329=((1.0)*r10*r20);
IkReal x13330=(r21*x13321);
CheckValue<IkReal> x13331 = IKatan2WithCheck(IkReal((((r11*r22*x13323))+((gconst19*r22*x13325)))),IkReal((((r11*x13323*x13326))+(((-1.0)*gconst19*x13323*x13329))+(((-1.0)*sj3*x13322*x13327))+((x13325*x13330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13331.valid){
continue;
}
CheckValue<IkReal> x13332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13324))+(((-1.0)*r10*r20*x13322*x13324))+((r10*x13326*x13328))+((gconst19*x13327*x13328))+(((-1.0)*r11*x13324*x13330)))),-1);
if(!x13332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13331.value)+(((1.5707963267949)*(x13332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13333=IKsin(j4);
IkReal x13334=IKcos(j4);
IkReal x13335=(sj1*sj2);
IkReal x13336=(gconst20*sj3);
IkReal x13337=(gconst19*r21);
IkReal x13338=(gconst20*r10);
IkReal x13339=(cj3*gconst19);
IkReal x13340=(gconst19*sj3);
IkReal x13341=((1.0)*cj1);
IkReal x13342=(cj3*gconst20);
IkReal x13343=(cj2*sj1);
IkReal x13344=(cj2*x13341);
IkReal x13345=((1.0)*x13334);
IkReal x13346=((1.0)*x13333);
IkReal x13347=(cj3*x13333);
IkReal x13348=(gconst19*x13333);
evalcond[0]=((((-1.0)*gconst20*r20*x13346))+((x13333*x13337))+(((-1.0)*r22*x13345)));
evalcond[1]=((((-1.0)*r02*x13345))+((r01*x13348))+(((-1.0)*gconst20*r00*x13346)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13345))+((r11*x13348))+(((-1.0)*x13338*x13346)));
evalcond[3]=(((r11*x13334*x13339))+(((-1.0)*cj3*x13338*x13345))+((r10*x13340))+((r12*x13347))+((r11*x13336)));
evalcond[4]=((((-1.0)*r12*sj3*x13346))+((r10*x13339))+((r10*x13334*x13336))+(((-1.0)*r11*x13340*x13345))+((r11*x13342)));
evalcond[5]=(((cj1*sj2))+((r22*x13347))+((cj3*x13334*x13337))+((r21*x13336))+(((-1.0)*r20*x13342*x13345))+((r20*x13340))+x13343);
evalcond[6]=((((-1.0)*r00*x13342*x13345))+(((-1.0)*x13344))+((r01*x13336))+((r02*x13347))+((r01*x13334*x13339))+((r00*x13340))+x13335);
evalcond[7]=((((-1.0)*r22*sj3*x13346))+((r20*x13334*x13336))+(((-1.0)*sj3*x13337*x13345))+(((-1.0)*x13344))+((r21*x13342))+((r20*x13339))+x13335);
evalcond[8]=((((-1.0)*r02*sj3*x13346))+(((-1.0)*r01*x13340*x13345))+(((-1.0)*sj2*x13341))+((r00*x13339))+(((-1.0)*x13343))+((r00*x13334*x13336))+((r01*x13342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13349=gconst19*gconst19;
IkReal x13350=gconst20*gconst20;
IkReal x13351=(r21*sj3);
IkReal x13352=(cj3*r11);
IkReal x13353=(gconst19*gconst20);
IkReal x13354=((1.0)*r10);
IkReal x13355=(cj3*r10);
IkReal x13356=(r20*x13350);
CheckValue<IkReal> x13357=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13351*x13353*x13354))+(((-1.0)*r11*r20*sj3*x13353))+((r12*r22*sj3))+((r11*x13349*x13351))+((r10*sj3*x13356)))),-1);
if(!x13357.valid){
continue;
}
CheckValue<IkReal> x13358 = IKatan2WithCheck(IkReal((((gconst19*r22*x13355))+((gconst20*r22*x13352)))),IkReal(((((-1.0)*cj3*r20*x13353*x13354))+((r21*x13349*x13355))+((r21*x13352*x13353))+(((-1.0)*x13352*x13356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13357.value)))+(x13358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13359=IKsin(j4);
IkReal x13360=IKcos(j4);
IkReal x13361=(sj1*sj2);
IkReal x13362=(gconst20*sj3);
IkReal x13363=(gconst19*r21);
IkReal x13364=(gconst20*r10);
IkReal x13365=(cj3*gconst19);
IkReal x13366=(gconst19*sj3);
IkReal x13367=((1.0)*cj1);
IkReal x13368=(cj3*gconst20);
IkReal x13369=(cj2*sj1);
IkReal x13370=(cj2*x13367);
IkReal x13371=((1.0)*x13360);
IkReal x13372=((1.0)*x13359);
IkReal x13373=(cj3*x13359);
IkReal x13374=(gconst19*x13359);
evalcond[0]=((((-1.0)*r22*x13371))+((x13359*x13363))+(((-1.0)*gconst20*r20*x13372)));
evalcond[1]=(((r01*x13374))+(((-1.0)*gconst20*r00*x13372))+(((-1.0)*r02*x13371)));
evalcond[2]=((1.0)+((r11*x13374))+(((-1.0)*x13364*x13372))+(((-1.0)*r12*x13371)));
evalcond[3]=(((r10*x13366))+(((-1.0)*cj3*x13364*x13371))+((r12*x13373))+((r11*x13362))+((r11*x13360*x13365)));
evalcond[4]=(((r10*x13365))+((r10*x13360*x13362))+((r11*x13368))+(((-1.0)*r11*x13366*x13371))+(((-1.0)*r12*sj3*x13372)));
evalcond[5]=(((r20*x13366))+((cj1*sj2))+(((-1.0)*r20*x13368*x13371))+((r22*x13373))+((r21*x13362))+((cj3*x13360*x13363))+x13369);
evalcond[6]=(((r02*x13373))+((r01*x13362))+(((-1.0)*r00*x13368*x13371))+((r00*x13366))+((r01*x13360*x13365))+(((-1.0)*x13370))+x13361);
evalcond[7]=(((r20*x13365))+((r20*x13360*x13362))+(((-1.0)*r22*sj3*x13372))+(((-1.0)*x13370))+((r21*x13368))+x13361+(((-1.0)*sj3*x13363*x13371)));
evalcond[8]=((((-1.0)*x13369))+(((-1.0)*sj2*x13367))+((r01*x13368))+((r00*x13365))+((r00*x13360*x13362))+(((-1.0)*r02*sj3*x13372))+(((-1.0)*r01*x13366*x13371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13375 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13375.valid){
continue;
}
CheckValue<IkReal> x13376=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13375.value)+(((1.5707963267949)*(x13376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13377=IKsin(j4);
IkReal x13378=IKcos(j4);
IkReal x13379=(sj1*sj2);
IkReal x13380=(gconst20*sj3);
IkReal x13381=(gconst19*r21);
IkReal x13382=(gconst20*r10);
IkReal x13383=(cj3*gconst19);
IkReal x13384=(gconst19*sj3);
IkReal x13385=((1.0)*cj1);
IkReal x13386=(cj3*gconst20);
IkReal x13387=(cj2*sj1);
IkReal x13388=(cj2*x13385);
IkReal x13389=((1.0)*x13378);
IkReal x13390=((1.0)*x13377);
IkReal x13391=(cj3*x13377);
IkReal x13392=(gconst19*x13377);
evalcond[0]=((((-1.0)*r22*x13389))+((x13377*x13381))+(((-1.0)*gconst20*r20*x13390)));
evalcond[1]=(((r01*x13392))+(((-1.0)*r02*x13389))+(((-1.0)*gconst20*r00*x13390)));
evalcond[2]=((1.0)+((r11*x13392))+(((-1.0)*x13382*x13390))+(((-1.0)*r12*x13389)));
evalcond[3]=(((r11*x13380))+((r10*x13384))+(((-1.0)*cj3*x13382*x13389))+((r12*x13391))+((r11*x13378*x13383)));
evalcond[4]=(((r10*x13378*x13380))+((r11*x13386))+((r10*x13383))+(((-1.0)*r11*x13384*x13389))+(((-1.0)*r12*sj3*x13390)));
evalcond[5]=(((r20*x13384))+((cj1*sj2))+((cj3*x13378*x13381))+((r22*x13391))+(((-1.0)*r20*x13386*x13389))+x13387+((r21*x13380)));
evalcond[6]=(((r01*x13378*x13383))+((r01*x13380))+((r00*x13384))+(((-1.0)*x13388))+((r02*x13391))+x13379+(((-1.0)*r00*x13386*x13389)));
evalcond[7]=(((r20*x13378*x13380))+((r20*x13383))+(((-1.0)*x13388))+(((-1.0)*sj3*x13381*x13389))+(((-1.0)*r22*sj3*x13390))+x13379+((r21*x13386)));
evalcond[8]=((((-1.0)*x13387))+((r01*x13386))+((r00*x13383))+((r00*x13378*x13380))+(((-1.0)*r01*x13384*x13389))+(((-1.0)*r02*sj3*x13390))+(((-1.0)*sj2*x13385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13393=((-1.0)*r01);
IkReal x13395 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13395)==0){
continue;
}
IkReal x13394=pow(x13395,-0.5);
CheckValue<IkReal> x13396 = IKatan2WithCheck(IkReal(x13393),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13396.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13396.value))));
IkReal gconst22=(x13393*x13394);
IkReal gconst23=((1.0)*r00*x13394);
CheckValue<IkReal> x13397 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13397.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13398=((-1.0)*r01);
CheckValue<IkReal> x13401 = IKatan2WithCheck(IkReal(x13398),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13401.valid){
continue;
}
IkReal x13399=((1.0)*(x13401.value));
IkReal x13400=x13394;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13399)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13399)));
IkReal gconst22=(x13398*x13400);
IkReal gconst23=((1.0)*r00*x13400);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13402=((-1.0)*r01);
CheckValue<IkReal> x13405 = IKatan2WithCheck(IkReal(x13402),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13405.valid){
continue;
}
IkReal x13403=((1.0)*(x13405.value));
IkReal x13404=x13394;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13403)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13403)));
IkReal gconst22=(x13402*x13404);
IkReal gconst23=((1.0)*r00*x13404);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13406=gconst22*gconst22;
IkReal x13407=gconst23*gconst23;
IkReal x13408=(r21*sj3);
IkReal x13409=((1.0)*cj3);
IkReal x13410=(gconst23*r11);
IkReal x13411=(r22*sj3);
IkReal x13412=(gconst22*r10);
IkReal x13413=((1.0)*r20*sj3);
CheckValue<IkReal> x13414 = IKatan2WithCheck(IkReal((((x13410*x13411))+((x13411*x13412)))),IkReal((((gconst22*x13408*x13410))+(((-1.0)*gconst23*x13412*x13413))+(((-1.0)*r11*x13407*x13413))+((r10*x13406*x13408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13414.valid){
continue;
}
CheckValue<IkReal> x13415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13409))+(((-1.0)*r10*r20*x13407*x13409))+((cj3*gconst22*r20*x13410))+((cj3*gconst23*r21*x13412))+(((-1.0)*r11*r21*x13406*x13409)))),-1);
if(!x13415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13414.value)+(((1.5707963267949)*(x13415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13416=IKsin(j4);
IkReal x13417=IKcos(j4);
IkReal x13418=(sj1*sj2);
IkReal x13419=(gconst23*sj3);
IkReal x13420=(gconst22*sj3);
IkReal x13421=(cj2*sj1);
IkReal x13422=((1.0)*cj1);
IkReal x13423=(cj3*gconst23);
IkReal x13424=(cj3*gconst22);
IkReal x13425=(cj2*x13422);
IkReal x13426=((1.0)*x13417);
IkReal x13427=(cj3*x13416);
IkReal x13428=(gconst22*x13416);
IkReal x13429=((1.0)*sj3*x13416);
IkReal x13430=(x13417*x13424);
IkReal x13431=((1.0)*gconst23*x13416);
evalcond[0]=((((-1.0)*r22*x13426))+(((-1.0)*r20*x13431))+((r21*x13428)));
evalcond[1]=((((-1.0)*r02*x13426))+(((-1.0)*r00*x13431))+((r01*x13428)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13426))+((r11*x13428))+(((-1.0)*r10*x13431)));
evalcond[3]=(((r11*x13430))+(((-1.0)*r10*x13423*x13426))+((r12*x13427))+((r11*x13419))+((r10*x13420)));
evalcond[4]=(((r10*x13417*x13419))+(((-1.0)*r12*x13429))+(((-1.0)*r11*x13420*x13426))+((r11*x13423))+((r10*x13424)));
evalcond[5]=(x13421+((cj1*sj2))+((r22*x13427))+(((-1.0)*r20*x13423*x13426))+((r21*x13430))+((r21*x13419))+((r20*x13420)));
evalcond[6]=(((r01*x13430))+x13418+(((-1.0)*r00*x13423*x13426))+(((-1.0)*x13425))+((r02*x13427))+((r01*x13419))+((r00*x13420)));
evalcond[7]=(x13418+(((-1.0)*r22*x13429))+(((-1.0)*r21*x13420*x13426))+(((-1.0)*x13425))+((r21*x13423))+((r20*x13417*x13419))+((r20*x13424)));
evalcond[8]=((((-1.0)*x13421))+(((-1.0)*sj2*x13422))+(((-1.0)*r02*x13429))+((r00*x13424))+((r01*x13423))+(((-1.0)*r01*x13420*x13426))+((r00*x13417*x13419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13432=((1.0)*gconst23);
CheckValue<IkReal> x13433 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13433.valid){
continue;
}
CheckValue<IkReal> x13434=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13432)))),-1);
if(!x13434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13433.value)+(((1.5707963267949)*(x13434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13435=IKsin(j4);
IkReal x13436=IKcos(j4);
IkReal x13437=(sj1*sj2);
IkReal x13438=(gconst23*sj3);
IkReal x13439=(gconst22*sj3);
IkReal x13440=(cj2*sj1);
IkReal x13441=((1.0)*cj1);
IkReal x13442=(cj3*gconst23);
IkReal x13443=(cj3*gconst22);
IkReal x13444=(cj2*x13441);
IkReal x13445=((1.0)*x13436);
IkReal x13446=(cj3*x13435);
IkReal x13447=(gconst22*x13435);
IkReal x13448=((1.0)*sj3*x13435);
IkReal x13449=(x13436*x13443);
IkReal x13450=((1.0)*gconst23*x13435);
evalcond[0]=((((-1.0)*r20*x13450))+(((-1.0)*r22*x13445))+((r21*x13447)));
evalcond[1]=((((-1.0)*r02*x13445))+(((-1.0)*r00*x13450))+((r01*x13447)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13450))+(((-1.0)*r12*x13445))+((r11*x13447)));
evalcond[3]=(((r11*x13438))+((r12*x13446))+((r11*x13449))+(((-1.0)*r10*x13442*x13445))+((r10*x13439)));
evalcond[4]=(((r10*x13436*x13438))+(((-1.0)*r12*x13448))+((r10*x13443))+((r11*x13442))+(((-1.0)*r11*x13439*x13445)));
evalcond[5]=(((r22*x13446))+x13440+(((-1.0)*r20*x13442*x13445))+((cj1*sj2))+((r21*x13438))+((r20*x13439))+((r21*x13449)));
evalcond[6]=(((r01*x13438))+x13437+((r02*x13446))+(((-1.0)*r00*x13442*x13445))+(((-1.0)*x13444))+((r01*x13449))+((r00*x13439)));
evalcond[7]=(x13437+(((-1.0)*x13444))+(((-1.0)*r22*x13448))+((r20*x13436*x13438))+((r20*x13443))+((r21*x13442))+(((-1.0)*r21*x13439*x13445)));
evalcond[8]=((((-1.0)*r01*x13439*x13445))+(((-1.0)*r02*x13448))+((r00*x13443))+((r01*x13442))+((r00*x13436*x13438))+(((-1.0)*x13440))+(((-1.0)*sj2*x13441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13451=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13451.valid){
continue;
}
CheckValue<IkReal> x13452 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13451.value)))+(x13452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13453=IKsin(j4);
IkReal x13454=IKcos(j4);
IkReal x13455=(sj1*sj2);
IkReal x13456=(gconst23*sj3);
IkReal x13457=(gconst22*sj3);
IkReal x13458=(cj2*sj1);
IkReal x13459=((1.0)*cj1);
IkReal x13460=(cj3*gconst23);
IkReal x13461=(cj3*gconst22);
IkReal x13462=(cj2*x13459);
IkReal x13463=((1.0)*x13454);
IkReal x13464=(cj3*x13453);
IkReal x13465=(gconst22*x13453);
IkReal x13466=((1.0)*sj3*x13453);
IkReal x13467=(x13454*x13461);
IkReal x13468=((1.0)*gconst23*x13453);
evalcond[0]=((((-1.0)*r22*x13463))+((r21*x13465))+(((-1.0)*r20*x13468)));
evalcond[1]=((((-1.0)*r00*x13468))+(((-1.0)*r02*x13463))+((r01*x13465)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13468))+((r11*x13465))+(((-1.0)*r12*x13463)));
evalcond[3]=(((r10*x13457))+((r12*x13464))+((r11*x13456))+((r11*x13467))+(((-1.0)*r10*x13460*x13463)));
evalcond[4]=(((r10*x13454*x13456))+((r10*x13461))+(((-1.0)*r11*x13457*x13463))+((r11*x13460))+(((-1.0)*r12*x13466)));
evalcond[5]=(x13458+((r20*x13457))+((r21*x13456))+((r21*x13467))+((cj1*sj2))+(((-1.0)*r20*x13460*x13463))+((r22*x13464)));
evalcond[6]=(x13455+(((-1.0)*x13462))+(((-1.0)*r00*x13460*x13463))+((r02*x13464))+((r01*x13456))+((r01*x13467))+((r00*x13457)));
evalcond[7]=(x13455+((r20*x13461))+(((-1.0)*r22*x13466))+((r21*x13460))+(((-1.0)*x13462))+((r20*x13454*x13456))+(((-1.0)*r21*x13457*x13463)));
evalcond[8]=(((r00*x13454*x13456))+(((-1.0)*x13458))+(((-1.0)*sj2*x13459))+(((-1.0)*r02*x13466))+(((-1.0)*r01*x13457*x13463))+((r01*x13460))+((r00*x13461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13470 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13470)==0){
continue;
}
IkReal x13469=pow(x13470,-0.5);
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13471.value));
IkReal gconst25=((-1.0)*r21*x13469);
IkReal gconst26=(r20*x13469);
CheckValue<IkReal> x13472 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13472.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13472.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13475 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13475.valid){
continue;
}
IkReal x13473=((-1.0)*(x13475.value));
IkReal x13474=x13469;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13473;
IkReal gconst24=x13473;
IkReal gconst25=((-1.0)*r21*x13474);
IkReal gconst26=(r20*x13474);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13478 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13478.valid){
continue;
}
IkReal x13476=((-1.0)*(x13478.value));
IkReal x13477=x13469;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13476;
IkReal gconst24=x13476;
IkReal gconst25=((-1.0)*r21*x13477);
IkReal gconst26=(r20*x13477);
CheckValue<IkReal> x13486=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13486.valid){
continue;
}
IkReal x13479=x13486.value;
IkReal x13480=(sj3*x13479);
IkReal x13481=(r11*x13480);
IkReal x13482=(r00*x13480);
IkReal x13483=(r01*x13480);
IkReal x13484=(r10*x13480);
IkReal x13485=(r20*r21*x13480);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13482*(r20*r20)))+((r00*r20*r21*x13481))+((r10*r20*r21*x13483))+((r01*x13481*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13487=gconst25*gconst25;
IkReal x13488=gconst26*gconst26;
IkReal x13489=(r00*r11);
IkReal x13490=(r01*r10);
IkReal x13491=(r02*sj3);
IkReal x13492=(gconst25*r10);
IkReal x13493=(gconst26*r11);
IkReal x13494=((1.0)*sj3);
IkReal x13495=((1.0)*cj3);
IkReal x13496=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13497=IKPowWithIntegerCheck(IKsign((((x13490*x13496))+(((-1.0)*r01*r11*x13487*x13495))+(((-1.0)*r02*r12*x13495))+((x13489*x13496))+(((-1.0)*r00*r10*x13488*x13495)))),-1);
if(!x13497.valid){
continue;
}
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal((((x13491*x13493))+((x13491*x13492)))),IkReal(((((-1.0)*gconst26*r00*x13492*x13494))+((gconst25*r01*sj3*x13493))+((sj3*x13487*x13490))+(((-1.0)*x13488*x13489*x13494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13497.value)))+(x13498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13499=IKsin(j4);
IkReal x13500=IKcos(j4);
IkReal x13501=(sj1*sj2);
IkReal x13502=(gconst26*sj3);
IkReal x13503=(gconst25*sj3);
IkReal x13504=(gconst26*r10);
IkReal x13505=(gconst25*r11);
IkReal x13506=(cj3*gconst25);
IkReal x13507=((1.0)*cj2);
IkReal x13508=(cj1*sj2);
IkReal x13509=(gconst26*r00);
IkReal x13510=(gconst26*r20);
IkReal x13511=(cj3*gconst26);
IkReal x13512=(cj1*x13507);
IkReal x13513=((1.0)*x13500);
IkReal x13514=((1.0)*x13499);
IkReal x13515=(cj3*x13499);
IkReal x13516=(gconst25*x13499);
evalcond[0]=(((r21*x13516))+(((-1.0)*r22*x13513))+(((-1.0)*x13510*x13514)));
evalcond[1]=((((-1.0)*x13509*x13514))+((r01*x13516))+(((-1.0)*r02*x13513)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13513))+((x13499*x13505))+(((-1.0)*x13504*x13514)));
evalcond[3]=(((r10*x13503))+((cj3*x13500*x13505))+((r11*x13502))+((r12*x13515))+(((-1.0)*cj3*x13504*x13513)));
evalcond[4]=(((r10*x13506))+(((-1.0)*r11*x13503*x13513))+(((-1.0)*r12*sj3*x13514))+((r11*x13511))+((r10*x13500*x13502)));
evalcond[5]=(((r20*x13503))+((cj2*sj1))+((r21*x13500*x13506))+x13508+((r22*x13515))+(((-1.0)*cj3*x13510*x13513))+((r21*x13502)));
evalcond[6]=(x13501+((r02*x13515))+(((-1.0)*cj3*x13509*x13513))+(((-1.0)*x13512))+((r01*x13500*x13506))+((r01*x13502))+((r00*x13503)));
evalcond[7]=(((r21*x13511))+((r20*x13506))+x13501+(((-1.0)*r21*x13503*x13513))+(((-1.0)*r22*sj3*x13514))+((r20*x13500*x13502))+(((-1.0)*x13512)));
evalcond[8]=((((-1.0)*sj1*x13507))+((r00*x13500*x13502))+(((-1.0)*x13508))+(((-1.0)*r02*sj3*x13514))+(((-1.0)*r01*x13503*x13513))+((r01*x13511))+((r00*x13506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13517=gconst26*gconst26;
IkReal x13518=gconst25*gconst25;
IkReal x13519=(r01*r10);
IkReal x13520=(cj3*r11);
IkReal x13521=(gconst25*gconst26);
IkReal x13522=(cj3*r10);
IkReal x13523=(r00*x13517);
IkReal x13524=((1.0)*sj3*x13521);
CheckValue<IkReal> x13525=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r00*r11*x13524))+((r10*sj3*x13523))+((r01*r11*sj3*x13518))+(((-1.0)*x13519*x13524)))),-1);
if(!x13525.valid){
continue;
}
CheckValue<IkReal> x13526 = IKatan2WithCheck(IkReal((((gconst25*r02*x13522))+((gconst26*r02*x13520)))),IkReal(((((-1.0)*r00*x13521*x13522))+((cj3*x13518*x13519))+((r01*x13520*x13521))+(((-1.0)*x13520*x13523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13525.value)))+(x13526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13527=IKsin(j4);
IkReal x13528=IKcos(j4);
IkReal x13529=(sj1*sj2);
IkReal x13530=(gconst26*sj3);
IkReal x13531=(gconst25*sj3);
IkReal x13532=(gconst26*r10);
IkReal x13533=(gconst25*r11);
IkReal x13534=(cj3*gconst25);
IkReal x13535=((1.0)*cj2);
IkReal x13536=(cj1*sj2);
IkReal x13537=(gconst26*r00);
IkReal x13538=(gconst26*r20);
IkReal x13539=(cj3*gconst26);
IkReal x13540=(cj1*x13535);
IkReal x13541=((1.0)*x13528);
IkReal x13542=((1.0)*x13527);
IkReal x13543=(cj3*x13527);
IkReal x13544=(gconst25*x13527);
evalcond[0]=(((r21*x13544))+(((-1.0)*x13538*x13542))+(((-1.0)*r22*x13541)));
evalcond[1]=(((r01*x13544))+(((-1.0)*r02*x13541))+(((-1.0)*x13537*x13542)));
evalcond[2]=((1.0)+((x13527*x13533))+(((-1.0)*x13532*x13542))+(((-1.0)*r12*x13541)));
evalcond[3]=(((r12*x13543))+(((-1.0)*cj3*x13532*x13541))+((r10*x13531))+((r11*x13530))+((cj3*x13528*x13533)));
evalcond[4]=((((-1.0)*r11*x13531*x13541))+((r10*x13528*x13530))+(((-1.0)*r12*sj3*x13542))+((r10*x13534))+((r11*x13539)));
evalcond[5]=(((cj2*sj1))+x13536+((r22*x13543))+((r20*x13531))+((r21*x13528*x13534))+((r21*x13530))+(((-1.0)*cj3*x13538*x13541)));
evalcond[6]=((((-1.0)*cj3*x13537*x13541))+x13529+(((-1.0)*x13540))+((r01*x13528*x13534))+((r01*x13530))+((r00*x13531))+((r02*x13543)));
evalcond[7]=(x13529+(((-1.0)*x13540))+((r20*x13534))+(((-1.0)*r22*sj3*x13542))+(((-1.0)*r21*x13531*x13541))+((r20*x13528*x13530))+((r21*x13539)));
evalcond[8]=((((-1.0)*sj1*x13535))+(((-1.0)*x13536))+(((-1.0)*r01*x13531*x13541))+((r00*x13528*x13530))+((r01*x13539))+((r00*x13534))+(((-1.0)*r02*sj3*x13542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13545=((1.0)*gconst26);
CheckValue<IkReal> x13546 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13546.valid){
continue;
}
CheckValue<IkReal> x13547=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13545))+(((-1.0)*gconst25*r00)))),-1);
if(!x13547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13546.value)+(((1.5707963267949)*(x13547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13548=IKsin(j4);
IkReal x13549=IKcos(j4);
IkReal x13550=(sj1*sj2);
IkReal x13551=(gconst26*sj3);
IkReal x13552=(gconst25*sj3);
IkReal x13553=(gconst26*r10);
IkReal x13554=(gconst25*r11);
IkReal x13555=(cj3*gconst25);
IkReal x13556=((1.0)*cj2);
IkReal x13557=(cj1*sj2);
IkReal x13558=(gconst26*r00);
IkReal x13559=(gconst26*r20);
IkReal x13560=(cj3*gconst26);
IkReal x13561=(cj1*x13556);
IkReal x13562=((1.0)*x13549);
IkReal x13563=((1.0)*x13548);
IkReal x13564=(cj3*x13548);
IkReal x13565=(gconst25*x13548);
evalcond[0]=(((r21*x13565))+(((-1.0)*x13559*x13563))+(((-1.0)*r22*x13562)));
evalcond[1]=(((r01*x13565))+(((-1.0)*r02*x13562))+(((-1.0)*x13558*x13563)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13562))+(((-1.0)*x13553*x13563))+((x13548*x13554)));
evalcond[3]=((((-1.0)*cj3*x13553*x13562))+((r10*x13552))+((r11*x13551))+((cj3*x13549*x13554))+((r12*x13564)));
evalcond[4]=(((r10*x13555))+((r11*x13560))+((r10*x13549*x13551))+(((-1.0)*r12*sj3*x13563))+(((-1.0)*r11*x13552*x13562)));
evalcond[5]=(((cj2*sj1))+x13557+((r21*x13549*x13555))+((r21*x13551))+(((-1.0)*cj3*x13559*x13562))+((r22*x13564))+((r20*x13552)));
evalcond[6]=(x13550+((r00*x13552))+((r01*x13551))+((r02*x13564))+((r01*x13549*x13555))+(((-1.0)*x13561))+(((-1.0)*cj3*x13558*x13562)));
evalcond[7]=(x13550+(((-1.0)*r21*x13552*x13562))+(((-1.0)*r22*sj3*x13563))+((r21*x13560))+((r20*x13555))+(((-1.0)*x13561))+((r20*x13549*x13551)));
evalcond[8]=(((r00*x13549*x13551))+((r01*x13560))+((r00*x13555))+(((-1.0)*r01*x13552*x13562))+(((-1.0)*r02*sj3*x13563))+(((-1.0)*sj1*x13556))+(((-1.0)*x13557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13567 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13567)==0){
continue;
}
IkReal x13566=pow(x13567,-0.5);
CheckValue<IkReal> x13568 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13568.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13568.value))));
IkReal gconst28=((1.0)*r21*x13566);
IkReal gconst29=((-1.0)*r20*x13566);
CheckValue<IkReal> x13569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13569.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13569.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
IkReal x13570=((1.0)*(x13572.value));
IkReal x13571=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13570)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13570)));
IkReal gconst28=((1.0)*r21*x13571);
IkReal gconst29=((-1.0)*r20*x13571);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13575 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13575.valid){
continue;
}
IkReal x13573=((1.0)*(x13575.value));
IkReal x13574=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13573)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13573)));
IkReal gconst28=((1.0)*r21*x13574);
IkReal gconst29=((-1.0)*r20*x13574);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13578 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13578.valid){
continue;
}
IkReal x13576=((1.0)*(x13578.value));
IkReal x13577=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13576)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13576)));
IkReal gconst28=((1.0)*r21*x13577);
IkReal gconst29=((-1.0)*r20*x13577);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13581 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13581.valid){
continue;
}
IkReal x13579=((1.0)*(x13581.value));
IkReal x13580=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13579)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13579)));
IkReal gconst28=((1.0)*r21*x13580);
IkReal gconst29=((-1.0)*r20*x13580);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
IkReal x13582=((1.0)*(x13584.value));
IkReal x13583=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13582)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13582)));
IkReal gconst28=((1.0)*r21*x13583);
IkReal gconst29=((-1.0)*r20*x13583);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13587 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13587.valid){
continue;
}
IkReal x13585=((1.0)*(x13587.value));
IkReal x13586=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13585)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13585)));
IkReal gconst28=((1.0)*r21*x13586);
IkReal gconst29=((-1.0)*r20*x13586);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13588=(gconst29*r10);
IkReal x13589=(gconst28*r11);
CheckValue<IkReal> x13590=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13588*x13589))+(x13589*x13589)+(x13588*x13588))),-1);
if(!x13590.valid){
continue;
}
CheckValue<IkReal> x13591 = IKatan2WithCheck(IkReal((x13588+(((-1.0)*x13589)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13590.value)))+(x13591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13592=IKsin(j4);
IkReal x13593=IKcos(j4);
IkReal x13594=(gconst28*r11);
IkReal x13595=((1.0)*cj2);
IkReal x13596=((1.0)*x13593);
IkReal x13597=(gconst29*x13593);
IkReal x13598=(gconst28*x13592);
IkReal x13599=((1.0)*x13592);
IkReal x13600=(gconst29*x13599);
evalcond[0]=(((r21*x13598))+(((-1.0)*r22*x13596))+(((-1.0)*r20*x13600)));
evalcond[1]=(((r01*x13598))+(((-1.0)*r00*x13600))+(((-1.0)*r02*x13596)));
evalcond[2]=(((r10*x13597))+(((-1.0)*r12*x13599))+(((-1.0)*x13594*x13596)));
evalcond[3]=((1.0)+((x13592*x13594))+(((-1.0)*r12*x13596))+(((-1.0)*r10*x13600)));
evalcond[4]=((((-1.0)*gconst28*r21*x13596))+((sj1*sj2))+(((-1.0)*cj1*x13595))+((r20*x13597))+(((-1.0)*r22*x13599)));
evalcond[5]=(((r00*x13597))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13595))+(((-1.0)*gconst28*r01*x13596))+(((-1.0)*r02*x13599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13601=((1.0)*gconst29);
CheckValue<IkReal> x13602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13601))+(((-1.0)*gconst28*r00)))),-1);
if(!x13602.valid){
continue;
}
CheckValue<IkReal> x13603 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13602.value)))+(x13603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13604=IKsin(j4);
IkReal x13605=IKcos(j4);
IkReal x13606=(gconst28*r11);
IkReal x13607=((1.0)*cj2);
IkReal x13608=((1.0)*x13605);
IkReal x13609=(gconst29*x13605);
IkReal x13610=(gconst28*x13604);
IkReal x13611=((1.0)*x13604);
IkReal x13612=(gconst29*x13611);
evalcond[0]=(((r21*x13610))+(((-1.0)*r20*x13612))+(((-1.0)*r22*x13608)));
evalcond[1]=((((-1.0)*r02*x13608))+((r01*x13610))+(((-1.0)*r00*x13612)));
evalcond[2]=(((r10*x13609))+(((-1.0)*x13606*x13608))+(((-1.0)*r12*x13611)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13612))+((x13604*x13606))+(((-1.0)*r12*x13608)));
evalcond[4]=((((-1.0)*cj1*x13607))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13608))+((r20*x13609))+(((-1.0)*r22*x13611)));
evalcond[5]=((((-1.0)*sj1*x13607))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13611))+(((-1.0)*gconst28*r01*x13608))+((r00*x13609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13613=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13613.valid){
continue;
}
CheckValue<IkReal> x13614 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13613.value)))+(x13614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13615=IKsin(j4);
IkReal x13616=IKcos(j4);
IkReal x13617=(gconst28*r11);
IkReal x13618=((1.0)*cj2);
IkReal x13619=((1.0)*x13616);
IkReal x13620=(gconst29*x13616);
IkReal x13621=(gconst28*x13615);
IkReal x13622=((1.0)*x13615);
IkReal x13623=(gconst29*x13622);
evalcond[0]=(((r21*x13621))+(((-1.0)*r20*x13623))+(((-1.0)*r22*x13619)));
evalcond[1]=((((-1.0)*r00*x13623))+(((-1.0)*r02*x13619))+((r01*x13621)));
evalcond[2]=(((r10*x13620))+(((-1.0)*r12*x13622))+(((-1.0)*x13617*x13619)));
evalcond[3]=((1.0)+((x13615*x13617))+(((-1.0)*r10*x13623))+(((-1.0)*r12*x13619)));
evalcond[4]=((((-1.0)*cj1*x13618))+(((-1.0)*gconst28*r21*x13619))+((sj1*sj2))+(((-1.0)*r22*x13622))+((r20*x13620)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r00*x13620))+(((-1.0)*gconst28*r01*x13619))+(((-1.0)*r02*x13622))+(((-1.0)*sj1*x13618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13626.valid){
continue;
}
IkReal x13624=((1.0)*(x13626.value));
IkReal x13625=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13624)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13624)));
IkReal gconst28=((1.0)*r21*x13625);
IkReal gconst29=((-1.0)*r20*x13625);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13629.valid){
continue;
}
IkReal x13627=((1.0)*(x13629.value));
IkReal x13628=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13627)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13627)));
IkReal gconst28=((1.0)*r21*x13628);
IkReal gconst29=((-1.0)*r20*x13628);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13632 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13632.valid){
continue;
}
IkReal x13630=((1.0)*(x13632.value));
IkReal x13631=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13630)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13630)));
IkReal gconst28=((1.0)*r21*x13631);
IkReal gconst29=((-1.0)*r20*x13631);
IkReal x13633=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(x13633,-1);
if(!x13637.valid){
continue;
}
IkReal x13634=x13637.value;
IkReal x13635=((1.0)*x13634);
IkReal x13636=((((-1.0)*x13635*(r11*r11)*(r21*r21)))+(((-1.0)*x13635*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13634)));
j4eval[0]=x13636;
j4eval[1]=r12;
j4eval[2]=x13633;
j4eval[3]=IKsign(x13636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13638=(gconst28*r11);
IkReal x13639=(gconst29*r10);
CheckValue<IkReal> x13640 = IKatan2WithCheck(IkReal(((((-1.0)*x13639))+x13638)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13640.valid){
continue;
}
CheckValue<IkReal> x13641=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13639*x13639)))+(((-1.0)*(x13638*x13638)))+(((2.0)*x13638*x13639))+(((-1.0)*(r12*r12))))),-1);
if(!x13641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13640.value)+(((1.5707963267949)*(x13641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13642=IKcos(j4);
IkReal x13643=IKsin(j4);
IkReal x13644=(gconst29*r10);
IkReal x13645=(gconst29*r20);
IkReal x13646=(gconst28*r21);
IkReal x13647=((1.0)*cj2);
IkReal x13648=(gconst29*r00);
IkReal x13649=((1.0)*x13642);
IkReal x13650=((1.0)*x13643);
IkReal x13651=(gconst28*x13642);
IkReal x13652=(gconst28*x13643);
evalcond[0]=(((r12*x13643))+(((-1.0)*x13644*x13649))+((r11*x13651)));
evalcond[1]=((((-1.0)*x13645*x13650))+(((-1.0)*r22*x13649))+((x13643*x13646)));
evalcond[2]=((((-1.0)*x13648*x13650))+((r01*x13652))+(((-1.0)*r02*x13649)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13649))+(((-1.0)*x13644*x13650))+((r11*x13652)));
evalcond[4]=((((-1.0)*cj1*x13647))+((r22*x13643))+((sj1*sj2))+((x13642*x13646))+(((-1.0)*x13645*x13649)));
evalcond[5]=((((-1.0)*sj1*x13647))+((r02*x13643))+((r01*x13651))+(((-1.0)*x13648*x13649))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13653=((1.0)*gconst29);
CheckValue<IkReal> x13654 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13653))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13654.valid){
continue;
}
CheckValue<IkReal> x13655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13653))+(((-1.0)*gconst28*r00)))),-1);
if(!x13655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13654.value)+(((1.5707963267949)*(x13655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13656=IKcos(j4);
IkReal x13657=IKsin(j4);
IkReal x13658=(gconst29*r10);
IkReal x13659=(gconst29*r20);
IkReal x13660=(gconst28*r21);
IkReal x13661=((1.0)*cj2);
IkReal x13662=(gconst29*r00);
IkReal x13663=((1.0)*x13656);
IkReal x13664=((1.0)*x13657);
IkReal x13665=(gconst28*x13656);
IkReal x13666=(gconst28*x13657);
evalcond[0]=(((r12*x13657))+((r11*x13665))+(((-1.0)*x13658*x13663)));
evalcond[1]=((((-1.0)*r22*x13663))+((x13657*x13660))+(((-1.0)*x13659*x13664)));
evalcond[2]=((((-1.0)*x13662*x13664))+((r01*x13666))+(((-1.0)*r02*x13663)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13663))+((r11*x13666))+(((-1.0)*x13658*x13664)));
evalcond[4]=(((sj1*sj2))+((x13656*x13660))+((r22*x13657))+(((-1.0)*x13659*x13663))+(((-1.0)*cj1*x13661)));
evalcond[5]=((((-1.0)*sj1*x13661))+(((-1.0)*cj1*sj2))+(((-1.0)*x13662*x13663))+((r01*x13665))+((r02*x13657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13667=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13667.valid){
continue;
}
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13667.value)))+(x13668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13669=IKcos(j4);
IkReal x13670=IKsin(j4);
IkReal x13671=(gconst29*r10);
IkReal x13672=(gconst29*r20);
IkReal x13673=(gconst28*r21);
IkReal x13674=((1.0)*cj2);
IkReal x13675=(gconst29*r00);
IkReal x13676=((1.0)*x13669);
IkReal x13677=((1.0)*x13670);
IkReal x13678=(gconst28*x13669);
IkReal x13679=(gconst28*x13670);
evalcond[0]=(((r12*x13670))+(((-1.0)*x13671*x13676))+((r11*x13678)));
evalcond[1]=((((-1.0)*x13672*x13677))+((x13670*x13673))+(((-1.0)*r22*x13676)));
evalcond[2]=((((-1.0)*x13675*x13677))+((r01*x13679))+(((-1.0)*r02*x13676)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13676))+(((-1.0)*x13671*x13677))+((r11*x13679)));
evalcond[4]=(((x13669*x13673))+((r22*x13670))+(((-1.0)*x13672*x13676))+((sj1*sj2))+(((-1.0)*cj1*x13674)));
evalcond[5]=((((-1.0)*sj1*x13674))+((r02*x13670))+(((-1.0)*cj1*sj2))+(((-1.0)*x13675*x13676))+((r01*x13678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
IkReal x13680=((1.0)*(x13682.value));
IkReal x13681=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13680)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13680)));
IkReal gconst28=((1.0)*r21*x13681);
IkReal gconst29=((-1.0)*r20*x13681);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13685 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13685.valid){
continue;
}
IkReal x13683=((1.0)*(x13685.value));
IkReal x13684=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13683)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13683)));
IkReal gconst28=((1.0)*r21*x13684);
IkReal gconst29=((-1.0)*r20*x13684);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13688 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13688.valid){
continue;
}
IkReal x13686=((1.0)*(x13688.value));
IkReal x13687=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13686)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13686)));
IkReal gconst28=((1.0)*r21*x13687);
IkReal gconst29=((-1.0)*r20*x13687);
IkReal x13689=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13693=IKPowWithIntegerCheck(x13689,-1);
if(!x13693.valid){
continue;
}
IkReal x13690=x13693.value;
IkReal x13691=((1.0)*x13690);
IkReal x13692=((((-2.0)*r10*r11*r20*r21*x13690))+(((-1.0)*x13691*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13691*(r10*r10)*(r20*r20))));
j4eval[0]=x13692;
j4eval[1]=r12;
j4eval[2]=x13689;
j4eval[3]=IKsign(x13692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13694=(gconst28*r11);
IkReal x13695=(gconst29*r10);
CheckValue<IkReal> x13696 = IKatan2WithCheck(IkReal((x13694+(((-1.0)*x13695)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13696.valid){
continue;
}
CheckValue<IkReal> x13697=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13695*x13695)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13694*x13694)))+(((2.0)*x13694*x13695)))),-1);
if(!x13697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13696.value)+(((1.5707963267949)*(x13697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13698=IKcos(j4);
IkReal x13699=IKsin(j4);
IkReal x13700=(gconst29*r10);
IkReal x13701=(gconst29*r20);
IkReal x13702=(gconst28*r21);
IkReal x13703=(gconst29*r00);
IkReal x13704=((1.0)*x13698);
IkReal x13705=((1.0)*x13699);
IkReal x13706=(gconst28*x13698);
IkReal x13707=(gconst28*x13699);
evalcond[0]=((((-1.0)*x13700*x13704))+((r12*x13699))+((r11*x13706)));
evalcond[1]=((((-1.0)*r22*x13704))+(((-1.0)*x13701*x13705))+((x13699*x13702)));
evalcond[2]=((((-1.0)*x13703*x13705))+((r01*x13707))+(((-1.0)*r02*x13704)));
evalcond[3]=((1.0)+(((-1.0)*x13700*x13705))+(((-1.0)*r12*x13704))+((r11*x13707)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13701*x13704))+((cj1*sj2))+((r22*x13699))+((x13698*x13702)));
evalcond[5]=((((-1.0)*x13703*x13704))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13706))+((r02*x13699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13708=((1.0)*gconst29);
CheckValue<IkReal> x13709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13708))+(((-1.0)*gconst28*r00)))),-1);
if(!x13709.valid){
continue;
}
CheckValue<IkReal> x13710 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13708))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13709.value)))+(x13710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13711=IKcos(j4);
IkReal x13712=IKsin(j4);
IkReal x13713=(gconst29*r10);
IkReal x13714=(gconst29*r20);
IkReal x13715=(gconst28*r21);
IkReal x13716=(gconst29*r00);
IkReal x13717=((1.0)*x13711);
IkReal x13718=((1.0)*x13712);
IkReal x13719=(gconst28*x13711);
IkReal x13720=(gconst28*x13712);
evalcond[0]=((((-1.0)*x13713*x13717))+((r12*x13712))+((r11*x13719)));
evalcond[1]=((((-1.0)*r22*x13717))+(((-1.0)*x13714*x13718))+((x13712*x13715)));
evalcond[2]=(((r01*x13720))+(((-1.0)*r02*x13717))+(((-1.0)*x13716*x13718)));
evalcond[3]=((1.0)+(((-1.0)*x13713*x13718))+((r11*x13720))+(((-1.0)*r12*x13717)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13714*x13717))+((cj1*sj2))+((r22*x13712))+((x13711*x13715)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13719))+(((-1.0)*x13716*x13717))+((r02*x13712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13721=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13721.valid){
continue;
}
CheckValue<IkReal> x13722 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13721.value)))+(x13722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13723=IKcos(j4);
IkReal x13724=IKsin(j4);
IkReal x13725=(gconst29*r10);
IkReal x13726=(gconst29*r20);
IkReal x13727=(gconst28*r21);
IkReal x13728=(gconst29*r00);
IkReal x13729=((1.0)*x13723);
IkReal x13730=((1.0)*x13724);
IkReal x13731=(gconst28*x13723);
IkReal x13732=(gconst28*x13724);
evalcond[0]=((((-1.0)*x13725*x13729))+((r12*x13724))+((r11*x13731)));
evalcond[1]=((((-1.0)*r22*x13729))+(((-1.0)*x13726*x13730))+((x13724*x13727)));
evalcond[2]=((((-1.0)*x13728*x13730))+(((-1.0)*r02*x13729))+((r01*x13732)));
evalcond[3]=((1.0)+(((-1.0)*x13725*x13730))+(((-1.0)*r12*x13729))+((r11*x13732)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13724))+((x13723*x13727))+(((-1.0)*x13726*x13729)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13724))+(((-1.0)*x13728*x13729))+((r01*x13731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13735 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13735.valid){
continue;
}
IkReal x13733=((1.0)*(x13735.value));
IkReal x13734=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13733)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13733)));
IkReal gconst28=((1.0)*r21*x13734);
IkReal gconst29=((-1.0)*r20*x13734);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13738 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13738.valid){
continue;
}
IkReal x13736=((1.0)*(x13738.value));
IkReal x13737=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13736)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13736)));
IkReal gconst28=((1.0)*r21*x13737);
IkReal gconst29=((-1.0)*r20*x13737);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13741 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13741.valid){
continue;
}
IkReal x13739=((1.0)*(x13741.value));
IkReal x13740=x13566;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13739)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13739)));
IkReal gconst28=((1.0)*r21*x13740);
IkReal gconst29=((-1.0)*r20*x13740);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13742=(gconst29*r10);
IkReal x13743=(gconst28*r11);
CheckValue<IkReal> x13744=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13743*x13743)+(((-2.0)*x13742*x13743))+(x13742*x13742))),-1);
if(!x13744.valid){
continue;
}
CheckValue<IkReal> x13745 = IKatan2WithCheck(IkReal((x13742+(((-1.0)*x13743)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13744.value)))+(x13745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13746=IKsin(j4);
IkReal x13747=IKcos(j4);
IkReal x13748=(gconst28*r11);
IkReal x13749=((1.0)*x13747);
IkReal x13750=(gconst29*x13747);
IkReal x13751=(gconst28*x13746);
IkReal x13752=((1.0)*x13746);
IkReal x13753=(gconst29*x13752);
evalcond[0]=((((-1.0)*r20*x13753))+((r21*x13751))+(((-1.0)*r22*x13749)));
evalcond[1]=((((-1.0)*r02*x13749))+(((-1.0)*r00*x13753))+((r01*x13751)));
evalcond[2]=(((r10*x13750))+(((-1.0)*r12*x13752))+(((-1.0)*x13748*x13749)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13749))+((x13746*x13748))+(((-1.0)*r10*x13753)));
evalcond[4]=((((-1.0)*gconst28*r21*x13749))+((cj2*sj1))+(((-1.0)*r22*x13752))+((cj1*sj2))+((r20*x13750)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13749))+((r00*x13750))+(((-1.0)*r02*x13752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13754=((1.0)*gconst29);
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13754)))),-1);
if(!x13755.valid){
continue;
}
CheckValue<IkReal> x13756 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13754))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13755.value)))+(x13756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13757=IKsin(j4);
IkReal x13758=IKcos(j4);
IkReal x13759=(gconst28*r11);
IkReal x13760=((1.0)*x13758);
IkReal x13761=(gconst29*x13758);
IkReal x13762=(gconst28*x13757);
IkReal x13763=((1.0)*x13757);
IkReal x13764=(gconst29*x13763);
evalcond[0]=((((-1.0)*r22*x13760))+(((-1.0)*r20*x13764))+((r21*x13762)));
evalcond[1]=((((-1.0)*r00*x13764))+((r01*x13762))+(((-1.0)*r02*x13760)));
evalcond[2]=((((-1.0)*x13759*x13760))+((r10*x13761))+(((-1.0)*r12*x13763)));
evalcond[3]=((1.0)+((x13757*x13759))+(((-1.0)*r10*x13764))+(((-1.0)*r12*x13760)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13760))+(((-1.0)*r22*x13763))+((cj1*sj2))+((r20*x13761)));
evalcond[5]=((((-1.0)*r02*x13763))+((r00*x13761))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13765=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13765.valid){
continue;
}
CheckValue<IkReal> x13766 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13765.value)))+(x13766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13767=IKsin(j4);
IkReal x13768=IKcos(j4);
IkReal x13769=(gconst28*r11);
IkReal x13770=((1.0)*x13768);
IkReal x13771=(gconst29*x13768);
IkReal x13772=(gconst28*x13767);
IkReal x13773=((1.0)*x13767);
IkReal x13774=(gconst29*x13773);
evalcond[0]=((((-1.0)*r22*x13770))+(((-1.0)*r20*x13774))+((r21*x13772)));
evalcond[1]=((((-1.0)*r00*x13774))+((r01*x13772))+(((-1.0)*r02*x13770)));
evalcond[2]=((((-1.0)*x13769*x13770))+((r10*x13771))+(((-1.0)*r12*x13773)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13770))+((x13767*x13769))+(((-1.0)*r10*x13774)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13770))+(((-1.0)*r22*x13773))+((cj1*sj2))+((r20*x13771)));
evalcond[5]=(((r00*x13771))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13773))+(((-1.0)*gconst28*r01*x13770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13775=gconst28*gconst28;
IkReal x13776=gconst29*gconst29;
IkReal x13777=(r11*r21);
IkReal x13778=(gconst29*sj3);
IkReal x13779=((1.0)*cj3);
IkReal x13780=(r10*r20);
IkReal x13781=(r10*r21);
IkReal x13782=(r11*r20);
IkReal x13783=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13779))+(((-1.0)*x13775*x13777*x13779))+((x13782*x13783))+(((-1.0)*x13776*x13779*x13780))+((x13781*x13783)))),-1);
if(!x13784.valid){
continue;
}
CheckValue<IkReal> x13785 = IKatan2WithCheck(IkReal((((r11*r22*x13778))+((gconst28*r10*r22*sj3)))),IkReal((((sj3*x13775*x13781))+(((-1.0)*gconst28*x13778*x13780))+((gconst28*x13777*x13778))+(((-1.0)*sj3*x13776*x13782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13784.value)))+(x13785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13786=IKsin(j4);
IkReal x13787=IKcos(j4);
IkReal x13788=(sj1*sj2);
IkReal x13789=(gconst29*r20);
IkReal x13790=(gconst28*r20);
IkReal x13791=((1.0)*cj2);
IkReal x13792=(r11*sj3);
IkReal x13793=(cj1*sj2);
IkReal x13794=(gconst29*r01);
IkReal x13795=(gconst29*r10);
IkReal x13796=(cj3*gconst28);
IkReal x13797=(cj3*gconst29);
IkReal x13798=(gconst28*sj3);
IkReal x13799=(gconst29*r00);
IkReal x13800=(cj1*x13791);
IkReal x13801=((1.0)*x13787);
IkReal x13802=((1.0)*x13786);
IkReal x13803=(gconst28*x13786);
IkReal x13804=(cj3*x13786);
IkReal x13805=(sj3*x13787);
evalcond[0]=(((r21*x13803))+(((-1.0)*r22*x13801))+(((-1.0)*x13789*x13802)));
evalcond[1]=(((r01*x13803))+(((-1.0)*x13799*x13802))+(((-1.0)*r02*x13801)));
evalcond[2]=((1.0)+((r11*x13803))+(((-1.0)*r12*x13801))+(((-1.0)*x13795*x13802)));
evalcond[3]=(((r12*x13804))+((gconst29*x13792))+((r11*x13787*x13796))+(((-1.0)*cj3*x13795*x13801))+((r10*x13798)));
evalcond[4]=((((-1.0)*gconst28*x13792*x13801))+((x13795*x13805))+(((-1.0)*r12*sj3*x13802))+((r11*x13797))+((r10*x13796)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13789*x13801))+((gconst29*r21*sj3))+x13793+((r21*x13787*x13796))+((r22*x13804))+((sj3*x13790)));
evalcond[6]=(((r00*x13798))+(((-1.0)*x13800))+x13788+(((-1.0)*r00*x13797*x13801))+((sj3*x13794))+((r02*x13804))+((r01*x13787*x13796)));
evalcond[7]=((((-1.0)*x13800))+x13788+((x13789*x13805))+((r21*x13797))+((cj3*x13790))+(((-1.0)*r22*sj3*x13802))+(((-1.0)*r21*x13798*x13801)));
evalcond[8]=(((r00*x13796))+(((-1.0)*r01*x13798*x13801))+(((-1.0)*r02*sj3*x13802))+(((-1.0)*sj1*x13791))+((x13799*x13805))+(((-1.0)*x13793))+((cj3*x13794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13806=((1.0)*gconst29);
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13806)))),-1);
if(!x13807.valid){
continue;
}
CheckValue<IkReal> x13808 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13807.value)))+(x13808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13809=IKsin(j4);
IkReal x13810=IKcos(j4);
IkReal x13811=(sj1*sj2);
IkReal x13812=(gconst29*r20);
IkReal x13813=(gconst28*r20);
IkReal x13814=((1.0)*cj2);
IkReal x13815=(r11*sj3);
IkReal x13816=(cj1*sj2);
IkReal x13817=(gconst29*r01);
IkReal x13818=(gconst29*r10);
IkReal x13819=(cj3*gconst28);
IkReal x13820=(cj3*gconst29);
IkReal x13821=(gconst28*sj3);
IkReal x13822=(gconst29*r00);
IkReal x13823=(cj1*x13814);
IkReal x13824=((1.0)*x13810);
IkReal x13825=((1.0)*x13809);
IkReal x13826=(gconst28*x13809);
IkReal x13827=(cj3*x13809);
IkReal x13828=(sj3*x13810);
evalcond[0]=((((-1.0)*r22*x13824))+((r21*x13826))+(((-1.0)*x13812*x13825)));
evalcond[1]=(((r01*x13826))+(((-1.0)*r02*x13824))+(((-1.0)*x13822*x13825)));
evalcond[2]=((1.0)+((r11*x13826))+(((-1.0)*x13818*x13825))+(((-1.0)*r12*x13824)));
evalcond[3]=(((gconst29*x13815))+((r10*x13821))+((r12*x13827))+((r11*x13810*x13819))+(((-1.0)*cj3*x13818*x13824)));
evalcond[4]=(((r10*x13819))+((r11*x13820))+(((-1.0)*gconst28*x13815*x13824))+(((-1.0)*r12*sj3*x13825))+((x13818*x13828)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13812*x13824))+((gconst29*r21*sj3))+x13816+((r21*x13810*x13819))+((r22*x13827))+((sj3*x13813)));
evalcond[6]=((((-1.0)*x13823))+((r01*x13810*x13819))+(((-1.0)*r00*x13820*x13824))+x13811+((r00*x13821))+((sj3*x13817))+((r02*x13827)));
evalcond[7]=((((-1.0)*x13823))+((r21*x13820))+x13811+(((-1.0)*r21*x13821*x13824))+((x13812*x13828))+((cj3*x13813))+(((-1.0)*r22*sj3*x13825)));
evalcond[8]=(((r00*x13819))+(((-1.0)*x13816))+(((-1.0)*sj1*x13814))+(((-1.0)*r02*sj3*x13825))+((cj3*x13817))+((x13822*x13828))+(((-1.0)*r01*x13821*x13824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13829=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13829.valid){
continue;
}
CheckValue<IkReal> x13830 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13829.value)))+(x13830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13831=IKsin(j4);
IkReal x13832=IKcos(j4);
IkReal x13833=(sj1*sj2);
IkReal x13834=(gconst29*r20);
IkReal x13835=(gconst28*r20);
IkReal x13836=((1.0)*cj2);
IkReal x13837=(r11*sj3);
IkReal x13838=(cj1*sj2);
IkReal x13839=(gconst29*r01);
IkReal x13840=(gconst29*r10);
IkReal x13841=(cj3*gconst28);
IkReal x13842=(cj3*gconst29);
IkReal x13843=(gconst28*sj3);
IkReal x13844=(gconst29*r00);
IkReal x13845=(cj1*x13836);
IkReal x13846=((1.0)*x13832);
IkReal x13847=((1.0)*x13831);
IkReal x13848=(gconst28*x13831);
IkReal x13849=(cj3*x13831);
IkReal x13850=(sj3*x13832);
evalcond[0]=((((-1.0)*x13834*x13847))+((r21*x13848))+(((-1.0)*r22*x13846)));
evalcond[1]=((((-1.0)*x13844*x13847))+(((-1.0)*r02*x13846))+((r01*x13848)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13846))+((r11*x13848))+(((-1.0)*x13840*x13847)));
evalcond[3]=((((-1.0)*cj3*x13840*x13846))+((r11*x13832*x13841))+((r12*x13849))+((r10*x13843))+((gconst29*x13837)));
evalcond[4]=(((x13840*x13850))+(((-1.0)*gconst28*x13837*x13846))+(((-1.0)*r12*sj3*x13847))+((r11*x13842))+((r10*x13841)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13838+((r21*x13832*x13841))+((r22*x13849))+(((-1.0)*cj3*x13834*x13846))+((sj3*x13835)));
evalcond[6]=((((-1.0)*x13845))+x13833+((sj3*x13839))+((r02*x13849))+((r01*x13832*x13841))+(((-1.0)*r00*x13842*x13846))+((r00*x13843)));
evalcond[7]=((((-1.0)*x13845))+((x13834*x13850))+(((-1.0)*r21*x13843*x13846))+x13833+((r21*x13842))+(((-1.0)*r22*sj3*x13847))+((cj3*x13835)));
evalcond[8]=((((-1.0)*r01*x13843*x13846))+(((-1.0)*sj1*x13836))+(((-1.0)*r02*sj3*x13847))+(((-1.0)*x13838))+((cj3*x13839))+((r00*x13841))+((x13844*x13850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13851=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13851);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13851);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13852=(r11*sj5);
IkReal x13853=((1.0)*cj5*r10);
j4eval[0]=(x13852+(((-1.0)*x13853)));
j4eval[1]=((((-1.0)*cj3*x13853))+((cj3*x13852)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13854=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13854);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13854);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13855=(cj5*r10);
IkReal x13856=(r11*sj5);
j4eval[0]=((((-1.0)*x13855))+x13856);
j4eval[1]=((((-1.0)*sj3*x13856))+((sj3*x13855)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13857=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13857);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13857);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13858=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13858);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13858);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13859=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13859)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13859)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13860=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13860);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13860);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13861=((1.0)*sj1);
CheckValue<IkReal> x13862=IKPowWithIntegerCheck(r22,-1);
if(!x13862.valid){
continue;
}
CheckValue<IkReal> x13863=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13863.valid){
continue;
}
if( IKabs(((x13862.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13863.value)*(((((-1.0)*sj2*x13861))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13862.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13861))))))+IKsqr(((x13863.value)*(((((-1.0)*sj2*x13861))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13862.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13861))))), ((x13863.value)*(((((-1.0)*sj2*x13861))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13864=IKsin(j4);
IkReal x13865=IKcos(j4);
IkReal x13866=((1.0)*cj5);
IkReal x13867=(sj5*x13865);
IkReal x13868=(sj5*x13864);
evalcond[0]=((-1.0)*r22*x13865);
evalcond[1]=(((cj2*sj1))+((r22*x13864))+((cj1*sj2)));
evalcond[2]=(((r01*x13868))+(((-1.0)*r00*x13864*x13866)));
evalcond[3]=(((r11*x13867))+(((-1.0)*r10*x13865*x13866)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13864*x13866))+((r11*x13868)));
evalcond[5]=(((r01*x13867))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13865*x13866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13869=((1.0)*cj5);
CheckValue<IkReal> x13870=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13869))),-1);
if(!x13870.valid){
continue;
}
CheckValue<IkReal> x13871=IKPowWithIntegerCheck(((((-1.0)*r00*x13869))+((r01*sj5))),-1);
if(!x13871.valid){
continue;
}
if( IKabs(((-1.0)*(x13870.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13871.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13870.value)))+IKsqr(((x13871.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13870.value)), ((x13871.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13872=IKsin(j4);
IkReal x13873=IKcos(j4);
IkReal x13874=((1.0)*cj5);
IkReal x13875=(sj5*x13873);
IkReal x13876=(sj5*x13872);
evalcond[0]=((-1.0)*r22*x13873);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13872)));
evalcond[2]=(((r01*x13876))+(((-1.0)*r00*x13872*x13874)));
evalcond[3]=(((r11*x13875))+(((-1.0)*r10*x13873*x13874)));
evalcond[4]=((1.0)+((r11*x13876))+(((-1.0)*r10*x13872*x13874)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13875))+(((-1.0)*r00*x13873*x13874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13877=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13877);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13877);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13878=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13878);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13878);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13879=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13879.valid){
continue;
}
CheckValue<IkReal> x13880=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13880.valid){
continue;
}
if( IKabs(((-1.0)*(x13879.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13880.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13879.value)))+IKsqr(((x13880.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13879.value)), ((x13880.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13881=IKsin(j4);
IkReal x13882=IKcos(j4);
IkReal x13883=(cj5*x13882);
IkReal x13884=(sj5*x13881);
IkReal x13885=((1.0)*cj5*x13881);
IkReal x13886=((1.0)*sj5*x13882);
evalcond[0]=((-1.0)*r22*x13882);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13881))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13885))+((r01*x13884)));
evalcond[3]=((((-1.0)*r11*x13886))+((r10*x13883)));
evalcond[4]=((1.0)+((r11*x13884))+(((-1.0)*r10*x13885)));
evalcond[5]=((((-1.0)*r01*x13886))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13887=IKPowWithIntegerCheck(r22,-1);
if(!x13887.valid){
continue;
}
CheckValue<IkReal> x13888=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13888.valid){
continue;
}
if( IKabs(((x13887.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13888.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13887.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13888.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13887.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13888.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13889=IKsin(j4);
IkReal x13890=IKcos(j4);
IkReal x13891=(cj5*x13890);
IkReal x13892=(sj5*x13889);
IkReal x13893=((1.0)*cj5*x13889);
IkReal x13894=((1.0)*sj5*x13890);
evalcond[0]=((-1.0)*r22*x13890);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13889))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13893))+((r01*x13892)));
evalcond[3]=(((r10*x13891))+(((-1.0)*r11*x13894)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13893))+((r11*x13892)));
evalcond[5]=((((-1.0)*r01*x13894))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13895=((1.0)*r10);
CheckValue<IkReal> x13896=IKPowWithIntegerCheck(cj3,-1);
if(!x13896.valid){
continue;
}
CheckValue<IkReal> x13897=IKPowWithIntegerCheck(r22,-1);
if(!x13897.valid){
continue;
}
CheckValue<IkReal> x13898=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x13895))),-1);
if(!x13898.valid){
continue;
}
if( IKabs(((x13896.value)*(x13897.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13898.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13895)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13896.value)*(x13897.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13898.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13895))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13896.value)*(x13897.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13898.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13895))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13899=IKsin(j4);
IkReal x13900=IKcos(j4);
IkReal x13901=(sj1*sj2);
IkReal x13902=(r11*sj5);
IkReal x13903=(r00*sj3);
IkReal x13904=(cj5*r01);
IkReal x13905=((1.0)*cj1);
IkReal x13906=(cj3*sj5);
IkReal x13907=(cj5*r11);
IkReal x13908=(r10*sj3);
IkReal x13909=(cj2*sj1);
IkReal x13910=((1.0)*cj5);
IkReal x13911=((1.0)*sj3);
IkReal x13912=(r01*sj5);
IkReal x13913=(cj2*x13905);
IkReal x13914=(cj3*x13900);
IkReal x13915=(r22*x13899);
IkReal x13916=(cj5*x13900);
IkReal x13917=(x13899*x13910);
evalcond[0]=((-1.0)*r22*x13900);
evalcond[1]=(((cj1*sj2))+x13909+((cj3*x13915)));
evalcond[2]=(((x13899*x13912))+(((-1.0)*r00*x13917)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13917))+((x13899*x13902)));
evalcond[4]=(x13901+(((-1.0)*x13911*x13915))+(((-1.0)*x13913)));
evalcond[5]=((((-1.0)*r10*x13910*x13914))+((x13902*x13914))+((sj5*x13908))+((sj3*x13907)));
evalcond[6]=(((r10*x13906))+(((-1.0)*x13900*x13902*x13911))+((cj3*x13907))+((x13908*x13916)));
evalcond[7]=(x13901+((sj5*x13903))+((sj3*x13904))+((r01*x13900*x13906))+(((-1.0)*x13913))+(((-1.0)*r00*x13910*x13914)));
evalcond[8]=((((-1.0)*x13909))+(((-1.0)*sj2*x13905))+((x13903*x13916))+((r00*x13906))+(((-1.0)*x13900*x13911*x13912))+((cj3*x13904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13918=(cj5*r10);
IkReal x13919=((1.0)*r11);
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(((((-1.0)*x13918))+((r11*sj5))),-1);
if(!x13920.valid){
continue;
}
CheckValue<IkReal> x13921=IKPowWithIntegerCheck((((sj3*x13918))+(((-1.0)*sj3*sj5*x13919))),-1);
if(!x13921.valid){
continue;
}
if( IKabs(((-1.0)*(x13920.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13921.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13919)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13920.value)))+IKsqr(((x13921.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13919))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13920.value)), ((x13921.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13919))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13922=IKsin(j4);
IkReal x13923=IKcos(j4);
IkReal x13924=(sj1*sj2);
IkReal x13925=(r11*sj5);
IkReal x13926=(r00*sj3);
IkReal x13927=(cj5*r01);
IkReal x13928=((1.0)*cj1);
IkReal x13929=(cj3*sj5);
IkReal x13930=(cj5*r11);
IkReal x13931=(r10*sj3);
IkReal x13932=(cj2*sj1);
IkReal x13933=((1.0)*cj5);
IkReal x13934=((1.0)*sj3);
IkReal x13935=(r01*sj5);
IkReal x13936=(cj2*x13928);
IkReal x13937=(cj3*x13923);
IkReal x13938=(r22*x13922);
IkReal x13939=(cj5*x13923);
IkReal x13940=(x13922*x13933);
evalcond[0]=((-1.0)*r22*x13923);
evalcond[1]=(((cj3*x13938))+((cj1*sj2))+x13932);
evalcond[2]=((((-1.0)*r00*x13940))+((x13922*x13935)));
evalcond[3]=((1.0)+((x13922*x13925))+(((-1.0)*r10*x13940)));
evalcond[4]=((((-1.0)*x13934*x13938))+x13924+(((-1.0)*x13936)));
evalcond[5]=(((sj3*x13930))+((x13925*x13937))+(((-1.0)*r10*x13933*x13937))+((sj5*x13931)));
evalcond[6]=(((r10*x13929))+((cj3*x13930))+(((-1.0)*x13923*x13925*x13934))+((x13931*x13939)));
evalcond[7]=((((-1.0)*r00*x13933*x13937))+((sj3*x13927))+x13924+((sj5*x13926))+(((-1.0)*x13936))+((r01*x13923*x13929)));
evalcond[8]=((((-1.0)*sj2*x13928))+((x13926*x13939))+((r00*x13929))+(((-1.0)*x13923*x13934*x13935))+(((-1.0)*x13932))+((cj3*x13927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13941=((1.0)*sj3);
IkReal x13942=(r11*sj5);
IkReal x13943=((1.0)*cj5*r10);
CheckValue<IkReal> x13944=IKPowWithIntegerCheck((x13942+(((-1.0)*x13943))),-1);
if(!x13944.valid){
continue;
}
CheckValue<IkReal> x13945=IKPowWithIntegerCheck((((cj3*x13942))+(((-1.0)*cj3*x13943))),-1);
if(!x13945.valid){
continue;
}
if( IKabs(((-1.0)*(x13944.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13945.value)*(((((-1.0)*cj5*r11*x13941))+(((-1.0)*r10*sj5*x13941)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13944.value)))+IKsqr(((x13945.value)*(((((-1.0)*cj5*r11*x13941))+(((-1.0)*r10*sj5*x13941))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13944.value)), ((x13945.value)*(((((-1.0)*cj5*r11*x13941))+(((-1.0)*r10*sj5*x13941))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13946=IKsin(j4);
IkReal x13947=IKcos(j4);
IkReal x13948=(sj1*sj2);
IkReal x13949=(r11*sj5);
IkReal x13950=(r00*sj3);
IkReal x13951=(cj5*r01);
IkReal x13952=((1.0)*cj1);
IkReal x13953=(cj3*sj5);
IkReal x13954=(cj5*r11);
IkReal x13955=(r10*sj3);
IkReal x13956=(cj2*sj1);
IkReal x13957=((1.0)*cj5);
IkReal x13958=((1.0)*sj3);
IkReal x13959=(r01*sj5);
IkReal x13960=(cj2*x13952);
IkReal x13961=(cj3*x13947);
IkReal x13962=(r22*x13946);
IkReal x13963=(cj5*x13947);
IkReal x13964=(x13946*x13957);
evalcond[0]=((-1.0)*r22*x13947);
evalcond[1]=(((cj1*sj2))+x13956+((cj3*x13962)));
evalcond[2]=((((-1.0)*r00*x13964))+((x13946*x13959)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13964))+((x13946*x13949)));
evalcond[4]=(x13948+(((-1.0)*x13960))+(((-1.0)*x13958*x13962)));
evalcond[5]=(((sj5*x13955))+(((-1.0)*r10*x13957*x13961))+((x13949*x13961))+((sj3*x13954)));
evalcond[6]=(((x13955*x13963))+((cj3*x13954))+(((-1.0)*x13947*x13949*x13958))+((r10*x13953)));
evalcond[7]=(((sj5*x13950))+((r01*x13947*x13953))+x13948+(((-1.0)*r00*x13957*x13961))+(((-1.0)*x13960))+((sj3*x13951)));
evalcond[8]=(((x13950*x13963))+((cj3*x13951))+((r00*x13953))+(((-1.0)*x13947*x13958*x13959))+(((-1.0)*sj2*x13952))+(((-1.0)*x13956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13965=cj5*cj5;
IkReal x13966=((1.0)*cj3);
IkReal x13967=(r10*r21);
IkReal x13968=(cj5*sj5);
IkReal x13969=(r11*r21);
IkReal x13970=(r11*r20);
IkReal x13971=(r22*sj3);
IkReal x13972=(r10*r20);
IkReal x13973=((1.0)*sj3*x13965);
CheckValue<IkReal> x13974=IKPowWithIntegerCheck(IKsign((((cj3*x13965*x13969))+(((-1.0)*r12*r22*x13966))+(((-1.0)*x13966*x13969))+((cj3*x13968*x13970))+(((-1.0)*x13965*x13966*x13972))+((cj3*x13967*x13968)))),-1);
if(!x13974.valid){
continue;
}
CheckValue<IkReal> x13975 = IKatan2WithCheck(IkReal((((cj5*r11*x13971))+((r10*sj5*x13971)))),IkReal(((((-1.0)*sj3*x13968*x13972))+((sj3*x13967))+((sj3*x13968*x13969))+(((-1.0)*x13970*x13973))+(((-1.0)*x13967*x13973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13974.value)))+(x13975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13976=IKsin(j4);
IkReal x13977=IKcos(j4);
IkReal x13978=(sj1*sj2);
IkReal x13979=(cj5*sj3);
IkReal x13980=(cj5*r10);
IkReal x13981=(r00*sj5);
IkReal x13982=(r11*sj5);
IkReal x13983=(cj3*cj5);
IkReal x13984=((1.0)*cj1);
IkReal x13985=(cj3*sj5);
IkReal x13986=(r21*sj5);
IkReal x13987=(cj2*sj1);
IkReal x13988=(sj3*sj5);
IkReal x13989=(r01*sj5);
IkReal x13990=(cj2*x13984);
IkReal x13991=((1.0)*x13977);
IkReal x13992=((1.0)*x13976);
IkReal x13993=(cj3*x13976);
IkReal x13994=(cj3*x13977);
evalcond[0]=(((x13976*x13986))+(((-1.0)*cj5*r20*x13992))+(((-1.0)*r22*x13991)));
evalcond[1]=(((x13976*x13989))+(((-1.0)*r02*x13991))+(((-1.0)*cj5*r00*x13992)));
evalcond[2]=((1.0)+((x13976*x13982))+(((-1.0)*r12*x13991))+(((-1.0)*x13980*x13992)));
evalcond[3]=((((-1.0)*cj3*x13980*x13991))+((r12*x13993))+((r11*x13979))+((r10*x13988))+((x13982*x13994)));
evalcond[4]=((((-1.0)*sj3*x13982*x13991))+((r11*x13983))+(((-1.0)*r12*sj3*x13992))+((r10*x13985))+((r10*x13977*x13979)));
evalcond[5]=(((r21*x13977*x13985))+((r20*x13988))+((cj1*sj2))+((r22*x13993))+x13987+(((-1.0)*r20*x13983*x13991))+((r21*x13979)));
evalcond[6]=(((sj3*x13981))+(((-1.0)*r00*x13983*x13991))+((r01*x13977*x13985))+x13978+((r02*x13993))+((r01*x13979))+(((-1.0)*x13990)));
evalcond[7]=(((r20*x13985))+x13978+((r21*x13983))+((r20*x13977*x13979))+(((-1.0)*r22*sj3*x13992))+(((-1.0)*sj3*x13986*x13991))+(((-1.0)*x13990)));
evalcond[8]=((((-1.0)*r01*x13988*x13991))+((r00*x13977*x13979))+((r01*x13983))+((cj3*x13981))+(((-1.0)*r02*sj3*x13992))+(((-1.0)*x13987))+(((-1.0)*sj2*x13984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13995=((1.0)*cj5);
CheckValue<IkReal> x13996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13995)))),-1);
if(!x13996.valid){
continue;
}
CheckValue<IkReal> x13997 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13996.value)))+(x13997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13998=IKsin(j4);
IkReal x13999=IKcos(j4);
IkReal x14000=(sj1*sj2);
IkReal x14001=(cj5*sj3);
IkReal x14002=(cj5*r10);
IkReal x14003=(r00*sj5);
IkReal x14004=(r11*sj5);
IkReal x14005=(cj3*cj5);
IkReal x14006=((1.0)*cj1);
IkReal x14007=(cj3*sj5);
IkReal x14008=(r21*sj5);
IkReal x14009=(cj2*sj1);
IkReal x14010=(sj3*sj5);
IkReal x14011=(r01*sj5);
IkReal x14012=(cj2*x14006);
IkReal x14013=((1.0)*x13999);
IkReal x14014=((1.0)*x13998);
IkReal x14015=(cj3*x13998);
IkReal x14016=(cj3*x13999);
evalcond[0]=((((-1.0)*cj5*r20*x14014))+((x13998*x14008))+(((-1.0)*r22*x14013)));
evalcond[1]=((((-1.0)*r02*x14013))+((x13998*x14011))+(((-1.0)*cj5*r00*x14014)));
evalcond[2]=((1.0)+((x13998*x14004))+(((-1.0)*r12*x14013))+(((-1.0)*x14002*x14014)));
evalcond[3]=(((r11*x14001))+(((-1.0)*cj3*x14002*x14013))+((r12*x14015))+((x14004*x14016))+((r10*x14010)));
evalcond[4]=(((r10*x14007))+(((-1.0)*r12*sj3*x14014))+(((-1.0)*sj3*x14004*x14013))+((r11*x14005))+((r10*x13999*x14001)));
evalcond[5]=(((r21*x13999*x14007))+((r21*x14001))+((cj1*sj2))+((r22*x14015))+(((-1.0)*r20*x14005*x14013))+x14009+((r20*x14010)));
evalcond[6]=((((-1.0)*x14012))+((r01*x13999*x14007))+(((-1.0)*r00*x14005*x14013))+((r02*x14015))+((sj3*x14003))+((r01*x14001))+x14000);
evalcond[7]=((((-1.0)*x14012))+((r21*x14005))+(((-1.0)*r22*sj3*x14014))+(((-1.0)*sj3*x14008*x14013))+x14000+((r20*x14007))+((r20*x13999*x14001)));
evalcond[8]=((((-1.0)*r02*sj3*x14014))+((r00*x13999*x14001))+(((-1.0)*sj2*x14006))+((r01*x14005))+(((-1.0)*x14009))+((cj3*x14003))+(((-1.0)*r01*x14010*x14013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14017=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14017.valid){
continue;
}
CheckValue<IkReal> x14018 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14017.value)))+(x14018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14019=IKsin(j4);
IkReal x14020=IKcos(j4);
IkReal x14021=(sj1*sj2);
IkReal x14022=(cj5*sj3);
IkReal x14023=(cj5*r10);
IkReal x14024=(r00*sj5);
IkReal x14025=(r11*sj5);
IkReal x14026=(cj3*cj5);
IkReal x14027=((1.0)*cj1);
IkReal x14028=(cj3*sj5);
IkReal x14029=(r21*sj5);
IkReal x14030=(cj2*sj1);
IkReal x14031=(sj3*sj5);
IkReal x14032=(r01*sj5);
IkReal x14033=(cj2*x14027);
IkReal x14034=((1.0)*x14020);
IkReal x14035=((1.0)*x14019);
IkReal x14036=(cj3*x14019);
IkReal x14037=(cj3*x14020);
evalcond[0]=((((-1.0)*cj5*r20*x14035))+((x14019*x14029))+(((-1.0)*r22*x14034)));
evalcond[1]=(((x14019*x14032))+(((-1.0)*r02*x14034))+(((-1.0)*cj5*r00*x14035)));
evalcond[2]=((1.0)+((x14019*x14025))+(((-1.0)*r12*x14034))+(((-1.0)*x14023*x14035)));
evalcond[3]=(((r11*x14022))+((x14025*x14037))+((r10*x14031))+(((-1.0)*cj3*x14023*x14034))+((r12*x14036)));
evalcond[4]=(((r11*x14026))+(((-1.0)*sj3*x14025*x14034))+((r10*x14020*x14022))+((r10*x14028))+(((-1.0)*r12*sj3*x14035)));
evalcond[5]=(((r22*x14036))+((cj1*sj2))+((r20*x14031))+((r21*x14022))+(((-1.0)*r20*x14026*x14034))+((r21*x14020*x14028))+x14030);
evalcond[6]=(((r01*x14022))+((r01*x14020*x14028))+((sj3*x14024))+(((-1.0)*x14033))+(((-1.0)*r00*x14026*x14034))+x14021+((r02*x14036)));
evalcond[7]=((((-1.0)*sj3*x14029*x14034))+((r20*x14020*x14022))+((r20*x14028))+((r21*x14026))+(((-1.0)*x14033))+(((-1.0)*r22*sj3*x14035))+x14021);
evalcond[8]=(((r01*x14026))+(((-1.0)*x14030))+(((-1.0)*r02*sj3*x14035))+((cj3*x14024))+(((-1.0)*r01*x14031*x14034))+((r00*x14020*x14022))+(((-1.0)*sj2*x14027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14038=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14038;
j4eval[1]=IKsign(x14038);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14039=((1.0)*cj5);
IkReal x14040=((((-1.0)*r21*x14039))+(((-1.0)*r20*sj5)));
j4eval[0]=x14040;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14039))))));
j4eval[2]=IKsign(x14040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14041=cj5*cj5;
IkReal x14042=(cj3*r21);
IkReal x14043=(cj5*sj5);
IkReal x14044=((1.0)*cj3);
IkReal x14045=(((r11*x14041*x14042))+(((-1.0)*r11*x14042))+(((-1.0)*r12*r22*x14044))+((cj3*r11*r20*x14043))+(((-1.0)*r10*r20*x14041*x14044))+((r10*x14042*x14043)));
j4eval[0]=x14045;
j4eval[1]=IKsign(x14045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14046=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14046;
j4eval[1]=IKsign(x14046);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14047=((1.0)*cj5);
IkReal x14048=((((-1.0)*r21*x14047))+(((-1.0)*r20*sj5)));
j4eval[0]=x14048;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14047))))));
j4eval[2]=IKsign(x14048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14049=cj5*cj5;
IkReal x14050=r11*r11;
IkReal x14051=(cj5*r10);
IkReal x14052=(r11*sj5);
IkReal x14053=((((2.0)*x14051*x14052))+(((-1.0)*x14050))+(((-1.0)*x14049*(r10*r10)))+(((-1.0)*(r12*r12)))+((x14049*x14050)));
j4eval[0]=x14053;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x14052))+x14051))));
j4eval[2]=IKsign(x14053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14054=cj5*cj5;
IkReal x14055=r11*r11;
IkReal x14056=(cj5*r10);
IkReal x14057=(r11*sj5);
CheckValue<IkReal> x14058 = IKatan2WithCheck(IkReal(((((-1.0)*x14057))+x14056)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14058.valid){
continue;
}
CheckValue<IkReal> x14059=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14055))+(((2.0)*x14056*x14057))+((x14054*x14055))+(((-1.0)*(r12*r12)))+(((-1.0)*x14054*(r10*r10))))),-1);
if(!x14059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14058.value)+(((1.5707963267949)*(x14059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14060=IKsin(j4);
IkReal x14061=IKcos(j4);
IkReal x14062=(cj5*r10);
IkReal x14063=(r01*sj5);
IkReal x14064=(cj5*r00);
IkReal x14065=(cj5*r20);
IkReal x14066=((1.0)*x14061);
IkReal x14067=((1.0)*x14060);
IkReal x14068=(sj5*x14060);
evalcond[0]=((((-1.0)*r22*x14066))+(((-1.0)*x14065*x14067))+((r21*x14068)));
evalcond[1]=(((x14060*x14063))+(((-1.0)*x14064*x14067))+(((-1.0)*r02*x14066)));
evalcond[2]=((((-1.0)*r12*x14067))+(((-1.0)*r11*sj5*x14066))+((x14061*x14062)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14066))+((r11*x14068))+(((-1.0)*x14062*x14067)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14061*x14064))+(((-1.0)*r02*x14067))+(((-1.0)*x14063*x14066)));
evalcond[5]=((((-1.0)*r22*x14067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14066))+((x14061*x14065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14069=((1.0)*cj5);
CheckValue<IkReal> x14070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14069))+(((-1.0)*r20*sj5)))),-1);
if(!x14070.valid){
continue;
}
CheckValue<IkReal> x14071 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14070.value)))+(x14071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14072=IKsin(j4);
IkReal x14073=IKcos(j4);
IkReal x14074=(cj5*r10);
IkReal x14075=(r01*sj5);
IkReal x14076=(cj5*r00);
IkReal x14077=(cj5*r20);
IkReal x14078=((1.0)*x14073);
IkReal x14079=((1.0)*x14072);
IkReal x14080=(sj5*x14072);
evalcond[0]=((((-1.0)*r22*x14078))+(((-1.0)*x14077*x14079))+((r21*x14080)));
evalcond[1]=((((-1.0)*x14076*x14079))+((x14072*x14075))+(((-1.0)*r02*x14078)));
evalcond[2]=((((-1.0)*r11*sj5*x14078))+(((-1.0)*r12*x14079))+((x14073*x14074)));
evalcond[3]=((-1.0)+((r11*x14080))+(((-1.0)*r12*x14078))+(((-1.0)*x14074*x14079)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14075*x14078))+((x14073*x14076))+(((-1.0)*r02*x14079)));
evalcond[5]=((((-1.0)*r22*x14079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14073*x14077))+(((-1.0)*r21*sj5*x14078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
CheckValue<IkReal> x14082=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14081.value)+(((1.5707963267949)*(x14082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14083=IKsin(j4);
IkReal x14084=IKcos(j4);
IkReal x14085=(cj5*r10);
IkReal x14086=(r01*sj5);
IkReal x14087=(cj5*r00);
IkReal x14088=(cj5*r20);
IkReal x14089=((1.0)*x14084);
IkReal x14090=((1.0)*x14083);
IkReal x14091=(sj5*x14083);
evalcond[0]=((((-1.0)*r22*x14089))+((r21*x14091))+(((-1.0)*x14088*x14090)));
evalcond[1]=((((-1.0)*r02*x14089))+(((-1.0)*x14087*x14090))+((x14083*x14086)));
evalcond[2]=((((-1.0)*r12*x14090))+((x14084*x14085))+(((-1.0)*r11*sj5*x14089)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14089))+(((-1.0)*x14085*x14090))+((r11*x14091)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x14090))+((cj1*sj2))+((x14084*x14087))+(((-1.0)*x14086*x14089)));
evalcond[5]=((((-1.0)*r22*x14090))+(((-1.0)*r21*sj5*x14089))+((x14084*x14088))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14092=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14092;
j4eval[1]=IKsign(x14092);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14093=((1.0)*cj5);
IkReal x14094=((((-1.0)*r21*x14093))+(((-1.0)*r20*sj5)));
j4eval[0]=x14094;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14093))))));
j4eval[2]=IKsign(x14094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14095=cj5*cj5;
IkReal x14096=r11*r11;
IkReal x14097=(r11*sj5);
IkReal x14098=(cj5*r10);
IkReal x14099=((r12*r12)+(((-1.0)*x14095*x14096))+(((-2.0)*x14097*x14098))+x14096+((x14095*(r10*r10))));
j4eval[0]=x14099;
j4eval[1]=IKsign(x14099);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14098))+x14097))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14100=cj5*cj5;
IkReal x14101=r11*r11;
IkReal x14102=(cj5*r10);
IkReal x14103=(r11*sj5);
CheckValue<IkReal> x14104 = IKatan2WithCheck(IkReal(((((-1.0)*x14102))+x14103)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14104.valid){
continue;
}
CheckValue<IkReal> x14105=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x14100*x14101))+((x14100*(r10*r10)))+x14101+(((-2.0)*x14102*x14103)))),-1);
if(!x14105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14104.value)+(((1.5707963267949)*(x14105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14106=IKcos(j4);
IkReal x14107=IKsin(j4);
IkReal x14108=(cj5*r00);
IkReal x14109=(cj5*r10);
IkReal x14110=(r21*sj5);
IkReal x14111=(cj5*r20);
IkReal x14112=((1.0)*x14106);
IkReal x14113=((1.0)*x14107);
IkReal x14114=(sj5*x14107);
IkReal x14115=(sj5*x14106);
evalcond[0]=(((r11*x14115))+((r12*x14107))+(((-1.0)*x14109*x14112)));
evalcond[1]=((((-1.0)*r22*x14112))+(((-1.0)*x14111*x14113))+((x14107*x14110)));
evalcond[2]=((((-1.0)*x14108*x14113))+((r01*x14114))+(((-1.0)*r02*x14112)));
evalcond[3]=((-1.0)+((r11*x14114))+(((-1.0)*r12*x14112))+(((-1.0)*x14109*x14113)));
evalcond[4]=(((cj2*sj1))+((r02*x14107))+(((-1.0)*x14108*x14112))+((r01*x14115))+((cj1*sj2)));
evalcond[5]=(((r22*x14107))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14111*x14112))+((x14106*x14110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14116=((1.0)*cj5);
CheckValue<IkReal> x14117=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14116))+(((-1.0)*r20*sj5)))),-1);
if(!x14117.valid){
continue;
}
CheckValue<IkReal> x14118 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14117.value)))+(x14118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14119=IKcos(j4);
IkReal x14120=IKsin(j4);
IkReal x14121=(cj5*r00);
IkReal x14122=(cj5*r10);
IkReal x14123=(r21*sj5);
IkReal x14124=(cj5*r20);
IkReal x14125=((1.0)*x14119);
IkReal x14126=((1.0)*x14120);
IkReal x14127=(sj5*x14120);
IkReal x14128=(sj5*x14119);
evalcond[0]=(((r12*x14120))+(((-1.0)*x14122*x14125))+((r11*x14128)));
evalcond[1]=((((-1.0)*x14124*x14126))+((x14120*x14123))+(((-1.0)*r22*x14125)));
evalcond[2]=((((-1.0)*x14121*x14126))+((r01*x14127))+(((-1.0)*r02*x14125)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14125))+(((-1.0)*x14122*x14126))+((r11*x14127)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14121*x14125))+((r01*x14128))+((r02*x14120)));
evalcond[5]=(((r22*x14120))+(((-1.0)*x14124*x14125))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14119*x14123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14129 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14129.valid){
continue;
}
CheckValue<IkReal> x14130=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14129.value)+(((1.5707963267949)*(x14130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14131=IKcos(j4);
IkReal x14132=IKsin(j4);
IkReal x14133=(cj5*r00);
IkReal x14134=(cj5*r10);
IkReal x14135=(r21*sj5);
IkReal x14136=(cj5*r20);
IkReal x14137=((1.0)*x14131);
IkReal x14138=((1.0)*x14132);
IkReal x14139=(sj5*x14132);
IkReal x14140=(sj5*x14131);
evalcond[0]=((((-1.0)*x14134*x14137))+((r12*x14132))+((r11*x14140)));
evalcond[1]=(((x14132*x14135))+(((-1.0)*x14136*x14138))+(((-1.0)*r22*x14137)));
evalcond[2]=((((-1.0)*x14133*x14138))+(((-1.0)*r02*x14137))+((r01*x14139)));
evalcond[3]=((-1.0)+((r11*x14139))+(((-1.0)*x14134*x14138))+(((-1.0)*r12*x14137)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14133*x14137))+((cj1*sj2))+((r02*x14132))+((r01*x14140)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14136*x14137))+((r22*x14132))+((x14131*x14135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14142 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14142)==0){
continue;
}
IkReal x14141=pow(x14142,-0.5);
CheckValue<IkReal> x14143 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14143.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14143.value));
IkReal gconst37=((-1.0)*r01*x14141);
IkReal gconst38=(r00*x14141);
CheckValue<IkReal> x14144 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14144.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14144.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14147 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14147.valid){
continue;
}
IkReal x14145=((-1.0)*(x14147.value));
IkReal x14146=x14141;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14145;
IkReal gconst36=x14145;
IkReal gconst37=((-1.0)*r01*x14146);
IkReal gconst38=(r00*x14146);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14150 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14150.valid){
continue;
}
IkReal x14148=((-1.0)*(x14150.value));
IkReal x14149=x14141;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14148;
IkReal gconst36=x14148;
IkReal gconst37=((-1.0)*r01*x14149);
IkReal gconst38=(r00*x14149);
CheckValue<IkReal> x14158=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14158.valid){
continue;
}
IkReal x14151=x14158.value;
IkReal x14152=(sj3*x14151);
IkReal x14153=(r11*x14152);
IkReal x14154=(r21*x14152);
IkReal x14155=(r20*x14152);
IkReal x14156=(r10*x14152);
IkReal x14157=(r00*r01*x14152);
j4eval[0]=IKsign((((r10*x14155*(r00*r00)))+((r00*r01*r20*x14153))+((r12*r22*sj3))+((r00*r01*r10*x14154))+((r21*x14153*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14159=gconst38*gconst38;
IkReal x14160=gconst37*gconst37;
IkReal x14161=((1.0)*cj3);
IkReal x14162=(r11*r20);
IkReal x14163=(r10*sj3);
IkReal x14164=(gconst37*gconst38);
IkReal x14165=(r11*sj3);
IkReal x14166=(r21*x14160);
IkReal x14167=(cj3*x14164);
CheckValue<IkReal> x14168 = IKatan2WithCheck(IkReal((((gconst37*r22*x14163))+((gconst38*r22*x14165)))),IkReal((((r21*x14164*x14165))+(((-1.0)*r20*x14163*x14164))+(((-1.0)*sj3*x14159*x14162))+((x14163*x14166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14168.valid){
continue;
}
CheckValue<IkReal> x14169=IKPowWithIntegerCheck(IKsign((((r10*r21*x14167))+((x14162*x14167))+(((-1.0)*r11*x14161*x14166))+(((-1.0)*r12*r22*x14161))+(((-1.0)*r10*r20*x14159*x14161)))),-1);
if(!x14169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14168.value)+(((1.5707963267949)*(x14169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14170=IKsin(j4);
IkReal x14171=IKcos(j4);
IkReal x14172=(cj2*sj1);
IkReal x14173=(cj1*sj2);
IkReal x14174=(gconst38*r21);
IkReal x14175=(cj3*r20);
IkReal x14176=(gconst38*r10);
IkReal x14177=(cj3*gconst37);
IkReal x14178=(sj1*sj2);
IkReal x14179=(gconst38*r00);
IkReal x14180=(cj1*cj2);
IkReal x14181=(gconst37*sj3);
IkReal x14182=(gconst38*r20);
IkReal x14183=(gconst38*r01);
IkReal x14184=(gconst38*r11);
IkReal x14185=((1.0)*x14171);
IkReal x14186=((1.0)*x14170);
IkReal x14187=(cj3*x14170);
IkReal x14188=(sj3*x14171);
IkReal x14189=(gconst37*x14170);
IkReal x14190=(x14172+x14173);
evalcond[0]=((((-1.0)*x14182*x14186))+(((-1.0)*r22*x14185))+((r21*x14189)));
evalcond[1]=(((r01*x14189))+(((-1.0)*r02*x14185))+(((-1.0)*x14179*x14186)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14185))+(((-1.0)*x14176*x14186))+((r11*x14189)));
evalcond[3]=(((sj3*x14184))+((r12*x14187))+(((-1.0)*cj3*x14176*x14185))+((r10*x14181))+((r11*x14171*x14177)));
evalcond[4]=((((-1.0)*r12*sj3*x14186))+((cj3*x14184))+((x14176*x14188))+(((-1.0)*r11*x14181*x14185))+((r10*x14177)));
evalcond[5]=((((-1.0)*gconst38*x14175*x14185))+((r20*x14181))+((r21*x14171*x14177))+((r22*x14187))+x14190+((sj3*x14174)));
evalcond[6]=(((r02*x14187))+((sj3*x14183))+(((-1.0)*x14178))+((r00*x14181))+x14180+((r01*x14171*x14177))+(((-1.0)*cj3*x14179*x14185)));
evalcond[7]=(((cj3*x14183))+((r00*x14177))+(((-1.0)*r01*x14181*x14185))+((x14179*x14188))+(((-1.0)*r02*sj3*x14186))+x14190);
evalcond[8]=(((gconst37*x14175))+(((-1.0)*r21*x14181*x14185))+((x14182*x14188))+((cj3*x14174))+x14178+(((-1.0)*r22*sj3*x14186))+(((-1.0)*x14180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14191=gconst38*gconst38;
IkReal x14192=gconst37*gconst37;
IkReal x14193=(gconst37*r10);
IkReal x14194=(cj3*r22);
IkReal x14195=((1.0)*gconst38);
IkReal x14196=(r21*sj3);
IkReal x14197=(gconst38*r11);
IkReal x14198=(cj3*r20);
IkReal x14199=(cj3*r21);
IkReal x14200=(r20*sj3);
CheckValue<IkReal> x14201=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14193*x14195*x14196))+(((-1.0)*gconst37*r11*x14195*x14200))+((r12*r22*sj3))+((r11*x14192*x14196))+((r10*x14191*x14200)))),-1);
if(!x14201.valid){
continue;
}
CheckValue<IkReal> x14202 = IKatan2WithCheck(IkReal((((x14194*x14197))+((x14193*x14194)))),IkReal(((((-1.0)*x14193*x14195*x14198))+((gconst37*x14197*x14199))+(((-1.0)*r11*x14191*x14198))+((r10*x14192*x14199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14201.value)))+(x14202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14203=IKsin(j4);
IkReal x14204=IKcos(j4);
IkReal x14205=(cj2*sj1);
IkReal x14206=(cj1*sj2);
IkReal x14207=(gconst38*r21);
IkReal x14208=(cj3*r20);
IkReal x14209=(gconst38*r10);
IkReal x14210=(cj3*gconst37);
IkReal x14211=(sj1*sj2);
IkReal x14212=(gconst38*r00);
IkReal x14213=(cj1*cj2);
IkReal x14214=(gconst37*sj3);
IkReal x14215=(gconst38*r20);
IkReal x14216=(gconst38*r01);
IkReal x14217=(gconst38*r11);
IkReal x14218=((1.0)*x14204);
IkReal x14219=((1.0)*x14203);
IkReal x14220=(cj3*x14203);
IkReal x14221=(sj3*x14204);
IkReal x14222=(gconst37*x14203);
IkReal x14223=(x14205+x14206);
evalcond[0]=((((-1.0)*x14215*x14219))+((r21*x14222))+(((-1.0)*r22*x14218)));
evalcond[1]=((((-1.0)*x14212*x14219))+(((-1.0)*r02*x14218))+((r01*x14222)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14218))+(((-1.0)*x14209*x14219))+((r11*x14222)));
evalcond[3]=((((-1.0)*cj3*x14209*x14218))+((r10*x14214))+((r11*x14204*x14210))+((sj3*x14217))+((r12*x14220)));
evalcond[4]=(((r10*x14210))+(((-1.0)*r11*x14214*x14218))+(((-1.0)*r12*sj3*x14219))+((cj3*x14217))+((x14209*x14221)));
evalcond[5]=((((-1.0)*gconst38*x14208*x14218))+((r22*x14220))+((r21*x14204*x14210))+((r20*x14214))+((sj3*x14207))+x14223);
evalcond[6]=(((r02*x14220))+(((-1.0)*cj3*x14212*x14218))+((r01*x14204*x14210))+((sj3*x14216))+((r00*x14214))+(((-1.0)*x14211))+x14213);
evalcond[7]=((((-1.0)*r02*sj3*x14219))+((r00*x14210))+((cj3*x14216))+x14223+(((-1.0)*r01*x14214*x14218))+((x14212*x14221)));
evalcond[8]=(((gconst37*x14208))+(((-1.0)*r22*sj3*x14219))+((cj3*x14207))+(((-1.0)*x14213))+((x14215*x14221))+x14211+(((-1.0)*r21*x14214*x14218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14224=((1.0)*gconst38);
CheckValue<IkReal> x14225=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14224)))),-1);
if(!x14225.valid){
continue;
}
CheckValue<IkReal> x14226 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14224))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14225.value)))+(x14226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14227=IKsin(j4);
IkReal x14228=IKcos(j4);
IkReal x14229=(cj2*sj1);
IkReal x14230=(cj1*sj2);
IkReal x14231=(gconst38*r21);
IkReal x14232=(cj3*r20);
IkReal x14233=(gconst38*r10);
IkReal x14234=(cj3*gconst37);
IkReal x14235=(sj1*sj2);
IkReal x14236=(gconst38*r00);
IkReal x14237=(cj1*cj2);
IkReal x14238=(gconst37*sj3);
IkReal x14239=(gconst38*r20);
IkReal x14240=(gconst38*r01);
IkReal x14241=(gconst38*r11);
IkReal x14242=((1.0)*x14228);
IkReal x14243=((1.0)*x14227);
IkReal x14244=(cj3*x14227);
IkReal x14245=(sj3*x14228);
IkReal x14246=(gconst37*x14227);
IkReal x14247=(x14230+x14229);
evalcond[0]=(((r21*x14246))+(((-1.0)*x14239*x14243))+(((-1.0)*r22*x14242)));
evalcond[1]=((((-1.0)*x14236*x14243))+((r01*x14246))+(((-1.0)*r02*x14242)));
evalcond[2]=((-1.0)+((r11*x14246))+(((-1.0)*r12*x14242))+(((-1.0)*x14233*x14243)));
evalcond[3]=(((sj3*x14241))+(((-1.0)*cj3*x14233*x14242))+((r10*x14238))+((r12*x14244))+((r11*x14228*x14234)));
evalcond[4]=(((r10*x14234))+(((-1.0)*r11*x14238*x14242))+((cj3*x14241))+((x14233*x14245))+(((-1.0)*r12*sj3*x14243)));
evalcond[5]=(((r20*x14238))+(((-1.0)*gconst38*x14232*x14242))+((r21*x14228*x14234))+x14247+((sj3*x14231))+((r22*x14244)));
evalcond[6]=(((sj3*x14240))+((r02*x14244))+((r00*x14238))+(((-1.0)*x14235))+(((-1.0)*cj3*x14236*x14242))+x14237+((r01*x14228*x14234)));
evalcond[7]=((((-1.0)*r01*x14238*x14242))+((x14236*x14245))+(((-1.0)*r02*sj3*x14243))+((cj3*x14240))+((r00*x14234))+x14247);
evalcond[8]=((((-1.0)*r22*sj3*x14243))+((gconst37*x14232))+((x14239*x14245))+(((-1.0)*r21*x14238*x14242))+((cj3*x14231))+(((-1.0)*x14237))+x14235);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14249 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14249)==0){
continue;
}
IkReal x14248=pow(x14249,-0.5);
CheckValue<IkReal> x14250 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14250.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14250.value))));
IkReal gconst40=((1.0)*r01*x14248);
IkReal gconst41=((-1.0)*r00*x14248);
CheckValue<IkReal> x14251 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14251.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14251.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14254 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14254.valid){
continue;
}
IkReal x14252=((1.0)*(x14254.value));
IkReal x14253=x14248;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14252)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14252)));
IkReal gconst40=((1.0)*r01*x14253);
IkReal gconst41=((-1.0)*r00*x14253);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14257 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14257.valid){
continue;
}
IkReal x14255=((1.0)*(x14257.value));
IkReal x14256=x14248;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14255)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14255)));
IkReal gconst40=((1.0)*r01*x14256);
IkReal gconst41=((-1.0)*r00*x14256);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14258=gconst41*gconst41;
IkReal x14259=gconst40*gconst40;
IkReal x14260=(gconst40*r10);
IkReal x14261=(r22*sj3);
IkReal x14262=(r11*sj3);
IkReal x14263=((1.0)*cj3);
IkReal x14264=(gconst41*r21);
IkReal x14265=(gconst41*r20);
IkReal x14266=(r21*x14259);
IkReal x14267=((1.0)*r20*x14258);
CheckValue<IkReal> x14268 = IKatan2WithCheck(IkReal((((gconst41*r11*x14261))+((x14260*x14261)))),IkReal(((((-1.0)*sj3*x14260*x14265))+(((-1.0)*x14262*x14267))+((gconst40*x14262*x14264))+((r10*sj3*x14266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14268.valid){
continue;
}
CheckValue<IkReal> x14269=IKPowWithIntegerCheck(IKsign((((cj3*x14260*x14264))+((cj3*gconst40*r11*x14265))+(((-1.0)*r10*r20*x14258*x14263))+(((-1.0)*r11*x14263*x14266))+(((-1.0)*r12*r22*x14263)))),-1);
if(!x14269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14268.value)+(((1.5707963267949)*(x14269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14270=IKsin(j4);
IkReal x14271=IKcos(j4);
IkReal x14272=(cj2*sj1);
IkReal x14273=(cj1*sj2);
IkReal x14274=(gconst40*sj3);
IkReal x14275=(gconst41*sj3);
IkReal x14276=(gconst41*r20);
IkReal x14277=(cj3*gconst41);
IkReal x14278=(sj1*sj2);
IkReal x14279=(cj1*cj2);
IkReal x14280=(cj3*gconst40);
IkReal x14281=((1.0)*x14271);
IkReal x14282=((1.0)*x14270);
IkReal x14283=(cj3*x14270);
IkReal x14284=(gconst40*x14270);
IkReal x14285=(x14273+x14272);
IkReal x14286=(x14271*x14280);
evalcond[0]=((((-1.0)*r22*x14281))+((r21*x14284))+(((-1.0)*x14276*x14282)));
evalcond[1]=(((r01*x14284))+(((-1.0)*gconst41*r00*x14282))+(((-1.0)*r02*x14281)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14281))+((r11*x14284))+(((-1.0)*gconst41*r10*x14282)));
evalcond[3]=(((r11*x14275))+((r12*x14283))+(((-1.0)*r10*x14277*x14281))+((r11*x14286))+((r10*x14274)));
evalcond[4]=((((-1.0)*r12*sj3*x14282))+(((-1.0)*r11*x14274*x14281))+((r10*x14280))+((r11*x14277))+((r10*x14271*x14275)));
evalcond[5]=(((r21*x14286))+((r21*x14275))+((r20*x14274))+((r22*x14283))+x14285+(((-1.0)*cj3*x14276*x14281)));
evalcond[6]=((((-1.0)*x14278))+((r01*x14275))+((r01*x14286))+x14279+((r02*x14283))+((r00*x14274))+(((-1.0)*r00*x14277*x14281)));
evalcond[7]=(((r01*x14277))+(((-1.0)*r02*sj3*x14282))+((r00*x14280))+((r00*x14271*x14275))+(((-1.0)*r01*x14274*x14281))+x14285);
evalcond[8]=((((-1.0)*x14279))+((r20*x14271*x14275))+((r21*x14277))+(((-1.0)*r22*sj3*x14282))+(((-1.0)*r21*x14274*x14281))+x14278+((r20*x14280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14287=((1.0)*gconst41);
CheckValue<IkReal> x14288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14287))+(((-1.0)*gconst40*r20)))),-1);
if(!x14288.valid){
continue;
}
CheckValue<IkReal> x14289 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x14287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14288.value)))+(x14289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14290=IKsin(j4);
IkReal x14291=IKcos(j4);
IkReal x14292=(cj2*sj1);
IkReal x14293=(cj1*sj2);
IkReal x14294=(gconst40*sj3);
IkReal x14295=(gconst41*sj3);
IkReal x14296=(gconst41*r20);
IkReal x14297=(cj3*gconst41);
IkReal x14298=(sj1*sj2);
IkReal x14299=(cj1*cj2);
IkReal x14300=(cj3*gconst40);
IkReal x14301=((1.0)*x14291);
IkReal x14302=((1.0)*x14290);
IkReal x14303=(cj3*x14290);
IkReal x14304=(gconst40*x14290);
IkReal x14305=(x14293+x14292);
IkReal x14306=(x14291*x14300);
evalcond[0]=((((-1.0)*r22*x14301))+(((-1.0)*x14296*x14302))+((r21*x14304)));
evalcond[1]=((((-1.0)*r02*x14301))+(((-1.0)*gconst41*r00*x14302))+((r01*x14304)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14302))+((r11*x14304))+(((-1.0)*r12*x14301)));
evalcond[3]=((((-1.0)*r10*x14297*x14301))+((r11*x14306))+((r10*x14294))+((r12*x14303))+((r11*x14295)));
evalcond[4]=(((r11*x14297))+((r10*x14300))+(((-1.0)*r12*sj3*x14302))+((r10*x14291*x14295))+(((-1.0)*r11*x14294*x14301)));
evalcond[5]=(((r20*x14294))+((r21*x14295))+(((-1.0)*cj3*x14296*x14301))+((r22*x14303))+x14305+((r21*x14306)));
evalcond[6]=(((r02*x14303))+((r00*x14294))+((r01*x14295))+(((-1.0)*r00*x14297*x14301))+((r01*x14306))+(((-1.0)*x14298))+x14299);
evalcond[7]=((((-1.0)*r01*x14294*x14301))+(((-1.0)*r02*sj3*x14302))+((r01*x14297))+((r00*x14300))+x14305+((r00*x14291*x14295)));
evalcond[8]=(((r20*x14300))+(((-1.0)*r22*sj3*x14302))+((r21*x14297))+((r20*x14291*x14295))+(((-1.0)*x14299))+(((-1.0)*r21*x14294*x14301))+x14298);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14307 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14307.valid){
continue;
}
CheckValue<IkReal> x14308=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14307.value)+(((1.5707963267949)*(x14308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14309=IKsin(j4);
IkReal x14310=IKcos(j4);
IkReal x14311=(cj2*sj1);
IkReal x14312=(cj1*sj2);
IkReal x14313=(gconst40*sj3);
IkReal x14314=(gconst41*sj3);
IkReal x14315=(gconst41*r20);
IkReal x14316=(cj3*gconst41);
IkReal x14317=(sj1*sj2);
IkReal x14318=(cj1*cj2);
IkReal x14319=(cj3*gconst40);
IkReal x14320=((1.0)*x14310);
IkReal x14321=((1.0)*x14309);
IkReal x14322=(cj3*x14309);
IkReal x14323=(gconst40*x14309);
IkReal x14324=(x14312+x14311);
IkReal x14325=(x14310*x14319);
evalcond[0]=(((r21*x14323))+(((-1.0)*r22*x14320))+(((-1.0)*x14315*x14321)));
evalcond[1]=(((r01*x14323))+(((-1.0)*gconst41*r00*x14321))+(((-1.0)*r02*x14320)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14321))+((r11*x14323))+(((-1.0)*r12*x14320)));
evalcond[3]=(((r11*x14314))+(((-1.0)*r10*x14316*x14320))+((r11*x14325))+((r12*x14322))+((r10*x14313)));
evalcond[4]=(((r11*x14316))+(((-1.0)*r11*x14313*x14320))+(((-1.0)*r12*sj3*x14321))+((r10*x14310*x14314))+((r10*x14319)));
evalcond[5]=(((r20*x14313))+((r21*x14325))+((r21*x14314))+x14324+(((-1.0)*cj3*x14315*x14320))+((r22*x14322)));
evalcond[6]=(((r01*x14325))+((r02*x14322))+(((-1.0)*x14317))+(((-1.0)*r00*x14316*x14320))+((r00*x14313))+((r01*x14314))+x14318);
evalcond[7]=(((r00*x14310*x14314))+(((-1.0)*r02*sj3*x14321))+(((-1.0)*r01*x14313*x14320))+((r00*x14319))+((r01*x14316))+x14324);
evalcond[8]=((((-1.0)*r22*sj3*x14321))+((r20*x14310*x14314))+(((-1.0)*x14318))+(((-1.0)*r21*x14313*x14320))+((r20*x14319))+((r21*x14316))+x14317);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14326=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14326);
rxp1_1=(px*r21);
rxp1_2=(r11*x14326);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14327=(r11*sj5);
IkReal x14328=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14328))+x14327);
j4eval[1]=(((cj3*x14327))+(((-1.0)*cj3*x14328)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14329=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14329);
rxp1_1=(px*r21);
rxp1_2=(r11*x14329);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14330=(cj5*r10);
IkReal x14331=(r11*sj5);
j4eval[0]=((((-1.0)*x14330))+x14331);
j4eval[1]=((((-1.0)*sj3*x14331))+((sj3*x14330)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14332=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14332);
rxp1_1=(px*r21);
rxp1_2=(r11*x14332);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14333=((1.0)*r10);
CheckValue<IkReal> x14334=IKPowWithIntegerCheck(cj3,-1);
if(!x14334.valid){
continue;
}
CheckValue<IkReal> x14335=IKPowWithIntegerCheck(r02,-1);
if(!x14335.valid){
continue;
}
CheckValue<IkReal> x14336=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14333))),-1);
if(!x14336.valid){
continue;
}
if( IKabs(((x14334.value)*(x14335.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14336.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14333)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14334.value)*(x14335.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14336.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14333))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14334.value)*(x14335.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14336.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14333))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14337=IKsin(j4);
IkReal x14338=IKcos(j4);
IkReal x14339=(cj2*sj1);
IkReal x14340=(cj1*sj2);
IkReal x14341=(cj5*r10);
IkReal x14342=(sj1*sj2);
IkReal x14343=(cj5*sj3);
IkReal x14344=(r11*sj5);
IkReal x14345=(cj3*sj5);
IkReal x14346=(r21*sj5);
IkReal x14347=(cj1*cj2);
IkReal x14348=(cj3*cj5);
IkReal x14349=(sj3*sj5);
IkReal x14350=((1.0)*x14337);
IkReal x14351=(r20*x14338);
IkReal x14352=(cj3*x14338);
IkReal x14353=(sj3*x14338);
IkReal x14354=(x14340+x14339);
evalcond[0]=((-1.0)*r02*x14338);
evalcond[1]=((((-1.0)*cj5*r20*x14350))+((x14337*x14346)));
evalcond[2]=(((cj3*r02*x14337))+(((-1.0)*x14342))+x14347);
evalcond[3]=(x14354+(((-1.0)*r02*sj3*x14350)));
evalcond[4]=((-1.0)+((x14337*x14344))+(((-1.0)*x14341*x14350)));
evalcond[5]=((((-1.0)*x14341*x14352))+((r11*x14343))+((r10*x14349))+((x14344*x14352)));
evalcond[6]=((((-1.0)*x14344*x14353))+((r11*x14348))+((r10*x14345))+((x14341*x14353)));
evalcond[7]=(((r21*x14343))+((r21*x14338*x14345))+(((-1.0)*x14348*x14351))+((r20*x14349))+x14354);
evalcond[8]=(((r21*x14348))+(((-1.0)*x14347))+((r20*x14345))+x14342+((x14343*x14351))+(((-1.0)*x14346*x14353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14355=(cj5*r10);
IkReal x14356=((1.0)*r11);
CheckValue<IkReal> x14357=IKPowWithIntegerCheck(((((-1.0)*x14355))+((r11*sj5))),-1);
if(!x14357.valid){
continue;
}
CheckValue<IkReal> x14358=IKPowWithIntegerCheck((((sj3*x14355))+(((-1.0)*sj3*sj5*x14356))),-1);
if(!x14358.valid){
continue;
}
if( IKabs(x14357.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14356)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14357.value)+IKsqr(((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14356))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14357.value, ((x14358.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14356))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14359=IKsin(j4);
IkReal x14360=IKcos(j4);
IkReal x14361=(cj2*sj1);
IkReal x14362=(cj1*sj2);
IkReal x14363=(cj5*r10);
IkReal x14364=(sj1*sj2);
IkReal x14365=(cj5*sj3);
IkReal x14366=(r11*sj5);
IkReal x14367=(cj3*sj5);
IkReal x14368=(r21*sj5);
IkReal x14369=(cj1*cj2);
IkReal x14370=(cj3*cj5);
IkReal x14371=(sj3*sj5);
IkReal x14372=((1.0)*x14359);
IkReal x14373=(r20*x14360);
IkReal x14374=(cj3*x14360);
IkReal x14375=(sj3*x14360);
IkReal x14376=(x14362+x14361);
evalcond[0]=((-1.0)*r02*x14360);
evalcond[1]=((((-1.0)*cj5*r20*x14372))+((x14359*x14368)));
evalcond[2]=(((cj3*r02*x14359))+(((-1.0)*x14364))+x14369);
evalcond[3]=((((-1.0)*r02*sj3*x14372))+x14376);
evalcond[4]=((-1.0)+((x14359*x14366))+(((-1.0)*x14363*x14372)));
evalcond[5]=(((r11*x14365))+((x14366*x14374))+((r10*x14371))+(((-1.0)*x14363*x14374)));
evalcond[6]=(((r10*x14367))+((x14363*x14375))+((r11*x14370))+(((-1.0)*x14366*x14375)));
evalcond[7]=((((-1.0)*x14370*x14373))+((r21*x14365))+((r21*x14360*x14367))+((r20*x14371))+x14376);
evalcond[8]=(((r21*x14370))+((x14365*x14373))+((r20*x14367))+(((-1.0)*x14369))+(((-1.0)*x14368*x14375))+x14364);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14377=((1.0)*r10);
IkReal x14378=(r11*sj5);
CheckValue<IkReal> x14379=IKPowWithIntegerCheck(((((-1.0)*cj5*x14377))+x14378),-1);
if(!x14379.valid){
continue;
}
CheckValue<IkReal> x14380=IKPowWithIntegerCheck((((cj3*x14378))+(((-1.0)*cj3*cj5*x14377))),-1);
if(!x14380.valid){
continue;
}
if( IKabs(x14379.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14380.value)*(((((-1.0)*sj3*sj5*x14377))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14379.value)+IKsqr(((x14380.value)*(((((-1.0)*sj3*sj5*x14377))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14379.value, ((x14380.value)*(((((-1.0)*sj3*sj5*x14377))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14381=IKsin(j4);
IkReal x14382=IKcos(j4);
IkReal x14383=(cj2*sj1);
IkReal x14384=(cj1*sj2);
IkReal x14385=(cj5*r10);
IkReal x14386=(sj1*sj2);
IkReal x14387=(cj5*sj3);
IkReal x14388=(r11*sj5);
IkReal x14389=(cj3*sj5);
IkReal x14390=(r21*sj5);
IkReal x14391=(cj1*cj2);
IkReal x14392=(cj3*cj5);
IkReal x14393=(sj3*sj5);
IkReal x14394=((1.0)*x14381);
IkReal x14395=(r20*x14382);
IkReal x14396=(cj3*x14382);
IkReal x14397=(sj3*x14382);
IkReal x14398=(x14383+x14384);
evalcond[0]=((-1.0)*r02*x14382);
evalcond[1]=((((-1.0)*cj5*r20*x14394))+((x14381*x14390)));
evalcond[2]=((((-1.0)*x14386))+((cj3*r02*x14381))+x14391);
evalcond[3]=((((-1.0)*r02*sj3*x14394))+x14398);
evalcond[4]=((-1.0)+(((-1.0)*x14385*x14394))+((x14381*x14388)));
evalcond[5]=((((-1.0)*x14385*x14396))+((r11*x14387))+((r10*x14393))+((x14388*x14396)));
evalcond[6]=((((-1.0)*x14388*x14397))+((r10*x14389))+((x14385*x14397))+((r11*x14392)));
evalcond[7]=(((r21*x14387))+((r21*x14382*x14389))+(((-1.0)*x14392*x14395))+x14398+((r20*x14393)));
evalcond[8]=(((r20*x14389))+((r21*x14392))+(((-1.0)*x14391))+((x14387*x14395))+(((-1.0)*x14390*x14397))+x14386);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14399=cj5*cj5;
IkReal x14400=((1.0)*cj3);
IkReal x14401=(r10*r21);
IkReal x14402=(cj5*sj5);
IkReal x14403=(r11*r21);
IkReal x14404=(r11*r20);
IkReal x14405=(r22*sj3);
IkReal x14406=(r10*r20);
IkReal x14407=((1.0)*sj3*x14399);
CheckValue<IkReal> x14408=IKPowWithIntegerCheck(IKsign((((cj3*x14401*x14402))+(((-1.0)*x14399*x14400*x14406))+(((-1.0)*x14400*x14403))+((cj3*x14402*x14404))+(((-1.0)*r12*r22*x14400))+((cj3*x14399*x14403)))),-1);
if(!x14408.valid){
continue;
}
CheckValue<IkReal> x14409 = IKatan2WithCheck(IkReal((((cj5*r11*x14405))+((r10*sj5*x14405)))),IkReal(((((-1.0)*x14401*x14407))+((sj3*x14401))+(((-1.0)*x14404*x14407))+(((-1.0)*sj3*x14402*x14406))+((sj3*x14402*x14403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14408.value)))+(x14409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14410=IKsin(j4);
IkReal x14411=IKcos(j4);
IkReal x14412=(cj2*sj1);
IkReal x14413=(cj1*sj2);
IkReal x14414=(cj5*sj3);
IkReal x14415=(cj5*r10);
IkReal x14416=(r00*sj5);
IkReal x14417=(sj1*sj2);
IkReal x14418=(r11*sj5);
IkReal x14419=(cj3*cj5);
IkReal x14420=(cj3*sj5);
IkReal x14421=(r21*sj5);
IkReal x14422=(cj1*cj2);
IkReal x14423=(sj3*sj5);
IkReal x14424=(r01*sj5);
IkReal x14425=((1.0)*x14411);
IkReal x14426=((1.0)*x14410);
IkReal x14427=(cj3*x14410);
IkReal x14428=(cj3*x14411);
IkReal x14429=(x14413+x14412);
evalcond[0]=(((x14410*x14421))+(((-1.0)*r22*x14425))+(((-1.0)*cj5*r20*x14426)));
evalcond[1]=(((x14410*x14424))+(((-1.0)*cj5*r00*x14426))+(((-1.0)*r02*x14425)));
evalcond[2]=((-1.0)+(((-1.0)*x14415*x14426))+(((-1.0)*r12*x14425))+((x14410*x14418)));
evalcond[3]=((((-1.0)*cj3*x14415*x14425))+((r11*x14414))+((r12*x14427))+((x14418*x14428))+((r10*x14423)));
evalcond[4]=(((r11*x14419))+((r10*x14411*x14414))+((r10*x14420))+(((-1.0)*r12*sj3*x14426))+(((-1.0)*sj3*x14418*x14425)));
evalcond[5]=(((r21*x14414))+((r20*x14423))+((r21*x14411*x14420))+x14429+((r22*x14427))+(((-1.0)*r20*x14419*x14425)));
evalcond[6]=((((-1.0)*x14417))+((sj3*x14416))+((r01*x14411*x14420))+(((-1.0)*r00*x14419*x14425))+x14422+((r01*x14414))+((r02*x14427)));
evalcond[7]=(((r00*x14411*x14414))+(((-1.0)*r02*sj3*x14426))+(((-1.0)*r01*x14423*x14425))+((cj3*x14416))+x14429+((r01*x14419)));
evalcond[8]=(((r21*x14419))+((r20*x14420))+(((-1.0)*sj3*x14421*x14425))+x14417+(((-1.0)*r22*sj3*x14426))+(((-1.0)*x14422))+((r20*x14411*x14414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14430=((1.0)*cj5);
CheckValue<IkReal> x14431 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14431.valid){
continue;
}
CheckValue<IkReal> x14432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14430))+(((-1.0)*r20*sj5)))),-1);
if(!x14432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14431.value)+(((1.5707963267949)*(x14432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14433=IKsin(j4);
IkReal x14434=IKcos(j4);
IkReal x14435=(cj2*sj1);
IkReal x14436=(cj1*sj2);
IkReal x14437=(cj5*sj3);
IkReal x14438=(cj5*r10);
IkReal x14439=(r00*sj5);
IkReal x14440=(sj1*sj2);
IkReal x14441=(r11*sj5);
IkReal x14442=(cj3*cj5);
IkReal x14443=(cj3*sj5);
IkReal x14444=(r21*sj5);
IkReal x14445=(cj1*cj2);
IkReal x14446=(sj3*sj5);
IkReal x14447=(r01*sj5);
IkReal x14448=((1.0)*x14434);
IkReal x14449=((1.0)*x14433);
IkReal x14450=(cj3*x14433);
IkReal x14451=(cj3*x14434);
IkReal x14452=(x14436+x14435);
evalcond[0]=((((-1.0)*cj5*r20*x14449))+(((-1.0)*r22*x14448))+((x14433*x14444)));
evalcond[1]=((((-1.0)*cj5*r00*x14449))+(((-1.0)*r02*x14448))+((x14433*x14447)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14448))+(((-1.0)*x14438*x14449))+((x14433*x14441)));
evalcond[3]=(((r11*x14437))+((r12*x14450))+((r10*x14446))+((x14441*x14451))+(((-1.0)*cj3*x14438*x14448)));
evalcond[4]=((((-1.0)*sj3*x14441*x14448))+((r10*x14443))+((r11*x14442))+(((-1.0)*r12*sj3*x14449))+((r10*x14434*x14437)));
evalcond[5]=(((r21*x14437))+((r20*x14446))+((r21*x14434*x14443))+x14452+((r22*x14450))+(((-1.0)*r20*x14442*x14448)));
evalcond[6]=(((r01*x14437))+(((-1.0)*r00*x14442*x14448))+((sj3*x14439))+(((-1.0)*x14440))+x14445+((r01*x14434*x14443))+((r02*x14450)));
evalcond[7]=(((r01*x14442))+((r00*x14434*x14437))+x14452+(((-1.0)*r01*x14446*x14448))+((cj3*x14439))+(((-1.0)*r02*sj3*x14449)));
evalcond[8]=(((r20*x14434*x14437))+((r20*x14443))+(((-1.0)*r22*sj3*x14449))+(((-1.0)*x14445))+x14440+(((-1.0)*sj3*x14444*x14448))+((r21*x14442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14453 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14453.valid){
continue;
}
CheckValue<IkReal> x14454=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14453.value)+(((1.5707963267949)*(x14454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14455=IKsin(j4);
IkReal x14456=IKcos(j4);
IkReal x14457=(cj2*sj1);
IkReal x14458=(cj1*sj2);
IkReal x14459=(cj5*sj3);
IkReal x14460=(cj5*r10);
IkReal x14461=(r00*sj5);
IkReal x14462=(sj1*sj2);
IkReal x14463=(r11*sj5);
IkReal x14464=(cj3*cj5);
IkReal x14465=(cj3*sj5);
IkReal x14466=(r21*sj5);
IkReal x14467=(cj1*cj2);
IkReal x14468=(sj3*sj5);
IkReal x14469=(r01*sj5);
IkReal x14470=((1.0)*x14456);
IkReal x14471=((1.0)*x14455);
IkReal x14472=(cj3*x14455);
IkReal x14473=(cj3*x14456);
IkReal x14474=(x14457+x14458);
evalcond[0]=((((-1.0)*cj5*r20*x14471))+((x14455*x14466))+(((-1.0)*r22*x14470)));
evalcond[1]=((((-1.0)*cj5*r00*x14471))+(((-1.0)*r02*x14470))+((x14455*x14469)));
evalcond[2]=((-1.0)+(((-1.0)*x14460*x14471))+(((-1.0)*r12*x14470))+((x14455*x14463)));
evalcond[3]=(((r10*x14468))+((r11*x14459))+((r12*x14472))+(((-1.0)*cj3*x14460*x14470))+((x14463*x14473)));
evalcond[4]=((((-1.0)*sj3*x14463*x14470))+((r10*x14465))+(((-1.0)*r12*sj3*x14471))+((r11*x14464))+((r10*x14456*x14459)));
evalcond[5]=(((r22*x14472))+x14474+((r20*x14468))+((r21*x14459))+((r21*x14456*x14465))+(((-1.0)*r20*x14464*x14470)));
evalcond[6]=(((r01*x14456*x14465))+((sj3*x14461))+((r01*x14459))+(((-1.0)*r00*x14464*x14470))+(((-1.0)*x14462))+((r02*x14472))+x14467);
evalcond[7]=(((cj3*x14461))+((r01*x14464))+(((-1.0)*r02*sj3*x14471))+x14474+((r00*x14456*x14459))+(((-1.0)*r01*x14468*x14470)));
evalcond[8]=(((r20*x14456*x14459))+((r21*x14464))+(((-1.0)*r22*sj3*x14471))+(((-1.0)*x14467))+x14462+((r20*x14465))+(((-1.0)*sj3*x14466*x14470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14475=((-1.0)*r00);
IkReal x14477 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14477)==0){
continue;
}
IkReal x14476=pow(x14477,-0.5);
CheckValue<IkReal> x14478 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14475),IKFAST_ATAN2_MAGTHRESH);
if(!x14478.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14478.value));
IkReal gconst13=(r01*x14476);
IkReal gconst14=(x14475*x14476);
CheckValue<IkReal> x14479 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14480=((-1.0)*r00);
IkReal x14481=x14476;
CheckValue<IkReal> x14483 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14480),IKFAST_ATAN2_MAGTHRESH);
if(!x14483.valid){
continue;
}
IkReal x14482=((-1.0)*(x14483.value));
sj5=gconst13;
cj5=gconst14;
j5=x14482;
IkReal gconst12=x14482;
IkReal gconst13=(r01*x14481);
IkReal gconst14=(x14480*x14481);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14484=((1.0)*sj0);
IkReal x14485=((1.0)*cj0);
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14484))+(((-1.0)*r02*x14485)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14485))+(((-1.0)*gconst13*r11*x14484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
CheckValue<IkReal> x14487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14486.value)+(((1.5707963267949)*(x14487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14488=IKsin(j4);
IkReal x14489=IKcos(j4);
IkReal x14490=((1.0)*r22);
IkReal x14491=((1.0)*r12);
IkReal x14492=(gconst13*sj3);
IkReal x14493=(gconst13*r01);
IkReal x14494=(sj1*sj2);
IkReal x14495=(gconst14*sj3);
IkReal x14496=(cj2*sj1);
IkReal x14497=((1.0)*sj0);
IkReal x14498=(cj3*gconst13);
IkReal x14499=(cj3*gconst14);
IkReal x14500=((1.0)*cj0);
IkReal x14501=((1.0)*gconst14);
IkReal x14502=(cj1*sj2);
IkReal x14503=(sj3*x14488);
IkReal x14504=((1.0)*cj1*cj2);
IkReal x14505=(cj3*x14489);
IkReal x14506=(cj3*x14488);
IkReal x14507=(gconst13*x14488);
IkReal x14508=((1.0)*x14489);
IkReal x14509=(x14488*x14501);
evalcond[0]=(((r21*x14507))+(((-1.0)*r20*x14509))+(((-1.0)*x14489*x14490)));
evalcond[1]=(cj0+(((-1.0)*r10*x14509))+((r11*x14507))+(((-1.0)*x14489*x14491)));
evalcond[2]=((((-1.0)*r02*x14508))+(((-1.0)*x14497))+((x14488*x14493))+(((-1.0)*r00*x14509)));
evalcond[3]=(((r21*x14489*x14498))+((r21*x14495))+((r22*x14506))+(((-1.0)*r20*x14499*x14508))+x14502+x14496+((r20*x14492)));
evalcond[4]=(((r21*x14499))+((r20*x14489*x14495))+(((-1.0)*x14504))+x14494+(((-1.0)*x14490*x14503))+(((-1.0)*r21*x14492*x14508))+((r20*x14498)));
evalcond[5]=(((r02*x14506))+((cj0*x14494))+((x14493*x14505))+(((-1.0)*cj1*cj2*x14500))+(((-1.0)*r00*x14499*x14508))+((r00*x14492))+((r01*x14495)));
evalcond[6]=(((r10*x14492))+(((-1.0)*cj1*cj2*x14497))+((r11*x14495))+((sj0*x14494))+((r11*x14489*x14498))+(((-1.0)*r10*x14499*x14508))+((r12*x14506)));
evalcond[7]=((((-1.0)*x14500*x14502))+((r00*x14489*x14495))+(((-1.0)*x14496*x14500))+(((-1.0)*r01*x14492*x14508))+((r00*x14498))+((r01*x14499))+(((-1.0)*r02*x14503)));
evalcond[8]=(((r10*x14498))+((r11*x14499))+(((-1.0)*x14491*x14503))+(((-1.0)*x14497*x14502))+(((-1.0)*x14496*x14497))+((r10*x14489*x14495))+(((-1.0)*r11*x14492*x14508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14510=((1.0)*gconst14);
CheckValue<IkReal> x14511=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14510)))),-1);
if(!x14511.valid){
continue;
}
CheckValue<IkReal> x14512 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14510))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14511.value)))+(x14512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14513=IKsin(j4);
IkReal x14514=IKcos(j4);
IkReal x14515=((1.0)*r22);
IkReal x14516=((1.0)*r12);
IkReal x14517=(gconst13*sj3);
IkReal x14518=(gconst13*r01);
IkReal x14519=(sj1*sj2);
IkReal x14520=(gconst14*sj3);
IkReal x14521=(cj2*sj1);
IkReal x14522=((1.0)*sj0);
IkReal x14523=(cj3*gconst13);
IkReal x14524=(cj3*gconst14);
IkReal x14525=((1.0)*cj0);
IkReal x14526=((1.0)*gconst14);
IkReal x14527=(cj1*sj2);
IkReal x14528=(sj3*x14513);
IkReal x14529=((1.0)*cj1*cj2);
IkReal x14530=(cj3*x14514);
IkReal x14531=(cj3*x14513);
IkReal x14532=(gconst13*x14513);
IkReal x14533=((1.0)*x14514);
IkReal x14534=(x14513*x14526);
evalcond[0]=((((-1.0)*r20*x14534))+(((-1.0)*x14514*x14515))+((r21*x14532)));
evalcond[1]=(cj0+((r11*x14532))+(((-1.0)*r10*x14534))+(((-1.0)*x14514*x14516)));
evalcond[2]=((((-1.0)*r00*x14534))+(((-1.0)*x14522))+((x14513*x14518))+(((-1.0)*r02*x14533)));
evalcond[3]=(((r21*x14514*x14523))+((r20*x14517))+((r22*x14531))+x14521+x14527+((r21*x14520))+(((-1.0)*r20*x14524*x14533)));
evalcond[4]=(((r20*x14523))+(((-1.0)*r21*x14517*x14533))+(((-1.0)*x14529))+x14519+((r20*x14514*x14520))+((r21*x14524))+(((-1.0)*x14515*x14528)));
evalcond[5]=(((r00*x14517))+((r02*x14531))+((r01*x14520))+((cj0*x14519))+(((-1.0)*cj1*cj2*x14525))+((x14518*x14530))+(((-1.0)*r00*x14524*x14533)));
evalcond[6]=(((r12*x14531))+((r11*x14514*x14523))+((r11*x14520))+(((-1.0)*cj1*cj2*x14522))+((sj0*x14519))+((r10*x14517))+(((-1.0)*r10*x14524*x14533)));
evalcond[7]=(((r00*x14514*x14520))+((r01*x14524))+((r00*x14523))+(((-1.0)*x14525*x14527))+(((-1.0)*x14521*x14525))+(((-1.0)*r02*x14528))+(((-1.0)*r01*x14517*x14533)));
evalcond[8]=((((-1.0)*x14522*x14527))+((r10*x14514*x14520))+(((-1.0)*r11*x14517*x14533))+((r11*x14524))+(((-1.0)*x14521*x14522))+(((-1.0)*x14516*x14528))+((r10*x14523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14535=((-1.0)*r01);
IkReal x14537 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14537)==0){
continue;
}
IkReal x14536=pow(x14537,-0.5);
CheckValue<IkReal> x14538 = IKatan2WithCheck(IkReal(x14535),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14538.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14538.value))));
IkReal gconst16=(x14535*x14536);
IkReal gconst17=((1.0)*r00*x14536);
CheckValue<IkReal> x14539 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14539.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14539.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14540=((-1.0)*r01);
CheckValue<IkReal> x14543 = IKatan2WithCheck(IkReal(x14540),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14543.valid){
continue;
}
IkReal x14541=((1.0)*(x14543.value));
IkReal x14542=x14536;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14541)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14541)));
IkReal gconst16=(x14540*x14542);
IkReal gconst17=((1.0)*r00*x14542);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14544=((-1.0)*r01);
CheckValue<IkReal> x14547 = IKatan2WithCheck(IkReal(x14544),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14547.valid){
continue;
}
IkReal x14545=((1.0)*(x14547.value));
IkReal x14546=x14536;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14545)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14545)));
IkReal gconst16=(x14544*x14546);
IkReal gconst17=((1.0)*r00*x14546);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14548=((-1.0)*r01);
CheckValue<IkReal> x14551 = IKatan2WithCheck(IkReal(x14548),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14551.valid){
continue;
}
IkReal x14549=((1.0)*(x14551.value));
IkReal x14550=x14536;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14549)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14549)));
IkReal gconst16=(x14548*x14550);
IkReal gconst17=((1.0)*r00*x14550);
IkReal x14552=r02*r02;
IkReal x14553=(r12*sj0);
IkReal x14554=((1.0)*cj0);
IkReal x14555=x14536;
j4eval[0]=((IKabs((((cj0*x14552*x14555))+(((-1.0)*x14554*x14555))+((r02*x14553*x14555)))))+(IKabs(((((-1.0)*r02*x14554))+(((-1.0)*x14553))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14556=((-1.0)*r01);
CheckValue<IkReal> x14559 = IKatan2WithCheck(IkReal(x14556),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14559.valid){
continue;
}
IkReal x14557=((1.0)*(x14559.value));
IkReal x14558=x14536;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14557)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14557)));
IkReal gconst16=(x14556*x14558);
IkReal gconst17=((1.0)*r00*x14558);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14560=((-1.0)*r01);
CheckValue<IkReal> x14563 = IKatan2WithCheck(IkReal(x14560),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14563.valid){
continue;
}
IkReal x14561=((1.0)*(x14563.value));
IkReal x14562=x14536;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14561)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14561)));
IkReal gconst16=(x14560*x14562);
IkReal gconst17=((1.0)*r00*x14562);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14564=gconst16*gconst16;
IkReal x14565=gconst17*gconst17;
IkReal x14566=(r11*sj3);
IkReal x14567=(cj3*r10);
IkReal x14568=((1.0)*cj3);
IkReal x14569=(r10*sj3);
IkReal x14570=(gconst16*gconst17);
IkReal x14571=(r21*x14564);
IkReal x14572=((1.0)*r20*x14565);
CheckValue<IkReal> x14573 = IKatan2WithCheck(IkReal((((gconst17*r22*x14566))+((gconst16*r22*x14569)))),IkReal((((r21*x14566*x14570))+(((-1.0)*r20*x14569*x14570))+((x14569*x14571))+(((-1.0)*x14566*x14572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14573.valid){
continue;
}
CheckValue<IkReal> x14574=IKPowWithIntegerCheck(IKsign((((r21*x14567*x14570))+((cj3*r11*r20*x14570))+(((-1.0)*r11*x14568*x14571))+(((-1.0)*r12*r22*x14568))+(((-1.0)*x14567*x14572)))),-1);
if(!x14574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14573.value)+(((1.5707963267949)*(x14574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14575=IKsin(j4);
IkReal x14576=IKcos(j4);
IkReal x14577=(cj2*sj1);
IkReal x14578=(cj1*sj2);
IkReal x14579=(gconst16*r21);
IkReal x14580=(cj3*gconst17);
IkReal x14581=(gconst16*r20);
IkReal x14582=(sj1*sj2);
IkReal x14583=(gconst17*r20);
IkReal x14584=(gconst17*sj3);
IkReal x14585=(gconst16*r10);
IkReal x14586=(cj1*cj2);
IkReal x14587=(gconst16*sj3);
IkReal x14588=((1.0)*x14576);
IkReal x14589=((1.0)*x14575);
IkReal x14590=(gconst16*x14575);
IkReal x14591=(cj3*x14576);
IkReal x14592=(cj3*x14575);
IkReal x14593=(x14577+x14578);
evalcond[0]=((((-1.0)*x14583*x14589))+(((-1.0)*r22*x14588))+((x14575*x14579)));
evalcond[1]=((((-1.0)*r02*x14588))+((r01*x14590))+(((-1.0)*gconst17*r00*x14589)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14588))+((r11*x14590))+(((-1.0)*gconst17*r10*x14589)));
evalcond[3]=(((gconst16*r11*x14591))+(((-1.0)*r10*x14580*x14588))+((sj3*x14585))+((r11*x14584))+((r12*x14592)));
evalcond[4]=(((cj3*x14585))+((r10*x14576*x14584))+(((-1.0)*r11*x14587*x14588))+((r11*x14580))+(((-1.0)*r12*sj3*x14589)));
evalcond[5]=(((r22*x14592))+((r21*x14584))+x14593+((sj3*x14581))+(((-1.0)*r20*x14580*x14588))+((x14579*x14591)));
evalcond[6]=((((-1.0)*r00*x14580*x14588))+(((-1.0)*x14582))+((gconst16*r01*x14591))+x14586+((r00*x14587))+((r01*x14584))+((r02*x14592)));
evalcond[7]=(((r00*x14576*x14584))+x14593+(((-1.0)*r01*x14587*x14588))+((r01*x14580))+(((-1.0)*r02*sj3*x14589))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14579*x14588))+((cj3*x14581))+(((-1.0)*x14586))+((r21*x14580))+x14582+(((-1.0)*r22*sj3*x14589))+((sj3*x14576*x14583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14594=((1.0)*gconst17);
CheckValue<IkReal> x14595=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14594)))),-1);
if(!x14595.valid){
continue;
}
CheckValue<IkReal> x14596 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14595.value)))+(x14596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14597=IKsin(j4);
IkReal x14598=IKcos(j4);
IkReal x14599=(cj2*sj1);
IkReal x14600=(cj1*sj2);
IkReal x14601=(gconst16*r21);
IkReal x14602=(cj3*gconst17);
IkReal x14603=(gconst16*r20);
IkReal x14604=(sj1*sj2);
IkReal x14605=(gconst17*r20);
IkReal x14606=(gconst17*sj3);
IkReal x14607=(gconst16*r10);
IkReal x14608=(cj1*cj2);
IkReal x14609=(gconst16*sj3);
IkReal x14610=((1.0)*x14598);
IkReal x14611=((1.0)*x14597);
IkReal x14612=(gconst16*x14597);
IkReal x14613=(cj3*x14598);
IkReal x14614=(cj3*x14597);
IkReal x14615=(x14599+x14600);
evalcond[0]=(((x14597*x14601))+(((-1.0)*r22*x14610))+(((-1.0)*x14605*x14611)));
evalcond[1]=((((-1.0)*gconst17*r00*x14611))+((r01*x14612))+(((-1.0)*r02*x14610)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14611))+(((-1.0)*r12*x14610))+((r11*x14612)));
evalcond[3]=(((gconst16*r11*x14613))+((r11*x14606))+((sj3*x14607))+((r12*x14614))+(((-1.0)*r10*x14602*x14610)));
evalcond[4]=((((-1.0)*r12*sj3*x14611))+((cj3*x14607))+((r11*x14602))+((r10*x14598*x14606))+(((-1.0)*r11*x14609*x14610)));
evalcond[5]=(((r21*x14606))+((x14601*x14613))+(((-1.0)*r20*x14602*x14610))+((r22*x14614))+x14615+((sj3*x14603)));
evalcond[6]=(((gconst16*r01*x14613))+((r02*x14614))+(((-1.0)*r00*x14602*x14610))+((r01*x14606))+(((-1.0)*x14604))+((r00*x14609))+x14608);
evalcond[7]=((((-1.0)*r01*x14609*x14610))+((r01*x14602))+x14615+(((-1.0)*r02*sj3*x14611))+((cj3*gconst16*r00))+((r00*x14598*x14606)));
evalcond[8]=((((-1.0)*r22*sj3*x14611))+((r21*x14602))+(((-1.0)*x14608))+(((-1.0)*sj3*x14601*x14610))+((cj3*x14603))+x14604+((sj3*x14598*x14605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14616=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14616.valid){
continue;
}
CheckValue<IkReal> x14617 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14616.value)))+(x14617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14618=IKsin(j4);
IkReal x14619=IKcos(j4);
IkReal x14620=(cj2*sj1);
IkReal x14621=(cj1*sj2);
IkReal x14622=(gconst16*r21);
IkReal x14623=(cj3*gconst17);
IkReal x14624=(gconst16*r20);
IkReal x14625=(sj1*sj2);
IkReal x14626=(gconst17*r20);
IkReal x14627=(gconst17*sj3);
IkReal x14628=(gconst16*r10);
IkReal x14629=(cj1*cj2);
IkReal x14630=(gconst16*sj3);
IkReal x14631=((1.0)*x14619);
IkReal x14632=((1.0)*x14618);
IkReal x14633=(gconst16*x14618);
IkReal x14634=(cj3*x14619);
IkReal x14635=(cj3*x14618);
IkReal x14636=(x14620+x14621);
evalcond[0]=((((-1.0)*r22*x14631))+(((-1.0)*x14626*x14632))+((x14618*x14622)));
evalcond[1]=((((-1.0)*gconst17*r00*x14632))+((r01*x14633))+(((-1.0)*r02*x14631)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14632))+((r11*x14633))+(((-1.0)*r12*x14631)));
evalcond[3]=(((sj3*x14628))+((gconst16*r11*x14634))+((r11*x14627))+((r12*x14635))+(((-1.0)*r10*x14623*x14631)));
evalcond[4]=(((cj3*x14628))+((r11*x14623))+(((-1.0)*r12*sj3*x14632))+((r10*x14619*x14627))+(((-1.0)*r11*x14630*x14631)));
evalcond[5]=(((sj3*x14624))+((r22*x14635))+((r21*x14627))+((x14622*x14634))+x14636+(((-1.0)*r20*x14623*x14631)));
evalcond[6]=(((r02*x14635))+((gconst16*r01*x14634))+x14629+((r00*x14630))+(((-1.0)*x14625))+((r01*x14627))+(((-1.0)*r00*x14623*x14631)));
evalcond[7]=((((-1.0)*r02*sj3*x14632))+x14636+((r00*x14619*x14627))+(((-1.0)*r01*x14630*x14631))+((r01*x14623))+((cj3*gconst16*r00)));
evalcond[8]=(((r21*x14623))+(((-1.0)*r22*sj3*x14632))+((cj3*x14624))+(((-1.0)*sj3*x14622*x14631))+((sj3*x14619*x14626))+x14625+(((-1.0)*x14629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14637=((-1.0)*r01);
CheckValue<IkReal> x14640 = IKatan2WithCheck(IkReal(x14637),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14640.valid){
continue;
}
IkReal x14638=((1.0)*(x14640.value));
IkReal x14639=x14536;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14638)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14638)));
IkReal gconst16=(x14637*x14639);
IkReal gconst17=((1.0)*r00*x14639);
IkReal x14641=r02*r02;
IkReal x14642=(r12*sj0);
IkReal x14643=((1.0)*cj0);
IkReal x14644=x14536;
j4eval[0]=((IKabs((((r02*x14642*x14644))+(((-1.0)*x14643*x14644))+((cj0*x14641*x14644)))))+(IKabs(((((-1.0)*x14642))+(((-1.0)*r02*x14643))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14645=((1.0)*r12);
IkReal x14646=(sj1*sj2);
IkReal x14647=(cj1*cj2);
IkReal x14648=((1.0)*sj3);
IkReal x14649=(gconst16*r21);
IkReal x14650=(cj3*gconst16*r20);
IkReal x14651=(gconst17*r20*sj3);
IkReal x14652=(cj3*gconst17*r21);
CheckValue<IkReal> x14653=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11*x14648*x14649))+(((-1.0)*r10*r20*x14648*(gconst17*gconst17)))+((gconst17*r10*sj3*x14649))+((gconst16*r11*x14651))),-1);
if(!x14653.valid){
continue;
}
CheckValue<IkReal> x14654=IKPowWithIntegerCheck((x14651+(((-1.0)*x14648*x14649))),-1);
if(!x14654.valid){
continue;
}
if( IKabs(((x14653.value)*((((r12*x14647))+(((-1.0)*cj0*gconst17*r20*x14648))+((cj0*sj3*x14649))+(((-1.0)*x14645*x14646))+(((-1.0)*x14645*x14652))+(((-1.0)*x14645*x14650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14654.value)*(((((-1.0)*x14652))+(((-1.0)*x14650))+(((-1.0)*x14646))+x14647)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14653.value)*((((r12*x14647))+(((-1.0)*cj0*gconst17*r20*x14648))+((cj0*sj3*x14649))+(((-1.0)*x14645*x14646))+(((-1.0)*x14645*x14652))+(((-1.0)*x14645*x14650))))))+IKsqr(((x14654.value)*(((((-1.0)*x14652))+(((-1.0)*x14650))+(((-1.0)*x14646))+x14647))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14653.value)*((((r12*x14647))+(((-1.0)*cj0*gconst17*r20*x14648))+((cj0*sj3*x14649))+(((-1.0)*x14645*x14646))+(((-1.0)*x14645*x14652))+(((-1.0)*x14645*x14650))))), ((x14654.value)*(((((-1.0)*x14652))+(((-1.0)*x14650))+(((-1.0)*x14646))+x14647))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14655=IKsin(j4);
IkReal x14656=IKcos(j4);
IkReal x14657=((1.0)*gconst17);
IkReal x14658=(gconst17*sj3);
IkReal x14659=(gconst16*r21);
IkReal x14660=(cj3*gconst17);
IkReal x14661=(sj1*sj2);
IkReal x14662=((1.0)*sj0);
IkReal x14663=(gconst16*sj3);
IkReal x14664=(cj3*gconst16);
IkReal x14665=(cj2*sj1);
IkReal x14666=((1.0)*cj0);
IkReal x14667=((1.0)*sj3);
IkReal x14668=(cj1*sj2);
IkReal x14669=(cj3*x14656);
IkReal x14670=(gconst16*x14655);
IkReal x14671=((1.0)*x14656);
IkReal x14672=((1.0)*cj1*cj2);
IkReal x14673=(r02*x14655);
IkReal x14674=(r12*x14655);
evalcond[0]=((((-1.0)*r20*x14655*x14657))+((x14655*x14659)));
evalcond[1]=(cj0+(((-1.0)*r10*x14655*x14657))+(((-1.0)*r12*x14671))+((r11*x14670)));
evalcond[2]=(((r01*x14670))+(((-1.0)*r00*x14655*x14657))+(((-1.0)*r02*x14671))+(((-1.0)*x14662)));
evalcond[3]=((((-1.0)*r20*x14657*x14669))+((x14659*x14669))+x14668+x14665+((r21*x14658))+((r20*x14663)));
evalcond[4]=((((-1.0)*x14672))+((r21*x14660))+(((-1.0)*x14656*x14659*x14667))+x14661+((r20*x14656*x14658))+((r20*x14664)));
evalcond[5]=((((-1.0)*r00*x14657*x14669))+((r01*x14658))+((r01*x14656*x14664))+((cj0*x14661))+((r00*x14663))+(((-1.0)*cj1*cj2*x14666))+((cj3*x14673)));
evalcond[6]=(((r11*x14656*x14664))+((r10*x14663))+((sj0*x14661))+(((-1.0)*r10*x14657*x14669))+(((-1.0)*cj1*cj2*x14662))+((cj3*x14674))+((r11*x14658)));
evalcond[7]=((((-1.0)*x14666*x14668))+(((-1.0)*r01*x14663*x14671))+((r00*x14664))+((r01*x14660))+(((-1.0)*x14667*x14673))+(((-1.0)*x14665*x14666))+((r00*x14656*x14658)));
evalcond[8]=(((r10*x14656*x14658))+((r10*x14664))+(((-1.0)*r11*x14663*x14671))+((r11*x14660))+(((-1.0)*x14667*x14674))+(((-1.0)*x14662*x14665))+(((-1.0)*x14662*x14668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14675=((1.0)*sj0);
IkReal x14676=((1.0)*cj0);
CheckValue<IkReal> x14677 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14675))+(((-1.0)*r02*x14676)))),IkReal(((((-1.0)*gconst16*r01*x14676))+(((-1.0)*gconst16*r11*x14675))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14677.valid){
continue;
}
CheckValue<IkReal> x14678=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14677.value)+(((1.5707963267949)*(x14678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14679=IKsin(j4);
IkReal x14680=IKcos(j4);
IkReal x14681=((1.0)*gconst17);
IkReal x14682=(gconst17*sj3);
IkReal x14683=(gconst16*r21);
IkReal x14684=(cj3*gconst17);
IkReal x14685=(sj1*sj2);
IkReal x14686=((1.0)*sj0);
IkReal x14687=(gconst16*sj3);
IkReal x14688=(cj3*gconst16);
IkReal x14689=(cj2*sj1);
IkReal x14690=((1.0)*cj0);
IkReal x14691=((1.0)*sj3);
IkReal x14692=(cj1*sj2);
IkReal x14693=(cj3*x14680);
IkReal x14694=(gconst16*x14679);
IkReal x14695=((1.0)*x14680);
IkReal x14696=((1.0)*cj1*cj2);
IkReal x14697=(r02*x14679);
IkReal x14698=(r12*x14679);
evalcond[0]=(((x14679*x14683))+(((-1.0)*r20*x14679*x14681)));
evalcond[1]=(cj0+((r11*x14694))+(((-1.0)*r12*x14695))+(((-1.0)*r10*x14679*x14681)));
evalcond[2]=(((r01*x14694))+(((-1.0)*r02*x14695))+(((-1.0)*x14686))+(((-1.0)*r00*x14679*x14681)));
evalcond[3]=((((-1.0)*r20*x14681*x14693))+((r20*x14687))+x14692+x14689+((r21*x14682))+((x14683*x14693)));
evalcond[4]=((((-1.0)*x14680*x14683*x14691))+((r20*x14688))+(((-1.0)*x14696))+x14685+((r21*x14684))+((r20*x14680*x14682)));
evalcond[5]=(((cj3*x14697))+((r00*x14687))+((r01*x14682))+(((-1.0)*cj1*cj2*x14690))+((r01*x14680*x14688))+(((-1.0)*r00*x14681*x14693))+((cj0*x14685)));
evalcond[6]=(((cj3*x14698))+(((-1.0)*cj1*cj2*x14686))+((r11*x14682))+((r11*x14680*x14688))+((sj0*x14685))+(((-1.0)*r10*x14681*x14693))+((r10*x14687)));
evalcond[7]=(((r00*x14688))+((r01*x14684))+((r00*x14680*x14682))+(((-1.0)*r01*x14687*x14695))+(((-1.0)*x14690*x14692))+(((-1.0)*x14691*x14697))+(((-1.0)*x14689*x14690)));
evalcond[8]=(((r10*x14680*x14682))+((r11*x14684))+(((-1.0)*x14686*x14692))+(((-1.0)*x14686*x14689))+(((-1.0)*r11*x14687*x14695))+((r10*x14688))+(((-1.0)*x14691*x14698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14699=((1.0)*sj0);
IkReal x14700=((1.0)*cj0);
CheckValue<IkReal> x14701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14701.valid){
continue;
}
CheckValue<IkReal> x14702 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14699))+(((-1.0)*r02*x14700)))),IkReal(((((-1.0)*gconst16*r11*x14699))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r01*x14700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14701.value)))+(x14702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14703=IKsin(j4);
IkReal x14704=IKcos(j4);
IkReal x14705=(cj3*gconst17);
IkReal x14706=(gconst16*r21);
IkReal x14707=(gconst17*sj3);
IkReal x14708=(gconst16*r20);
IkReal x14709=(sj1*sj2);
IkReal x14710=(gconst16*r10);
IkReal x14711=(cj2*sj1);
IkReal x14712=(gconst16*sj3);
IkReal x14713=((1.0)*cj0);
IkReal x14714=((1.0)*sj0);
IkReal x14715=(cj1*sj2);
IkReal x14716=((1.0)*x14704);
IkReal x14717=(gconst16*x14703);
IkReal x14718=(cj3*x14704);
IkReal x14719=(cj3*x14703);
IkReal x14720=((1.0)*cj1*cj2);
IkReal x14721=((1.0)*gconst17*x14703);
IkReal x14722=((1.0)*sj3*x14703);
evalcond[0]=((((-1.0)*r20*x14721))+(((-1.0)*r22*x14716))+((x14703*x14706)));
evalcond[1]=(((r11*x14717))+cj0+(((-1.0)*r10*x14721))+(((-1.0)*r12*x14716)));
evalcond[2]=((((-1.0)*r00*x14721))+(((-1.0)*r02*x14716))+(((-1.0)*x14714))+((r01*x14717)));
evalcond[3]=(((r22*x14719))+((r21*x14707))+((x14706*x14718))+x14711+x14715+((sj3*x14708))+(((-1.0)*r20*x14705*x14716)));
evalcond[4]=(((cj3*x14708))+((r20*x14704*x14707))+((r21*x14705))+x14709+(((-1.0)*sj3*x14706*x14716))+(((-1.0)*x14720))+(((-1.0)*r22*x14722)));
evalcond[5]=(((cj0*x14709))+((r02*x14719))+((r01*x14707))+(((-1.0)*r00*x14705*x14716))+((r00*x14712))+((gconst16*r01*x14718))+(((-1.0)*cj1*cj2*x14713)));
evalcond[6]=(((r12*x14719))+((sj0*x14709))+((sj3*x14710))+((r11*x14707))+((gconst16*r11*x14718))+(((-1.0)*r10*x14705*x14716))+(((-1.0)*cj1*cj2*x14714)));
evalcond[7]=(((r01*x14705))+(((-1.0)*r01*x14712*x14716))+(((-1.0)*r02*x14722))+(((-1.0)*x14711*x14713))+((cj3*gconst16*r00))+((r00*x14704*x14707))+(((-1.0)*x14713*x14715)));
evalcond[8]=((((-1.0)*r12*x14722))+((cj3*x14710))+((r10*x14704*x14707))+(((-1.0)*x14714*x14715))+((r11*x14705))+(((-1.0)*r11*x14712*x14716))+(((-1.0)*x14711*x14714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14723=((1.0)*gconst17);
CheckValue<IkReal> x14724 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14724.valid){
continue;
}
CheckValue<IkReal> x14725=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14723)))),-1);
if(!x14725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14724.value)+(((1.5707963267949)*(x14725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14726=IKsin(j4);
IkReal x14727=IKcos(j4);
IkReal x14728=(cj3*gconst17);
IkReal x14729=(gconst16*r21);
IkReal x14730=(gconst17*sj3);
IkReal x14731=(gconst16*r20);
IkReal x14732=(sj1*sj2);
IkReal x14733=(gconst16*r10);
IkReal x14734=(cj2*sj1);
IkReal x14735=(gconst16*sj3);
IkReal x14736=((1.0)*cj0);
IkReal x14737=((1.0)*sj0);
IkReal x14738=(cj1*sj2);
IkReal x14739=((1.0)*x14727);
IkReal x14740=(gconst16*x14726);
IkReal x14741=(cj3*x14727);
IkReal x14742=(cj3*x14726);
IkReal x14743=((1.0)*cj1*cj2);
IkReal x14744=((1.0)*gconst17*x14726);
IkReal x14745=((1.0)*sj3*x14726);
evalcond[0]=(((x14726*x14729))+(((-1.0)*r20*x14744))+(((-1.0)*r22*x14739)));
evalcond[1]=((((-1.0)*r12*x14739))+cj0+((r11*x14740))+(((-1.0)*r10*x14744)));
evalcond[2]=(((r01*x14740))+(((-1.0)*r00*x14744))+(((-1.0)*x14737))+(((-1.0)*r02*x14739)));
evalcond[3]=(((r22*x14742))+((x14729*x14741))+((sj3*x14731))+(((-1.0)*r20*x14728*x14739))+x14738+x14734+((r21*x14730)));
evalcond[4]=(((r21*x14728))+(((-1.0)*sj3*x14729*x14739))+(((-1.0)*x14743))+(((-1.0)*r22*x14745))+((r20*x14727*x14730))+((cj3*x14731))+x14732);
evalcond[5]=(((cj0*x14732))+((r01*x14730))+((r00*x14735))+(((-1.0)*cj1*cj2*x14736))+((gconst16*r01*x14741))+((r02*x14742))+(((-1.0)*r00*x14728*x14739)));
evalcond[6]=(((r12*x14742))+((sj0*x14732))+(((-1.0)*cj1*cj2*x14737))+((sj3*x14733))+((gconst16*r11*x14741))+((r11*x14730))+(((-1.0)*r10*x14728*x14739)));
evalcond[7]=(((r01*x14728))+(((-1.0)*r02*x14745))+((r00*x14727*x14730))+(((-1.0)*x14736*x14738))+(((-1.0)*r01*x14735*x14739))+(((-1.0)*x14734*x14736))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14735*x14739))+(((-1.0)*x14737*x14738))+((r10*x14727*x14730))+((cj3*x14733))+((r11*x14728))+(((-1.0)*r12*x14745))+(((-1.0)*x14734*x14737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14746=((1.0)*gconst17);
CheckValue<IkReal> x14747=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14746)))),-1);
if(!x14747.valid){
continue;
}
CheckValue<IkReal> x14748 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14746))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14747.value)))+(x14748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14749=IKsin(j4);
IkReal x14750=IKcos(j4);
IkReal x14751=(cj3*gconst17);
IkReal x14752=(gconst16*r21);
IkReal x14753=(gconst17*sj3);
IkReal x14754=(gconst16*r20);
IkReal x14755=(sj1*sj2);
IkReal x14756=(gconst16*r10);
IkReal x14757=(cj2*sj1);
IkReal x14758=(gconst16*sj3);
IkReal x14759=((1.0)*cj0);
IkReal x14760=((1.0)*sj0);
IkReal x14761=(cj1*sj2);
IkReal x14762=((1.0)*x14750);
IkReal x14763=(gconst16*x14749);
IkReal x14764=(cj3*x14750);
IkReal x14765=(cj3*x14749);
IkReal x14766=((1.0)*cj1*cj2);
IkReal x14767=((1.0)*gconst17*x14749);
IkReal x14768=((1.0)*sj3*x14749);
evalcond[0]=(((x14749*x14752))+(((-1.0)*r20*x14767))+(((-1.0)*r22*x14762)));
evalcond[1]=(cj0+(((-1.0)*r10*x14767))+(((-1.0)*r12*x14762))+((r11*x14763)));
evalcond[2]=((((-1.0)*r02*x14762))+(((-1.0)*r00*x14767))+((r01*x14763))+(((-1.0)*x14760)));
evalcond[3]=(((x14752*x14764))+((sj3*x14754))+x14757+x14761+(((-1.0)*r20*x14751*x14762))+((r22*x14765))+((r21*x14753)));
evalcond[4]=((((-1.0)*r22*x14768))+x14755+((r21*x14751))+((cj3*x14754))+(((-1.0)*x14766))+(((-1.0)*sj3*x14752*x14762))+((r20*x14750*x14753)));
evalcond[5]=((((-1.0)*cj1*cj2*x14759))+((r02*x14765))+(((-1.0)*r00*x14751*x14762))+((r01*x14753))+((cj0*x14755))+((gconst16*r01*x14764))+((r00*x14758)));
evalcond[6]=(((sj0*x14755))+(((-1.0)*r10*x14751*x14762))+((gconst16*r11*x14764))+(((-1.0)*cj1*cj2*x14760))+((r12*x14765))+((sj3*x14756))+((r11*x14753)));
evalcond[7]=(((r00*x14750*x14753))+(((-1.0)*r02*x14768))+(((-1.0)*x14757*x14759))+(((-1.0)*x14759*x14761))+(((-1.0)*r01*x14758*x14762))+((cj3*gconst16*r00))+((r01*x14751)));
evalcond[8]=((((-1.0)*x14760*x14761))+(((-1.0)*x14757*x14760))+(((-1.0)*r12*x14768))+(((-1.0)*r11*x14758*x14762))+((r10*x14750*x14753))+((cj3*x14756))+((r11*x14751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14769=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14769;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14770=((1.0)*cj5);
IkReal x14771=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14770)));
j4eval[0]=x14771;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14770))))));
j4eval[2]=IKsign(x14771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14772=cj5*cj5;
IkReal x14773=(cj3*r01);
IkReal x14774=(cj5*sj5);
IkReal x14775=((1.0)*cj3);
IkReal x14776=(((cj3*r00*r21*x14774))+((r21*x14772*x14773))+(((-1.0)*r21*x14773))+(((-1.0)*r02*r22*x14775))+((r20*x14773*x14774))+(((-1.0)*r00*r20*x14772*x14775)));
j4eval[0]=x14776;
j4eval[1]=IKsign(x14776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14777=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14777;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14778=((1.0)*cj5);
IkReal x14779=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14778)));
j4eval[0]=x14779;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14778)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14780=cj5*cj5;
IkReal x14781=r01*r01;
IkReal x14782=(r01*sj5);
IkReal x14783=(cj5*r00);
IkReal x14784=(((x14780*x14781))+(((-1.0)*x14781))+(((-1.0)*x14780*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x14782*x14783)));
j4eval[0]=x14784;
j4eval[1]=IKsign(x14784);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14782))+x14783))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14785=cj5*cj5;
IkReal x14786=r01*r01;
IkReal x14787=(r01*sj5);
IkReal x14788=(cj5*r00);
CheckValue<IkReal> x14789=IKPowWithIntegerCheck(IKsign((((x14785*x14786))+(((-1.0)*x14786))+(((-1.0)*(r02*r02)))+(((2.0)*x14787*x14788))+(((-1.0)*x14785*(r00*r00))))),-1);
if(!x14789.valid){
continue;
}
CheckValue<IkReal> x14790 = IKatan2WithCheck(IkReal(((((-1.0)*x14787))+x14788)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14789.value)))+(x14790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14791=IKsin(j4);
IkReal x14792=IKcos(j4);
IkReal x14793=(cj5*r10);
IkReal x14794=(r01*sj5);
IkReal x14795=((1.0)*cj2);
IkReal x14796=(cj5*r00);
IkReal x14797=(cj5*r20);
IkReal x14798=((1.0)*x14792);
IkReal x14799=((1.0)*x14791);
IkReal x14800=(sj5*x14791);
evalcond[0]=((((-1.0)*x14797*x14799))+((r21*x14800))+(((-1.0)*r22*x14798)));
evalcond[1]=((((-1.0)*x14793*x14799))+(((-1.0)*r12*x14798))+((r11*x14800)));
evalcond[2]=(((x14792*x14796))+(((-1.0)*r02*x14799))+(((-1.0)*x14794*x14798)));
evalcond[3]=((-1.0)+(((-1.0)*x14796*x14799))+(((-1.0)*r02*x14798))+((x14791*x14794)));
evalcond[4]=(((x14792*x14797))+((sj1*sj2))+(((-1.0)*r21*sj5*x14798))+(((-1.0)*cj1*x14795))+(((-1.0)*r22*x14799)));
evalcond[5]=(((x14792*x14793))+(((-1.0)*sj1*x14795))+(((-1.0)*r12*x14799))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14801=((1.0)*cj5);
CheckValue<IkReal> x14802 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14801))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14802.valid){
continue;
}
CheckValue<IkReal> x14803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14801)))),-1);
if(!x14803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14802.value)+(((1.5707963267949)*(x14803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14804=IKsin(j4);
IkReal x14805=IKcos(j4);
IkReal x14806=(cj5*r10);
IkReal x14807=(r01*sj5);
IkReal x14808=((1.0)*cj2);
IkReal x14809=(cj5*r00);
IkReal x14810=(cj5*r20);
IkReal x14811=((1.0)*x14805);
IkReal x14812=((1.0)*x14804);
IkReal x14813=(sj5*x14804);
evalcond[0]=((((-1.0)*r22*x14811))+((r21*x14813))+(((-1.0)*x14810*x14812)));
evalcond[1]=((((-1.0)*x14806*x14812))+(((-1.0)*r12*x14811))+((r11*x14813)));
evalcond[2]=((((-1.0)*r02*x14812))+(((-1.0)*x14807*x14811))+((x14805*x14809)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14811))+(((-1.0)*x14809*x14812))+((x14804*x14807)));
evalcond[4]=((((-1.0)*r21*sj5*x14811))+(((-1.0)*r22*x14812))+((sj1*sj2))+((x14805*x14810))+(((-1.0)*cj1*x14808)));
evalcond[5]=((((-1.0)*r11*sj5*x14811))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14812))+((x14805*x14806))+(((-1.0)*sj1*x14808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14814=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14814.valid){
continue;
}
CheckValue<IkReal> x14815 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14814.value)))+(x14815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14816=IKsin(j4);
IkReal x14817=IKcos(j4);
IkReal x14818=(cj5*r10);
IkReal x14819=(r01*sj5);
IkReal x14820=((1.0)*cj2);
IkReal x14821=(cj5*r00);
IkReal x14822=(cj5*r20);
IkReal x14823=((1.0)*x14817);
IkReal x14824=((1.0)*x14816);
IkReal x14825=(sj5*x14816);
evalcond[0]=(((r21*x14825))+(((-1.0)*r22*x14823))+(((-1.0)*x14822*x14824)));
evalcond[1]=((((-1.0)*x14818*x14824))+(((-1.0)*r12*x14823))+((r11*x14825)));
evalcond[2]=((((-1.0)*x14819*x14823))+((x14817*x14821))+(((-1.0)*r02*x14824)));
evalcond[3]=((-1.0)+(((-1.0)*x14821*x14824))+((x14816*x14819))+(((-1.0)*r02*x14823)));
evalcond[4]=((((-1.0)*r22*x14824))+(((-1.0)*r21*sj5*x14823))+((sj1*sj2))+((x14817*x14822))+(((-1.0)*cj1*x14820)));
evalcond[5]=((((-1.0)*sj1*x14820))+(((-1.0)*r11*sj5*x14823))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14824))+((x14817*x14818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14826=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14826;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14827=((1.0)*cj5);
IkReal x14828=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14827)));
j4eval[0]=x14828;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14827))))));
j4eval[2]=IKsign(x14828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14829=cj5*cj5;
IkReal x14830=r01*r01;
IkReal x14831=(cj5*r00);
IkReal x14832=(r01*sj5);
IkReal x14833=((((-1.0)*x14829*x14830))+(((-2.0)*x14831*x14832))+x14830+((x14829*(r00*r00)))+(r02*r02));
j4eval[0]=x14833;
j4eval[1]=IKsign(x14833);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14831))+x14832))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14834=cj5*cj5;
IkReal x14835=r01*r01;
IkReal x14836=(r01*sj5);
IkReal x14837=(cj5*r00);
CheckValue<IkReal> x14838 = IKatan2WithCheck(IkReal(((((-1.0)*x14837))+x14836)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14838.valid){
continue;
}
CheckValue<IkReal> x14839=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14834*x14835))+(((-2.0)*x14836*x14837))+x14835+((x14834*(r00*r00)))+(r02*r02))),-1);
if(!x14839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14838.value)+(((1.5707963267949)*(x14839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14840=IKcos(j4);
IkReal x14841=IKsin(j4);
IkReal x14842=(cj5*r00);
IkReal x14843=(cj5*r10);
IkReal x14844=(r21*sj5);
IkReal x14845=((1.0)*cj2);
IkReal x14846=(cj5*r20);
IkReal x14847=((1.0)*x14840);
IkReal x14848=((1.0)*x14841);
IkReal x14849=(sj5*x14841);
IkReal x14850=(sj5*x14840);
evalcond[0]=(((r02*x14841))+(((-1.0)*x14842*x14847))+((r01*x14850)));
evalcond[1]=(((x14841*x14844))+(((-1.0)*x14846*x14848))+(((-1.0)*r22*x14847)));
evalcond[2]=(((r11*x14849))+(((-1.0)*x14843*x14848))+(((-1.0)*r12*x14847)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14847))+(((-1.0)*x14842*x14848))+((r01*x14849)));
evalcond[4]=(((x14840*x14844))+(((-1.0)*cj1*x14845))+(((-1.0)*x14846*x14847))+((sj1*sj2))+((r22*x14841)));
evalcond[5]=((((-1.0)*sj1*x14845))+(((-1.0)*cj1*sj2))+((r11*x14850))+((r12*x14841))+(((-1.0)*x14843*x14847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14851=((1.0)*cj5);
CheckValue<IkReal> x14852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14851)))),-1);
if(!x14852.valid){
continue;
}
CheckValue<IkReal> x14853 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14852.value)))+(x14853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14854=IKcos(j4);
IkReal x14855=IKsin(j4);
IkReal x14856=(cj5*r00);
IkReal x14857=(cj5*r10);
IkReal x14858=(r21*sj5);
IkReal x14859=((1.0)*cj2);
IkReal x14860=(cj5*r20);
IkReal x14861=((1.0)*x14854);
IkReal x14862=((1.0)*x14855);
IkReal x14863=(sj5*x14855);
IkReal x14864=(sj5*x14854);
evalcond[0]=((((-1.0)*x14856*x14861))+((r02*x14855))+((r01*x14864)));
evalcond[1]=(((x14855*x14858))+(((-1.0)*r22*x14861))+(((-1.0)*x14860*x14862)));
evalcond[2]=((((-1.0)*x14857*x14862))+((r11*x14863))+(((-1.0)*r12*x14861)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14861))+(((-1.0)*x14856*x14862))+((r01*x14863)));
evalcond[4]=((((-1.0)*cj1*x14859))+((x14854*x14858))+((sj1*sj2))+((r22*x14855))+(((-1.0)*x14860*x14861)));
evalcond[5]=((((-1.0)*sj1*x14859))+(((-1.0)*cj1*sj2))+(((-1.0)*x14857*x14861))+((r11*x14864))+((r12*x14855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14865=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14865.valid){
continue;
}
CheckValue<IkReal> x14866 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14865.value)))+(x14866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14867=IKcos(j4);
IkReal x14868=IKsin(j4);
IkReal x14869=(cj5*r00);
IkReal x14870=(cj5*r10);
IkReal x14871=(r21*sj5);
IkReal x14872=((1.0)*cj2);
IkReal x14873=(cj5*r20);
IkReal x14874=((1.0)*x14867);
IkReal x14875=((1.0)*x14868);
IkReal x14876=(sj5*x14868);
IkReal x14877=(sj5*x14867);
evalcond[0]=((((-1.0)*x14869*x14874))+((r02*x14868))+((r01*x14877)));
evalcond[1]=(((x14868*x14871))+(((-1.0)*r22*x14874))+(((-1.0)*x14873*x14875)));
evalcond[2]=(((r11*x14876))+(((-1.0)*x14870*x14875))+(((-1.0)*r12*x14874)));
evalcond[3]=((-1.0)+(((-1.0)*x14869*x14875))+(((-1.0)*r02*x14874))+((r01*x14876)));
evalcond[4]=((((-1.0)*x14873*x14874))+((x14867*x14871))+((sj1*sj2))+(((-1.0)*cj1*x14872))+((r22*x14868)));
evalcond[5]=(((r11*x14877))+(((-1.0)*cj1*sj2))+((r12*x14868))+(((-1.0)*x14870*x14874))+(((-1.0)*sj1*x14872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14879 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14879)==0){
continue;
}
IkReal x14878=pow(x14879,-0.5);
CheckValue<IkReal> x14880 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14880.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14880.value));
IkReal gconst49=((-1.0)*r21*x14878);
IkReal gconst50=(r20*x14878);
CheckValue<IkReal> x14881 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14881.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14881.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14884 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14884.valid){
continue;
}
IkReal x14882=((-1.0)*(x14884.value));
IkReal x14883=x14878;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14882;
IkReal gconst48=x14882;
IkReal gconst49=((-1.0)*r21*x14883);
IkReal gconst50=(r20*x14883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
IkReal x14885=((-1.0)*(x14887.value));
IkReal x14886=x14878;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14885;
IkReal gconst48=x14885;
IkReal gconst49=((-1.0)*r21*x14886);
IkReal gconst50=(r20*x14886);
CheckValue<IkReal> x14895=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14895.valid){
continue;
}
IkReal x14888=x14895.value;
IkReal x14889=(sj3*x14888);
IkReal x14890=(r11*x14889);
IkReal x14891=(r00*x14889);
IkReal x14892=(r01*x14889);
IkReal x14893=(r10*x14889);
IkReal x14894=(r20*r21*x14889);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14891*(r20*r20)))+((r00*r20*r21*x14890))+((r01*x14890*(r21*r21)))+((r10*r20*r21*x14892))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14896=gconst49*gconst49;
IkReal x14897=gconst50*gconst50;
IkReal x14898=((1.0)*cj3);
IkReal x14899=(gconst50*r01);
IkReal x14900=(gconst49*r10);
IkReal x14901=(r12*sj3);
IkReal x14902=(gconst49*r00);
IkReal x14903=(r00*sj3);
IkReal x14904=(r11*x14896);
IkReal x14905=(r10*x14897);
CheckValue<IkReal> x14906=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14902))+((cj3*x14899*x14900))+(((-1.0)*r01*x14898*x14904))+(((-1.0)*r00*x14898*x14905))+(((-1.0)*r02*r12*x14898)))),-1);
if(!x14906.valid){
continue;
}
CheckValue<IkReal> x14907 = IKatan2WithCheck(IkReal((((x14901*x14902))+((x14899*x14901)))),IkReal(((((-1.0)*r01*sj3*x14905))+(((-1.0)*gconst50*x14900*x14903))+((gconst49*r11*sj3*x14899))+((x14903*x14904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14906.value)))+(x14907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14908=IKsin(j4);
IkReal x14909=IKcos(j4);
IkReal x14910=(sj1*sj2);
IkReal x14911=(gconst50*r20);
IkReal x14912=(gconst50*sj3);
IkReal x14913=(cj3*r01);
IkReal x14914=(gconst50*r10);
IkReal x14915=(gconst49*sj3);
IkReal x14916=((1.0)*cj2);
IkReal x14917=(cj1*sj2);
IkReal x14918=(cj3*r11);
IkReal x14919=(gconst50*r00);
IkReal x14920=(cj3*r21);
IkReal x14921=(cj3*gconst49);
IkReal x14922=(cj1*x14916);
IkReal x14923=((1.0)*x14909);
IkReal x14924=((1.0)*x14908);
IkReal x14925=(gconst49*x14908);
IkReal x14926=(gconst49*x14909);
IkReal x14927=(cj3*x14908);
evalcond[0]=(((r21*x14925))+(((-1.0)*r22*x14923))+(((-1.0)*x14911*x14924)));
evalcond[1]=((((-1.0)*x14914*x14924))+(((-1.0)*r12*x14923))+((r11*x14925)));
evalcond[2]=((-1.0)+((r01*x14925))+(((-1.0)*r02*x14923))+(((-1.0)*x14919*x14924)));
evalcond[3]=(((r01*x14912))+((r00*x14915))+(((-1.0)*cj3*x14919*x14923))+((x14913*x14926))+((r02*x14927)));
evalcond[4]=((((-1.0)*r02*sj3*x14924))+((r00*x14921))+((gconst50*x14913))+((r00*x14909*x14912))+(((-1.0)*r01*x14915*x14923)));
evalcond[5]=(((x14920*x14926))+((cj2*sj1))+((r21*x14912))+x14917+(((-1.0)*cj3*x14911*x14923))+((r20*x14915))+((r22*x14927)));
evalcond[6]=(((r10*x14915))+((x14918*x14926))+x14910+((r11*x14912))+(((-1.0)*x14922))+(((-1.0)*cj3*x14914*x14923))+((r12*x14927)));
evalcond[7]=((((-1.0)*r21*x14915*x14923))+x14910+((gconst50*x14920))+(((-1.0)*r22*sj3*x14924))+((sj3*x14909*x14911))+(((-1.0)*x14922))+((r20*x14921)));
evalcond[8]=((((-1.0)*r12*sj3*x14924))+(((-1.0)*r11*x14915*x14923))+(((-1.0)*x14917))+((r10*x14921))+((gconst50*x14918))+((r10*x14909*x14912))+(((-1.0)*sj1*x14916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14928=gconst49*gconst49;
IkReal x14929=gconst50*gconst50;
IkReal x14930=(cj3*r12);
IkReal x14931=(gconst49*r00);
IkReal x14932=(r01*r11);
IkReal x14933=(r00*r11);
IkReal x14934=(cj3*gconst50);
IkReal x14935=((1.0)*r01*r10);
IkReal x14936=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14937=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14935*x14936))+(((-1.0)*gconst50*r11*sj3*x14931))+((r00*r10*sj3*x14929))+((sj3*x14928*x14932)))),-1);
if(!x14937.valid){
continue;
}
CheckValue<IkReal> x14938 = IKatan2WithCheck(IkReal((((gconst50*r01*x14930))+((x14930*x14931)))),IkReal((((cj3*x14928*x14933))+(((-1.0)*r10*x14931*x14934))+(((-1.0)*cj3*x14929*x14935))+((gconst49*x14932*x14934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14937.value)))+(x14938.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14939=IKsin(j4);
IkReal x14940=IKcos(j4);
IkReal x14941=(sj1*sj2);
IkReal x14942=(gconst50*r20);
IkReal x14943=(gconst50*sj3);
IkReal x14944=(cj3*r01);
IkReal x14945=(gconst50*r10);
IkReal x14946=(gconst49*sj3);
IkReal x14947=((1.0)*cj2);
IkReal x14948=(cj1*sj2);
IkReal x14949=(cj3*r11);
IkReal x14950=(gconst50*r00);
IkReal x14951=(cj3*r21);
IkReal x14952=(cj3*gconst49);
IkReal x14953=(cj1*x14947);
IkReal x14954=((1.0)*x14940);
IkReal x14955=((1.0)*x14939);
IkReal x14956=(gconst49*x14939);
IkReal x14957=(gconst49*x14940);
IkReal x14958=(cj3*x14939);
evalcond[0]=((((-1.0)*x14942*x14955))+(((-1.0)*r22*x14954))+((r21*x14956)));
evalcond[1]=((((-1.0)*x14945*x14955))+(((-1.0)*r12*x14954))+((r11*x14956)));
evalcond[2]=((-1.0)+((r01*x14956))+(((-1.0)*r02*x14954))+(((-1.0)*x14950*x14955)));
evalcond[3]=(((r00*x14946))+((r01*x14943))+((x14944*x14957))+((r02*x14958))+(((-1.0)*cj3*x14950*x14954)));
evalcond[4]=((((-1.0)*r02*sj3*x14955))+(((-1.0)*r01*x14946*x14954))+((r00*x14952))+((gconst50*x14944))+((r00*x14940*x14943)));
evalcond[5]=(((cj2*sj1))+x14948+((r22*x14958))+((x14951*x14957))+((r21*x14943))+(((-1.0)*cj3*x14942*x14954))+((r20*x14946)));
evalcond[6]=(((x14949*x14957))+((r12*x14958))+x14941+((r10*x14946))+(((-1.0)*cj3*x14945*x14954))+(((-1.0)*x14953))+((r11*x14943)));
evalcond[7]=(x14941+((gconst50*x14951))+((sj3*x14940*x14942))+(((-1.0)*x14953))+(((-1.0)*r22*sj3*x14955))+(((-1.0)*r21*x14946*x14954))+((r20*x14952)));
evalcond[8]=((((-1.0)*sj1*x14947))+((r10*x14952))+(((-1.0)*r12*sj3*x14955))+(((-1.0)*r11*x14946*x14954))+((gconst50*x14949))+(((-1.0)*x14948))+((r10*x14940*x14943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14959=((1.0)*gconst50);
CheckValue<IkReal> x14960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14959)))),-1);
if(!x14960.valid){
continue;
}
CheckValue<IkReal> x14961 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14960.value)))+(x14961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14962=IKsin(j4);
IkReal x14963=IKcos(j4);
IkReal x14964=(sj1*sj2);
IkReal x14965=(gconst50*r20);
IkReal x14966=(gconst50*sj3);
IkReal x14967=(cj3*r01);
IkReal x14968=(gconst50*r10);
IkReal x14969=(gconst49*sj3);
IkReal x14970=((1.0)*cj2);
IkReal x14971=(cj1*sj2);
IkReal x14972=(cj3*r11);
IkReal x14973=(gconst50*r00);
IkReal x14974=(cj3*r21);
IkReal x14975=(cj3*gconst49);
IkReal x14976=(cj1*x14970);
IkReal x14977=((1.0)*x14963);
IkReal x14978=((1.0)*x14962);
IkReal x14979=(gconst49*x14962);
IkReal x14980=(gconst49*x14963);
IkReal x14981=(cj3*x14962);
evalcond[0]=((((-1.0)*x14965*x14978))+(((-1.0)*r22*x14977))+((r21*x14979)));
evalcond[1]=((((-1.0)*r12*x14977))+((r11*x14979))+(((-1.0)*x14968*x14978)));
evalcond[2]=((-1.0)+(((-1.0)*x14973*x14978))+((r01*x14979))+(((-1.0)*r02*x14977)));
evalcond[3]=(((r01*x14966))+((x14967*x14980))+(((-1.0)*cj3*x14973*x14977))+((r02*x14981))+((r00*x14969)));
evalcond[4]=((((-1.0)*r01*x14969*x14977))+(((-1.0)*r02*sj3*x14978))+((gconst50*x14967))+((r00*x14963*x14966))+((r00*x14975)));
evalcond[5]=(((cj2*sj1))+x14971+(((-1.0)*cj3*x14965*x14977))+((r22*x14981))+((x14974*x14980))+((r20*x14969))+((r21*x14966)));
evalcond[6]=(x14964+(((-1.0)*x14976))+((x14972*x14980))+((r11*x14966))+((r10*x14969))+((r12*x14981))+(((-1.0)*cj3*x14968*x14977)));
evalcond[7]=((((-1.0)*r22*sj3*x14978))+((sj3*x14963*x14965))+x14964+(((-1.0)*x14976))+((gconst50*x14974))+((r20*x14975))+(((-1.0)*r21*x14969*x14977)));
evalcond[8]=((((-1.0)*sj1*x14970))+(((-1.0)*x14971))+((gconst50*x14972))+(((-1.0)*r11*x14969*x14977))+(((-1.0)*r12*sj3*x14978))+((r10*x14975))+((r10*x14963*x14966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14983 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14983)==0){
continue;
}
IkReal x14982=pow(x14983,-0.5);
CheckValue<IkReal> x14984 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14984.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14984.value))));
IkReal gconst52=((1.0)*r21*x14982);
IkReal gconst53=((-1.0)*r20*x14982);
CheckValue<IkReal> x14985 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14985.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14985.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14988 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14988.valid){
continue;
}
IkReal x14986=((1.0)*(x14988.value));
IkReal x14987=x14982;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14986)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14986)));
IkReal gconst52=((1.0)*r21*x14987);
IkReal gconst53=((-1.0)*r20*x14987);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14991 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14991.valid){
continue;
}
IkReal x14989=((1.0)*(x14991.value));
IkReal x14990=x14982;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14989)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14989)));
IkReal gconst52=((1.0)*r21*x14990);
IkReal gconst53=((-1.0)*r20*x14990);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14994 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14994.valid){
continue;
}
IkReal x14992=((1.0)*(x14994.value));
IkReal x14993=x14982;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14992)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14992)));
IkReal gconst52=((1.0)*r21*x14993);
IkReal gconst53=((-1.0)*r20*x14993);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14995=gconst52*gconst52;
IkReal x14996=gconst53*gconst53;
IkReal x14997=(gconst53*r01);
IkReal x14998=(cj3*r20);
IkReal x14999=(r22*sj3);
IkReal x15000=((1.0)*cj3);
IkReal x15001=(gconst52*sj3);
IkReal x15002=((1.0)*r00);
IkReal x15003=(gconst52*r00);
IkReal x15004=(r21*x14995);
CheckValue<IkReal> x15005 = IKatan2WithCheck(IkReal((((x14999*x15003))+((x14997*x14999)))),IkReal((((r00*sj3*x15004))+(((-1.0)*r01*r20*sj3*x14996))+((r21*x14997*x15001))+(((-1.0)*gconst53*r20*x15001*x15002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15005.valid){
continue;
}
CheckValue<IkReal> x15006=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14996*x14998*x15002))+(((-1.0)*r02*r22*x15000))+((gconst52*x14997*x14998))+(((-1.0)*r01*x15000*x15004))+((cj3*gconst53*r21*x15003)))),-1);
if(!x15006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15005.value)+(((1.5707963267949)*(x15006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15007=IKsin(j4);
IkReal x15008=IKcos(j4);
IkReal x15009=(sj1*sj2);
IkReal x15010=((1.0)*cj1);
IkReal x15011=(cj3*gconst52);
IkReal x15012=(gconst53*sj3);
IkReal x15013=(cj3*gconst53);
IkReal x15014=(cj2*sj1);
IkReal x15015=(gconst52*sj3);
IkReal x15016=(cj2*x15010);
IkReal x15017=((1.0)*x15008);
IkReal x15018=((1.0)*x15007);
IkReal x15019=(gconst52*x15007);
IkReal x15020=(cj3*x15007);
evalcond[0]=(((r21*x15019))+(((-1.0)*r22*x15017))+(((-1.0)*gconst53*r20*x15018)));
evalcond[1]=((((-1.0)*r12*x15017))+(((-1.0)*gconst53*r10*x15018))+((r11*x15019)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x15018))+((r01*x15019))+(((-1.0)*r02*x15017)));
evalcond[3]=(((r01*x15008*x15011))+(((-1.0)*r00*x15013*x15017))+((r02*x15020))+((r00*x15015))+((r01*x15012)));
evalcond[4]=(((r00*x15011))+((r01*x15013))+((r00*x15008*x15012))+(((-1.0)*r02*sj3*x15018))+(((-1.0)*r01*x15015*x15017)));
evalcond[5]=((((-1.0)*r20*x15013*x15017))+((r21*x15008*x15011))+((cj1*sj2))+x15014+((r21*x15012))+((r22*x15020))+((r20*x15015)));
evalcond[6]=((((-1.0)*r10*x15013*x15017))+(((-1.0)*x15016))+((r10*x15015))+x15009+((r11*x15012))+((r12*x15020))+((r11*x15008*x15011)));
evalcond[7]=((((-1.0)*r21*x15015*x15017))+(((-1.0)*x15016))+x15009+((r21*x15013))+((r20*x15011))+((r20*x15008*x15012))+(((-1.0)*r22*sj3*x15018)));
evalcond[8]=((((-1.0)*x15014))+((r10*x15011))+((r10*x15008*x15012))+(((-1.0)*r12*sj3*x15018))+((r11*x15013))+(((-1.0)*sj2*x15010))+(((-1.0)*r11*x15015*x15017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15021=((1.0)*gconst53);
CheckValue<IkReal> x15022 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x15021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15022.valid){
continue;
}
CheckValue<IkReal> x15023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15021))+(((-1.0)*gconst52*r10)))),-1);
if(!x15023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15022.value)+(((1.5707963267949)*(x15023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15024=IKsin(j4);
IkReal x15025=IKcos(j4);
IkReal x15026=(sj1*sj2);
IkReal x15027=((1.0)*cj1);
IkReal x15028=(cj3*gconst52);
IkReal x15029=(gconst53*sj3);
IkReal x15030=(cj3*gconst53);
IkReal x15031=(cj2*sj1);
IkReal x15032=(gconst52*sj3);
IkReal x15033=(cj2*x15027);
IkReal x15034=((1.0)*x15025);
IkReal x15035=((1.0)*x15024);
IkReal x15036=(gconst52*x15024);
IkReal x15037=(cj3*x15024);
evalcond[0]=(((r21*x15036))+(((-1.0)*r22*x15034))+(((-1.0)*gconst53*r20*x15035)));
evalcond[1]=((((-1.0)*gconst53*r10*x15035))+((r11*x15036))+(((-1.0)*r12*x15034)));
evalcond[2]=((-1.0)+((r01*x15036))+(((-1.0)*r02*x15034))+(((-1.0)*gconst53*r00*x15035)));
evalcond[3]=(((r00*x15032))+(((-1.0)*r00*x15030*x15034))+((r01*x15025*x15028))+((r02*x15037))+((r01*x15029)));
evalcond[4]=(((r00*x15028))+((r01*x15030))+((r00*x15025*x15029))+(((-1.0)*r01*x15032*x15034))+(((-1.0)*r02*sj3*x15035)));
evalcond[5]=(((cj1*sj2))+((r21*x15025*x15028))+((r21*x15029))+x15031+((r20*x15032))+(((-1.0)*r20*x15030*x15034))+((r22*x15037)));
evalcond[6]=((((-1.0)*x15033))+(((-1.0)*r10*x15030*x15034))+x15026+((r10*x15032))+((r12*x15037))+((r11*x15025*x15028))+((r11*x15029)));
evalcond[7]=((((-1.0)*r21*x15032*x15034))+((r21*x15030))+(((-1.0)*x15033))+x15026+((r20*x15025*x15029))+((r20*x15028))+(((-1.0)*r22*sj3*x15035)));
evalcond[8]=((((-1.0)*r12*sj3*x15035))+(((-1.0)*x15031))+((r10*x15028))+((r10*x15025*x15029))+((r11*x15030))+(((-1.0)*sj2*x15027))+(((-1.0)*r11*x15032*x15034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15038 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15038.valid){
continue;
}
CheckValue<IkReal> x15039=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x15039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15038.value)+(((1.5707963267949)*(x15039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15040=IKsin(j4);
IkReal x15041=IKcos(j4);
IkReal x15042=(sj1*sj2);
IkReal x15043=((1.0)*cj1);
IkReal x15044=(cj3*gconst52);
IkReal x15045=(gconst53*sj3);
IkReal x15046=(cj3*gconst53);
IkReal x15047=(cj2*sj1);
IkReal x15048=(gconst52*sj3);
IkReal x15049=(cj2*x15043);
IkReal x15050=((1.0)*x15041);
IkReal x15051=((1.0)*x15040);
IkReal x15052=(gconst52*x15040);
IkReal x15053=(cj3*x15040);
evalcond[0]=((((-1.0)*gconst53*r20*x15051))+((r21*x15052))+(((-1.0)*r22*x15050)));
evalcond[1]=((((-1.0)*r12*x15050))+(((-1.0)*gconst53*r10*x15051))+((r11*x15052)));
evalcond[2]=((-1.0)+((r01*x15052))+(((-1.0)*gconst53*r00*x15051))+(((-1.0)*r02*x15050)));
evalcond[3]=(((r00*x15048))+((r02*x15053))+((r01*x15045))+((r01*x15041*x15044))+(((-1.0)*r00*x15046*x15050)));
evalcond[4]=(((r00*x15041*x15045))+((r00*x15044))+(((-1.0)*r02*sj3*x15051))+((r01*x15046))+(((-1.0)*r01*x15048*x15050)));
evalcond[5]=(((r21*x15041*x15044))+((cj1*sj2))+x15047+((r20*x15048))+((r22*x15053))+(((-1.0)*r20*x15046*x15050))+((r21*x15045)));
evalcond[6]=((((-1.0)*x15049))+((r11*x15041*x15044))+((r11*x15045))+x15042+((r10*x15048))+(((-1.0)*r10*x15046*x15050))+((r12*x15053)));
evalcond[7]=((((-1.0)*x15049))+((r20*x15041*x15045))+x15042+((r20*x15044))+(((-1.0)*r21*x15048*x15050))+(((-1.0)*r22*sj3*x15051))+((r21*x15046)));
evalcond[8]=((((-1.0)*r11*x15048*x15050))+(((-1.0)*sj2*x15043))+((r11*x15046))+(((-1.0)*x15047))+((r10*x15044))+((r10*x15041*x15045))+(((-1.0)*r12*sj3*x15051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15054=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15054);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15054);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15055=(r01*sj5);
IkReal x15056=((1.0)*cj5*r00);
j4eval[0]=(x15055+(((-1.0)*x15056)));
j4eval[1]=((((-1.0)*cj3*x15056))+((cj3*x15055)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15057=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15057);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15057);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15058=(cj5*r00);
IkReal x15059=(r01*sj5);
j4eval[0]=((((-1.0)*x15058))+x15059);
j4eval[1]=((((-1.0)*sj3*x15059))+((sj3*x15058)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15060=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15060);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15060);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15061=((1.0)*r00);
CheckValue<IkReal> x15062=IKPowWithIntegerCheck(cj3,-1);
if(!x15062.valid){
continue;
}
CheckValue<IkReal> x15063=IKPowWithIntegerCheck(r22,-1);
if(!x15063.valid){
continue;
}
CheckValue<IkReal> x15064=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15061))),-1);
if(!x15064.valid){
continue;
}
if( IKabs(((x15062.value)*(x15063.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15064.value)*(((((-1.0)*sj3*sj5*x15061))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15062.value)*(x15063.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x15064.value)*(((((-1.0)*sj3*sj5*x15061))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15062.value)*(x15063.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x15064.value)*(((((-1.0)*sj3*sj5*x15061))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15065=IKsin(j4);
IkReal x15066=IKcos(j4);
IkReal x15067=(sj1*sj2);
IkReal x15068=(cj5*sj3);
IkReal x15069=(r11*sj5);
IkReal x15070=(cj3*cj5);
IkReal x15071=((1.0)*cj1);
IkReal x15072=(cj3*sj5);
IkReal x15073=(sj3*sj5);
IkReal x15074=(cj2*sj1);
IkReal x15075=(r01*sj5);
IkReal x15076=((1.0)*sj3);
IkReal x15077=(cj2*x15071);
IkReal x15078=(r10*x15066);
IkReal x15079=(r22*x15065);
IkReal x15080=(cj3*x15066);
IkReal x15081=((1.0)*cj5*x15065);
evalcond[0]=((-1.0)*r22*x15066);
evalcond[1]=(((cj1*sj2))+((cj3*x15079))+x15074);
evalcond[2]=((((-1.0)*r10*x15081))+((x15065*x15069)));
evalcond[3]=((-1.0)+((x15065*x15075))+(((-1.0)*r00*x15081)));
evalcond[4]=((((-1.0)*x15077))+x15067+(((-1.0)*x15076*x15079)));
evalcond[5]=(((r01*x15066*x15072))+((r01*x15068))+((r00*x15073))+(((-1.0)*r00*x15066*x15070)));
evalcond[6]=(((r00*x15066*x15068))+((r01*x15070))+((r00*x15072))+(((-1.0)*r01*x15066*x15073)));
evalcond[7]=((((-1.0)*x15077))+(((-1.0)*x15070*x15078))+x15067+((r11*x15068))+((r10*x15073))+((x15069*x15080)));
evalcond[8]=((((-1.0)*x15066*x15069*x15076))+(((-1.0)*sj2*x15071))+((r11*x15070))+((x15068*x15078))+(((-1.0)*x15074))+((r10*x15072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15082=((1.0)*cj3);
IkReal x15083=(cj5*r00);
IkReal x15084=(r01*sj5);
CheckValue<IkReal> x15085=IKPowWithIntegerCheck((x15084+(((-1.0)*x15083))),-1);
if(!x15085.valid){
continue;
}
CheckValue<IkReal> x15086=IKPowWithIntegerCheck(((((-1.0)*sj3*x15084))+((sj3*x15083))),-1);
if(!x15086.valid){
continue;
}
if( IKabs(x15085.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15086.value)*(((((-1.0)*cj5*r01*x15082))+(((-1.0)*r00*sj5*x15082)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15085.value)+IKsqr(((x15086.value)*(((((-1.0)*cj5*r01*x15082))+(((-1.0)*r00*sj5*x15082))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15085.value, ((x15086.value)*(((((-1.0)*cj5*r01*x15082))+(((-1.0)*r00*sj5*x15082))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15087=IKsin(j4);
IkReal x15088=IKcos(j4);
IkReal x15089=(sj1*sj2);
IkReal x15090=(cj5*sj3);
IkReal x15091=(r11*sj5);
IkReal x15092=(cj3*cj5);
IkReal x15093=((1.0)*cj1);
IkReal x15094=(cj3*sj5);
IkReal x15095=(sj3*sj5);
IkReal x15096=(cj2*sj1);
IkReal x15097=(r01*sj5);
IkReal x15098=((1.0)*sj3);
IkReal x15099=(cj2*x15093);
IkReal x15100=(r10*x15088);
IkReal x15101=(r22*x15087);
IkReal x15102=(cj3*x15088);
IkReal x15103=((1.0)*cj5*x15087);
evalcond[0]=((-1.0)*r22*x15088);
evalcond[1]=(((cj1*sj2))+x15096+((cj3*x15101)));
evalcond[2]=(((x15087*x15091))+(((-1.0)*r10*x15103)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15103))+((x15087*x15097)));
evalcond[4]=((((-1.0)*x15098*x15101))+x15089+(((-1.0)*x15099)));
evalcond[5]=(((r01*x15088*x15094))+((r00*x15095))+((r01*x15090))+(((-1.0)*r00*x15088*x15092)));
evalcond[6]=(((r00*x15094))+((r01*x15092))+((r00*x15088*x15090))+(((-1.0)*r01*x15088*x15095)));
evalcond[7]=(((x15091*x15102))+x15089+((r11*x15090))+((r10*x15095))+(((-1.0)*x15099))+(((-1.0)*x15092*x15100)));
evalcond[8]=(((x15090*x15100))+(((-1.0)*x15096))+((r11*x15092))+((r10*x15094))+(((-1.0)*x15088*x15091*x15098))+(((-1.0)*sj2*x15093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15104=((1.0)*sj3);
IkReal x15105=(r01*sj5);
IkReal x15106=((1.0)*cj5*r00);
CheckValue<IkReal> x15107=IKPowWithIntegerCheck((x15105+(((-1.0)*x15106))),-1);
if(!x15107.valid){
continue;
}
CheckValue<IkReal> x15108=IKPowWithIntegerCheck(((((-1.0)*cj3*x15106))+((cj3*x15105))),-1);
if(!x15108.valid){
continue;
}
if( IKabs(x15107.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15108.value)*(((((-1.0)*cj5*r01*x15104))+(((-1.0)*r00*sj5*x15104)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15107.value)+IKsqr(((x15108.value)*(((((-1.0)*cj5*r01*x15104))+(((-1.0)*r00*sj5*x15104))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15107.value, ((x15108.value)*(((((-1.0)*cj5*r01*x15104))+(((-1.0)*r00*sj5*x15104))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15109=IKsin(j4);
IkReal x15110=IKcos(j4);
IkReal x15111=(sj1*sj2);
IkReal x15112=(cj5*sj3);
IkReal x15113=(r11*sj5);
IkReal x15114=(cj3*cj5);
IkReal x15115=((1.0)*cj1);
IkReal x15116=(cj3*sj5);
IkReal x15117=(sj3*sj5);
IkReal x15118=(cj2*sj1);
IkReal x15119=(r01*sj5);
IkReal x15120=((1.0)*sj3);
IkReal x15121=(cj2*x15115);
IkReal x15122=(r10*x15110);
IkReal x15123=(r22*x15109);
IkReal x15124=(cj3*x15110);
IkReal x15125=((1.0)*cj5*x15109);
evalcond[0]=((-1.0)*r22*x15110);
evalcond[1]=(((cj1*sj2))+x15118+((cj3*x15123)));
evalcond[2]=(((x15109*x15113))+(((-1.0)*r10*x15125)));
evalcond[3]=((-1.0)+((x15109*x15119))+(((-1.0)*r00*x15125)));
evalcond[4]=((((-1.0)*x15121))+x15111+(((-1.0)*x15120*x15123)));
evalcond[5]=((((-1.0)*r00*x15110*x15114))+((r01*x15112))+((r01*x15110*x15116))+((r00*x15117)));
evalcond[6]=(((r00*x15110*x15112))+(((-1.0)*r01*x15110*x15117))+((r01*x15114))+((r00*x15116)));
evalcond[7]=(((r10*x15117))+(((-1.0)*x15121))+((x15113*x15124))+(((-1.0)*x15114*x15122))+((r11*x15112))+x15111);
evalcond[8]=((((-1.0)*sj2*x15115))+(((-1.0)*x15118))+((r10*x15116))+((x15112*x15122))+((r11*x15114))+(((-1.0)*x15110*x15113*x15120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15126=cj5*cj5;
IkReal x15127=(cj3*r20);
IkReal x15128=(r21*sj3);
IkReal x15129=((1.0)*cj3);
IkReal x15130=(r01*r21);
IkReal x15131=(r01*sj3);
IkReal x15132=(r00*sj5);
IkReal x15133=(cj5*r01*sj5);
IkReal x15134=((1.0)*x15126);
CheckValue<IkReal> x15135 = IKatan2WithCheck(IkReal((((cj5*r22*x15131))+((r22*sj3*x15132)))),IkReal(((((-1.0)*r20*x15131*x15134))+((x15128*x15133))+(((-1.0)*r00*x15128*x15134))+((r00*x15128))+(((-1.0)*cj5*r20*sj3*x15132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15135.valid){
continue;
}
CheckValue<IkReal> x15136=IKPowWithIntegerCheck(IKsign((((x15127*x15133))+(((-1.0)*r00*x15127*x15134))+(((-1.0)*x15129*x15130))+(((-1.0)*r02*r22*x15129))+((cj3*x15126*x15130))+((cj3*cj5*r21*x15132)))),-1);
if(!x15136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15135.value)+(((1.5707963267949)*(x15136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15137=IKsin(j4);
IkReal x15138=IKcos(j4);
IkReal x15139=(sj1*sj2);
IkReal x15140=(r11*sj5);
IkReal x15141=(cj5*r10);
IkReal x15142=(cj5*r01);
IkReal x15143=(cj5*r00);
IkReal x15144=((1.0)*cj1);
IkReal x15145=(cj3*sj5);
IkReal x15146=(r21*sj5);
IkReal x15147=(cj5*sj3);
IkReal x15148=(sj3*sj5);
IkReal x15149=(cj2*sj1);
IkReal x15150=(r01*sj5);
IkReal x15151=(cj3*cj5);
IkReal x15152=(cj5*r20);
IkReal x15153=(cj2*x15144);
IkReal x15154=((1.0)*x15138);
IkReal x15155=((1.0)*x15137);
IkReal x15156=(cj3*x15138);
IkReal x15157=(sj3*x15138);
IkReal x15158=(cj3*x15137);
evalcond[0]=(((x15137*x15146))+(((-1.0)*r22*x15154))+(((-1.0)*x15152*x15155)));
evalcond[1]=(((x15137*x15140))+(((-1.0)*x15141*x15155))+(((-1.0)*r12*x15154)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15154))+((x15137*x15150))+(((-1.0)*x15143*x15155)));
evalcond[3]=(((r01*x15138*x15145))+((r00*x15148))+((sj3*x15142))+(((-1.0)*cj3*x15143*x15154))+((r02*x15158)));
evalcond[4]=((((-1.0)*r02*sj3*x15155))+((cj3*x15142))+((x15143*x15157))+(((-1.0)*r01*x15148*x15154))+((r00*x15145)));
evalcond[5]=((((-1.0)*r20*x15151*x15154))+((cj1*sj2))+((r20*x15148))+((r22*x15158))+x15149+((r21*x15147))+((r21*x15138*x15145)));
evalcond[6]=(((r10*x15148))+((x15140*x15156))+(((-1.0)*x15153))+((r11*x15147))+x15139+((r12*x15158))+(((-1.0)*cj3*x15141*x15154)));
evalcond[7]=(((r21*x15151))+(((-1.0)*x15153))+(((-1.0)*r22*sj3*x15155))+((r20*x15145))+((r20*x15138*x15147))+x15139+(((-1.0)*sj3*x15146*x15154)));
evalcond[8]=(((r10*x15145))+(((-1.0)*r12*sj3*x15155))+((x15141*x15157))+(((-1.0)*x15149))+(((-1.0)*sj3*x15140*x15154))+(((-1.0)*sj2*x15144))+((r11*x15151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15159=((1.0)*cj5);
CheckValue<IkReal> x15160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15159)))),-1);
if(!x15160.valid){
continue;
}
CheckValue<IkReal> x15161 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15159))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15160.value)))+(x15161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15162=IKsin(j4);
IkReal x15163=IKcos(j4);
IkReal x15164=(sj1*sj2);
IkReal x15165=(r11*sj5);
IkReal x15166=(cj5*r10);
IkReal x15167=(cj5*r01);
IkReal x15168=(cj5*r00);
IkReal x15169=((1.0)*cj1);
IkReal x15170=(cj3*sj5);
IkReal x15171=(r21*sj5);
IkReal x15172=(cj5*sj3);
IkReal x15173=(sj3*sj5);
IkReal x15174=(cj2*sj1);
IkReal x15175=(r01*sj5);
IkReal x15176=(cj3*cj5);
IkReal x15177=(cj5*r20);
IkReal x15178=(cj2*x15169);
IkReal x15179=((1.0)*x15163);
IkReal x15180=((1.0)*x15162);
IkReal x15181=(cj3*x15163);
IkReal x15182=(sj3*x15163);
IkReal x15183=(cj3*x15162);
evalcond[0]=(((x15162*x15171))+(((-1.0)*x15177*x15180))+(((-1.0)*r22*x15179)));
evalcond[1]=((((-1.0)*x15166*x15180))+((x15162*x15165))+(((-1.0)*r12*x15179)));
evalcond[2]=((-1.0)+((x15162*x15175))+(((-1.0)*r02*x15179))+(((-1.0)*x15168*x15180)));
evalcond[3]=(((r01*x15163*x15170))+((r02*x15183))+(((-1.0)*cj3*x15168*x15179))+((sj3*x15167))+((r00*x15173)));
evalcond[4]=((((-1.0)*r02*sj3*x15180))+(((-1.0)*r01*x15173*x15179))+((cj3*x15167))+((x15168*x15182))+((r00*x15170)));
evalcond[5]=(((r21*x15163*x15170))+((r20*x15173))+((cj1*sj2))+x15174+(((-1.0)*r20*x15176*x15179))+((r21*x15172))+((r22*x15183)));
evalcond[6]=(((r11*x15172))+((x15165*x15181))+((r10*x15173))+((r12*x15183))+(((-1.0)*x15178))+x15164+(((-1.0)*cj3*x15166*x15179)));
evalcond[7]=((((-1.0)*sj3*x15171*x15179))+((r20*x15170))+((r20*x15163*x15172))+(((-1.0)*x15178))+x15164+((r21*x15176))+(((-1.0)*r22*sj3*x15180)));
evalcond[8]=(((r11*x15176))+((r10*x15170))+(((-1.0)*r12*sj3*x15180))+(((-1.0)*sj2*x15169))+(((-1.0)*sj3*x15165*x15179))+(((-1.0)*x15174))+((x15166*x15182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15184=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15184.valid){
continue;
}
CheckValue<IkReal> x15185 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15184.value)))+(x15185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15186=IKsin(j4);
IkReal x15187=IKcos(j4);
IkReal x15188=(sj1*sj2);
IkReal x15189=(r11*sj5);
IkReal x15190=(cj5*r10);
IkReal x15191=(cj5*r01);
IkReal x15192=(cj5*r00);
IkReal x15193=((1.0)*cj1);
IkReal x15194=(cj3*sj5);
IkReal x15195=(r21*sj5);
IkReal x15196=(cj5*sj3);
IkReal x15197=(sj3*sj5);
IkReal x15198=(cj2*sj1);
IkReal x15199=(r01*sj5);
IkReal x15200=(cj3*cj5);
IkReal x15201=(cj5*r20);
IkReal x15202=(cj2*x15193);
IkReal x15203=((1.0)*x15187);
IkReal x15204=((1.0)*x15186);
IkReal x15205=(cj3*x15187);
IkReal x15206=(sj3*x15187);
IkReal x15207=(cj3*x15186);
evalcond[0]=((((-1.0)*r22*x15203))+((x15186*x15195))+(((-1.0)*x15201*x15204)));
evalcond[1]=(((x15186*x15189))+(((-1.0)*r12*x15203))+(((-1.0)*x15190*x15204)));
evalcond[2]=((-1.0)+(((-1.0)*x15192*x15204))+((x15186*x15199))+(((-1.0)*r02*x15203)));
evalcond[3]=(((r00*x15197))+((sj3*x15191))+(((-1.0)*cj3*x15192*x15203))+((r01*x15187*x15194))+((r02*x15207)));
evalcond[4]=(((r00*x15194))+((cj3*x15191))+(((-1.0)*r02*sj3*x15204))+((x15192*x15206))+(((-1.0)*r01*x15197*x15203)));
evalcond[5]=(((r21*x15196))+(((-1.0)*r20*x15200*x15203))+((cj1*sj2))+((r21*x15187*x15194))+((r22*x15207))+x15198+((r20*x15197)));
evalcond[6]=(((r11*x15196))+((r10*x15197))+((x15189*x15205))+x15188+((r12*x15207))+(((-1.0)*x15202))+(((-1.0)*cj3*x15190*x15203)));
evalcond[7]=(((r20*x15187*x15196))+x15188+((r21*x15200))+(((-1.0)*x15202))+(((-1.0)*r22*sj3*x15204))+((r20*x15194))+(((-1.0)*sj3*x15195*x15203)));
evalcond[8]=(((x15190*x15206))+((r10*x15194))+((r11*x15200))+(((-1.0)*x15198))+(((-1.0)*sj2*x15193))+(((-1.0)*r12*sj3*x15204))+(((-1.0)*sj3*x15189*x15203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15208=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15208;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15209=((1.0)*cj5);
IkReal x15210=((((-1.0)*r21*x15209))+(((-1.0)*r20*sj5)));
j4eval[0]=x15210;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15209))))));
j4eval[2]=IKsign(x15210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15211=cj5*cj5;
IkReal x15212=(cj3*r01);
IkReal x15213=(cj5*sj5);
IkReal x15214=((1.0)*cj3);
IkReal x15215=(((cj3*r00*r21*x15213))+(((-1.0)*r00*r20*x15211*x15214))+((r21*x15211*x15212))+(((-1.0)*r02*r22*x15214))+((r20*x15212*x15213))+(((-1.0)*r21*x15212)));
j4eval[0]=x15215;
j4eval[1]=IKsign(x15215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15216=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15216;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15217=((1.0)*cj5);
IkReal x15218=((((-1.0)*r21*x15217))+(((-1.0)*r20*sj5)));
j4eval[0]=x15218;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15217))))));
j4eval[2]=IKsign(x15218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15219=cj5*cj5;
IkReal x15220=r01*r01;
IkReal x15221=(cj5*r00);
IkReal x15222=(r01*sj5);
IkReal x15223=((((-2.0)*x15221*x15222))+x15220+(((-1.0)*x15219*x15220))+((x15219*(r00*r00)))+(r02*r02));
j4eval[0]=x15223;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15222))+x15221))));
j4eval[2]=IKsign(x15223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15224=cj5*cj5;
IkReal x15225=r01*r01;
IkReal x15226=(r01*sj5);
IkReal x15227=(cj5*r00);
CheckValue<IkReal> x15228=IKPowWithIntegerCheck(IKsign((((x15224*(r00*r00)))+(((-2.0)*x15226*x15227))+x15225+(((-1.0)*x15224*x15225))+(r02*r02))),-1);
if(!x15228.valid){
continue;
}
CheckValue<IkReal> x15229 = IKatan2WithCheck(IkReal(((((-1.0)*x15226))+x15227)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15228.value)))+(x15229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15230=IKsin(j4);
IkReal x15231=IKcos(j4);
IkReal x15232=(cj5*r10);
IkReal x15233=(r01*sj5);
IkReal x15234=(cj5*r00);
IkReal x15235=(cj5*r20);
IkReal x15236=((1.0)*x15231);
IkReal x15237=((1.0)*x15230);
IkReal x15238=(sj5*x15230);
evalcond[0]=(((r21*x15238))+(((-1.0)*r22*x15236))+(((-1.0)*x15235*x15237)));
evalcond[1]=((((-1.0)*x15232*x15237))+(((-1.0)*r12*x15236))+((r11*x15238)));
evalcond[2]=((((-1.0)*x15233*x15236))+(((-1.0)*r02*x15237))+((x15231*x15234)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15236))+((x15230*x15233))+(((-1.0)*x15234*x15237)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15237))+(((-1.0)*r11*sj5*x15236))+((x15231*x15232)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15237))+(((-1.0)*r21*sj5*x15236))+((x15231*x15235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15239=((1.0)*cj5);
CheckValue<IkReal> x15240 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15240.valid){
continue;
}
CheckValue<IkReal> x15241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15239))+(((-1.0)*r20*sj5)))),-1);
if(!x15241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15240.value)+(((1.5707963267949)*(x15241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15242=IKsin(j4);
IkReal x15243=IKcos(j4);
IkReal x15244=(cj5*r10);
IkReal x15245=(r01*sj5);
IkReal x15246=(cj5*r00);
IkReal x15247=(cj5*r20);
IkReal x15248=((1.0)*x15243);
IkReal x15249=((1.0)*x15242);
IkReal x15250=(sj5*x15242);
evalcond[0]=((((-1.0)*x15247*x15249))+(((-1.0)*r22*x15248))+((r21*x15250)));
evalcond[1]=((((-1.0)*r12*x15248))+((r11*x15250))+(((-1.0)*x15244*x15249)));
evalcond[2]=(((x15243*x15246))+(((-1.0)*r02*x15249))+(((-1.0)*x15245*x15248)));
evalcond[3]=((1.0)+(((-1.0)*x15246*x15249))+(((-1.0)*r02*x15248))+((x15242*x15245)));
evalcond[4]=(((cj2*sj1))+((x15243*x15244))+((cj1*sj2))+(((-1.0)*r12*x15249))+(((-1.0)*r11*sj5*x15248)));
evalcond[5]=(((x15243*x15247))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15249))+(((-1.0)*r21*sj5*x15248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15251 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15251.valid){
continue;
}
CheckValue<IkReal> x15252=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15251.value)+(((1.5707963267949)*(x15252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15253=IKsin(j4);
IkReal x15254=IKcos(j4);
IkReal x15255=(cj5*r10);
IkReal x15256=(r01*sj5);
IkReal x15257=(cj5*r00);
IkReal x15258=(cj5*r20);
IkReal x15259=((1.0)*x15254);
IkReal x15260=((1.0)*x15253);
IkReal x15261=(sj5*x15253);
evalcond[0]=((((-1.0)*r22*x15259))+(((-1.0)*x15258*x15260))+((r21*x15261)));
evalcond[1]=((((-1.0)*r12*x15259))+(((-1.0)*x15255*x15260))+((r11*x15261)));
evalcond[2]=((((-1.0)*r02*x15260))+(((-1.0)*x15256*x15259))+((x15254*x15257)));
evalcond[3]=((1.0)+(((-1.0)*x15257*x15260))+(((-1.0)*r02*x15259))+((x15253*x15256)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15254*x15255))+(((-1.0)*r11*sj5*x15259))+(((-1.0)*r12*x15260)));
evalcond[5]=((((-1.0)*r22*x15260))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15254*x15258))+(((-1.0)*r21*sj5*x15259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15262=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15262;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15263=((1.0)*cj5);
IkReal x15264=((((-1.0)*r21*x15263))+(((-1.0)*r20*sj5)));
j4eval[0]=x15264;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15263))+((r11*sj5))))));
j4eval[2]=IKsign(x15264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15265=cj5*cj5;
IkReal x15266=r01*r01;
IkReal x15267=(r01*sj5);
IkReal x15268=(cj5*r00);
IkReal x15269=(((x15265*x15266))+(((-1.0)*(r02*r02)))+(((2.0)*x15267*x15268))+(((-1.0)*x15265*(r00*r00)))+(((-1.0)*x15266)));
j4eval[0]=x15269;
j4eval[1]=IKsign(x15269);
j4eval[2]=((IKabs(r02))+(IKabs((x15267+(((-1.0)*x15268))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15270=cj5*cj5;
IkReal x15271=r01*r01;
IkReal x15272=(r01*sj5);
IkReal x15273=(cj5*r00);
CheckValue<IkReal> x15274 = IKatan2WithCheck(IkReal((x15272+(((-1.0)*x15273)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15274.valid){
continue;
}
CheckValue<IkReal> x15275=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15270*(r00*r00)))+((x15270*x15271))+(((-1.0)*(r02*r02)))+(((-1.0)*x15271))+(((2.0)*x15272*x15273)))),-1);
if(!x15275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15274.value)+(((1.5707963267949)*(x15275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15276=IKcos(j4);
IkReal x15277=IKsin(j4);
IkReal x15278=(cj5*r00);
IkReal x15279=(cj5*r10);
IkReal x15280=(r21*sj5);
IkReal x15281=(cj5*r20);
IkReal x15282=((1.0)*x15276);
IkReal x15283=((1.0)*x15277);
IkReal x15284=(sj5*x15277);
IkReal x15285=(sj5*x15276);
evalcond[0]=(((r01*x15285))+((r02*x15277))+(((-1.0)*x15278*x15282)));
evalcond[1]=((((-1.0)*x15281*x15283))+(((-1.0)*r22*x15282))+((x15277*x15280)));
evalcond[2]=((((-1.0)*r12*x15282))+(((-1.0)*x15279*x15283))+((r11*x15284)));
evalcond[3]=((1.0)+((r01*x15284))+(((-1.0)*r02*x15282))+(((-1.0)*x15278*x15283)));
evalcond[4]=(((cj2*sj1))+((r12*x15277))+((cj1*sj2))+(((-1.0)*x15279*x15282))+((r11*x15285)));
evalcond[5]=(((r22*x15277))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15281*x15282))+((x15276*x15280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15286=((1.0)*cj5);
CheckValue<IkReal> x15287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15286))+(((-1.0)*r20*sj5)))),-1);
if(!x15287.valid){
continue;
}
CheckValue<IkReal> x15288 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15286))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15287.value)))+(x15288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15289=IKcos(j4);
IkReal x15290=IKsin(j4);
IkReal x15291=(cj5*r00);
IkReal x15292=(cj5*r10);
IkReal x15293=(r21*sj5);
IkReal x15294=(cj5*r20);
IkReal x15295=((1.0)*x15289);
IkReal x15296=((1.0)*x15290);
IkReal x15297=(sj5*x15290);
IkReal x15298=(sj5*x15289);
evalcond[0]=((((-1.0)*x15291*x15295))+((r01*x15298))+((r02*x15290)));
evalcond[1]=((((-1.0)*x15294*x15296))+(((-1.0)*r22*x15295))+((x15290*x15293)));
evalcond[2]=(((r11*x15297))+(((-1.0)*r12*x15295))+(((-1.0)*x15292*x15296)));
evalcond[3]=((1.0)+(((-1.0)*x15291*x15296))+((r01*x15297))+(((-1.0)*r02*x15295)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15298))+((r12*x15290))+(((-1.0)*x15292*x15295)));
evalcond[5]=((((-1.0)*x15294*x15295))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15290))+((x15289*x15293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15299 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15299.valid){
continue;
}
CheckValue<IkReal> x15300=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15299.value)+(((1.5707963267949)*(x15300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15301=IKcos(j4);
IkReal x15302=IKsin(j4);
IkReal x15303=(cj5*r00);
IkReal x15304=(cj5*r10);
IkReal x15305=(r21*sj5);
IkReal x15306=(cj5*r20);
IkReal x15307=((1.0)*x15301);
IkReal x15308=((1.0)*x15302);
IkReal x15309=(sj5*x15302);
IkReal x15310=(sj5*x15301);
evalcond[0]=((((-1.0)*x15303*x15307))+((r02*x15302))+((r01*x15310)));
evalcond[1]=(((x15302*x15305))+(((-1.0)*x15306*x15308))+(((-1.0)*r22*x15307)));
evalcond[2]=((((-1.0)*x15304*x15308))+(((-1.0)*r12*x15307))+((r11*x15309)));
evalcond[3]=((1.0)+(((-1.0)*x15303*x15308))+((r01*x15309))+(((-1.0)*r02*x15307)));
evalcond[4]=(((cj2*sj1))+((r11*x15310))+((cj1*sj2))+(((-1.0)*x15304*x15307))+((r12*x15302)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15306*x15307))+((x15301*x15305))+((r22*x15302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15312 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15312)==0){
continue;
}
IkReal x15311=pow(x15312,-0.5);
CheckValue<IkReal> x15313 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15313.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15313.value));
IkReal gconst61=((-1.0)*r11*x15311);
IkReal gconst62=(r10*x15311);
CheckValue<IkReal> x15314 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15314.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15314.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15317 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15317.valid){
continue;
}
IkReal x15315=((-1.0)*(x15317.value));
IkReal x15316=x15311;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15315;
IkReal gconst60=x15315;
IkReal gconst61=((-1.0)*r11*x15316);
IkReal gconst62=(r10*x15316);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15320 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15320.valid){
continue;
}
IkReal x15318=((-1.0)*(x15320.value));
IkReal x15319=x15311;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15318;
IkReal gconst60=x15318;
IkReal gconst61=((-1.0)*r11*x15319);
IkReal gconst62=(r10*x15319);
CheckValue<IkReal> x15328=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15328.valid){
continue;
}
IkReal x15321=x15328.value;
IkReal x15322=(sj3*x15321);
IkReal x15323=(r20*x15322);
IkReal x15324=(r00*x15322);
IkReal x15325=(r01*x15322);
IkReal x15326=(r21*x15322);
IkReal x15327=(r10*r11*x15322);
j4eval[0]=IKsign((((r10*r11*r21*x15324))+((r21*x15325*(r11*r11)))+((r01*r10*r11*x15323))+((r00*x15323*(r10*r10)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15329=gconst61*gconst61;
IkReal x15330=gconst62*gconst62;
IkReal x15331=(cj3*r01);
IkReal x15332=(r22*sj3);
IkReal x15333=(gconst61*r00);
IkReal x15334=((1.0)*cj3);
IkReal x15335=(gconst62*r01);
IkReal x15336=((1.0)*sj3);
IkReal x15337=(gconst61*gconst62*r20);
IkReal x15338=(r21*x15329);
IkReal x15339=(r20*x15330);
CheckValue<IkReal> x15340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15334))+(((-1.0)*x15331*x15338))+((cj3*gconst62*r21*x15333))+((x15331*x15337))+(((-1.0)*r00*x15334*x15339)))),-1);
if(!x15340.valid){
continue;
}
CheckValue<IkReal> x15341 = IKatan2WithCheck(IkReal((((x15332*x15335))+((x15332*x15333)))),IkReal(((((-1.0)*r01*x15336*x15339))+((gconst61*r21*sj3*x15335))+((r00*sj3*x15338))+(((-1.0)*gconst62*r20*x15333*x15336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15340.value)))+(x15341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15342=IKsin(j4);
IkReal x15343=IKcos(j4);
IkReal x15344=(cj2*sj1);
IkReal x15345=(cj1*sj2);
IkReal x15346=(gconst61*sj3);
IkReal x15347=(cj3*gconst61);
IkReal x15348=(cj3*gconst62);
IkReal x15349=(sj1*sj2);
IkReal x15350=(gconst62*sj3);
IkReal x15351=(cj1*cj2);
IkReal x15352=((1.0)*x15343);
IkReal x15353=((1.0)*x15342);
IkReal x15354=(gconst61*x15342);
IkReal x15355=(cj3*x15342);
IkReal x15356=(x15344+x15345);
evalcond[0]=((((-1.0)*gconst62*r20*x15353))+(((-1.0)*r22*x15352))+((r21*x15354)));
evalcond[1]=((((-1.0)*gconst62*r10*x15353))+(((-1.0)*r12*x15352))+((r11*x15354)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15352))+(((-1.0)*gconst62*r00*x15353))+((r01*x15354)));
evalcond[3]=(((r00*x15346))+(((-1.0)*r00*x15348*x15352))+((r02*x15355))+((r01*x15350))+((r01*x15343*x15347)));
evalcond[4]=(((r00*x15347))+((r01*x15348))+((r00*x15343*x15350))+(((-1.0)*r01*x15346*x15352))+(((-1.0)*r02*sj3*x15353)));
evalcond[5]=((((-1.0)*r20*x15348*x15352))+((r22*x15355))+x15356+((r20*x15346))+((r21*x15343*x15347))+((r21*x15350)));
evalcond[6]=((((-1.0)*r10*x15348*x15352))+((r12*x15355))+((r10*x15346))+x15351+((r11*x15350))+((r11*x15343*x15347))+(((-1.0)*x15349)));
evalcond[7]=((((-1.0)*r12*sj3*x15353))+((r11*x15348))+((r10*x15347))+x15356+(((-1.0)*r11*x15346*x15352))+((r10*x15343*x15350)));
evalcond[8]=(((r21*x15348))+(((-1.0)*r22*sj3*x15353))+((r20*x15343*x15350))+(((-1.0)*r21*x15346*x15352))+x15349+((r20*x15347))+(((-1.0)*x15351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15357=gconst61*gconst61;
IkReal x15358=gconst62*gconst62;
IkReal x15359=(cj3*r22);
IkReal x15360=(gconst62*r01);
IkReal x15361=(gconst61*r00);
IkReal x15362=((1.0)*r20);
IkReal x15363=(cj3*r21);
IkReal x15364=(r21*sj3);
CheckValue<IkReal> x15365 = IKatan2WithCheck(IkReal((((x15359*x15360))+((x15359*x15361)))),IkReal((((r00*x15357*x15363))+(((-1.0)*cj3*gconst62*x15361*x15362))+(((-1.0)*cj3*r01*x15358*x15362))+((gconst61*x15360*x15363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15365.valid){
continue;
}
CheckValue<IkReal> x15366=IKPowWithIntegerCheck(IKsign((((r01*x15357*x15364))+((r00*r20*sj3*x15358))+(((-1.0)*gconst61*sj3*x15360*x15362))+(((-1.0)*gconst62*x15361*x15364))+((r02*r22*sj3)))),-1);
if(!x15366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15365.value)+(((1.5707963267949)*(x15366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15367=IKsin(j4);
IkReal x15368=IKcos(j4);
IkReal x15369=(cj2*sj1);
IkReal x15370=(cj1*sj2);
IkReal x15371=(gconst61*sj3);
IkReal x15372=(cj3*gconst61);
IkReal x15373=(cj3*gconst62);
IkReal x15374=(sj1*sj2);
IkReal x15375=(gconst62*sj3);
IkReal x15376=(cj1*cj2);
IkReal x15377=((1.0)*x15368);
IkReal x15378=((1.0)*x15367);
IkReal x15379=(gconst61*x15367);
IkReal x15380=(cj3*x15367);
IkReal x15381=(x15369+x15370);
evalcond[0]=(((r21*x15379))+(((-1.0)*r22*x15377))+(((-1.0)*gconst62*r20*x15378)));
evalcond[1]=((((-1.0)*gconst62*r10*x15378))+(((-1.0)*r12*x15377))+((r11*x15379)));
evalcond[2]=((1.0)+((r01*x15379))+(((-1.0)*r02*x15377))+(((-1.0)*gconst62*r00*x15378)));
evalcond[3]=(((r00*x15371))+((r01*x15375))+((r02*x15380))+(((-1.0)*r00*x15373*x15377))+((r01*x15368*x15372)));
evalcond[4]=(((r00*x15368*x15375))+(((-1.0)*r02*sj3*x15378))+((r00*x15372))+((r01*x15373))+(((-1.0)*r01*x15371*x15377)));
evalcond[5]=(((r22*x15380))+((r20*x15371))+((r21*x15368*x15372))+((r21*x15375))+x15381+(((-1.0)*r20*x15373*x15377)));
evalcond[6]=((((-1.0)*x15374))+((r12*x15380))+x15376+((r11*x15368*x15372))+((r10*x15371))+(((-1.0)*r10*x15373*x15377))+((r11*x15375)));
evalcond[7]=(((r10*x15368*x15375))+(((-1.0)*r12*sj3*x15378))+x15381+(((-1.0)*r11*x15371*x15377))+((r10*x15372))+((r11*x15373)));
evalcond[8]=(((r20*x15372))+(((-1.0)*x15376))+((r21*x15373))+x15374+(((-1.0)*r21*x15371*x15377))+((r20*x15368*x15375))+(((-1.0)*r22*sj3*x15378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15382=((1.0)*gconst62);
CheckValue<IkReal> x15383 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15382))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15383.valid){
continue;
}
CheckValue<IkReal> x15384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15382))+(((-1.0)*gconst61*r20)))),-1);
if(!x15384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15383.value)+(((1.5707963267949)*(x15384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15385=IKsin(j4);
IkReal x15386=IKcos(j4);
IkReal x15387=(cj2*sj1);
IkReal x15388=(cj1*sj2);
IkReal x15389=(gconst61*sj3);
IkReal x15390=(cj3*gconst61);
IkReal x15391=(cj3*gconst62);
IkReal x15392=(sj1*sj2);
IkReal x15393=(gconst62*sj3);
IkReal x15394=(cj1*cj2);
IkReal x15395=((1.0)*x15386);
IkReal x15396=((1.0)*x15385);
IkReal x15397=(gconst61*x15385);
IkReal x15398=(cj3*x15385);
IkReal x15399=(x15387+x15388);
evalcond[0]=(((r21*x15397))+(((-1.0)*r22*x15395))+(((-1.0)*gconst62*r20*x15396)));
evalcond[1]=((((-1.0)*r12*x15395))+((r11*x15397))+(((-1.0)*gconst62*r10*x15396)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15395))+(((-1.0)*gconst62*r00*x15396))+((r01*x15397)));
evalcond[3]=((((-1.0)*r00*x15391*x15395))+((r01*x15386*x15390))+((r02*x15398))+((r01*x15393))+((r00*x15389)));
evalcond[4]=((((-1.0)*r02*sj3*x15396))+((r00*x15386*x15393))+((r01*x15391))+((r00*x15390))+(((-1.0)*r01*x15389*x15395)));
evalcond[5]=(((r22*x15398))+((r21*x15393))+((r21*x15386*x15390))+(((-1.0)*r20*x15391*x15395))+x15399+((r20*x15389)));
evalcond[6]=(((r10*x15389))+(((-1.0)*r10*x15391*x15395))+x15394+((r11*x15386*x15390))+((r11*x15393))+((r12*x15398))+(((-1.0)*x15392)));
evalcond[7]=(((r10*x15390))+(((-1.0)*r11*x15389*x15395))+x15399+((r11*x15391))+((r10*x15386*x15393))+(((-1.0)*r12*sj3*x15396)));
evalcond[8]=(((r21*x15391))+((r20*x15390))+(((-1.0)*r22*sj3*x15396))+((r20*x15386*x15393))+x15392+(((-1.0)*r21*x15389*x15395))+(((-1.0)*x15394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15401 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15401)==0){
continue;
}
IkReal x15400=pow(x15401,-0.5);
CheckValue<IkReal> x15402 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15402.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15402.value))));
IkReal gconst64=((1.0)*r11*x15400);
IkReal gconst65=((-1.0)*r10*x15400);
CheckValue<IkReal> x15403 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15406 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15406.valid){
continue;
}
IkReal x15404=((1.0)*(x15406.value));
IkReal x15405=x15400;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15404)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15404)));
IkReal gconst64=((1.0)*r11*x15405);
IkReal gconst65=((-1.0)*r10*x15405);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15407=gconst64*gconst64;
IkReal x15408=gconst65*gconst65;
IkReal x15409=(gconst65*r01);
IkReal x15410=(cj3*r22);
IkReal x15411=(gconst64*r00);
IkReal x15412=(cj3*r21);
IkReal x15413=((1.0)*gconst64*sj3);
IkReal x15414=((1.0)*cj3*r20);
CheckValue<IkReal> x15415=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15407))+(((-1.0)*r20*x15409*x15413))+((r00*r20*sj3*x15408))+(((-1.0)*gconst65*r21*sj3*x15411))+((r02*r22*sj3)))),-1);
if(!x15415.valid){
continue;
}
CheckValue<IkReal> x15416 = IKatan2WithCheck(IkReal((((x15410*x15411))+((x15409*x15410)))),IkReal(((((-1.0)*gconst65*x15411*x15414))+(((-1.0)*r01*x15408*x15414))+((r00*x15407*x15412))+((gconst64*x15409*x15412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15415.value)))+(x15416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15417=IKsin(j4);
IkReal x15418=IKcos(j4);
IkReal x15419=(cj2*sj1);
IkReal x15420=(cj1*sj2);
IkReal x15421=(cj3*gconst64);
IkReal x15422=(gconst65*r21);
IkReal x15423=(sj1*sj2);
IkReal x15424=(gconst65*sj3);
IkReal x15425=(gconst64*sj3);
IkReal x15426=(cj3*gconst65);
IkReal x15427=(cj1*cj2);
IkReal x15428=((1.0)*x15418);
IkReal x15429=((1.0)*x15417);
IkReal x15430=(cj3*x15417);
IkReal x15431=(gconst64*x15417);
IkReal x15432=(x15419+x15420);
evalcond[0]=(((r21*x15431))+(((-1.0)*r22*x15428))+(((-1.0)*gconst65*r20*x15429)));
evalcond[1]=((((-1.0)*gconst65*r10*x15429))+(((-1.0)*r12*x15428))+((r11*x15431)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15429))+(((-1.0)*r02*x15428))+((r01*x15431)));
evalcond[3]=((((-1.0)*r00*x15426*x15428))+((r02*x15430))+((r01*x15418*x15421))+((r00*x15425))+((r01*x15424)));
evalcond[4]=((((-1.0)*r01*x15425*x15428))+((r00*x15418*x15424))+(((-1.0)*r02*sj3*x15429))+((r00*x15421))+((r01*x15426)));
evalcond[5]=(((r20*x15425))+((sj3*x15422))+((r22*x15430))+x15432+((r21*x15418*x15421))+(((-1.0)*r20*x15426*x15428)));
evalcond[6]=(((r10*x15425))+((r11*x15418*x15421))+((r12*x15430))+(((-1.0)*r10*x15426*x15428))+(((-1.0)*x15423))+((r11*x15424))+x15427);
evalcond[7]=(((r10*x15421))+(((-1.0)*r12*sj3*x15429))+(((-1.0)*r11*x15425*x15428))+((r10*x15418*x15424))+((r11*x15426))+x15432);
evalcond[8]=(((r20*x15421))+((r20*x15418*x15424))+(((-1.0)*r22*sj3*x15429))+(((-1.0)*r21*x15425*x15428))+(((-1.0)*x15427))+((cj3*x15422))+x15423);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15433=((1.0)*gconst65);
CheckValue<IkReal> x15434 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15434.valid){
continue;
}
CheckValue<IkReal> x15435=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15433)))),-1);
if(!x15435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15434.value)+(((1.5707963267949)*(x15435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15436=IKsin(j4);
IkReal x15437=IKcos(j4);
IkReal x15438=(cj2*sj1);
IkReal x15439=(cj1*sj2);
IkReal x15440=(cj3*gconst64);
IkReal x15441=(gconst65*r21);
IkReal x15442=(sj1*sj2);
IkReal x15443=(gconst65*sj3);
IkReal x15444=(gconst64*sj3);
IkReal x15445=(cj3*gconst65);
IkReal x15446=(cj1*cj2);
IkReal x15447=((1.0)*x15437);
IkReal x15448=((1.0)*x15436);
IkReal x15449=(cj3*x15436);
IkReal x15450=(gconst64*x15436);
IkReal x15451=(x15438+x15439);
evalcond[0]=((((-1.0)*r22*x15447))+(((-1.0)*gconst65*r20*x15448))+((r21*x15450)));
evalcond[1]=((((-1.0)*r12*x15447))+((r11*x15450))+(((-1.0)*gconst65*r10*x15448)));
evalcond[2]=((1.0)+((r01*x15450))+(((-1.0)*r02*x15447))+(((-1.0)*gconst65*r00*x15448)));
evalcond[3]=(((r01*x15437*x15440))+((r00*x15444))+((r01*x15443))+(((-1.0)*r00*x15445*x15447))+((r02*x15449)));
evalcond[4]=(((r00*x15437*x15443))+((r00*x15440))+((r01*x15445))+(((-1.0)*r02*sj3*x15448))+(((-1.0)*r01*x15444*x15447)));
evalcond[5]=(((sj3*x15441))+((r20*x15444))+((r22*x15449))+(((-1.0)*r20*x15445*x15447))+x15451+((r21*x15437*x15440)));
evalcond[6]=((((-1.0)*r10*x15445*x15447))+((r11*x15443))+((r10*x15444))+((r12*x15449))+((r11*x15437*x15440))+x15446+(((-1.0)*x15442)));
evalcond[7]=(((r11*x15445))+((r10*x15437*x15443))+((r10*x15440))+(((-1.0)*r11*x15444*x15447))+x15451+(((-1.0)*r12*sj3*x15448)));
evalcond[8]=(((r20*x15440))+((r20*x15437*x15443))+(((-1.0)*r21*x15444*x15447))+(((-1.0)*r22*sj3*x15448))+x15442+(((-1.0)*x15446))+((cj3*x15441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15452=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15452);
rxp0_2=(py*r00);
rxp1_0=(r21*x15452);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15453=(r01*sj5);
IkReal x15454=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15454))+x15453);
j4eval[1]=(((cj3*x15453))+(((-1.0)*cj3*x15454)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15455=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15455);
rxp0_2=(py*r00);
rxp1_0=(r21*x15455);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15456=(cj5*r00);
IkReal x15457=(r01*sj5);
j4eval[0]=(x15457+(((-1.0)*x15456)));
j4eval[1]=(((sj3*x15456))+(((-1.0)*sj3*x15457)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15458=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15458);
rxp0_2=(py*r00);
rxp1_0=(r21*x15458);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15459=((1.0)*r00);
CheckValue<IkReal> x15460=IKPowWithIntegerCheck(cj3,-1);
if(!x15460.valid){
continue;
}
CheckValue<IkReal> x15461=IKPowWithIntegerCheck(r12,-1);
if(!x15461.valid){
continue;
}
CheckValue<IkReal> x15462=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15459))),-1);
if(!x15462.valid){
continue;
}
if( IKabs(((x15460.value)*(x15461.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15462.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15459)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15460.value)*(x15461.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15462.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15459))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15460.value)*(x15461.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15462.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15459))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15463=IKsin(j4);
IkReal x15464=IKcos(j4);
IkReal x15465=(cj2*sj1);
IkReal x15466=(cj1*sj2);
IkReal x15467=(sj1*sj2);
IkReal x15468=(cj5*sj3);
IkReal x15469=(cj3*cj5);
IkReal x15470=(r21*sj5);
IkReal x15471=(cj1*cj2);
IkReal x15472=(r00*sj5);
IkReal x15473=(r01*sj5);
IkReal x15474=(r20*sj5);
IkReal x15475=((1.0)*x15463);
IkReal x15476=(r20*x15464);
IkReal x15477=(r00*x15464);
IkReal x15478=(cj3*x15464);
IkReal x15479=(x15466+x15465);
IkReal x15480=((1.0)*sj3*x15464);
evalcond[0]=((-1.0)*r12*x15464);
evalcond[1]=(((x15463*x15470))+(((-1.0)*cj5*r20*x15475)));
evalcond[2]=((((-1.0)*x15467))+x15471+((cj3*r12*x15463)));
evalcond[3]=((((-1.0)*r12*sj3*x15475))+x15479);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15475))+((x15463*x15473)));
evalcond[5]=(((x15473*x15478))+((r01*x15468))+(((-1.0)*x15469*x15477))+((sj3*x15472)));
evalcond[6]=((((-1.0)*x15473*x15480))+((r01*x15469))+((x15468*x15477))+((cj3*x15472)));
evalcond[7]=(((x15470*x15478))+((r21*x15468))+x15479+(((-1.0)*x15469*x15476))+((sj3*x15474)));
evalcond[8]=((((-1.0)*x15471))+((r21*x15469))+(((-1.0)*x15470*x15480))+x15467+((x15468*x15476))+((cj3*x15474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15481=((1.0)*r01);
IkReal x15482=(cj5*r00);
CheckValue<IkReal> x15483=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15482))),-1);
if(!x15483.valid){
continue;
}
CheckValue<IkReal> x15484=IKPowWithIntegerCheck((((sj3*x15482))+(((-1.0)*sj3*sj5*x15481))),-1);
if(!x15484.valid){
continue;
}
if( IKabs(((-1.0)*(x15483.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15484.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15481)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15483.value)))+IKsqr(((x15484.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15481))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15483.value)), ((x15484.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15481))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15485=IKsin(j4);
IkReal x15486=IKcos(j4);
IkReal x15487=(cj2*sj1);
IkReal x15488=(cj1*sj2);
IkReal x15489=(sj1*sj2);
IkReal x15490=(cj5*sj3);
IkReal x15491=(cj3*cj5);
IkReal x15492=(r21*sj5);
IkReal x15493=(cj1*cj2);
IkReal x15494=(r00*sj5);
IkReal x15495=(r01*sj5);
IkReal x15496=(r20*sj5);
IkReal x15497=((1.0)*x15485);
IkReal x15498=(r20*x15486);
IkReal x15499=(r00*x15486);
IkReal x15500=(cj3*x15486);
IkReal x15501=(x15488+x15487);
IkReal x15502=((1.0)*sj3*x15486);
evalcond[0]=((-1.0)*r12*x15486);
evalcond[1]=((((-1.0)*cj5*r20*x15497))+((x15485*x15492)));
evalcond[2]=(((cj3*r12*x15485))+x15493+(((-1.0)*x15489)));
evalcond[3]=((((-1.0)*r12*sj3*x15497))+x15501);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15497))+((x15485*x15495)));
evalcond[5]=(((r01*x15490))+((sj3*x15494))+(((-1.0)*x15491*x15499))+((x15495*x15500)));
evalcond[6]=(((r01*x15491))+((x15490*x15499))+((cj3*x15494))+(((-1.0)*x15495*x15502)));
evalcond[7]=(((sj3*x15496))+(((-1.0)*x15491*x15498))+x15501+((x15492*x15500))+((r21*x15490)));
evalcond[8]=(((x15490*x15498))+((cj3*x15496))+(((-1.0)*x15492*x15502))+x15489+((r21*x15491))+(((-1.0)*x15493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15503=((1.0)*r00);
IkReal x15504=(r01*sj5);
CheckValue<IkReal> x15505=IKPowWithIntegerCheck(((((-1.0)*cj5*x15503))+x15504),-1);
if(!x15505.valid){
continue;
}
CheckValue<IkReal> x15506=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15503))+((cj3*x15504))),-1);
if(!x15506.valid){
continue;
}
if( IKabs(((-1.0)*(x15505.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15506.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15503)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15505.value)))+IKsqr(((x15506.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15503))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15505.value)), ((x15506.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15503))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15507=IKsin(j4);
IkReal x15508=IKcos(j4);
IkReal x15509=(cj2*sj1);
IkReal x15510=(cj1*sj2);
IkReal x15511=(sj1*sj2);
IkReal x15512=(cj5*sj3);
IkReal x15513=(cj3*cj5);
IkReal x15514=(r21*sj5);
IkReal x15515=(cj1*cj2);
IkReal x15516=(r00*sj5);
IkReal x15517=(r01*sj5);
IkReal x15518=(r20*sj5);
IkReal x15519=((1.0)*x15507);
IkReal x15520=(r20*x15508);
IkReal x15521=(r00*x15508);
IkReal x15522=(cj3*x15508);
IkReal x15523=(x15509+x15510);
IkReal x15524=((1.0)*sj3*x15508);
evalcond[0]=((-1.0)*r12*x15508);
evalcond[1]=(((x15507*x15514))+(((-1.0)*cj5*r20*x15519)));
evalcond[2]=(((cj3*r12*x15507))+x15515+(((-1.0)*x15511)));
evalcond[3]=((((-1.0)*r12*sj3*x15519))+x15523);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15519))+((x15507*x15517)));
evalcond[5]=(((sj3*x15516))+((x15517*x15522))+(((-1.0)*x15513*x15521))+((r01*x15512)));
evalcond[6]=(((x15512*x15521))+(((-1.0)*x15517*x15524))+((cj3*x15516))+((r01*x15513)));
evalcond[7]=(((x15514*x15522))+((sj3*x15518))+((r21*x15512))+(((-1.0)*x15513*x15520))+x15523);
evalcond[8]=(((x15512*x15520))+((r21*x15513))+((cj3*x15518))+x15511+(((-1.0)*x15514*x15524))+(((-1.0)*x15515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15525=cj5*cj5;
IkReal x15526=(cj3*r20);
IkReal x15527=(r21*sj3);
IkReal x15528=((1.0)*cj3);
IkReal x15529=(r01*r21);
IkReal x15530=(r01*sj3);
IkReal x15531=(r00*sj5);
IkReal x15532=(cj5*r01*sj5);
IkReal x15533=((1.0)*x15525);
CheckValue<IkReal> x15534 = IKatan2WithCheck(IkReal((((r22*sj3*x15531))+((cj5*r22*x15530)))),IkReal(((((-1.0)*cj5*r20*sj3*x15531))+((r00*x15527))+(((-1.0)*r20*x15530*x15533))+((x15527*x15532))+(((-1.0)*r00*x15527*x15533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15534.valid){
continue;
}
CheckValue<IkReal> x15535=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15528*x15529))+(((-1.0)*r02*r22*x15528))+((cj3*x15525*x15529))+((cj3*cj5*r21*x15531))+((x15526*x15532))+(((-1.0)*r00*x15526*x15533)))),-1);
if(!x15535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15534.value)+(((1.5707963267949)*(x15535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15536=IKsin(j4);
IkReal x15537=IKcos(j4);
IkReal x15538=(cj2*sj1);
IkReal x15539=(cj1*sj2);
IkReal x15540=(r11*sj5);
IkReal x15541=(cj5*r10);
IkReal x15542=(sj1*sj2);
IkReal x15543=(cj5*r01);
IkReal x15544=(cj5*r00);
IkReal x15545=(cj3*sj5);
IkReal x15546=(r21*sj5);
IkReal x15547=(cj1*cj2);
IkReal x15548=(cj5*sj3);
IkReal x15549=(sj3*sj5);
IkReal x15550=(r01*sj5);
IkReal x15551=(cj3*cj5);
IkReal x15552=(cj5*r20);
IkReal x15553=((1.0)*x15537);
IkReal x15554=((1.0)*x15536);
IkReal x15555=(cj3*x15537);
IkReal x15556=(sj3*x15537);
IkReal x15557=(cj3*x15536);
IkReal x15558=(x15539+x15538);
evalcond[0]=(((x15536*x15546))+(((-1.0)*x15552*x15554))+(((-1.0)*r22*x15553)));
evalcond[1]=(((x15536*x15540))+(((-1.0)*r12*x15553))+(((-1.0)*x15541*x15554)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15553))+(((-1.0)*x15544*x15554))+((x15536*x15550)));
evalcond[3]=(((sj3*x15543))+((r02*x15557))+((r01*x15537*x15545))+((r00*x15549))+(((-1.0)*cj3*x15544*x15553)));
evalcond[4]=(((cj3*x15543))+(((-1.0)*r01*x15549*x15553))+(((-1.0)*r02*sj3*x15554))+((x15544*x15556))+((r00*x15545)));
evalcond[5]=(((r20*x15549))+((r22*x15557))+((r21*x15548))+(((-1.0)*r20*x15551*x15553))+x15558+((r21*x15537*x15545)));
evalcond[6]=(((x15540*x15555))+((r10*x15549))+((r12*x15557))+((r11*x15548))+(((-1.0)*x15542))+x15547+(((-1.0)*cj3*x15541*x15553)));
evalcond[7]=(((r11*x15551))+(((-1.0)*sj3*x15540*x15553))+((r10*x15545))+((x15541*x15556))+(((-1.0)*r12*sj3*x15554))+x15558);
evalcond[8]=((((-1.0)*sj3*x15546*x15553))+((r21*x15551))+((r20*x15545))+(((-1.0)*r22*sj3*x15554))+((r20*x15537*x15548))+(((-1.0)*x15547))+x15542);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15559=((1.0)*cj5);
CheckValue<IkReal> x15560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15559))+(((-1.0)*r20*sj5)))),-1);
if(!x15560.valid){
continue;
}
CheckValue<IkReal> x15561 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15559))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15560.value)))+(x15561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15562=IKsin(j4);
IkReal x15563=IKcos(j4);
IkReal x15564=(cj2*sj1);
IkReal x15565=(cj1*sj2);
IkReal x15566=(r11*sj5);
IkReal x15567=(cj5*r10);
IkReal x15568=(sj1*sj2);
IkReal x15569=(cj5*r01);
IkReal x15570=(cj5*r00);
IkReal x15571=(cj3*sj5);
IkReal x15572=(r21*sj5);
IkReal x15573=(cj1*cj2);
IkReal x15574=(cj5*sj3);
IkReal x15575=(sj3*sj5);
IkReal x15576=(r01*sj5);
IkReal x15577=(cj3*cj5);
IkReal x15578=(cj5*r20);
IkReal x15579=((1.0)*x15563);
IkReal x15580=((1.0)*x15562);
IkReal x15581=(cj3*x15563);
IkReal x15582=(sj3*x15563);
IkReal x15583=(cj3*x15562);
IkReal x15584=(x15564+x15565);
evalcond[0]=(((x15562*x15572))+(((-1.0)*r22*x15579))+(((-1.0)*x15578*x15580)));
evalcond[1]=(((x15562*x15566))+(((-1.0)*r12*x15579))+(((-1.0)*x15567*x15580)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15579))+((x15562*x15576))+(((-1.0)*x15570*x15580)));
evalcond[3]=(((r01*x15563*x15571))+((sj3*x15569))+((r00*x15575))+(((-1.0)*cj3*x15570*x15579))+((r02*x15583)));
evalcond[4]=((((-1.0)*r01*x15575*x15579))+(((-1.0)*r02*sj3*x15580))+((r00*x15571))+((x15570*x15582))+((cj3*x15569)));
evalcond[5]=(((r21*x15574))+((r22*x15583))+((r21*x15563*x15571))+((r20*x15575))+(((-1.0)*r20*x15577*x15579))+x15584);
evalcond[6]=((((-1.0)*cj3*x15567*x15579))+((r12*x15583))+((r10*x15575))+((r11*x15574))+((x15566*x15581))+x15573+(((-1.0)*x15568)));
evalcond[7]=(((r10*x15571))+((x15567*x15582))+(((-1.0)*r12*sj3*x15580))+((r11*x15577))+(((-1.0)*sj3*x15566*x15579))+x15584);
evalcond[8]=(((r21*x15577))+(((-1.0)*sj3*x15572*x15579))+(((-1.0)*r22*sj3*x15580))+((r20*x15563*x15574))+((r20*x15571))+x15568+(((-1.0)*x15573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15585 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15585.valid){
continue;
}
CheckValue<IkReal> x15586=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15585.value)+(((1.5707963267949)*(x15586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15587=IKsin(j4);
IkReal x15588=IKcos(j4);
IkReal x15589=(cj2*sj1);
IkReal x15590=(cj1*sj2);
IkReal x15591=(r11*sj5);
IkReal x15592=(cj5*r10);
IkReal x15593=(sj1*sj2);
IkReal x15594=(cj5*r01);
IkReal x15595=(cj5*r00);
IkReal x15596=(cj3*sj5);
IkReal x15597=(r21*sj5);
IkReal x15598=(cj1*cj2);
IkReal x15599=(cj5*sj3);
IkReal x15600=(sj3*sj5);
IkReal x15601=(r01*sj5);
IkReal x15602=(cj3*cj5);
IkReal x15603=(cj5*r20);
IkReal x15604=((1.0)*x15588);
IkReal x15605=((1.0)*x15587);
IkReal x15606=(cj3*x15588);
IkReal x15607=(sj3*x15588);
IkReal x15608=(cj3*x15587);
IkReal x15609=(x15590+x15589);
evalcond[0]=((((-1.0)*x15603*x15605))+(((-1.0)*r22*x15604))+((x15587*x15597)));
evalcond[1]=((((-1.0)*x15592*x15605))+(((-1.0)*r12*x15604))+((x15587*x15591)));
evalcond[2]=((1.0)+((x15587*x15601))+(((-1.0)*x15595*x15605))+(((-1.0)*r02*x15604)));
evalcond[3]=((((-1.0)*cj3*x15595*x15604))+((sj3*x15594))+((r01*x15588*x15596))+((r02*x15608))+((r00*x15600)));
evalcond[4]=((((-1.0)*r02*sj3*x15605))+(((-1.0)*r01*x15600*x15604))+((cj3*x15594))+((x15595*x15607))+((r00*x15596)));
evalcond[5]=(((r21*x15599))+((r22*x15608))+x15609+(((-1.0)*r20*x15602*x15604))+((r20*x15600))+((r21*x15588*x15596)));
evalcond[6]=((((-1.0)*x15593))+((x15591*x15606))+((r11*x15599))+((r10*x15600))+((r12*x15608))+x15598+(((-1.0)*cj3*x15592*x15604)));
evalcond[7]=((((-1.0)*sj3*x15591*x15604))+((x15592*x15607))+((r10*x15596))+x15609+(((-1.0)*r12*sj3*x15605))+((r11*x15602)));
evalcond[8]=((((-1.0)*x15598))+(((-1.0)*r22*sj3*x15605))+((r20*x15596))+x15593+(((-1.0)*sj3*x15597*x15604))+((r21*x15602))+((r20*x15588*x15599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15610=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15610);
rxp1_1=(px*r21);
rxp1_2=(r11*x15610);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15611=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15611);
rxp1_1=(px*r21);
rxp1_2=(r11*x15611);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15612=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15612)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15612)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15613=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15613);
rxp1_1=(px*r21);
rxp1_2=(r11*x15613);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15614=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15614);
rxp1_1=(px*r21);
rxp1_2=(r11*x15614);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15615=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15615);
rxp1_1=(px*r21);
rxp1_2=(r11*x15615);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15616=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15616);
rxp1_1=(px*r21);
rxp1_2=(r11*x15616);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15619=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15619.valid){
continue;
}
IkReal x15617=x15619.value;
IkReal x15618=(sj0*x15617);
cj4array[0]=(((cj1*sj2*x15618))+((cj2*sj1*x15618)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15620=IKsin(j4);
IkReal x15621=IKcos(j4);
IkReal x15622=(cj5*r20);
IkReal x15623=(r21*sj5);
IkReal x15624=((1.0)*x15620);
IkReal x15625=((1.0)*x15621);
evalcond[0]=((-1.0)*r02*x15620);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15625)));
evalcond[2]=(((x15620*x15623))+(((-1.0)*x15622*x15624)));
evalcond[3]=((((-1.0)*cj5*r10*x15624))+((r11*sj5*x15620)));
evalcond[4]=(((x15621*x15622))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15623*x15625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15627=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15627.valid){
continue;
}
IkReal x15626=x15627.value;
cj4array[0]=(((cj1*cj2*x15626))+(((-1.0)*sj1*sj2*x15626)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15628=IKsin(j4);
IkReal x15629=IKcos(j4);
IkReal x15630=(r11*sj5);
IkReal x15631=((1.0)*sj0);
IkReal x15632=((1.0)*x15629);
IkReal x15633=((1.0)*cj5*x15628);
evalcond[0]=((-1.0)*r02*x15628);
evalcond[1]=((((-1.0)*r02*x15632))+(((-1.0)*x15631)));
evalcond[2]=(((r21*sj5*x15628))+(((-1.0)*r20*x15633)));
evalcond[3]=((((-1.0)*r10*x15633))+((x15628*x15630)));
evalcond[4]=((((-1.0)*cj2*sj1*x15631))+(((-1.0)*x15630*x15632))+((cj5*r10*x15629))+(((-1.0)*cj1*sj2*x15631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15634=IKPowWithIntegerCheck(r02,-1);
if(!x15634.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15634.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15635=IKsin(j4);
IkReal x15636=IKcos(j4);
IkReal x15637=((1.0)*sj0);
IkReal x15638=(cj5*x15636);
IkReal x15639=(sj5*x15635);
IkReal x15640=((1.0)*sj5*x15636);
IkReal x15641=((1.0)*cj5*x15635);
evalcond[0]=((-1.0)*r02*x15635);
evalcond[1]=((((-1.0)*r20*x15641))+((r21*x15639)));
evalcond[2]=((((-1.0)*r10*x15641))+((r11*x15639)));
evalcond[3]=(((r20*x15638))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15640)));
evalcond[4]=((((-1.0)*cj2*sj1*x15637))+(((-1.0)*r11*x15640))+(((-1.0)*cj1*sj2*x15637))+((r10*x15638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15642=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15642);
rxp1_1=(px*r21);
rxp1_2=(r11*x15642);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15643=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15643);
rxp1_1=(px*r21);
rxp1_2=(r11*x15643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15644=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15644);
rxp1_1=(px*r21);
rxp1_2=(r11*x15644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15647=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15647.valid){
continue;
}
IkReal x15645=x15647.value;
IkReal x15646=(sj0*x15645);
cj4array[0]=(((cj1*sj2*x15646))+((cj2*sj1*x15646)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15648=IKsin(j4);
IkReal x15649=IKcos(j4);
IkReal x15650=(r21*sj5);
IkReal x15651=((1.0)*cj5*r20);
evalcond[0]=(r02*x15648);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15649)));
evalcond[2]=((((-1.0)*x15648*x15651))+((x15648*x15650)));
evalcond[3]=((((-1.0)*cj5*r10*x15648))+((r11*sj5*x15648)));
evalcond[4]=((((-1.0)*x15649*x15651))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15649*x15650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15653=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15653.valid){
continue;
}
IkReal x15652=x15653.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15652))+((cj1*cj2*x15652)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15654=IKsin(j4);
IkReal x15655=IKcos(j4);
IkReal x15656=((1.0)*sj0);
IkReal x15657=((1.0)*cj5);
IkReal x15658=(sj5*x15654);
evalcond[0]=(r02*x15654);
evalcond[1]=((((-1.0)*x15656))+(((-1.0)*r02*x15655)));
evalcond[2]=(((r21*x15658))+(((-1.0)*r20*x15654*x15657)));
evalcond[3]=((((-1.0)*r10*x15654*x15657))+((r11*x15658)));
evalcond[4]=((((-1.0)*cj2*sj1*x15656))+(((-1.0)*r10*x15655*x15657))+((r11*sj5*x15655))+(((-1.0)*cj1*sj2*x15656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15659=IKPowWithIntegerCheck(r02,-1);
if(!x15659.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15659.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15660=IKsin(j4);
IkReal x15661=IKcos(j4);
IkReal x15662=((1.0)*cj1);
IkReal x15663=(r21*sj5);
IkReal x15664=((1.0)*cj5);
IkReal x15665=(r11*sj5);
evalcond[0]=(r02*x15660);
evalcond[1]=((((-1.0)*r20*x15660*x15664))+((x15660*x15663)));
evalcond[2]=(((x15660*x15665))+(((-1.0)*r10*x15660*x15664)));
evalcond[3]=((((-1.0)*r20*x15661*x15664))+((sj1*sj2))+((x15661*x15663))+(((-1.0)*cj2*x15662)));
evalcond[4]=((((-1.0)*r10*x15661*x15664))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15662))+((x15661*x15665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15666 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15666.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15666.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15667 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15667.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15667.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15668=((-1.0)*r10);
CheckValue<IkReal> x15670 = IKatan2WithCheck(IkReal(x15668),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15670.valid){
continue;
}
IkReal x15669=((-1.0)*(x15670.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15668);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15669;
IkReal gconst66=x15669;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15671=((-1.0)*r10);
CheckValue<IkReal> x15673 = IKatan2WithCheck(IkReal(x15671),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15673.valid){
continue;
}
IkReal x15672=((-1.0)*(x15673.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15671);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15672;
IkReal gconst66=x15672;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15674=((-1.0)*r10);
CheckValue<IkReal> x15676 = IKatan2WithCheck(IkReal(x15674),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15676.valid){
continue;
}
IkReal x15675=((-1.0)*(x15676.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15674);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15675;
IkReal gconst66=x15675;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15677=((1.0)*gconst67);
IkReal x15678=(cj1*cj2);
IkReal x15679=((1.0)*sj1*sj2);
CheckValue<IkReal> x15680=IKPowWithIntegerCheck(cj3,-1);
if(!x15680.valid){
continue;
}
CheckValue<IkReal> x15681=IKPowWithIntegerCheck(r02,-1);
if(!x15681.valid){
continue;
}
CheckValue<IkReal> x15682=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15677))+((gconst68*r20*sj3))),-1);
if(!x15682.valid){
continue;
}
if( IKabs(((x15680.value)*(x15681.value)*(((((-1.0)*cj0*x15679))+((cj0*x15678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15682.value)*(((((-1.0)*x15679))+x15678+(((-1.0)*cj3*r20*x15677))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15680.value)*(x15681.value)*(((((-1.0)*cj0*x15679))+((cj0*x15678))))))+IKsqr(((x15682.value)*(((((-1.0)*x15679))+x15678+(((-1.0)*cj3*r20*x15677))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15680.value)*(x15681.value)*(((((-1.0)*cj0*x15679))+((cj0*x15678))))), ((x15682.value)*(((((-1.0)*x15679))+x15678+(((-1.0)*cj3*r20*x15677))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15683=IKsin(j4);
IkReal x15684=IKcos(j4);
IkReal x15685=(sj1*sj2);
IkReal x15686=(gconst68*sj3);
IkReal x15687=(gconst67*r11);
IkReal x15688=(gconst67*sj3);
IkReal x15689=((1.0)*gconst68);
IkReal x15690=(cj2*sj1);
IkReal x15691=((1.0)*cj0);
IkReal x15692=((1.0)*sj0);
IkReal x15693=(cj3*gconst67);
IkReal x15694=(cj3*gconst68);
IkReal x15695=(cj1*sj2);
IkReal x15696=(gconst67*r21);
IkReal x15697=((1.0)*cj1*cj2);
IkReal x15698=(cj3*x15684);
IkReal x15699=((1.0)*x15684);
IkReal x15700=(r02*x15683);
evalcond[0]=((((-1.0)*x15692))+(((-1.0)*r02*x15699)));
evalcond[1]=(((x15683*x15696))+(((-1.0)*r20*x15683*x15689)));
evalcond[2]=(((x15683*x15687))+(((-1.0)*r10*x15683*x15689))+cj0);
evalcond[3]=(((cj3*x15700))+((cj0*x15685))+(((-1.0)*cj1*cj2*x15691)));
evalcond[4]=((((-1.0)*x15690*x15691))+(((-1.0)*sj3*x15700))+(((-1.0)*x15691*x15695)));
evalcond[5]=(((r20*x15688))+((r21*x15684*x15693))+(((-1.0)*r20*x15689*x15698))+x15690+x15695+((r21*x15686)));
evalcond[6]=(((r20*x15684*x15686))+(((-1.0)*x15697))+((r20*x15693))+(((-1.0)*r21*x15688*x15699))+((r21*x15694))+x15685);
evalcond[7]=(((r10*x15688))+(((-1.0)*r10*x15689*x15698))+((r11*x15686))+((x15687*x15698))+(((-1.0)*cj1*cj2*x15692))+((sj0*x15685)));
evalcond[8]=(((r10*x15693))+(((-1.0)*x15690*x15692))+((r11*x15694))+((r10*x15684*x15686))+(((-1.0)*sj3*x15687*x15699))+(((-1.0)*x15692*x15695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15703=IKPowWithIntegerCheck(r02,-1);
if(!x15703.valid){
continue;
}
IkReal x15701=x15703.value;
IkReal x15702=((1.0)*cj0);
CheckValue<IkReal> x15704=IKPowWithIntegerCheck(sj3,-1);
if(!x15704.valid){
continue;
}
if( IKabs((x15701*(x15704.value)*(((((-1.0)*cj2*sj1*x15702))+(((-1.0)*cj1*sj2*x15702)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15701)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15701*(x15704.value)*(((((-1.0)*cj2*sj1*x15702))+(((-1.0)*cj1*sj2*x15702))))))+IKsqr(((-1.0)*sj0*x15701))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15701*(x15704.value)*(((((-1.0)*cj2*sj1*x15702))+(((-1.0)*cj1*sj2*x15702))))), ((-1.0)*sj0*x15701));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15705=IKsin(j4);
IkReal x15706=IKcos(j4);
IkReal x15707=(sj1*sj2);
IkReal x15708=(gconst68*sj3);
IkReal x15709=(gconst67*r11);
IkReal x15710=(gconst67*sj3);
IkReal x15711=((1.0)*gconst68);
IkReal x15712=(cj2*sj1);
IkReal x15713=((1.0)*cj0);
IkReal x15714=((1.0)*sj0);
IkReal x15715=(cj3*gconst67);
IkReal x15716=(cj3*gconst68);
IkReal x15717=(cj1*sj2);
IkReal x15718=(gconst67*r21);
IkReal x15719=((1.0)*cj1*cj2);
IkReal x15720=(cj3*x15706);
IkReal x15721=((1.0)*x15706);
IkReal x15722=(r02*x15705);
evalcond[0]=((((-1.0)*x15714))+(((-1.0)*r02*x15721)));
evalcond[1]=((((-1.0)*r20*x15705*x15711))+((x15705*x15718)));
evalcond[2]=((((-1.0)*r10*x15705*x15711))+cj0+((x15705*x15709)));
evalcond[3]=(((cj0*x15707))+(((-1.0)*cj1*cj2*x15713))+((cj3*x15722)));
evalcond[4]=((((-1.0)*x15712*x15713))+(((-1.0)*sj3*x15722))+(((-1.0)*x15713*x15717)));
evalcond[5]=(((r21*x15706*x15715))+((r20*x15710))+x15717+x15712+(((-1.0)*r20*x15711*x15720))+((r21*x15708)));
evalcond[6]=((((-1.0)*x15719))+((r20*x15715))+((r20*x15706*x15708))+((r21*x15716))+x15707+(((-1.0)*r21*x15710*x15721)));
evalcond[7]=(((r11*x15708))+((sj0*x15707))+(((-1.0)*r10*x15711*x15720))+((x15709*x15720))+(((-1.0)*cj1*cj2*x15714))+((r10*x15710)));
evalcond[8]=((((-1.0)*sj3*x15709*x15721))+(((-1.0)*x15712*x15714))+(((-1.0)*x15714*x15717))+((r11*x15716))+((r10*x15706*x15708))+((r10*x15715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15724=IKPowWithIntegerCheck(r02,-1);
if(!x15724.valid){
continue;
}
IkReal x15723=x15724.value;
CheckValue<IkReal> x15725=IKPowWithIntegerCheck(cj3,-1);
if(!x15725.valid){
continue;
}
if( IKabs((x15723*(x15725.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15723)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15723*(x15725.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15723))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15723*(x15725.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15723));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15726=IKsin(j4);
IkReal x15727=IKcos(j4);
IkReal x15728=(sj1*sj2);
IkReal x15729=(gconst68*sj3);
IkReal x15730=(gconst67*r11);
IkReal x15731=(gconst67*sj3);
IkReal x15732=((1.0)*gconst68);
IkReal x15733=(cj2*sj1);
IkReal x15734=((1.0)*cj0);
IkReal x15735=((1.0)*sj0);
IkReal x15736=(cj3*gconst67);
IkReal x15737=(cj3*gconst68);
IkReal x15738=(cj1*sj2);
IkReal x15739=(gconst67*r21);
IkReal x15740=((1.0)*cj1*cj2);
IkReal x15741=(cj3*x15727);
IkReal x15742=((1.0)*x15727);
IkReal x15743=(r02*x15726);
evalcond[0]=((((-1.0)*x15735))+(((-1.0)*r02*x15742)));
evalcond[1]=((((-1.0)*r20*x15726*x15732))+((x15726*x15739)));
evalcond[2]=(cj0+(((-1.0)*r10*x15726*x15732))+((x15726*x15730)));
evalcond[3]=(((cj3*x15743))+((cj0*x15728))+(((-1.0)*cj1*cj2*x15734)));
evalcond[4]=((((-1.0)*x15733*x15734))+(((-1.0)*sj3*x15743))+(((-1.0)*x15734*x15738)));
evalcond[5]=(((r20*x15731))+((r21*x15729))+x15733+x15738+(((-1.0)*r20*x15732*x15741))+((r21*x15727*x15736)));
evalcond[6]=(((r20*x15736))+(((-1.0)*x15740))+(((-1.0)*r21*x15731*x15742))+((r21*x15737))+((r20*x15727*x15729))+x15728);
evalcond[7]=(((r11*x15729))+(((-1.0)*cj1*cj2*x15735))+((sj0*x15728))+(((-1.0)*r10*x15732*x15741))+((x15730*x15741))+((r10*x15731)));
evalcond[8]=(((r11*x15737))+(((-1.0)*x15733*x15735))+(((-1.0)*x15735*x15738))+((r10*x15736))+((r10*x15727*x15729))+(((-1.0)*sj3*x15730*x15742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15744=((-1.0)*r10);
CheckValue<IkReal> x15745 = IKatan2WithCheck(IkReal(x15744),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15745.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15745.value))));
IkReal gconst70=x15744;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15746 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15746.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15746.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15747=((-1.0)*r10);
IkReal x15748=((-1.0)*r11);
CheckValue<IkReal> x15750 = IKatan2WithCheck(IkReal(x15747),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15750.valid){
continue;
}
IkReal x15749=((1.0)*(x15750.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15747);
rxp1_1=(px*r21);
rxp1_2=(px*x15748);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15749)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15749)));
IkReal gconst70=x15747;
IkReal gconst71=x15748;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15751=((-1.0)*r10);
IkReal x15752=((-1.0)*r11);
CheckValue<IkReal> x15754 = IKatan2WithCheck(IkReal(x15751),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15754.valid){
continue;
}
IkReal x15753=((1.0)*(x15754.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15751);
rxp1_1=(px*r21);
rxp1_2=(px*x15752);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15753)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15753)));
IkReal gconst70=x15751;
IkReal gconst71=x15752;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15755=((-1.0)*r10);
IkReal x15756=((-1.0)*r11);
CheckValue<IkReal> x15758 = IKatan2WithCheck(IkReal(x15755),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15758.valid){
continue;
}
IkReal x15757=((1.0)*(x15758.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15755);
rxp1_1=(px*r21);
rxp1_2=(px*x15756);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15757)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15757)));
IkReal gconst70=x15755;
IkReal gconst71=x15756;
IkReal x15759=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15759))+(((-1.0)*r11*r20*x15759)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15760=((1.0)*r21);
IkReal x15761=(cj1*cj2);
IkReal x15762=((1.0)*sj1*sj2);
CheckValue<IkReal> x15763=IKPowWithIntegerCheck(cj3,-1);
if(!x15763.valid){
continue;
}
CheckValue<IkReal> x15764=IKPowWithIntegerCheck(r02,-1);
if(!x15764.valid){
continue;
}
CheckValue<IkReal> x15765=IKPowWithIntegerCheck((((gconst71*r20*sj3))+(((-1.0)*gconst70*sj3*x15760))),-1);
if(!x15765.valid){
continue;
}
if( IKabs(((x15763.value)*(x15764.value)*(((((-1.0)*cj0*x15762))+((cj0*x15761)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15765.value)*(((((-1.0)*cj3*gconst71*x15760))+(((-1.0)*x15762))+x15761+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15763.value)*(x15764.value)*(((((-1.0)*cj0*x15762))+((cj0*x15761))))))+IKsqr(((x15765.value)*(((((-1.0)*cj3*gconst71*x15760))+(((-1.0)*x15762))+x15761+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15763.value)*(x15764.value)*(((((-1.0)*cj0*x15762))+((cj0*x15761))))), ((x15765.value)*(((((-1.0)*cj3*gconst71*x15760))+(((-1.0)*x15762))+x15761+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15766=IKsin(j4);
IkReal x15767=IKcos(j4);
IkReal x15768=(cj3*gconst70);
IkReal x15769=(sj1*sj2);
IkReal x15770=((1.0)*gconst71);
IkReal x15771=(gconst71*sj3);
IkReal x15772=(cj2*sj1);
IkReal x15773=((1.0)*sj0);
IkReal x15774=(gconst70*r11);
IkReal x15775=(gconst70*sj3);
IkReal x15776=((1.0)*cj0);
IkReal x15777=(cj3*gconst71);
IkReal x15778=(cj1*sj2);
IkReal x15779=((1.0)*cj1*cj2);
IkReal x15780=(r21*x15767);
IkReal x15781=(r10*x15767);
IkReal x15782=((1.0)*x15767);
IkReal x15783=(r02*x15766);
IkReal x15784=(r20*x15767);
evalcond[0]=((((-1.0)*x15773))+(((-1.0)*r02*x15782)));
evalcond[1]=(((gconst70*r21*x15766))+(((-1.0)*r20*x15766*x15770)));
evalcond[2]=(cj0+((x15766*x15774))+(((-1.0)*r10*x15766*x15770)));
evalcond[3]=(((cj3*x15783))+((cj0*x15769))+(((-1.0)*cj1*cj2*x15776)));
evalcond[4]=((((-1.0)*x15776*x15778))+(((-1.0)*x15772*x15776))+(((-1.0)*sj3*x15783)));
evalcond[5]=(((r21*x15771))+((x15768*x15780))+((r20*x15775))+x15778+x15772+(((-1.0)*cj3*x15770*x15784)));
evalcond[6]=(((x15771*x15784))+((r21*x15777))+(((-1.0)*x15775*x15780))+(((-1.0)*x15779))+((r20*x15768))+x15769);
evalcond[7]=(((r10*x15775))+((sj0*x15769))+(((-1.0)*cj1*cj2*x15773))+((r11*x15767*x15768))+((r11*x15771))+(((-1.0)*cj3*x15770*x15781)));
evalcond[8]=(((x15771*x15781))+((r10*x15768))+(((-1.0)*x15773*x15778))+(((-1.0)*x15772*x15773))+(((-1.0)*sj3*x15774*x15782))+((r11*x15777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15787=IKPowWithIntegerCheck(r02,-1);
if(!x15787.valid){
continue;
}
IkReal x15785=x15787.value;
IkReal x15786=((1.0)*cj0);
CheckValue<IkReal> x15788=IKPowWithIntegerCheck(sj3,-1);
if(!x15788.valid){
continue;
}
if( IKabs((x15785*(x15788.value)*(((((-1.0)*cj1*sj2*x15786))+(((-1.0)*cj2*sj1*x15786)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15785)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15785*(x15788.value)*(((((-1.0)*cj1*sj2*x15786))+(((-1.0)*cj2*sj1*x15786))))))+IKsqr(((-1.0)*sj0*x15785))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15785*(x15788.value)*(((((-1.0)*cj1*sj2*x15786))+(((-1.0)*cj2*sj1*x15786))))), ((-1.0)*sj0*x15785));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15789=IKsin(j4);
IkReal x15790=IKcos(j4);
IkReal x15791=(cj3*gconst70);
IkReal x15792=(sj1*sj2);
IkReal x15793=((1.0)*gconst71);
IkReal x15794=(gconst71*sj3);
IkReal x15795=(cj2*sj1);
IkReal x15796=((1.0)*sj0);
IkReal x15797=(gconst70*r11);
IkReal x15798=(gconst70*sj3);
IkReal x15799=((1.0)*cj0);
IkReal x15800=(cj3*gconst71);
IkReal x15801=(cj1*sj2);
IkReal x15802=((1.0)*cj1*cj2);
IkReal x15803=(r21*x15790);
IkReal x15804=(r10*x15790);
IkReal x15805=((1.0)*x15790);
IkReal x15806=(r02*x15789);
IkReal x15807=(r20*x15790);
evalcond[0]=((((-1.0)*x15796))+(((-1.0)*r02*x15805)));
evalcond[1]=((((-1.0)*r20*x15789*x15793))+((gconst70*r21*x15789)));
evalcond[2]=(cj0+(((-1.0)*r10*x15789*x15793))+((x15789*x15797)));
evalcond[3]=(((cj0*x15792))+((cj3*x15806))+(((-1.0)*cj1*cj2*x15799)));
evalcond[4]=((((-1.0)*x15795*x15799))+(((-1.0)*x15799*x15801))+(((-1.0)*sj3*x15806)));
evalcond[5]=(((r20*x15798))+((r21*x15794))+x15795+((x15791*x15803))+(((-1.0)*cj3*x15793*x15807))+x15801);
evalcond[6]=(((x15794*x15807))+(((-1.0)*x15802))+((r20*x15791))+((r21*x15800))+(((-1.0)*x15798*x15803))+x15792);
evalcond[7]=(((r11*x15794))+(((-1.0)*cj1*cj2*x15796))+((r11*x15790*x15791))+((r10*x15798))+(((-1.0)*cj3*x15793*x15804))+((sj0*x15792)));
evalcond[8]=(((x15794*x15804))+(((-1.0)*sj3*x15797*x15805))+(((-1.0)*x15796*x15801))+((r11*x15800))+(((-1.0)*x15795*x15796))+((r10*x15791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15809=IKPowWithIntegerCheck(r02,-1);
if(!x15809.valid){
continue;
}
IkReal x15808=x15809.value;
CheckValue<IkReal> x15810=IKPowWithIntegerCheck(cj3,-1);
if(!x15810.valid){
continue;
}
if( IKabs((x15808*(x15810.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15808)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15808*(x15810.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15808))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15808*(x15810.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15808));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15811=IKsin(j4);
IkReal x15812=IKcos(j4);
IkReal x15813=(cj3*gconst70);
IkReal x15814=(sj1*sj2);
IkReal x15815=((1.0)*gconst71);
IkReal x15816=(gconst71*sj3);
IkReal x15817=(cj2*sj1);
IkReal x15818=((1.0)*sj0);
IkReal x15819=(gconst70*r11);
IkReal x15820=(gconst70*sj3);
IkReal x15821=((1.0)*cj0);
IkReal x15822=(cj3*gconst71);
IkReal x15823=(cj1*sj2);
IkReal x15824=((1.0)*cj1*cj2);
IkReal x15825=(r21*x15812);
IkReal x15826=(r10*x15812);
IkReal x15827=((1.0)*x15812);
IkReal x15828=(r02*x15811);
IkReal x15829=(r20*x15812);
evalcond[0]=((((-1.0)*r02*x15827))+(((-1.0)*x15818)));
evalcond[1]=(((gconst70*r21*x15811))+(((-1.0)*r20*x15811*x15815)));
evalcond[2]=(cj0+(((-1.0)*r10*x15811*x15815))+((x15811*x15819)));
evalcond[3]=(((cj3*x15828))+((cj0*x15814))+(((-1.0)*cj1*cj2*x15821)));
evalcond[4]=((((-1.0)*x15821*x15823))+(((-1.0)*sj3*x15828))+(((-1.0)*x15817*x15821)));
evalcond[5]=((((-1.0)*cj3*x15815*x15829))+((x15813*x15825))+((r20*x15820))+((r21*x15816))+x15817+x15823);
evalcond[6]=((((-1.0)*x15824))+((x15816*x15829))+((r21*x15822))+(((-1.0)*x15820*x15825))+((r20*x15813))+x15814);
evalcond[7]=((((-1.0)*cj3*x15815*x15826))+((r11*x15816))+(((-1.0)*cj1*cj2*x15818))+((sj0*x15814))+((r11*x15812*x15813))+((r10*x15820)));
evalcond[8]=((((-1.0)*x15818*x15823))+((r10*x15813))+((x15816*x15826))+(((-1.0)*x15817*x15818))+((r11*x15822))+(((-1.0)*sj3*x15819*x15827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15831=IKPowWithIntegerCheck(r02,-1);
if(!x15831.valid){
continue;
}
IkReal x15830=x15831.value;
CheckValue<IkReal> x15832=IKPowWithIntegerCheck(cj3,-1);
if(!x15832.valid){
continue;
}
if( IKabs((x15830*(x15832.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15830)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15830*(x15832.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15830))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15830*(x15832.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15830));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15833=IKsin(j4);
IkReal x15834=IKcos(j4);
IkReal x15835=(cj5*r10);
IkReal x15836=(sj1*sj2);
IkReal x15837=(cj5*sj3);
IkReal x15838=(r11*sj5);
IkReal x15839=(cj3*cj5);
IkReal x15840=(cj3*sj5);
IkReal x15841=(r21*sj5);
IkReal x15842=(cj2*sj1);
IkReal x15843=((1.0)*sj0);
IkReal x15844=((1.0)*cj0);
IkReal x15845=(sj3*sj5);
IkReal x15846=(cj1*sj2);
IkReal x15847=((1.0)*cj1*cj2);
IkReal x15848=((1.0)*x15833);
IkReal x15849=(r20*x15834);
IkReal x15850=(cj3*x15834);
IkReal x15851=(sj3*x15834);
evalcond[0]=((((-1.0)*r02*x15834))+(((-1.0)*x15843)));
evalcond[1]=((((-1.0)*cj5*r20*x15848))+((x15833*x15841)));
evalcond[2]=((((-1.0)*x15835*x15848))+cj0+((x15833*x15838)));
evalcond[3]=(((cj3*r02*x15833))+((cj0*x15836))+(((-1.0)*cj1*cj2*x15844)));
evalcond[4]=((((-1.0)*r02*sj3*x15848))+(((-1.0)*x15844*x15846))+(((-1.0)*x15842*x15844)));
evalcond[5]=(((r21*x15834*x15840))+(((-1.0)*x15839*x15849))+((r20*x15845))+x15842+x15846+((r21*x15837)));
evalcond[6]=(((x15837*x15849))+((r20*x15840))+(((-1.0)*x15847))+(((-1.0)*x15841*x15851))+x15836+((r21*x15839)));
evalcond[7]=((((-1.0)*x15835*x15850))+((sj0*x15836))+((r11*x15837))+((x15838*x15850))+(((-1.0)*cj1*cj2*x15843))+((r10*x15845)));
evalcond[8]=((((-1.0)*x15838*x15851))+((r11*x15839))+((r10*x15840))+(((-1.0)*x15843*x15846))+((x15835*x15851))+(((-1.0)*x15842*x15843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15852=((1.0)*sj3);
IkReal x15853=((1.0)*cj5);
CheckValue<IkReal> x15854=IKPowWithIntegerCheck(((((-1.0)*r10*x15853))+((r11*sj5))),-1);
if(!x15854.valid){
continue;
}
CheckValue<IkReal> x15855=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15853))),-1);
if(!x15855.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15854.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15855.value)*(((((-1.0)*cj5*r21*x15852))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15852)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15854.value)))+IKsqr(((x15855.value)*(((((-1.0)*cj5*r21*x15852))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15852))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15854.value)), ((x15855.value)*(((((-1.0)*cj5*r21*x15852))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15852))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15856=IKsin(j4);
IkReal x15857=IKcos(j4);
IkReal x15858=(cj5*r10);
IkReal x15859=(sj1*sj2);
IkReal x15860=(cj5*sj3);
IkReal x15861=(r11*sj5);
IkReal x15862=(cj3*cj5);
IkReal x15863=(cj3*sj5);
IkReal x15864=(r21*sj5);
IkReal x15865=(cj2*sj1);
IkReal x15866=((1.0)*sj0);
IkReal x15867=((1.0)*cj0);
IkReal x15868=(sj3*sj5);
IkReal x15869=(cj1*sj2);
IkReal x15870=((1.0)*cj1*cj2);
IkReal x15871=((1.0)*x15856);
IkReal x15872=(r20*x15857);
IkReal x15873=(cj3*x15857);
IkReal x15874=(sj3*x15857);
evalcond[0]=((((-1.0)*x15866))+(((-1.0)*r02*x15857)));
evalcond[1]=((((-1.0)*cj5*r20*x15871))+((x15856*x15864)));
evalcond[2]=(cj0+((x15856*x15861))+(((-1.0)*x15858*x15871)));
evalcond[3]=(((cj0*x15859))+((cj3*r02*x15856))+(((-1.0)*cj1*cj2*x15867)));
evalcond[4]=((((-1.0)*r02*sj3*x15871))+(((-1.0)*x15865*x15867))+(((-1.0)*x15867*x15869)));
evalcond[5]=(((r21*x15860))+((r21*x15857*x15863))+(((-1.0)*x15862*x15872))+((r20*x15868))+x15869+x15865);
evalcond[6]=(((r21*x15862))+(((-1.0)*x15870))+(((-1.0)*x15864*x15874))+((r20*x15863))+x15859+((x15860*x15872)));
evalcond[7]=(((r11*x15860))+((x15861*x15873))+(((-1.0)*x15858*x15873))+((r10*x15868))+(((-1.0)*cj1*cj2*x15866))+((sj0*x15859)));
evalcond[8]=(((r11*x15862))+(((-1.0)*x15866*x15869))+(((-1.0)*x15861*x15874))+(((-1.0)*x15865*x15866))+((x15858*x15874))+((r10*x15863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15875=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15875.valid){
continue;
}
CheckValue<IkReal> x15876=IKPowWithIntegerCheck(r02,-1);
if(!x15876.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15875.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15876.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15875.value)))+IKsqr(((-1.0)*sj0*(x15876.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15875.value)), ((-1.0)*sj0*(x15876.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15877=IKsin(j4);
IkReal x15878=IKcos(j4);
IkReal x15879=(cj5*r10);
IkReal x15880=(sj1*sj2);
IkReal x15881=(cj5*sj3);
IkReal x15882=(r11*sj5);
IkReal x15883=(cj3*cj5);
IkReal x15884=(cj3*sj5);
IkReal x15885=(r21*sj5);
IkReal x15886=(cj2*sj1);
IkReal x15887=((1.0)*sj0);
IkReal x15888=((1.0)*cj0);
IkReal x15889=(sj3*sj5);
IkReal x15890=(cj1*sj2);
IkReal x15891=((1.0)*cj1*cj2);
IkReal x15892=((1.0)*x15877);
IkReal x15893=(r20*x15878);
IkReal x15894=(cj3*x15878);
IkReal x15895=(sj3*x15878);
evalcond[0]=((((-1.0)*r02*x15878))+(((-1.0)*x15887)));
evalcond[1]=((((-1.0)*cj5*r20*x15892))+((x15877*x15885)));
evalcond[2]=(cj0+((x15877*x15882))+(((-1.0)*x15879*x15892)));
evalcond[3]=(((cj3*r02*x15877))+((cj0*x15880))+(((-1.0)*cj1*cj2*x15888)));
evalcond[4]=((((-1.0)*x15888*x15890))+(((-1.0)*x15886*x15888))+(((-1.0)*r02*sj3*x15892)));
evalcond[5]=(((r21*x15878*x15884))+((r20*x15889))+x15886+x15890+(((-1.0)*x15883*x15893))+((r21*x15881)));
evalcond[6]=((((-1.0)*x15885*x15895))+((r20*x15884))+((x15881*x15893))+(((-1.0)*x15891))+x15880+((r21*x15883)));
evalcond[7]=(((r10*x15889))+((sj0*x15880))+((x15882*x15894))+((r11*x15881))+(((-1.0)*cj1*cj2*x15887))+(((-1.0)*x15879*x15894)));
evalcond[8]=(((r10*x15884))+(((-1.0)*x15882*x15895))+((x15879*x15895))+(((-1.0)*x15886*x15887))+((r11*x15883))+(((-1.0)*x15887*x15890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15896=((1.0)*sj0);
IkReal x15897=((1.0)*cj0);
CheckValue<IkReal> x15898=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15898.valid){
continue;
}
CheckValue<IkReal> x15899 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15897))+(((-1.0)*r12*x15896)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x15896))+(((-1.0)*r01*sj5*x15897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15898.value)))+(x15899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15900=IKsin(j4);
IkReal x15901=IKcos(j4);
IkReal x15902=(r11*sj5);
IkReal x15903=(cj5*r10);
IkReal x15904=(sj1*sj2);
IkReal x15905=(cj5*sj3);
IkReal x15906=((1.0)*sj0);
IkReal x15907=(cj3*cj5);
IkReal x15908=(cj3*sj5);
IkReal x15909=(r21*sj5);
IkReal x15910=(cj2*sj1);
IkReal x15911=(sj3*sj5);
IkReal x15912=(r01*sj5);
IkReal x15913=((1.0)*cj0);
IkReal x15914=(cj1*sj2);
IkReal x15915=((1.0)*x15901);
IkReal x15916=((1.0)*x15900);
IkReal x15917=(cj3*x15901);
IkReal x15918=((1.0)*cj1*cj2);
IkReal x15919=(cj3*x15900);
evalcond[0]=(((x15900*x15909))+(((-1.0)*cj5*r20*x15916))+(((-1.0)*r22*x15915)));
evalcond[1]=(((x15900*x15902))+cj0+(((-1.0)*r12*x15915))+(((-1.0)*x15903*x15916)));
evalcond[2]=((((-1.0)*cj5*r00*x15916))+((x15900*x15912))+(((-1.0)*r02*x15915))+(((-1.0)*x15906)));
evalcond[3]=(((r22*x15919))+((r21*x15905))+((r21*x15901*x15908))+(((-1.0)*r20*x15907*x15915))+((r20*x15911))+x15914+x15910);
evalcond[4]=((((-1.0)*sj3*x15909*x15915))+((r21*x15907))+(((-1.0)*r22*sj3*x15916))+((r20*x15908))+(((-1.0)*x15918))+x15904+((r20*x15901*x15905)));
evalcond[5]=((((-1.0)*cj1*cj2*x15913))+((r01*x15905))+((r00*x15911))+((r01*x15901*x15908))+(((-1.0)*r00*x15907*x15915))+((cj0*x15904))+((r02*x15919)));
evalcond[6]=((((-1.0)*cj1*cj2*x15906))+((r12*x15919))+((x15902*x15917))+((r11*x15905))+(((-1.0)*cj3*x15903*x15915))+((sj0*x15904))+((r10*x15911)));
evalcond[7]=((((-1.0)*r01*x15911*x15915))+((r00*x15901*x15905))+(((-1.0)*r02*sj3*x15916))+((r01*x15907))+((r00*x15908))+(((-1.0)*x15913*x15914))+(((-1.0)*x15910*x15913)));
evalcond[8]=((((-1.0)*x15906*x15910))+(((-1.0)*x15906*x15914))+(((-1.0)*sj3*x15902*x15915))+((sj3*x15901*x15903))+((r11*x15907))+(((-1.0)*r12*sj3*x15916))+((r10*x15908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15920=((1.0)*cj5);
CheckValue<IkReal> x15921 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15921.valid){
continue;
}
CheckValue<IkReal> x15922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15920)))),-1);
if(!x15922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15921.value)+(((1.5707963267949)*(x15922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15923=IKsin(j4);
IkReal x15924=IKcos(j4);
IkReal x15925=(r11*sj5);
IkReal x15926=(cj5*r10);
IkReal x15927=(sj1*sj2);
IkReal x15928=(cj5*sj3);
IkReal x15929=((1.0)*sj0);
IkReal x15930=(cj3*cj5);
IkReal x15931=(cj3*sj5);
IkReal x15932=(r21*sj5);
IkReal x15933=(cj2*sj1);
IkReal x15934=(sj3*sj5);
IkReal x15935=(r01*sj5);
IkReal x15936=((1.0)*cj0);
IkReal x15937=(cj1*sj2);
IkReal x15938=((1.0)*x15924);
IkReal x15939=((1.0)*x15923);
IkReal x15940=(cj3*x15924);
IkReal x15941=((1.0)*cj1*cj2);
IkReal x15942=(cj3*x15923);
evalcond[0]=(((x15923*x15932))+(((-1.0)*cj5*r20*x15939))+(((-1.0)*r22*x15938)));
evalcond[1]=((((-1.0)*r12*x15938))+cj0+(((-1.0)*x15926*x15939))+((x15923*x15925)));
evalcond[2]=(((x15923*x15935))+(((-1.0)*cj5*r00*x15939))+(((-1.0)*r02*x15938))+(((-1.0)*x15929)));
evalcond[3]=(((r21*x15928))+(((-1.0)*r20*x15930*x15938))+((r21*x15924*x15931))+((r20*x15934))+((r22*x15942))+x15933+x15937);
evalcond[4]=((((-1.0)*x15941))+(((-1.0)*r22*sj3*x15939))+((r21*x15930))+((r20*x15931))+((r20*x15924*x15928))+(((-1.0)*sj3*x15932*x15938))+x15927);
evalcond[5]=((((-1.0)*r00*x15930*x15938))+((cj0*x15927))+(((-1.0)*cj1*cj2*x15936))+((r00*x15934))+((r02*x15942))+((r01*x15928))+((r01*x15924*x15931)));
evalcond[6]=(((r11*x15928))+(((-1.0)*cj3*x15926*x15938))+(((-1.0)*cj1*cj2*x15929))+((x15925*x15940))+((r12*x15942))+((sj0*x15927))+((r10*x15934)));
evalcond[7]=((((-1.0)*x15936*x15937))+(((-1.0)*r02*sj3*x15939))+((r00*x15931))+((r01*x15930))+(((-1.0)*x15933*x15936))+((r00*x15924*x15928))+(((-1.0)*r01*x15934*x15938)));
evalcond[8]=(((sj3*x15924*x15926))+((r11*x15930))+(((-1.0)*sj3*x15925*x15938))+(((-1.0)*x15929*x15937))+(((-1.0)*x15929*x15933))+(((-1.0)*r12*sj3*x15939))+((r10*x15931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15943=((1.0)*cj5);
CheckValue<IkReal> x15944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15943))+(((-1.0)*r00*sj5)))),-1);
if(!x15944.valid){
continue;
}
CheckValue<IkReal> x15945 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15944.value)))+(x15945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15946=IKsin(j4);
IkReal x15947=IKcos(j4);
IkReal x15948=(r11*sj5);
IkReal x15949=(cj5*r10);
IkReal x15950=(sj1*sj2);
IkReal x15951=(cj5*sj3);
IkReal x15952=((1.0)*sj0);
IkReal x15953=(cj3*cj5);
IkReal x15954=(cj3*sj5);
IkReal x15955=(r21*sj5);
IkReal x15956=(cj2*sj1);
IkReal x15957=(sj3*sj5);
IkReal x15958=(r01*sj5);
IkReal x15959=((1.0)*cj0);
IkReal x15960=(cj1*sj2);
IkReal x15961=((1.0)*x15947);
IkReal x15962=((1.0)*x15946);
IkReal x15963=(cj3*x15947);
IkReal x15964=((1.0)*cj1*cj2);
IkReal x15965=(cj3*x15946);
evalcond[0]=((((-1.0)*cj5*r20*x15962))+((x15946*x15955))+(((-1.0)*r22*x15961)));
evalcond[1]=(cj0+(((-1.0)*x15949*x15962))+(((-1.0)*r12*x15961))+((x15946*x15948)));
evalcond[2]=((((-1.0)*r02*x15961))+(((-1.0)*x15952))+((x15946*x15958))+(((-1.0)*cj5*r00*x15962)));
evalcond[3]=(((r21*x15947*x15954))+(((-1.0)*r20*x15953*x15961))+((r20*x15957))+((r21*x15951))+((r22*x15965))+x15956+x15960);
evalcond[4]=((((-1.0)*r22*sj3*x15962))+(((-1.0)*x15964))+((r20*x15954))+((r21*x15953))+((r20*x15947*x15951))+(((-1.0)*sj3*x15955*x15961))+x15950);
evalcond[5]=(((r00*x15957))+((r01*x15951))+((r01*x15947*x15954))+((r02*x15965))+((cj0*x15950))+(((-1.0)*r00*x15953*x15961))+(((-1.0)*cj1*cj2*x15959)));
evalcond[6]=(((sj0*x15950))+((r10*x15957))+((r11*x15951))+((r12*x15965))+(((-1.0)*cj3*x15949*x15961))+((x15948*x15963))+(((-1.0)*cj1*cj2*x15952)));
evalcond[7]=((((-1.0)*x15959*x15960))+((r00*x15954))+((r01*x15953))+((r00*x15947*x15951))+(((-1.0)*r01*x15957*x15961))+(((-1.0)*x15956*x15959))+(((-1.0)*r02*sj3*x15962)));
evalcond[8]=(((sj3*x15947*x15949))+(((-1.0)*r12*sj3*x15962))+(((-1.0)*x15952*x15960))+((r10*x15954))+((r11*x15953))+(((-1.0)*x15952*x15956))+(((-1.0)*sj3*x15948*x15961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15966=cj5*cj5;
IkReal x15967=r21*r21;
IkReal x15968=r20*r20;
IkReal x15969=(r20*r21);
IkReal x15970=((1.0)*cj3);
IkReal x15971=((1.0)*cj5);
IkReal x15972=(cj1*sj2);
IkReal x15973=(cj5*sj5);
IkReal x15974=(sj3*sj5);
IkReal x15975=(cj2*sj1);
IkReal x15976=(r21*sj5);
CheckValue<IkReal> x15977 = IKatan2WithCheck(IkReal((((r20*r22*x15974))+((cj5*r21*r22*sj3))+((r22*x15975))+((r22*x15972)))),IkReal(((((-1.0)*r20*x15971*x15972))+(((-1.0)*r20*x15971*x15975))+((sj3*x15967*x15973))+((x15975*x15976))+(((-2.0)*sj3*x15966*x15969))+((x15972*x15976))+((sj3*x15969))+(((-1.0)*x15968*x15971*x15974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15977.valid){
continue;
}
CheckValue<IkReal> x15978=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15967*x15970))+(((-1.0)*x15970*(r22*r22)))+(((-1.0)*x15966*x15968*x15970))+((cj3*x15966*x15967))+(((2.0)*cj3*x15969*x15973)))),-1);
if(!x15978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15977.value)+(((1.5707963267949)*(x15978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15979=IKsin(j4);
IkReal x15980=IKcos(j4);
IkReal x15981=(cj3*r21);
IkReal x15982=(r21*sj5);
IkReal x15983=(r20*sj5);
IkReal x15984=(cj5*r20);
IkReal x15985=((1.0)*x15980);
IkReal x15986=((1.0)*x15979);
evalcond[0]=((((-1.0)*r22*x15985))+(((-1.0)*x15984*x15986))+((x15979*x15982)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15984*x15985))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15980*x15981))+((cj3*r22*x15979))+((sj3*x15983)));
evalcond[2]=(((cj3*x15983))+(((-1.0)*r22*sj3*x15986))+((sj3*x15980*x15984))+(((-1.0)*sj3*x15982*x15985))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*x15981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15987=(cj5*sj4);
IkReal x15988=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15987))+((r01*x15988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15988))+((r10*x15987))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15987))+((r01*x15988))))+IKsqr(((((-1.0)*r11*x15988))+((r10*x15987))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15987))+((r01*x15988))), ((((-1.0)*r11*x15988))+((r10*x15987))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15989=IKcos(j0);
IkReal x15990=IKsin(j0);
IkReal x15991=(r02*sj4);
IkReal x15992=((1.0)*sj3);
IkReal x15993=(r12*sj4);
IkReal x15994=(cj3*cj4);
IkReal x15995=((1.0)*cj5);
IkReal x15996=(r11*sj5);
IkReal x15997=((1.0)*cj1);
IkReal x15998=((0.39225)*sj1);
IkReal x15999=(cj5*r01);
IkReal x16000=(r01*sj5);
IkReal x16001=(r00*sj5);
IkReal x16002=((1.0)*sj1);
IkReal x16003=((0.39225)*cj2);
IkReal x16004=(cj5*r11);
IkReal x16005=(r10*sj5);
IkReal x16006=((1.0)*cj4);
IkReal x16007=(sj2*x15989);
IkReal x16008=(sj2*x15990);
IkReal x16009=(cj4*cj5*sj3);
IkReal x16010=(cj1*x15989);
IkReal x16011=(cj2*x15989);
IkReal x16012=(cj1*x15990);
IkReal x16013=(cj2*x15990);
evalcond[0]=((((-1.0)*r10*sj4*x15995))+(((-1.0)*r12*x16006))+((sj4*x15996))+x15989);
evalcond[1]=((((-1.0)*r02*x16006))+(((-1.0)*r00*sj4*x15995))+((sj4*x16000))+(((-1.0)*x15990)));
evalcond[2]=((((-0.10915)*x15990))+(((0.425)*x16010))+((x16003*x16010))+(((-1.0)*px))+(((-1.0)*x15998*x16007))+(((-0.09465)*x15999))+(((-0.09465)*x16001)));
evalcond[3]=((((0.10915)*x15989))+(((0.425)*x16012))+((x16003*x16012))+(((-1.0)*py))+(((-1.0)*x15998*x16008))+(((-0.09465)*x16004))+(((-0.09465)*x16005)));
evalcond[4]=(((x15994*x16000))+(((-1.0)*r00*x15994*x15995))+((sj3*x16001))+((sj1*x16007))+((sj3*x15999))+(((-1.0)*x15997*x16011))+((cj3*x15991)));
evalcond[5]=(((sj3*x16005))+((sj3*x16004))+(((-1.0)*r10*x15994*x15995))+((sj1*x16008))+(((-1.0)*x15997*x16013))+((x15994*x15996))+((cj3*x15993)));
evalcond[6]=((((-1.0)*cj4*x15992*x16000))+(((-1.0)*x15991*x15992))+(((-1.0)*x16002*x16011))+((cj3*x16001))+((r00*x16009))+(((-1.0)*x15997*x16007))+((cj3*x15999)));
evalcond[7]=(((r10*x16009))+(((-1.0)*x16002*x16013))+((cj3*x16004))+((cj3*x16005))+(((-1.0)*cj4*x15992*x15996))+(((-1.0)*x15992*x15993))+(((-1.0)*x15997*x16008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16014=cj5*cj5;
IkReal x16015=r21*r21;
IkReal x16016=r20*r20;
IkReal x16017=(r20*r21);
IkReal x16018=(sj1*sj2);
IkReal x16019=(r21*sj5);
IkReal x16020=(cj1*cj2);
IkReal x16021=(cj5*r20);
IkReal x16022=(cj5*sj5);
IkReal x16023=(cj3*r22);
IkReal x16024=(sj3*x16015);
CheckValue<IkReal> x16025=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x16014*x16016))+(((-2.0)*sj3*x16017*x16022))+x16024+(((-1.0)*x16014*x16024)))),-1);
if(!x16025.valid){
continue;
}
CheckValue<IkReal> x16026 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16020))+((r20*sj5*x16023))+((cj5*r21*x16023))+((r22*x16018)))),IkReal(((((-1.0)*x16018*x16021))+(((-1.0)*cj3*x16016*x16022))+(((-1.0)*x16019*x16020))+((cj3*x16017))+(((-2.0)*cj3*x16014*x16017))+((x16018*x16019))+((cj3*x16015*x16022))+((x16020*x16021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16025.value)))+(x16026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16027=IKsin(j4);
IkReal x16028=IKcos(j4);
IkReal x16029=(cj3*r21);
IkReal x16030=(r21*sj5);
IkReal x16031=(r20*sj5);
IkReal x16032=(cj5*r20);
IkReal x16033=((1.0)*x16028);
IkReal x16034=((1.0)*x16027);
evalcond[0]=((((-1.0)*x16032*x16034))+(((-1.0)*r22*x16033))+((x16027*x16030)));
evalcond[1]=(((cj2*sj1))+((sj3*x16031))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x16027))+(((-1.0)*cj3*x16032*x16033))+((sj5*x16028*x16029)));
evalcond[2]=(((cj3*x16031))+(((-1.0)*sj3*x16030*x16033))+((cj5*x16029))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x16028*x16032))+(((-1.0)*r22*sj3*x16034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16035=(cj5*sj4);
IkReal x16036=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x16036))+(((-1.0)*r00*x16035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x16035))+(((-1.0)*r11*x16036))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x16036))+(((-1.0)*r00*x16035))))+IKsqr((((r10*x16035))+(((-1.0)*r11*x16036))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x16036))+(((-1.0)*r00*x16035))), (((r10*x16035))+(((-1.0)*r11*x16036))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16037=IKcos(j0);
IkReal x16038=IKsin(j0);
IkReal x16039=(r02*sj4);
IkReal x16040=((1.0)*sj3);
IkReal x16041=(r12*sj4);
IkReal x16042=(cj3*cj4);
IkReal x16043=((1.0)*cj5);
IkReal x16044=(r11*sj5);
IkReal x16045=((1.0)*cj1);
IkReal x16046=((0.39225)*sj1);
IkReal x16047=(cj5*r01);
IkReal x16048=(r01*sj5);
IkReal x16049=(r00*sj5);
IkReal x16050=((1.0)*sj1);
IkReal x16051=((0.39225)*cj2);
IkReal x16052=(cj5*r11);
IkReal x16053=(r10*sj5);
IkReal x16054=((1.0)*cj4);
IkReal x16055=(sj2*x16037);
IkReal x16056=(sj2*x16038);
IkReal x16057=(cj4*cj5*sj3);
IkReal x16058=(cj1*x16037);
IkReal x16059=(cj2*x16037);
IkReal x16060=(cj1*x16038);
IkReal x16061=(cj2*x16038);
evalcond[0]=(((sj4*x16044))+x16037+(((-1.0)*r10*sj4*x16043))+(((-1.0)*r12*x16054)));
evalcond[1]=(((sj4*x16048))+(((-1.0)*r00*sj4*x16043))+(((-1.0)*r02*x16054))+(((-1.0)*x16038)));
evalcond[2]=((((-0.09465)*x16049))+(((-0.09465)*x16047))+(((-1.0)*px))+(((-0.10915)*x16038))+((x16051*x16058))+(((0.425)*x16058))+(((-1.0)*x16046*x16055)));
evalcond[3]=((((-0.09465)*x16053))+(((-0.09465)*x16052))+(((0.10915)*x16037))+(((-1.0)*py))+((x16051*x16060))+(((0.425)*x16060))+(((-1.0)*x16046*x16056)));
evalcond[4]=(((sj1*x16055))+((cj3*x16039))+(((-1.0)*r00*x16042*x16043))+((x16042*x16048))+((sj3*x16049))+((sj3*x16047))+(((-1.0)*x16045*x16059)));
evalcond[5]=((((-1.0)*r10*x16042*x16043))+((cj3*x16041))+((sj1*x16056))+(((-1.0)*x16045*x16061))+((x16042*x16044))+((sj3*x16052))+((sj3*x16053)));
evalcond[6]=(((cj3*x16049))+((cj3*x16047))+(((-1.0)*x16050*x16059))+(((-1.0)*cj4*x16040*x16048))+((r00*x16057))+(((-1.0)*x16045*x16055))+(((-1.0)*x16039*x16040)));
evalcond[7]=(((cj3*x16052))+((cj3*x16053))+((r10*x16057))+(((-1.0)*x16050*x16061))+(((-1.0)*x16040*x16041))+(((-1.0)*cj4*x16040*x16044))+(((-1.0)*x16045*x16056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (0a778119bd1f0b9cbb5c12b6163c6969)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
